<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>artisan | Matthew Daly&apos;s Blog</title>
    <updated>2019-05-08T20:56:51Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/artisan/"/>
    <subtitle>artisan | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2019</rights>
    <entry>
        <title type="html"><![CDATA[Creating an Artisan task to set up a user account]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/08/creating-an-artisan-task-to-set-up-a-user-account/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/08/creating-an-artisan-task-to-set-up-a-user-account/">
        </link>
        <updated>2018-01-08T12:52:39Z</updated>
        <summary type="html"><![CDATA[<p>When working with any Laravel application that implements authentication, you’ll need to set up a user account to be able to work with it. One way of doing that is to add a user in a seeder, but that’s only really suitable if every user is going to use the same details.</p>
<p>Instead, you may want to create an Artisan command to set up the user account. Here’s an example of a command that does that:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Hash;

class CreateUser extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = &#39;create:user&#39;;

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = &#39;Creates a single user&#39;;

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        // Get user model from config
        $model = config(&#39;auth.providers.users.model&#39;);

        // Let user know what this will do
        $this-&gt;info(&#39;I\&#39;ll ask you for the details I need to set up the user&#39;);

        // Get username
        $name = $this-&gt;ask(&#39;Please provide the username&#39;);

        // Get email
        $email = $this-&gt;ask(&#39;Please provide the email address&#39;);

        // Get password
        $password = $this-&gt;secret(&#39;Please provide the password&#39;);

        // Create model
        $user = new $model;
        $user-&gt;name = $name;
        $user-&gt;email = $email;
        $user-&gt;password = Hash::make($password);
        $user-&gt;save();
        $this-&gt;info(&#39;User saved&#39;);
    }
}
</code></pre>
<p>We fetch the user model from the config, before asking the user for the data we need. Then we insert it into the database and confirm it to the user.</p>
<p>Then we just need to register the command in <code>App\Console\Kernel.php</code>:</p>
<pre><code class="lang-php">    protected $commands = [
        \App\Console\Commands\CreateUser::class,
    ];
</code></pre>
<p>And we can run our command with <code>php artisan create:user</code>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Laravel package boilerplate]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/02/a-laravel-package-boilerplate/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/02/a-laravel-package-boilerplate/">
        </link>
        <updated>2018-01-02T12:12:15Z</updated>
        <summary type="html"><![CDATA[<p>The second package I’ve been working on recently is <a href="https://github.com/matthewbdaly/laravel-package-boilerplate">Laravel Package Boilerplate</a>. It’s a basic starter boilerplate for building your own Laravel packages.</p>
<p>It’s not meant to be installed as a project dependency. Instead, run the following command to create a new project boilerplate with it:</p>
<pre><code class="lang-bash">composer create-project --prefer-dist matthewbdaly/laravel-package-boilerplate &lt;YOUR_NEW_PACKAGE_DIRECTORY&gt;
</code></pre>
<p>This will create a new folder that includes a <code>src</code> folder containing a service provider, and a <code>tests</code> folder containing a preconfigured base test case, as well as a simple test case for tests that don’t need the full application instantiated, in order to help keep your test suite as fast as possible.</p>
<p>In addition, it includes configuration files for:</p>
<ul>
<li>PHPUnit</li>
<li>PHP CodeSniffer</li>
<li>Travis CI</li>
</ul>
<p>That way you can start your project off the right way with very little effort.</p>
<p>I’ve also added my Artisan Standalone project as a dependency - that way you can access any Artisan commands you need to generate files you need as follows:</p>
<pre><code class="lang-bash">$ vendor/bin/artisan
</code></pre>
<p>Hopefully this package should make it a lot easier to create new Laravel packages in future.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Artisan from standalone Laravel packages]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/02/using-artisan-from-standalone-laravel-packages/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/02/using-artisan-from-standalone-laravel-packages/">
        </link>
        <updated>2018-01-02T12:01:10Z</updated>
        <summary type="html"><![CDATA[<p>Recently I’ve been building and publishing a significant number of Laravel packages, and I thought I’d share details of some of them over the next few days.</p>
<p><a href="https://github/com/matthewbdaly/artisan-standalone">Artisan Standalone</a> is a package that, when installed in a standalone Laravel package (eg, not in an actual Laravel install, but in a package that you’re building that is intended for use with Laravel), allows you to use Artisan. It’s intended largely to make it quicker and easier to build functionality as separate packages by giving you access to the same generator commands as you have when working with a Laravel application. It came about largely from a need to scratch my own itch, as when building packages I was having to either run Artisan commands in a Laravel app and move them over, or copy them from existing files, which was obviously a pain in the proverbial.</p>
<p>You can install it with the following command:</p>
<pre><code class="lang-bash">$ composer require --dev matthewbdaly/artisan-standalone
</code></pre>
<p>Once it’s installed, you can access Artisan as follows:</p>
<pre><code class="lang-bash">$ vendor/bin/artisan
</code></pre>
<p>Note that it doesn’t explicitly include Laravel as a dependency - you’ll need to add that in the parent package to pull in the libraries it needs (which you should be doing anyway). It’s possible that there are some commands that won’t work in this context, but they’re almost certainly ones you won’t need here, such as the <code>migrate</code> command. As far as I can tell the generator commands, which are the only ones we’re really interested in here, all work OK.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating Artisan tasks that generate files]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/01/creating-artisan-tasks-that-generate-files/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/01/creating-artisan-tasks-that-generate-files/">
        </link>
        <updated>2018-01-01T16:06:21Z</updated>
        <summary type="html"><![CDATA[<p>While the documentation for creating Artisan tasks is generally pretty good, it doesn’t really touch on creating tasks that generate new files. The only way to figure it out was to go digging through the source code. In this case, I was building an Artisan command to create Fractal transformers as part of a package I’m working on.</p>
<p>There’s a specialised class for generating files at <code>Illuminate\Console\GeneratorCommand</code>, which your command class should extend instead of <code>Illuminate\Console\Command</code>. In addition to the usual properties such as the signature and description, you also need to specify <code>$type</code> to give the type of class being generated. Also, note that the constructor is different, so if you use <code>php artisan make:console</code> to create the boilerplate for this command, you’ll need to delete the constructor.</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\MyPackage\Console\Commands;

use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputArgument;

class TransformerMakeCommand extends GeneratorCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = &#39;make:transformer {name : The required name of the transformer class}&#39;;

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = &#39;Create a Fractal transformer&#39;;

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = &#39;Fractal transformer&#39;;

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return __DIR__.&#39;/stubs/transformer.stub&#39;;
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            [&#39;name&#39;, InputArgument::REQUIRED, &#39;The name of the command.&#39;],
        ];
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.&#39;\Transformers&#39;;
    }
}
</code></pre>
<p>Note the <code>getDefaultNamespace()</code> method. If your class will live directly under the <code>app</code> folder this is not necessary. Otherwise, it needs to return the root namespace, with the folder structure you want after it. Here my class will live under <code>app\Transformers</code>, so I’ve set it to reflect that.</p>
<p>Also, note the <code>getStub()</code> method. This tells Artisan that it should use the specified stub file as the basis for our class. Below you’ll find the stub file I used for my transformer:</p>
<pre><code class="lang-php">&lt;?php

namespace DummyNamespace;

use Matthewbdaly\MyPackage\Transformers\BaseTransformer;
use Illuminate\Database\Eloquent\Model;

class DummyClass extends BaseTransformer
{
    public function transform(Model $model)
    {
        return [
            &#39;id&#39;            =&gt; (int) $model-&gt;id,
        ];
    }
}
</code></pre>
<p>Note that the <code>DummyNamespace</code> and <code>DummyClass</code> fields will be overwritten with the correct values.</p>
<p>Once this Artisan command is registered in the usual way, you can then run it as follows:</p>
<pre><code class="lang-bash">$ php artisan make:transformer Example
</code></pre>
<p>And it will generate a boilerplate class something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Transformers;

use Matthewbdaly\MyPackage\Transformers\BaseTransformer;
use Illuminate\Database\Eloquent\Model;

class Example extends BaseTransformer
{
    public function transform(Model $model)
    {
        return [
            &#39;id&#39;            =&gt; (int) $model-&gt;id,
        ];
    }
}
</code></pre>
<p>You can then replace the model with your own one as necessary, and add any further content to this class.</p>
]]></summary>
    </entry>
</feed>
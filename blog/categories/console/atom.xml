<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>console | Matthew Daly&apos;s Blog</title>
    <updated>2018-09-09T12:40:04Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/console/"/>
    <subtitle>console | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Console applications with the Symfony Console component]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/04/29/console-applications-with-the-symfony-console-component/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/04/29/console-applications-with-the-symfony-console-component/">
        </link>
        <updated>2018-04-29T19:59:27Z</updated>
        <summary type="html"><![CDATA[<p>Recently I’ve had the occasion to add a series of console commands to a legacy application. This can be made straightforward by using the Symfony console component. In this post I’ll demonstrate how to write a simple console command for clearing a cache folder.</p>
<p>The first step is to install the Console component:</p>
<pre><code class="hljs lang-bash singleline">$ composer require symfony/console</code></pre>
<p>Then we write the main script for the application. I usually save mine as <code>console</code> - note that we don’t want to have to type out a file extension, so instead we use the shebang:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">#!/user/bin/env php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/vendor/autoload.php'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Application</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>define(<span class="hljs-string">'CONSOLE_ROOT'</span>, <span class="hljs-keyword">__DIR__</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>$app = <span class="hljs-keyword">new</span> Application();</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>$app-&gt;run();</td></table></code></pre>
<p>In this case, I’ve defined <code>CONSOLE_ROOT</code> as the directory in which the console command is run - that way, the commands can use it to refer to the application root.</p>
<p>We can then run our console application as follows:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php console</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Console Tool</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>Usage:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-built_in">command</span> [options] [arguments]</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Options:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  -h, --<span class="hljs-built_in">help</span>            Display this <span class="hljs-built_in">help</span> message</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  -q, --quiet           Do not output any message</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  -V, --version         Display this application version</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      --ansi            Force ANSI output</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      --no-ansi         Disable ANSI output</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  -n, --no-interaction  Do not ask any interactive question</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 <span class="hljs-keyword">for</span> normal output, 2 <span class="hljs-keyword">for</span> more verbose output and 3 <span class="hljs-keyword">for</span> debug</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>Available commands:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-built_in">help</span>  Displays <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> a <span class="hljs-built_in">command</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  list  Lists commands</td></table></code></pre>
<p>This displays the available commands, but you’ll note that there are none except for <code>help</code> and <code>list</code>. We’ll remedy that. First, we’ll register a command:</p>
<pre><code class="hljs lang-php singleline">$app-&gt;add(<span class="hljs-keyword">new</span> App\Console\ClearCacheCommand);</code></pre>
<p>This has to be done in <code>console</code>, after we create <code>$app</code>, but before we run it.</p>
<p>Don’t forget to update the autoload section of your <code>composer.json</code> to register the namespace:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    "autoload": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        "psr-4": {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            "App\\Console\\": "src/Console/"</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    },</td></table></code></pre>
<p>Then create the class for that command. This class must extend <code>Symfony\Component\Console\Command\Command</code>, and must have two methods:</p>
<ul>
<li><code>configure()</code></li>
<li><code>execute()</code></li>
</ul>
<p>In addition, the <code>execute()</code> method must accept two arguments, an instance of <code>Symfony\Component\Console\Input\InputInterface</code>, and an instance of <code>Symfony\Component\Console\Output\OutputInterface</code>. There are used to retrieve input and display output.</p>
<p>Let’s write our command:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Console</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Command</span>\<span class="hljs-title">Command</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Input</span>\<span class="hljs-title">InputInterface</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Output</span>\<span class="hljs-title">OutputInterface</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClearCacheCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setName(<span class="hljs-string">'cache:clear'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>             -&gt;setDescription(<span class="hljs-string">'Clears the cache'</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>             -&gt;setHelp(<span class="hljs-string">'This command clears the application cache'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(InputInterface $input, OutputInterface $output)</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        $dir = CONSOLE_ROOT.DIRECTORY_SEPARATOR.<span class="hljs-string">'cache'</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">$this</span>-&gt;deleteTree($dir);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $output-&gt;writeln(<span class="hljs-string">'Cache cleared'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    } </td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteTree</span><span class="hljs-params">($dir)</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        $files = array_diff(scandir($dir), <span class="hljs-keyword">array</span>(<span class="hljs-string">'.'</span>,<span class="hljs-string">'..'</span>)); </td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">foreach</span> ($files <span class="hljs-keyword">as</span> $file) { </td><tr><td class="linenos" data-pseudo-content="29"></td><td>            (is_dir(<span class="hljs-string">"$dir/$file"</span>)) ? <span class="hljs-keyword">$this</span>-&gt;deleteTree(<span class="hljs-string">"$dir/$file"</span>) : unlink(<span class="hljs-string">"$dir/$file"</span>); </td><tr><td class="linenos" data-pseudo-content="30"></td><td>        } </td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">return</span> rmdir($dir); </td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>}</td></table></code></pre>
<p>As you can see, in the <code>configure()</code> method, we set the name, description and help text for the command.</p>
<p>The <code>execute()</code> method is where the actual work is done. In this case, we have some code that needs to be called recursively, so we have to pull it out into a private method. Once that’s done we use <code>$output-&gt;writeln()</code> to write a line to the output.</p>
<p>Now, if we run our console task, we should see our new command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php console</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Console Tool</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>Usage:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-built_in">command</span> [options] [arguments]</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Options:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  -h, --<span class="hljs-built_in">help</span>            Display this <span class="hljs-built_in">help</span> message</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  -q, --quiet           Do not output any message</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  -V, --version         Display this application version</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      --ansi            Force ANSI output</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      --no-ansi         Disable ANSI output</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  -n, --no-interaction  Do not ask any interactive question</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 <span class="hljs-keyword">for</span> normal output, 2 <span class="hljs-keyword">for</span> more verbose output and 3 <span class="hljs-keyword">for</span> debug</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>Available commands:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-built_in">help</span>         Displays <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> a <span class="hljs-built_in">command</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  list         Lists commands</td><tr><td class="linenos" data-pseudo-content="19"></td><td> cache</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  cache:clear  Clears the cache</td></table></code></pre>
<p>And we can see it in action too:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php console cache:clear</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Cache cleared</td></table></code></pre>
<p>For commands that need to accept additional arguments, you can define them in the <code>configure()</code> method:</p>
<pre><code class="hljs lang-php singleline"><span class="hljs-keyword">$this</span>-&gt;addArgument(<span class="hljs-string">'file'</span>, InputArgument::REQUIRED, <span class="hljs-string">'Which file do you want to delete?'</span>)</code></pre>
<p>Then, you can access it in the <code>execute()</code> method using <code>InputInterface</code>:</p>
<pre><code class="hljs lang-php singleline">$file = $input-&gt;getArgument(<span class="hljs-string">'file'</span>);</code></pre>
<p>This tutorial is just skimming the surface of what you can do with the Symfony Console components - indeed, many other console interfaces, such as Laravel’s Artisan, are built on top of it. If you have a legacy application built in a framework that lacks any sort of console interface, such as CodeIgniter, then you can quite quickly produce basic console commands for working with that application. The <a href="https://symfony.com/doc/current/console.html">documentation is very good</a>, and with a little work you can soon have something up and running.</p>
]]></summary>
    </entry>
</feed>
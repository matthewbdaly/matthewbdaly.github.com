<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>console | Matthew Daly&apos;s Blog</title>
    <updated>2019-04-15T19:59:36Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/console/"/>
    <subtitle>console | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2019</rights>
    <entry>
        <title type="html"><![CDATA[Console applications with the Symfony Console component]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/04/29/console-applications-with-the-symfony-console-component/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/04/29/console-applications-with-the-symfony-console-component/">
        </link>
        <updated>2018-04-29T19:59:27Z</updated>
        <summary type="html"><![CDATA[<p>Recently I’ve had the occasion to add a series of console commands to a legacy application. This can be made straightforward by using the Symfony console component. In this post I’ll demonstrate how to write a simple console command for clearing a cache folder.</p>
<p>The first step is to install the Console component:</p>
<pre><code class="lang-bash">$ composer require symfony/console
</code></pre>
<p>Then we write the main script for the application. I usually save mine as <code>console</code> - note that we don’t want to have to type out a file extension, so instead we use the shebang:</p>
<pre><code class="lang-php">#!/user/bin/env php
&lt;?php

require __DIR__.&#39;/vendor/autoload.php&#39;;

use Symfony\Component\Console\Application;

define(&#39;CONSOLE_ROOT&#39;, __DIR__);
$app = new Application();

$app-&gt;run();
</code></pre>
<p>In this case, I’ve defined <code>CONSOLE_ROOT</code> as the directory in which the console command is run - that way, the commands can use it to refer to the application root.</p>
<p>We can then run our console application as follows:</p>
<pre><code class="lang-bash">$ php console
Console Tool

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display this help message
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi            Force ANSI output
      --no-ansi         Disable ANSI output
  -n, --no-interaction  Do not ask any interactive question
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  help  Displays help for a command
  list  Lists commands
</code></pre>
<p>This displays the available commands, but you’ll note that there are none except for <code>help</code> and <code>list</code>. We’ll remedy that. First, we’ll register a command:</p>
<pre><code class="lang-php">$app-&gt;add(new App\Console\ClearCacheCommand);
</code></pre>
<p>This has to be done in <code>console</code>, after we create <code>$app</code>, but before we run it.</p>
<p>Don’t forget to update the autoload section of your <code>composer.json</code> to register the namespace:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;App\\Console\\&quot;: &quot;src/Console/&quot;
        }
    },
</code></pre>
<p>Then create the class for that command. This class must extend <code>Symfony\Component\Console\Command\Command</code>, and must have two methods:</p>
<ul>
<li><code>configure()</code></li>
<li><code>execute()</code></li>
</ul>
<p>In addition, the <code>execute()</code> method must accept two arguments, an instance of <code>Symfony\Component\Console\Input\InputInterface</code>, and an instance of <code>Symfony\Component\Console\Output\OutputInterface</code>. There are used to retrieve input and display output.</p>
<p>Let’s write our command:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Console;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class ClearCacheCommand extends Command
{
    protected function configure()
    {
        $this-&gt;setName(&#39;cache:clear&#39;)
             -&gt;setDescription(&#39;Clears the cache&#39;)
             -&gt;setHelp(&#39;This command clears the application cache&#39;);
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $dir = CONSOLE_ROOT.DIRECTORY_SEPARATOR.&#39;cache&#39;;
        $this-&gt;deleteTree($dir);
        $output-&gt;writeln(&#39;Cache cleared&#39;);
    } 

    private function deleteTree($dir)
    {
        $files = array_diff(scandir($dir), array(&#39;.&#39;,&#39;..&#39;)); 
        foreach ($files as $file) { 
            (is_dir(&quot;$dir/$file&quot;)) ? $this-&gt;deleteTree(&quot;$dir/$file&quot;) : unlink(&quot;$dir/$file&quot;); 
        } 
        return rmdir($dir); 
    }
}
</code></pre>
<p>As you can see, in the <code>configure()</code> method, we set the name, description and help text for the command.</p>
<p>The <code>execute()</code> method is where the actual work is done. In this case, we have some code that needs to be called recursively, so we have to pull it out into a private method. Once that’s done we use <code>$output-&gt;writeln()</code> to write a line to the output.</p>
<p>Now, if we run our console task, we should see our new command:</p>
<pre><code class="lang-bash">$ php console
Console Tool

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display this help message
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi            Force ANSI output
      --no-ansi         Disable ANSI output
  -n, --no-interaction  Do not ask any interactive question
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  help         Displays help for a command
  list         Lists commands
 cache
  cache:clear  Clears the cache
</code></pre>
<p>And we can see it in action too:</p>
<pre><code class="lang-bash">$ php console cache:clear
Cache cleared
</code></pre>
<p>For commands that need to accept additional arguments, you can define them in the <code>configure()</code> method:</p>
<pre><code class="lang-php">$this-&gt;addArgument(&#39;file&#39;, InputArgument::REQUIRED, &#39;Which file do you want to delete?&#39;)
</code></pre>
<p>Then, you can access it in the <code>execute()</code> method using <code>InputInterface</code>:</p>
<pre><code class="lang-php">$file = $input-&gt;getArgument(&#39;file&#39;);
</code></pre>
<p>This tutorial is just skimming the surface of what you can do with the Symfony Console components - indeed, many other console interfaces, such as Laravel’s Artisan, are built on top of it. If you have a legacy application built in a framework that lacks any sort of console interface, such as CodeIgniter, then you can quite quickly produce basic console commands for working with that application. The <a href="https://symfony.com/doc/current/console.html">documentation is very good</a>, and with a little work you can soon have something up and running.</p>
]]></summary>
    </entry>
</feed>
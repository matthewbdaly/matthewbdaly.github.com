<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>django | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/django/</link>
        <description>django | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 29 Apr 2018 20:00:35 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2018</copyright>
        <item>
            <title><![CDATA[Building a location aware web app with GeoDjango]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/</guid>
            <pubDate>Sat, 26 Mar 2016 21:30:29 GMT</pubDate>
            <description><![CDATA[<p>PostgreSQL has excellent support for geographical data thanks to the PostGIS extension, and Django allows you to take full advantage of it thanks to GeoDjango. In this tutorial, I’ll show you how to use GeoDjango to build a web app that allows users to search for gigs and events near them.</p>
<h2 id="requirements">Requirements</h2>
<p>I’ve made the jump to Python 3, and if you haven’t done so yet, I highly recommend it - it’s not hard, and there’s very few modules left that haven’t been ported across. As such, this tutorial assumes you’re using Python 3. You’ll also need to have Git, PostgreSQL and PostGIS installed - I’ll leave the details of doing so up to you as it varies by platform, but you can generally do so easily with a package manager on most Linux distros. On Mac OS X I recommend using Homebrew. If you’re on Windows I think your best bet is probably to use a Vagrant VM.</p>
<p>We’ll be using Django 1.9 - if by the time you read this a newer version of Django is out, it’s quite possible that some things may have changed and you’ll need to work around any problems caused. Generally search engines are the best place to look for this, and I’ll endeavour to keep the resulting Github repository as up to date as I can, so try those if you get stuck.</p>
<h2 id="getting-started">Getting started</h2>
<p>First of all, let’s create our database. Make sure you’re running as a user that has the required privileges to create users and databases for PostgreSQL and run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ createdb gigfinder</code></pre>
<p>This creates the database. Next, we create the user:</p>
<pre><code class="hljs lang-bash singleline">$ createuser <span class="hljs-_">-s</span> giguser -P</code></pre>
<p>You’ll be prompted to enter a password for the new user. Next, we want to use the <code>psql</code> command-line client to interact with our new database:</p>
<pre><code class="hljs lang-bash singleline">$ psql gigfinder</code></pre>
<p>This connects to the database. Run these commands to set up access to the database and install the PostGIS extension:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE gigfinder TO giguser;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># CREATE EXTENSION postgis;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>With our database set up, it’s time to start work on our project. Let’s create our virtualenv in a new folder:</p>
<pre><code class="hljs lang-bash singleline">$ pyvenv venv</code></pre>
<p>Then activate it:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<p>Then we install Django, along with a few other production dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ pip install django-toolbelt</code></pre>
<p>And record our dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>Next, we create our application skeleton:</p>
<pre><code class="hljs lang-bash singleline">$ django-admin.py startproject gigfinder .</code></pre>
<p>We’ll also create a <code>.gitignore</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>.DS_Store</td><tr><td class="linenos" data-pseudo-content="3"></td><td>*.swp</td><tr><td class="linenos" data-pseudo-content="4"></td><td>node_modules/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>*.pyc</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git init</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git add .gitignore requirements.txt manage.py gigfinder</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git commit -m <span class="hljs-string">'Initial commit'</span></td></table></code></pre>
<p>Next, let’s create our first app, which we will call <code>gigs</code>:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py startapp gigs</code></pre>
<p>We need to add our new app to the <code>INSTALLED_APPS</code> setting. While we’re there we’ll also add GIS support and set up the database connection. First, add the required apps to <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>]</td></table></code></pre>
<p>Next, configure the database:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>         <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.contrib.gis.db.backends.postgis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>         <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'gigfinder'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>         <span class="hljs-string">'USER'</span>: <span class="hljs-string">'giguser'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>         <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Let’s run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: sessions, contenttypes, admin, auth</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  Applying admin.0002_logentry_remove_auto_add... OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Applying contenttypes.0002_remove_content_type_name... OK</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0007_alter_validators_add_error_messages... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying sessions.0001_initial... OK</td></table></code></pre>
<p>And create our superuser account:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py createsuperuser</code></pre>
<p>Now, we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Created gigs app'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master e72a846] Created gigs app</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 8 files changed, 24 insertions(+), 3 deletions(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/__init__.py</td><tr><td class="linenos" data-pseudo-content="6"></td><td> create mode 100644 gigs/admin.py</td><tr><td class="linenos" data-pseudo-content="7"></td><td> create mode 100644 gigs/apps.py</td><tr><td class="linenos" data-pseudo-content="8"></td><td> create mode 100644 gigs/migrations/__init__.py</td><tr><td class="linenos" data-pseudo-content="9"></td><td> create mode 100644 gigs/models.py</td><tr><td class="linenos" data-pseudo-content="10"></td><td> create mode 100644 gigs/tests.py</td><tr><td class="linenos" data-pseudo-content="11"></td><td> create mode 100644 gigs/views.py</td></table></code></pre>
<h2 id="our-first-model">Our first model</h2>
<p>At this point, it’s worth thinking about the models we plan for our app to have. First we’ll have a <code>Venue</code> model that contains details of an individual venue, which will include a name and a geographical location. We’ll also have an <code>Event</code> model that will represent an individual gig or event at a venue, and will include a name, date/time and a venue as a foreign key.</p>
<p>Before we start writing our first model, we need to write a test for it, but we also need to be able to create objects easily in our tests. We also want to be able to easily examine our objects, so we’ll install iPDB and Factory Boy:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install ipdb factory-boy</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Next, we write a test for the <code>Venue</code> model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Note that we randomly generate our location - this is done as suggested in <a href="http://stackoverflow.com/questions/32828890/using-factory-boy-with-geodjango-pointfields">this Stack Overflow post</a>.</p>
<p>Now, running our tests brings up an expected error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Venue'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s create our <code>Venue</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>For now, we’re just creating a simple dummy model. Note that we import <code>models</code> from <code>django.contrib.gis.db</code> instead of the usual place - this gives us access to the additional geographical fields.</p>
<p>If we run our tests again we get an error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_venue"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_venue"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_venue"</span> ORDER BY <span class="hljs-string">"gigs_ve...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_venue<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_venue<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_venue<span class="hljs-string">" ORDER BY "</span>gigs_ve...</td></table></code></pre>
<p>Let’s update our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td></table></code></pre>
<p>Then create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0001_initial.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Venue</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: gigs, sessions, contenttypes, auth, admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0001_initial... OK</td></table></code></pre>
<p>Then if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.362s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They should pass. Note that Django may complain about needing to delete the test database before running the tests, but this should not cause any problems. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Venue model in place'</span></td></table></code></pre>
<p>With our venue done, let’s turn to our <code>Event</code> model. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Then we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue, Event</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Event'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>As expected, this fails, so create an empty <code>Event</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests now will raise an error due to the table not existing:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_event"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_event"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_event"</span> ORDER BY <span class="hljs-string">"gigs_ev...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_event<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_event<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_event<span class="hljs-string">" ORDER BY "</span>gigs_ev...</td></table></code></pre>
<p>So let’s populate our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    venue = models.ForeignKey(Venue)</td></table></code></pre>
<p>And create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0002_event.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Event</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: auth, admin, sessions, contenttypes, gigs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0002_event... OK</td></table></code></pre>
<p>And run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.033s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Again, you may be prompted to delete the test database, but this should not be an issue.</p>
<p>With this done, let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Event model'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 47ba686] Added Event model</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 67 insertions(+), 1 deletion(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/migrations/0002_event.py</td></table></code></pre>
<h2 id="setting-up-the-admin">Setting up the admin</h2>
<p>For an application like this, you’d expect the curators of the site to maintain the gigs and venues stored in the database, and that’s an obvious use case for the Django admin. So let’s set our models up to be available in the admin. Open up <code>gigs/admin.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(Venue)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Now, if you start up the dev server as usual with <code>python manage.py runserver</code> and visit <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a>, you can see that our <code>Event</code> and <code>Venue</code> models are now available. However, the string representations of them are pretty useless. Let’s fix that. First, we amend our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td></table></code></pre>
<p>Next, we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>FF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_event (gigs.tests.EventTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 74, <span class="hljs-keyword">in</span> test_create_event</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: <span class="hljs-string">'Event object'</span> != <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>- Event object</td><tr><td class="linenos" data-pseudo-content="12"></td><td>+ Queens of the Stone Age - Wembley Arena</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="16"></td><td>FAIL: test_create_venue (gigs.tests.VenueTest)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 52, <span class="hljs-keyword">in</span> test_create_venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>AssertionError: <span class="hljs-string">'Venue object'</span> != <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>- Venue object</td><tr><td class="linenos" data-pseudo-content="23"></td><td>+ Wembley Arena</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.059s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (failures=2)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They fail as expected. So let’s update <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> self.name</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    venue = models.ForeignKey(Venue)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"%s - %s"</span> % (self.name, self.venue.name)</td></table></code></pre>
<p>For the venue, we just use the name. For the event, we use the event name and the venue name.</p>
<p>Now, we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.048s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added models to admin'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 65d051f] Added models to admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 15 insertions(+), 1 deletion(-)</td></table></code></pre>
<p>Our models are now in place, so you may want to log into the admin and create a few venues and events so you can see it in action. Note that the location field for the <code>Venue</code> model creates a map widget that allows you to select a geographical location. It is a bit basic, however, so let’s make it better. Let’s install <code>django-floppyforms</code>:</p>
<pre><code class="hljs lang-bash singleline">$ pip install django-floppyforms</code></pre>
<p>And add it to our requirements:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze -r requirements.txt</code></pre>
<p>Then add it to <code>INSTALLED_APPS</code> in <code>gigfinder/setttings.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'floppyforms'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>]</td></table></code></pre>
<p>Now we create a custom point widget for our admin, a custom form for the venues, and a custom venue admin:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> ModelForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> floppyforms.gis <span class="hljs-keyword">import</span> PointWidget, BaseGMapWidget</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPointWidget</span><span class="hljs-params">(PointWidget, BaseGMapWidget)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Media</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        js = (<span class="hljs-string">'/static/floppyforms/js/MapWidget.js'</span>,)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdminForm</span><span class="hljs-params">(ModelForm)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        fields = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'location'</span>]</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        widgets = {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'location'</span>: CustomPointWidget()</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    form = VenueAdminForm</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>admin.site.register(Venue, VenueAdmin)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Note in particular that we define the media for our widget so we can include some required Javascript. If you run the dev server again, you should see that the map widget in the admin is now provided by Google Maps, making it much easier to identify the correct location of the venue.</p>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/ requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Customised location widget'</span></td></table></code></pre>
<p>With our admin ready, it’s time to move on to the user-facing part of the web app.</p>
<h2 id="creating-our-views">Creating our views</h2>
<p>We will keep the front end for this app as simple as possible for the purposes of this tutorial, but of course you should feel free to expand upon this as you see fit. What we’ll do is create a form that uses HTML5 geolocation to get the user’s current geographical coordinates. It will then return events in the next week, ordered by how close the venue is. Please note that there are plans afoot in some browsers to prevent HTML5 geolocation from working unless content is server over HTTPS, so that may complicate things.</p>
<p>How do we query the database to get this data? It’s not too difficult, as shown in this example:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py shell</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Python 3.5.1 (default, Mar 25 2016, 00:17:15)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Type <span class="hljs-string">"copyright"</span>, <span class="hljs-string">"credits"</span> or <span class="hljs-string">"license"</span> <span class="hljs-keyword">for</span> more information.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>IPython 4.1.2 -- An enhanced Interactive Python.</td><tr><td class="linenos" data-pseudo-content="6"></td><td>?         -&gt; Introduction and overview of IPython<span class="hljs-string">'s features.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>%quickref -&gt; Quick reference.</td><tr><td class="linenos" data-pseudo-content="8"></td><td>help      -&gt; Python'</span>s own <span class="hljs-built_in">help</span> system.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>object?   -&gt; Details about <span class="hljs-string">'object'</span>, use <span class="hljs-string">'object??'</span> <span class="hljs-keyword">for</span> extra details.</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>In [1]: from gigs.models import *</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>In [2]: from django.contrib.gis.geos import Point</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>In [3]: from django.contrib.gis.db.models.functions import Distance</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>In [4]: location = Point(52.3749159, 1.1067473, srid=4326)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>In [5]: Venue.objects.all().annotate(distance=Distance(<span class="hljs-string">'location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Out[5]: [&lt;Venue: Diss Corn Hall&gt;, &lt;Venue: Waterfront Norwich&gt;, &lt;Venue: UEA Norwich&gt;, &lt;Venue: Wembley Arena&gt;]</td></table></code></pre>
<p>I’ve set up a number of venues using the admin, one round the corner, two in Norwich, and one in London. I then imported the models, the <code>Point</code> class, and the <code>Distance</code> function, and created a <code>Point</code> object. Note that the <code>Point</code> is passed three fields - the first and second are the latitude and longitude, respectively, while the <code>srid</code> field takes a value of <code>4326</code>. This field represents the <a href="https://en.wikipedia.org/wiki/SRID">Spatial Reference System Identifier</a> used for this query - we’ve gone for <a href="https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84">WGS 84</a>, which is a common choice and is referred to with the SRID 4326.</p>
<p>Now, we want the user to be able to submit the form and get the 5 nearest events in the next week. We can get the date for this time next week as follows:</p>
<pre><code class="hljs lang-python singleline">In [<span class="hljs-number">6</span>]: next_week = timezone.now() + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</code></pre>
<p>Then we can get the events we want, sorted by distance, like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">7</span>]: Event.objects.filter(datetime__gte=timezone.now()).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">7</span>]: [&lt;Event: Primal Scream - UEA Norwich&gt;, &lt;Event: Queens of the Stone Age - Wembley Arena&gt;]</td></table></code></pre>
<p>With that in mind, let’s write the test for our view. The view should contain a single form that accepts a user’s geographical coordinates - for convenience we’ll autocomplete this with HTML5 geolocation. On submit, the user should see a list of the five closest events in the next week.</p>
<p>First, let’s test the GET request. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    Test lookup view</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py test gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to <span class="hljs-keyword">import</span> test module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">428</span>, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">369</span>, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot <span class="hljs-keyword">import</span> name <span class="hljs-string">'LookupView'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our first issue is that we can’t import the view in the test. Let’s fix that by amending <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests again results in the following:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 88, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 600, <span class="hljs-keyword">in</span> reverse</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> force_text(iri_to_uri(resolver._reverse_with_prefix(view, prefix, *args, **kwargs)))</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 508, <span class="hljs-keyword">in</span> _reverse_with_prefix</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    (lookup_view_s, args, kwargs, len(patterns), patterns))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>django.core.urlresolvers.NoReverseMatch: Reverse <span class="hljs-keyword">for</span> <span class="hljs-string">'lookup'</span> with arguments <span class="hljs-string">'()'</span> and keyword arguments <span class="hljs-string">'{}'</span> not found. 0 pattern(s) tried: []</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.154s</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can’t resolve the URL for our new view, so we need to add it to our URLconf. First of all, save this as <code>gigs/urls.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Lookup</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    url(<span class="hljs-string">r''</span>, LookupView.as_view(), name=<span class="hljs-string">'lookup'</span>),</td><tr><td class="linenos" data-pseudo-content="7"></td><td>]</td></table></code></pre>
<p>Then amend <code>gigfinder/urls.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Gig URLs</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'gigs.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>]</td></table></code></pre>
<p>Then run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 90, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.417s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We get a 405 response because the view does not accept GET requests. Let’s resolve that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>If we run our tests now:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 89, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 6, <span class="hljs-keyword">in</span> get</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookup.html</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.409s</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We see that the template is not defined. Save the following as <code>gigs/templates/gigs/includes/base.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Gig finder<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Gig Finder<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-2.2.2.min.js"</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha256-36cp2Co+/62rEAAYHLmRCPIych47CvdM+uTBJwSzWjI="</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>And the following as <code>gigs/templates/gigs/lookup.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"latitude"</span>&gt;</span>Latitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_latitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"latitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"longitude"</span>&gt;</span>Longitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_longitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"longitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        navigator.geolocation.getCurrentPosition(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">var</span> lat = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_latitude'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-keyword">var</span> lon = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_longitude'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            lat.value = position.coords.latitude;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            lon.value = position.coords.longitude;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Note the JavaScript to populate the latitude and longitude. Now, if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 1.814s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Success! We now render our form as expected. Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs gigfinder</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented GET handler'</span></td></table></code></pre>
<h2 id="handling-post-requests">Handling POST requests</h2>
<p>Now we need to be able to handle POST requests and return the appropriate results. First, let’s write a test for it in our existing <code>LookupViewTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create venues to return</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        v1 = VenueFactory(name=<span class="hljs-string">'Venue1'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        v2 = VenueFactory(name=<span class="hljs-string">'Venue2'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        v3 = VenueFactory(name=<span class="hljs-string">'Venue3'</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        v4 = VenueFactory(name=<span class="hljs-string">'Venue4'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        v5 = VenueFactory(name=<span class="hljs-string">'Venue5'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        v6 = VenueFactory(name=<span class="hljs-string">'Venue6'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        v7 = VenueFactory(name=<span class="hljs-string">'Venue7'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        v8 = VenueFactory(name=<span class="hljs-string">'Venue8'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        v9 = VenueFactory(name=<span class="hljs-string">'Venue9'</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        v10 = VenueFactory(name=<span class="hljs-string">'Venue10'</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Create events to return</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        e1 = EventFactory(name=<span class="hljs-string">'Event1'</span>, venue=v1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        e2 = EventFactory(name=<span class="hljs-string">'Event2'</span>, venue=v2)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        e3 = EventFactory(name=<span class="hljs-string">'Event3'</span>, venue=v3)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        e4 = EventFactory(name=<span class="hljs-string">'Event4'</span>, venue=v4)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        e5 = EventFactory(name=<span class="hljs-string">'Event5'</span>, venue=v5)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        e6 = EventFactory(name=<span class="hljs-string">'Event6'</span>, venue=v6)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        e7 = EventFactory(name=<span class="hljs-string">'Event7'</span>, venue=v7)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        e8 = EventFactory(name=<span class="hljs-string">'Event8'</span>, venue=v8)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        e9 = EventFactory(name=<span class="hljs-string">'Event9'</span>, venue=v9)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        e10 = EventFactory(name=<span class="hljs-string">'Event10'</span>, venue=v10)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Set parameters</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        lat = <span class="hljs-number">52.3749159</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        lon = <span class="hljs-number">1.1067473</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Put together request</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'latitude'</span>: lat,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'longitude'</span>: lon</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'lookup'</span>), data)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookupresults.html'</span>)</td></table></code></pre>
<p>If we now run this test:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 117, <span class="hljs-keyword">in</span> test_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 1.281s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can see that it fails because the POST method is not supported. Now we can start work on implementing it. First, let’s create a form in <code>gigs/forms.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> Form, FloatField</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupForm</span><span class="hljs-params">(Form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    latitude = FloatField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    longitude = FloatField()</td></table></code></pre>
<p>Next, edit <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            })</td></table></code></pre>
<p>Note that we’re switching from a <code>View</code> to a <code>FormView</code> so that it can more easily handle our form. We could render the form using this as well, but as it’s a simple form I decided it wasn’t worth the bother. Also, note that the longitude goes first - this caught me out as I expected the latitude to be the first argument.</p>
<p>Now, if we run our tests, they should complain about our missing template:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 116, <span class="hljs-keyword">in</span> test_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/edit.py"</span>, line 222, <span class="hljs-keyword">in</span> post</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> self.form_valid(form)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 31, <span class="hljs-keyword">in</span> form_valid</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookupresults.html</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.506s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So let’s create <code>gigs/templates/gigs/lookupresults.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> event <span class="hljs-keyword">in</span> events %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ event.name }}</span><span class="xml"> - </span><span class="hljs-template-variable">{{ event.venue.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.728s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>However, if we try actually submitting the form by hand, we get the error <code>CSRF token missing or incorrect</code>. Edit <code>views.py</code> as follows to resolve this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> RequestContext</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>, RequestContext(request))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            })</td></table></code></pre>
<p>Here we’re adding the request context so that the CSRF token is available.</p>
<p>If you run the dev server, add a few events and venues via the admin, and submit a search, you’ll see that you’re returning events closest to you first.</p>
<p>Now that we can submit searches, we’re ready to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Can now retrieve search results'</span></td></table></code></pre>
<p>And we’re done! Of course, you may want to expand on this by plotting each gig venue on a map, or something like that, in which case there’s plenty of methods of doing so - you can retrieve the latitude and longitude in the template and use Google Maps to display them. I’ll leave doing so as an exercise for the reader.</p>
<p>I can’t say that working with GeoDjango isn’t a bit of a struggle at times, but being able to make spatial queries in this fashion is very useful. With more and more people carrying smartphones, you’re more likely than ever to be asked to build applications that return data based on someone’s geographical location, and GeoDjango is a great way to do this with a Django application. You can find the source on <a href="https://github.com/matthewbdaly/gigfinder">Github</a>.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Testing Django views in isolation]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/08/02/testing-django-views-in-isolation/</guid>
            <pubDate>Sun, 02 Aug 2015 16:58:45 GMT</pubDate>
            <description><![CDATA[<p>One thing you may hear said often about test-driven development is that as far as possible, you should test everything in isolation. However, it’s not always immediately clear how you actually go about doing this. In Django, it’s fairly easy to get your head around testing models in isolation because they’re single objects that you can just create, save, and then check their attributes. Forms are also quite easy to test, because you can just set the parameters with the appropriate values and check that the validation works as expected. With views, it’s much harder to imagine how you’d go about testing them in isolation, and often people just settle for writing higher-level functional tests instead. While functional tests are important, they’re also slower than unit tests, which makes it less likely they’ll be run often. So I thought I’d show you a quick and simple example of testing a Django view in isolation.</p>
<p>One of the little projects I’ve written in the past to help get my head around certain aspects of Django is a code-snippet sharing Django application which I named <a href="https://github.com/matthewbdaly/snippetr">Snippetr</a>. The index route of this application is a form for submitting a brand-new code snippet and I’ll show you how we would write a test for that.</p>
<h2 id="testing-a-get-request">Testing a GET request</h2>
<p>Before now, you may well have used the Django test client to test views. That is fine for higher-level tests, but if you want to test a view in isolation, it’s no use because it emulates a real web server and all of the middleware and authentication, which we want to keep out of the way. Instead, we need to use <code>RequestFactory</code>:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</code></pre>
<p><code>RequestFactory</code> actually implements a subset of the functionality of the Django test client, so while it will feel somewhat familiar, it won’t have all the same functionality. For instance, it doesn’t support middleware, so rather than logging in using the test client’s <code>login()</code> method, you instead attach a user directly to the request, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>request = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>request.user = user</td></table></code></pre>
<p>You have to specify the URL in the request, but you also have to explicitly pass the request through to the view you want to test, which can be a bit confusing. Let’s see it in context. First of all, we want to write a test for making a GET request:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SnippetCreateViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Test the snippet create view</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        self.user = UserFactory()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        Test GET requests</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'snippet_create'</span>))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'user'</span>], self.user)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.assertEqual(response.context_data[<span class="hljs-string">'request'</span>], request)</td></table></code></pre>
<p>First of all, we define a <code>setUp()</code> method that creates a user and an instance of <code>RequestFactory()</code> for use in the test. Note that I’m using Factory Boy to define <code>UserFactory</code> in order to make it easier to work with. Also, if you have more than one view to test, you should create a base class containing the <code>setUp()</code> method that your view tests inherit from.</p>
<p>Next, we have our test for making a GET request. Note that we’re using the <code>reverse()</code> method to get the route for the view named <code>snippet_create</code>. You’ll need to import this as follows if you’re not yet using it:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</code></pre>
<p>We then attach our user object to the request manually, and fetch the response by passing the request to the view as follows:</p>
<pre><code class="hljs lang-python singleline">    response = SnippetCreateView.as_view()(request)</code></pre>
<p>Note that this is the syntax used for class-based views - we call the view’s <code>as_view()</code> method. For a function-based view, the syntax is a bit simpler:</p>
<pre><code class="hljs lang-python singleline">    response = my_view(request)</code></pre>
<p>We then test our response as usual. In this case, the view adds some additional context data, and we check that we can access that, as well as checking the status code.</p>
<h2 id="testing-a-post-request">Testing a POST request</h2>
<p>Testing a POST request is a little more challenging in this case because submitting the form will create a new <code>Snippet</code> object and we don’t want to interact with the model layer at all if we can help it. We want to test the view in isolation, partly because it will be faster, and partly because it’s a good idea. We can do this by mocking the <code>Snippet</code> model’s <code>save()</code> method.</p>
<p>To do so, we need to import two things from the <code>mock</code> library. If you’re using Python 3.4 or later, then <code>mock</code> is part of <code>unittest</code> as <code>unittest.mock</code>. Otherwise, it’s a separate library you need to install with <code>pip</code>. Here’s the import statement for those on Python 3.4 or later:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> unittest.mock <span class="hljs-keyword">import</span> patch, MagicMock</code></pre>
<p>And for those on earlier versions:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> mock <span class="hljs-keyword">import</span> patch, MagicMock</code></pre>
<p>Now, our test for the POST requests should look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">    @patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        Test post requests</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        """</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the request</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My snippet'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'content'</span>: <span class="hljs-string">'This is my snippet'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'snippet_create'</span>), data)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        request.user = self.user</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Get the response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        response = SnippetCreateView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">302</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check save was called</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertTrue(Snippet.save.called)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEqual(Snippet.save.call_count, <span class="hljs-number">1</span>)</td></table></code></pre>
<p>Note first of all the following line:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-meta">    @patch('snippets.models.Snippet.save', MagicMock(name="save"))</span></code></pre>
<p>Here we’re saying that in this test, when the <code>save()</code> method of the <code>Snippet</code> model is called, it should instead call a mocked version, which lacks the functionality and only registers that it has been called and a few details about it.</p>
<p>Next, we put together the data to be passed through and create a POST request for it. As before, we attach the user to the request. We then pass the request through in the same way as for the GET request. We also check that the response code was 302, meaning that the user would be redirected elsewhere after the form was submitted correctly.</p>
<p>Finally, we assert that <code>Snippet.save.called</code> is true. <code>called</code> is a Boolean value, representing whether the method was called or not. We also check the value of <code>Snippet.save.call_count</code>, which is a count of the number of times the method was called - here we check that it’s set to 1.</p>
<p>As you can see, while the request factory is a little harder than the Django test client to figure out, it’s not too difficult once you get the hang of it. By combining it with judicious use of <code>mock</code>, you can easily test your views in isolation, and without having to interact with the database or set up any middleware, these tests will be much faster than those using the Django test client.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Exploring the HStoreField in Django 1.8]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/</guid>
            <pubDate>Sat, 01 Aug 2015 17:26:54 GMT</pubDate>
            <description><![CDATA[<p>One of the most interesting additions in Django 1.8 is the new Postgres-specific fields. I started using PostgreSQL in preference to MySQL for Django apps last year, and so I was interested in the additional functionality they offer.</p>
<p>By far the biggest deal out of all of these was the new <code>HStoreField</code> type. PostgreSQL added a JSON data type a little while back, and <code>HStoreField</code> allows you to use that field type. This is a really big deal because it allows you to store arbitrary data as JSON and query it. Previously, you could of course just store data as JSON in a text field, but that lacked the same ability to query it. This gives you many of the advantages of a NoSQL document database such as MongoDB in a relational database. For instance, you can store different products with different data about them, and crucially, query them by that data. Previously, the only way to add arbitrary product data and be able to query it was to have it in a separate table, and it was often cumbersome to join them when fetching multiple products.</p>
<p>Let’s see a working example. We might be building an online store where products can have all kinds of arbitrary data stored about them. One product might be a plastic box, and you’d need to list the capacity as an additional attribute. Another product might be a pair of shoes, which have no capacity, but do have a size. It might be difficult to model this otherwise, but <code>HStoreField</code> is perfect for this kind of data.</p>
<p>First, let’s set up our database. I’ll assume you already have PostgreSQL up and running via your package manager. First, we need to create our database:</p>
<pre><code class="hljs lang-bash singleline">$ createdb djangostore</code></pre>
<p>Next, we need to create a new user for this database with superuser access:</p>
<pre><code class="hljs lang-bash singleline">$ createuser store <span class="hljs-_">-s</span> -P</code></pre>
<p>You’ll be prompted for a password - I’m assuming this will just be <code>password</code> here. Next, we need to connect to PostgreSQL using the <code>psql</code> utility:</p>
<pre><code class="hljs lang-bash singleline">$ psql djangostore -U store -W</code></pre>
<p>You’ll be prompted for your new password. Next, run the following command:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># CREATE EXTENSION hstore;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE djangostore TO store;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>The first command installs the HStore extension. Next we make sure our new user has the privileges required on the new database:</p>
<p>We’ve now created our database and a user to interact with it. Next, we’ll set up our Django install:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ <span class="hljs-built_in">cd</span> Projects</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir djangostore</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ <span class="hljs-built_in">cd</span> djangostore</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ pyvenv venv</td><tr><td class="linenos" data-pseudo-content="5"></td><td>$ <span class="hljs-built_in">source</span> venv/bin/activate</td><tr><td class="linenos" data-pseudo-content="6"></td><td>$ pip install Django psycopg2 ipdb</td><tr><td class="linenos" data-pseudo-content="7"></td><td>$ django-admin.py startproject djangostore</td><tr><td class="linenos" data-pseudo-content="8"></td><td>$ python manage.py startapp store</td></table></code></pre>
<p>I’m assuming here that you’re using Python 3.4. On Ubuntu, getting it working is <a href="https://gist.github.com/denilsonsa/21e50a357f2d4920091e">a bit more involved</a>.</p>
<p>Next, open up <code>djangostore/settings.py</code> and amend <code>INSTALLED_APPS</code> to include the new app and the PostgreSQL-specific functionality:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'django.contrib.postgres'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>)</td></table></code></pre>
<p>You’ll also need to configure the database settings:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.postgresql_psycopg2'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'djangostore'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-string">'HOST'</span>: <span class="hljs-string">'localhost'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-string">'PORT'</span>: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>We need to create an empty migration to use <code>HStoreField</code>:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py makemigrations --empty store</code></pre>
<p>This command should create the file <code>store/migrations/0001_initial.py</code>. Open this up and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># -*- coding: utf-8 -*-</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models, migrations</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.operations <span class="hljs-keyword">import</span> HStoreExtension</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Migration</span><span class="hljs-params">(migrations.Migration)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    dependencies = [</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    operations = [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        HStoreExtension(),</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    ]</td></table></code></pre>
<p>This will make sure the HStore extension is installed. Next, let’s run these migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Synchronize unmigrated apps: messages, staticfiles, postgres</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Apply all migrations: sessions, store, admin, auth, contenttypes</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Synchronizing apps without migrations:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Creating tables...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    Running deferred SQL...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Installing custom SQL...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying contenttypes.0002_remove_content_type_name... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  Applying sessions.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  Applying store.0001_initial... OK</td></table></code></pre>
<p>Now, we’re ready to start creating our <code>Product</code> model. Open up <code>store/models.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.fields <span class="hljs-keyword">import</span> HStoreField</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    updated_at = models.DateTimeField(auto_now=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    price = models.FloatField()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    attributes = HStoreField()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> self.name</td></table></code></pre>
<p>Note that <code>HStoreField</code> is not part of the standard group of model fields, and needs to be imported from the Postgres-specific fields module. Next, let’s create and run our migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>We should now have a <code>Product</code> model where the <code>attributes</code> field can be any arbitrary data we want. Note that we installed <code>ipdb</code> earlier - if you’re not familiar with it, this is an improved Python debugger, and also pulls in <code>ipython</code>, an improved Python shell, which Django will use if available.</p>
<p>Open up the Django shell:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py shell</code></pre>
<p>Then, import the <code>Product</code> model:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> store.models <span class="hljs-keyword">import</span> Product</code></pre>
<p>Let’s create our first product - a plastic storage box:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>box = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>box.name = <span class="hljs-string">'Box'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>box.description = <span class="hljs-string">'A big box'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>box.price = <span class="hljs-number">5.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>box.attributes = { <span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">"colour"</span>: <span class="hljs-string">"blue"</span>}</td><tr><td class="linenos" data-pseudo-content="6"></td><td>box.save()</td></table></code></pre>
<p>If we take a look, we can see that the attributes can be returned as a Python dictionary:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">12</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">12</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>We can easily retrieve single values:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">15</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes[<span class="hljs-string">'capacity'</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">15</span>]: <span class="hljs-string">'1L'</span></td></table></code></pre>
<p>Let’s add a second product - a mop:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>mop = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>mop.name = <span class="hljs-string">'Mop'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>mop.description = <span class="hljs-string">'A mop'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>mop.price = <span class="hljs-number">12.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>mop.attributes = { <span class="hljs-string">'colour'</span>: <span class="hljs-string">"red"</span> }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>mop.save()</td></table></code></pre>
<p>Now, we can filter out only the red items easily:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">2</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'red'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">2</span>]: [&lt;Product: Mop&gt;]</td></table></code></pre>
<p>Here we search for items where the <code>colour</code> attribute is set to <code>red</code>, and we only get back the mop. Let’s do the same for blue items:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">3</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Here it returns the box. Let’s now search for an item with a capacity of 1L:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">4</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">4</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Only the box has the capacity attribute at all, and it’s the only one returned. Let’s see what happens when we search for an item with a capacity of 2L, which we know is not present:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">5</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'2L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">5</span>]: []</td></table></code></pre>
<p>No items returned, as expected. Let’s look for any item with the <code>capacity</code> attribute:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">6</span>]: Product.objects.filter(attributes__has_key=<span class="hljs-string">'capacity'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">6</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Again, it only returns the box, as that’s the only one where that key exists. Note that all of this is tightly integrated with the existing API for the Django ORM. Let’s add a third product, a food hamper:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: hamper = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">4</span>]: hamper.name = <span class="hljs-string">'Hamper'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>In [<span class="hljs-number">5</span>]: hamper.description = <span class="hljs-string">'A food hamper'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>In [<span class="hljs-number">6</span>]: hamper.price = <span class="hljs-number">19.99</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>In [<span class="hljs-number">7</span>]: hamper.attributes = {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>   ...: <span class="hljs-string">'contents'</span>: <span class="hljs-string">'ham, cheese, coffee'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>   ...: <span class="hljs-string">'size'</span>: <span class="hljs-string">'90cmx60cm'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   ...: }</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>In [<span class="hljs-number">8</span>]: hamper.save()</td></table></code></pre>
<p>Next, let’s return only those items that have a <code>contents</code> attribute that contains <code>cheese</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">9</span>]: Product.objects.filter(attributes__contents__contains=<span class="hljs-string">'cheese'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">9</span>]: [&lt;Product: Hamper&gt;]</td></table></code></pre>
<p>As you can see, the <code>HStoreField</code> type allows for quite complex queries, while allowing you to set arbitrary values for an individual item. This overcomes one of the biggest issues with relational databases - the inability to set arbitrary data. Previously, you might have to work around it in some fashion, such as creating a table containing attributes for individual items which had to be joined on the product table. This is very cumbersome and difficult to use, especially when you wanted to work with more than one product. With this approach, it’s easy to filter products by multiple values in the HStore field, and you get back all of the attributes at once, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">13</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">13</span>]: [&lt;Product: Box&gt;]</td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">14</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Out[<span class="hljs-number">14</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>Similar functionality is coming in a future version of MySQL, so it wouldn’t be entirely surprising to see <code>HStoreField</code> become more generally available in Django in the near future. For now, this functionality is extremely useful and makes for a good reason to ditch MySQL in favour of PostgreSQL for your future Django apps.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Handling images as base64 strings with Django REST Framework]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/</guid>
            <pubDate>Sat, 04 Jul 2015 12:01:40 GMT</pubDate>
            <description><![CDATA[<p>I’m currently working on a Phonegap app that involves taking pictures and uploading them via a REST API. I’ve done this before, and I found at that time that the best way to do so was to fetch the image as a base-64 encoded string and push that up, rather than the image file itself. However, the last time I did so, I was using Tastypie to build the API, and I’ve since switched over to Django REST Framework as my API toolkit of choice.</p>
<p>It didn’t take long to find <a href="https://gist.github.com/yprez/7704036">this gist</a> giving details of how to do so, but it didn’t work as is, partly because I was using Python 3, and partly because the <code>from_native</code> method has gone as at Django REST Framework 3.0. It was, however, straightforward to adapt it to work. Here’s my solution:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> base64, uuid</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.core.files.base <span class="hljs-keyword">import</span> ContentFile</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># Custom image field - handles base 64 encoded images</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base64ImageField</span><span class="hljs-params">(serializers.ImageField)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_internal_value</span><span class="hljs-params">(self, data)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">if</span> isinstance(data, str) <span class="hljs-keyword">and</span> data.startswith(<span class="hljs-string">'data:image'</span>):</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-comment"># base64 encoded image - decode</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            format, imgstr = data.split(<span class="hljs-string">';base64,'</span>) <span class="hljs-comment"># format ~= data:image/X,</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            ext = format.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>] <span class="hljs-comment"># guess file extension</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            id = uuid.uuid4()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            data = ContentFile(base64.b64decode(imgstr), name = id.urn[<span class="hljs-number">9</span>:] + <span class="hljs-string">'.'</span> + ext)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> super(Base64ImageField, self).to_internal_value(data)</td></table></code></pre>
<p>This solution will handle both base 64 encoded strings and image files. Then, just use this field as normal.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Getting django-behave and Celery to work together]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</guid>
            <pubDate>Wed, 17 Jun 2015 19:34:08 GMT</pubDate>
            <description><![CDATA[<p>I ran into a small issue today. I’m working on a Django app which uses Celery to handle certain tasks that don’t need to return a response within the context of the HTTP request. I also wanted to use <code>django_behave</code> for running BDD tests. The trouble is that both <code>django_behave</code> and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.</p>
<p>However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default test runner to make it work with Celery. I was therefore able to create my own custom test runner that inherited from <code>DjangoBehaveTestSuiteRunner</code> and applied the changes necessary to get Celery working with it. Here is the test runner I wrote, which was saved as <code>myproject/runner.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> djcelery.contrib.test_runner <span class="hljs-keyword">import</span> _set_eager</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django_behave.runner <span class="hljs-keyword">import</span> DjangoBehaveTestSuiteRunner</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CeleryAndBehaveRunner</span><span class="hljs-params">(DjangoBehaveTestSuiteRunner)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup_test_environment</span><span class="hljs-params">(self, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        _set_eager()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        settings.BROKER_BACKEND = <span class="hljs-string">'memory'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        super(CeleryAndBehaveRunner, self).setup_test_environment(**kwargs)</td></table></code></pre>
<p>To use it, you need to set the test runner in <code>settings.py</code></p>
<pre><code class="hljs lang-python singleline">TEST_RUNNER = <span class="hljs-string">'myproject.runner.CeleryAndBehaveRunner'</span></code></pre>
<p>Once that was done, my tests worked flawlessly with Celery, and the Behave tests ran as expected.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[My Django web server setup]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/10/19/my-django-web-server-setup/</guid>
            <pubDate>Sun, 19 Oct 2014 18:52:28 GMT</pubDate>
            <description><![CDATA[<p>This isn’t really part of my Django tutorial series (that has now definitely concluded!), but I thought I’d share the setup I generally use for deploying Django applications, partly for my own reference, and partly because it is quite complex, and those readers who don’t wish to deploy to Heroku may want some guidance on how to deploy their new blogs to a VPS.</p>
<h2 id="operating-system">Operating system</h2>
<p>This isn’t actually that much of a big deal, but while I prefer Ubuntu on desktops, I generally use Debian Stable on servers, since it’s fanatically stable.</p>
<h2 id="database-server">Database server</h2>
<p>For my first commercial Django app, I used MySQL. However, South had one or two issues with MySQL, and I figured that since using an ORM and migrations meant that I wouldn’t need to write much SQL anyway, I might as well jump to PostgreSQL for the Django app I’m currently in the process of deploying at work. So far I haven’t had any problems with it.</p>
<h2 id="web-server">Web server</h2>
<p>It’s customary to use two web servers with Django. One handles the static content, and reverse proxies everything else to a different port, where another web server serves the dynamic content.</p>
<p>For serving the static files, I use Nginx - it’s generally considered to be faster than Apache for this use case. Here’s a typical Nginx config file:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attribute">location</span> /static {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-attribute">root</span> /var/www/mysite;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">location</span> /media {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-attribute">root</span> /var/www/mysite;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8000;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>}</td></table></code></pre>
<p>For the application server, I use Gunicorn. You can install this with <code>pip install gunicorn</code>, then add it to <code>INSTALLED_APPS</code>. Then add the following config file to the root of your project, as <code>gunicorn.conf.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>bind = <span class="hljs-string">"127.0.0.1:8000"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>logfile = <span class="hljs-string">"/var/log/gunicorn.log"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>loglevel = <span class="hljs-string">"debug"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>workers = <span class="hljs-number">3</span></td></table></code></pre>
<p>You should normally set the number of workers to 2 times the number of cores on your machine, plus one.</p>
<p>In order to keep Gunicorn running, I use Supervisor. As the installation commands will depend on your OS, I won’t give details here - your package manager of choice should have a suitable package available. Here’s a typical Supervisor config file I might use for running Gunicorn for a Django app, named <code>mysite-supervisor.conf</code>:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">[program:mysite]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">command</span>=/var/www/mysite/venv/bin/gunicorn myapp.wsgi:application --workers=<span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">directory</span>=/var/www/mysite/</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">user</span>=nobody</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span></td></table></code></pre>
<p>Once that’s in place, you can easily add the new app:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo supervisorctl reread</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo supervisorctl update</td></table></code></pre>
<p>Then to start it:</p>
<pre><code class="hljs lang-bash singleline">$ sudo supervisorctl start mysite</code></pre>
<p>Or stop it with:</p>
<pre><code class="hljs lang-bash singleline">$ sudo supervisorctl stop mysite</code></pre>
<p>Or restart it:</p>
<pre><code class="hljs lang-bash singleline">$ sudo supervisorctl restart mysite</code></pre>
<h2 id="celery">Celery</h2>
<p>So far, both of the web apps I’ve built professionally have been ones where it made sense to use <a href="http://www.celeryproject.org/">Celery</a> for some tasks. For the uninitiated, Celery lets you pass a task to a queue to be handled, rather than handling it within the context of the same HTTP request. This offers the following advantages:</p>
<ul>
<li>The user doesn’t need to wait for the task to be completed before getting a response, improving performance</li>
<li>It’s more robust, since if the task fails, it can be automatically retried</li>
<li>The task queue can be moved to another server if desired, making it easier to scale</li>
<li>Scheduling tasks</li>
</ul>
<p>I’ve used it in cases where I needed to send an email or a push notification, since these don’t have to be done within the context of the same HTTP request, but need to be reliable.</p>
<p>I generally use RabbitMQ as my message queue. I’ll leave setting this up as an exercise for the reader since it’s covered pretty well in the Celery documentation, but like with Gunicorn, I use Supervisor to run the Celery worker. Here’s a typical config file, which might be called <code>celery-supervisor.conf</code>:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">[program:celeryd]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">command</span>=/var/www/mysite/venv/bin/python manage.py celery worker</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">directory</span>=/var/www/mysite/</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">user</span>=nobody</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span></td></table></code></pre>
<p>Then start it up:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ sudo supervisorctl reread</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ sudo supervisorctl update</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ sudo supervisorctl start celeryd</td></table></code></pre>
<p>I make no claims about how good this setup is, but it works well for me. I haven’t yet had the occasion to deploy a Django app to anywhere other than Heroku that really benefited from caching, so I haven’t got any tips to share about that, but if I were building a content-driven web app, I would use Memcached since it’s well-supported.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 9]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/09/28/django-blog-tutorial-the-next-generation-part-9/</guid>
            <pubDate>Sun, 28 Sep 2014 19:51:02 GMT</pubDate>
            <description><![CDATA[<p>Yes, I know the eight instalment was meant to be the last one! Within 24 hours of that post going live, Django 1.7 was released, so naturally I’d like to show you how to upgrade to it.</p>
<p>The biggest change is that Django 1.7 introduces its own migration system, which means South is now surplus to requirements. We therefore need to switch from South to Django’s native migrations. Fortunately, this is fairly straightforward.</p>
<p>First of all, activate your virtualenv:</p>
<pre><code class="hljs lang-bash singleline">$ virtualenv venv</code></pre>
<p>Then make sure your migrations are up to date:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py syncdb</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>Then, upgrade your Django version and uninstall South:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install Django --upgrade</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip uninstall South</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Next, remove South from <code>INSTALLED_APPS</code> in <code>django_tutorial_blog_ng/settings.py</code>.</p>
<p>You now need to delete all of the numbered migration files in <code>blogengine/migrations/</code>, and the relevant <code>.pyc</code> files, but NOT the directory or the <code>__init__.py</code> file. You can do so with this command on Linux or OS X:</p>
<pre><code class="hljs lang-bash singleline">$ rm blogengine/migrations/00*</code></pre>
<p>Next, we recreate our migrations with the following command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'blogengine'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0001_initial.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Category</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    - Create model Post</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    - Create model Tag</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    - Add field tags to post</td></table></code></pre>
<p>Then we run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Synchronize unmigrated apps: sitemaps, django_jenkins, debug_toolbar</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Apply all migrations: sessions, admin, sites, flatpages, contenttypes, auth, blogengine</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Synchronizing apps without migrations:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Creating tables...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Installing custom SQL...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Installing indexes...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Applying contenttypes.0001_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying auth.0001_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying admin.0001_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying sites.0001_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying blogengine.0001_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying flatpages.0001_initial... FAKED</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying sessions.0001_initial... FAKED</td></table></code></pre>
<p>Don’t worry too much if the output doesn’t look exactly the same as this - as long as it works, that’s the main thing.</p>
<p>Let’s run our test suite to ensure it works:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....FF.F.FFFFFF..............</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 385, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_create_post_without_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 417, <span class="hljs-keyword">in</span> test_create_post_without_tag</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: test_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 278, <span class="hljs-keyword">in</span> test_delete_category</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAIL: test_delete_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 346, <span class="hljs-keyword">in</span> test_delete_tag</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="37"></td><td>FAIL: test_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 255, <span class="hljs-keyword">in</span> test_edit_category</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="45"></td><td>FAIL: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 447, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="53"></td><td>FAIL: test_edit_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="55"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 323, <span class="hljs-keyword">in</span> test_edit_tag</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="61"></td><td>FAIL: test_login (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="63"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 183, <span class="hljs-keyword">in</span> test_login</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>AssertionError: 302 != 200</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="69"></td><td>FAIL: test_logout (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="71"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 214, <span class="hljs-keyword">in</span> test_logout</td><tr><td class="linenos" data-pseudo-content="73"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>AssertionError: 302 != 200</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="77"></td><td>Ran 29 tests <span class="hljs-keyword">in</span> 7.383s</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>FAILED (failures=9)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We have an issue here. A load of the tests for the admin interface now fail. If we now try running the dev server, we see this error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py runserver</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Performing system checks...</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>System check identified no issues (0 silenced).</td><tr><td class="linenos" data-pseudo-content="5"></td><td>September 28, 2014 - 20:16:47</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Django version 1.7, using settings <span class="hljs-string">'django_tutorial_blog_ng.settings'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Starting development server at http://127.0.0.1:8000/</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Quit the server with CONTROL-C.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Unhandled exception <span class="hljs-keyword">in</span> thread started by &lt;<span class="hljs-keyword">function</span> wrapper at 0x1024a5ed8&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/autoreload.py"</span>, line 222, <span class="hljs-keyword">in</span> wrapper</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    fn(*args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line 132, <span class="hljs-keyword">in</span> inner_run</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    handler = self.get_handler(*args, **options)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/runserver.py"</span>, line 25, <span class="hljs-keyword">in</span> get_handler</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    handler = super(Command, self).get_handler(*args, **options)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py"</span>, line 48, <span class="hljs-keyword">in</span> get_handler</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-built_in">return</span> get_internal_wsgi_application()</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py"</span>, line 66, <span class="hljs-keyword">in</span> get_internal_wsgi_application</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    sys.exc_info()[2])</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/servers/basehttp.py"</span>, line 56, <span class="hljs-keyword">in</span> get_internal_wsgi_application</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-built_in">return</span> import_string(app_path)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/module_loading.py"</span>, line 26, <span class="hljs-keyword">in</span> import_string</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    module = import_module(module_path)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.8_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py"</span>, line 37, <span class="hljs-keyword">in</span> import_module</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/django_tutorial_blog_ng/wsgi.py"</span>, line 14, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    from dj_static import Cling</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/dj_static.py"</span>, line 7, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    from django.core.handlers.base import get_path_info</td><tr><td class="linenos" data-pseudo-content="31"></td><td>django.core.exceptions.ImproperlyConfigured: WSGI application <span class="hljs-string">'django_tutorial_blog_ng.wsgi.application'</span> could not be loaded; Error importing module: <span class="hljs-string">'cannot import name get_path_info'</span></td></table></code></pre>
<p>Fortunately, the error above is easy to fix by upgrading <code>dj_static</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install dj_static --upgrade</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>That resolves the error in serving static files, but not the error with the admin. If you run the dev server, you’ll be able to see that the admin actually works fine. The problem is caused by the test client not following redirects in the admin. We can easily run just the admin tests with the following command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine.tests.AdminTest</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.FF.F.FFFFFF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 385, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_create_post_without_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 417, <span class="hljs-keyword">in</span> test_create_post_without_tag</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: test_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 278, <span class="hljs-keyword">in</span> test_delete_category</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAIL: test_delete_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 346, <span class="hljs-keyword">in</span> test_delete_tag</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="37"></td><td>FAIL: test_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 255, <span class="hljs-keyword">in</span> test_edit_category</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="45"></td><td>FAIL: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 447, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="53"></td><td>FAIL: test_edit_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="55"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 323, <span class="hljs-keyword">in</span> test_edit_tag</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="61"></td><td>FAIL: test_login (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="63"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 183, <span class="hljs-keyword">in</span> test_login</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>AssertionError: 302 != 200</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="69"></td><td>FAIL: test_logout (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="71"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 214, <span class="hljs-keyword">in</span> test_logout</td><tr><td class="linenos" data-pseudo-content="73"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>AssertionError: 302 != 200</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="77"></td><td>Ran 12 tests <span class="hljs-keyword">in</span> 3.283s</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>FAILED (failures=9)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s commit our changes so far first:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/ requirements.txt blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Upgraded to Django 1.7'</span></td></table></code></pre>
<p>Now let’s fix our tests. Here’s the amended version of the <code>AdminTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.client.logout()</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/category/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Create the new category</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="55"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="58"></td><td>            follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-comment"># Check new category now in database</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Edit the category</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/'</span> + str(category.pk) + <span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="78"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,</td><tr><td class="linenos" data-pseudo-content="79"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>            }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        <span class="hljs-comment"># Check category amended</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        only_category = all_categories[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="90"></td><td>        self.assertEquals(only_category.name, <span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertEquals(only_category.description, <span class="hljs-string">'The Perl programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="92"></td><td></td><tr><td class="linenos" data-pseudo-content="93"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="96"></td><td></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="99"></td><td></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        <span class="hljs-comment"># Delete the category</span></td><tr><td class="linenos" data-pseudo-content="101"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/'</span> + str(category.pk) + <span class="hljs-string">'/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="102"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="103"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="105"></td><td></td><tr><td class="linenos" data-pseudo-content="106"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="107"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="108"></td><td></td><tr><td class="linenos" data-pseudo-content="109"></td><td>        <span class="hljs-comment"># Check category deleted</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="111"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">0</span>)</td><tr><td class="linenos" data-pseudo-content="112"></td><td></td><tr><td class="linenos" data-pseudo-content="113"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="114"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="115"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="116"></td><td></td><tr><td class="linenos" data-pseudo-content="117"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="118"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="119"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="120"></td><td></td><tr><td class="linenos" data-pseudo-content="121"></td><td>        <span class="hljs-comment"># Create the new tag</span></td><tr><td class="linenos" data-pseudo-content="122"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="123"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,</td><tr><td class="linenos" data-pseudo-content="124"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="125"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="126"></td><td>            follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="127"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="128"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="129"></td><td></td><tr><td class="linenos" data-pseudo-content="130"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="131"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="132"></td><td></td><tr><td class="linenos" data-pseudo-content="133"></td><td>        <span class="hljs-comment"># Check new tag now in database</span></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="135"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="136"></td><td></td><tr><td class="linenos" data-pseudo-content="137"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="138"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="139"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="140"></td><td></td><tr><td class="linenos" data-pseudo-content="141"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="142"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="143"></td><td></td><tr><td class="linenos" data-pseudo-content="144"></td><td>        <span class="hljs-comment"># Edit the tag</span></td><tr><td class="linenos" data-pseudo-content="145"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/'</span> + str(tag.pk) + <span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="146"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,</td><tr><td class="linenos" data-pseudo-content="147"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="148"></td><td>            }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="149"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="150"></td><td></td><tr><td class="linenos" data-pseudo-content="151"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="152"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="153"></td><td></td><tr><td class="linenos" data-pseudo-content="154"></td><td>        <span class="hljs-comment"># Check tag amended</span></td><tr><td class="linenos" data-pseudo-content="155"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="156"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="157"></td><td>        only_tag = all_tags[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="158"></td><td>        self.assertEquals(only_tag.name, <span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="159"></td><td>        self.assertEquals(only_tag.description, <span class="hljs-string">'The Perl programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="160"></td><td></td><tr><td class="linenos" data-pseudo-content="161"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="162"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="163"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="164"></td><td></td><tr><td class="linenos" data-pseudo-content="165"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="166"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="167"></td><td></td><tr><td class="linenos" data-pseudo-content="168"></td><td>        <span class="hljs-comment"># Delete the tag</span></td><tr><td class="linenos" data-pseudo-content="169"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/'</span> + str(tag.pk) + <span class="hljs-string">'/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="170"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="171"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="172"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="173"></td><td></td><tr><td class="linenos" data-pseudo-content="174"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="175"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="176"></td><td></td><tr><td class="linenos" data-pseudo-content="177"></td><td>        <span class="hljs-comment"># Check tag deleted</span></td><tr><td class="linenos" data-pseudo-content="178"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="179"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">0</span>)</td><tr><td class="linenos" data-pseudo-content="180"></td><td></td><tr><td class="linenos" data-pseudo-content="181"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="182"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="183"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="184"></td><td></td><tr><td class="linenos" data-pseudo-content="185"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="186"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="187"></td><td></td><tr><td class="linenos" data-pseudo-content="188"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="189"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="190"></td><td></td><tr><td class="linenos" data-pseudo-content="191"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="192"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="193"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="194"></td><td></td><tr><td class="linenos" data-pseudo-content="195"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="196"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="197"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="198"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="199"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="200"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="201"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="202"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="203"></td><td>            <span class="hljs-string">'category'</span>: str(category.pk),</td><tr><td class="linenos" data-pseudo-content="204"></td><td>            <span class="hljs-string">'tags'</span>: str(tag.pk)</td><tr><td class="linenos" data-pseudo-content="205"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="206"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="207"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="208"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="209"></td><td></td><tr><td class="linenos" data-pseudo-content="210"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="211"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="212"></td><td></td><tr><td class="linenos" data-pseudo-content="213"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="214"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="215"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="216"></td><td></td><tr><td class="linenos" data-pseudo-content="217"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post_without_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="218"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="219"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="220"></td><td></td><tr><td class="linenos" data-pseudo-content="221"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="222"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="223"></td><td></td><tr><td class="linenos" data-pseudo-content="224"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="225"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="226"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="227"></td><td></td><tr><td class="linenos" data-pseudo-content="228"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="229"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="230"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="231"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="232"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="233"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="234"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="235"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="236"></td><td>            <span class="hljs-string">'category'</span>: str(category.pk)</td><tr><td class="linenos" data-pseudo-content="237"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="238"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="239"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="240"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="241"></td><td></td><tr><td class="linenos" data-pseudo-content="242"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="243"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="244"></td><td></td><tr><td class="linenos" data-pseudo-content="245"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="246"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="247"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="248"></td><td></td><tr><td class="linenos" data-pseudo-content="249"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="250"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="251"></td><td>        post = PostFactory()</td><tr><td class="linenos" data-pseudo-content="252"></td><td></td><tr><td class="linenos" data-pseudo-content="253"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="254"></td><td>        category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="255"></td><td></td><tr><td class="linenos" data-pseudo-content="256"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="257"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="258"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="259"></td><td></td><tr><td class="linenos" data-pseudo-content="260"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="261"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="262"></td><td></td><tr><td class="linenos" data-pseudo-content="263"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="264"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/'</span> + str(post.pk) + <span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="265"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="266"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="267"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="268"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="269"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,</td><tr><td class="linenos" data-pseudo-content="270"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="271"></td><td>            <span class="hljs-string">'category'</span>: str(category.pk),</td><tr><td class="linenos" data-pseudo-content="272"></td><td>            <span class="hljs-string">'tags'</span>: str(tag.pk)</td><tr><td class="linenos" data-pseudo-content="273"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="274"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="275"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="276"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="277"></td><td></td><tr><td class="linenos" data-pseudo-content="278"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="279"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="280"></td><td></td><tr><td class="linenos" data-pseudo-content="281"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="282"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="283"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="284"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="285"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="286"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="287"></td><td></td><tr><td class="linenos" data-pseudo-content="288"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="289"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="290"></td><td>        post = PostFactory()</td><tr><td class="linenos" data-pseudo-content="291"></td><td></td><tr><td class="linenos" data-pseudo-content="292"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="293"></td><td>        tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="294"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="295"></td><td></td><tr><td class="linenos" data-pseudo-content="296"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="297"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="298"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="299"></td><td></td><tr><td class="linenos" data-pseudo-content="300"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="301"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="302"></td><td></td><tr><td class="linenos" data-pseudo-content="303"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="304"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/'</span> + str(post.pk) + <span class="hljs-string">'/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="305"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="306"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="307"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="308"></td><td></td><tr><td class="linenos" data-pseudo-content="309"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="310"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="311"></td><td></td><tr><td class="linenos" data-pseudo-content="312"></td><td>        <span class="hljs-comment"># Check post deleted</span></td><tr><td class="linenos" data-pseudo-content="313"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="314"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>There are two main issues here. The first is that when we try to edit or delete an existing item, or refer to it when creating something else, we can no longer rely on the number representing the primary key being set to 1. So we need to specifically obtain this, rather than hard-coding it to 1. Therefore, whenever we pass through a number to represent an item (with the exception of the site, but including tags, categories and posts), we need to instead fetch its primary key and return it. So, above where we try to delete a post, we replace <code>1</code> with <code>str(post.pk)</code>. This will solve a lot of the problems. As there’s a lot of them, I won’t go through each one, but you can see the entire class above for reference, and if you’ve followed along so far, you shouldn’t have any problems.</p>
<p>The other issue we need to fix is the login and logout tests. We simply add <code>follow=True</code> to these to ensure that the test client follows the redirects.</p>
<p>Let’s run our tests to make sure they pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.............................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 29 tests <span class="hljs-keyword">in</span> 8.210s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>With that done, you can commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Fixed broken tests'</span></td></table></code></pre>
<p>Don’t forget to deploy your changes:</p>
<pre><code class="hljs lang-bash singleline">$ fab deploy</code></pre>
<p>Our blog has now been happily migrated over to Django 1.7!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 8]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/08/31/django-blog-tutorial-the-next-generation-part-8/</guid>
            <pubDate>Sun, 31 Aug 2014 21:00:00 GMT</pubDate>
            <description><![CDATA[<p>Hello again! In our final instalment, we’ll wrap up our blog by:</p>
<ul>
<li>Implementing a sitemap</li>
<li>Optimising and tidying up the site</li>
<li>Creating a Fabric task for easier deployment</li>
</ul>
<p>I’ll also cover development tools and practices that can make using Django easier. But first there’s a few housekeeping tasks that need doing…</p>
<p>Don’t forget to activate your virtualenv - you should know how to do this off by heart by now!</p>
<h1 id="upgrading-django">Upgrading Django</h1>
<p>At the time of writing, Django 1.7 is due any day now, but it’s not out yet so I won’t cover it. The biggest change is the addition of a built-in migration system, but switching from South to this is well-documented. When Django 1.7 comes out, it shouldn’t be difficult to upgrade to it - because we have good test coverage, we shouldn’t have much trouble catching errors.</p>
<p>However, Django 1.6.6 was recently released, and we need to upgrade to it. Just enter the following command to upgrade:</p>
<pre><code class="hljs lang-bash singleline">$ pip install Django --upgrade</code></pre>
<p>Then add it to your <code>requirements.txt</code>:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>Then commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Upgraded Django version'</span></td></table></code></pre>
<h1 id="implementing-a-sitemap">Implementing a sitemap</h1>
<p>Creating a sitemap for your blog is a good idea - it can be submitted to search engines, so that they can easily find your content. With Django, it’s pretty straightforward too.</p>
<p>First, let’s create a test for our sitemap. Add the following code at the end of <code>tests.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SitemapTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_sitemap</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create a post</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post = PostFactory()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create a flat page</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        page = FlatPageFactory()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Get sitemap</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.get(<span class="hljs-string">'/sitemap.xml'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Check post is present in sitemap</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        self.assertTrue(<span class="hljs-string">'my-first-post'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Check page is present in sitemap</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertTrue(<span class="hljs-string">'/about/'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Run it, and you should see the test fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...........................F</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_sitemap (blogengine.tests.SitemapTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 847, <span class="hljs-keyword">in</span> test_sitemap</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 28 tests <span class="hljs-keyword">in</span> 6.873s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Now, let’s implement our sitemap. The sitemap application comes with Django, and needs to be activated in your settings file, under <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'django.contrib.sitemaps'</span>,</code></pre>
<p>Next, let’s think about what content we want to include in the sitemap. We want to index our flat pages and our blog posts, so our sitemap should reflect that. Create a new file at <code>blogengine/sitemap.py</code> and enter the following text:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.sitemaps <span class="hljs-keyword">import</span> Sitemap</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostSitemap</span><span class="hljs-params">(Sitemap)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    changefreq = <span class="hljs-string">"always"</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    priority = <span class="hljs-number">0.5</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lastmod</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> obj.pub_date</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatpageSitemap</span><span class="hljs-params">(Sitemap)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    changefreq = <span class="hljs-string">"always"</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    priority = <span class="hljs-number">0.5</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> FlatPage.objects.all()</td></table></code></pre>
<p>We define two sitemaps, one for all the posts, and the other for all the flat pages. Note that this works in a very similar way to the syndication framework.</p>
<p>Next, we amend our URLs. Add the following text after the existing imports in your URL file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.sitemaps.views <span class="hljs-keyword">import</span> sitemap</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> blogengine.sitemap <span class="hljs-keyword">import</span> PostSitemap, FlatpageSitemap</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Define sitemaps</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>sitemaps = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'posts'</span>: PostSitemap,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'pages'</span>: FlatpageSitemap</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Then add the following after the existing routes:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Sitemap</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r'^sitemap\.xml$'</span>, sitemap, {<span class="hljs-string">'sitemaps'</span>: sitemaps},</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            name=<span class="hljs-string">'django.contrib.sitemaps.views.sitemap'</span>),</td></table></code></pre>
<p>Here we define what sitemaps we’re going to use, and we define a URL for them. It’s pretty straightforward to use.</p>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>............................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 28 tests <span class="hljs-keyword">in</span> 6.863s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>And done! Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ django_tutorial_blog_ng/settings.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented a sitemap'</span></td></table></code></pre>
<h1 id="fixing-test-coverage">Fixing test coverage</h1>
<p>Our blog is now feature-complete, but there are a few gaps in test coverage, so we’ll fix them. If, like me, you’re using Coveralls.io, <a href="https://coveralls.io/builds/1151177">you can easily see via their web interface where there are gaps in the coverage</a>.</p>
<p>Now, our gaps are all in our view file - if you <a href="https://coveralls.io/files/280228813">take a look at my build</a>, you can easily identify the gaps as they’re marked in red.</p>
<p>The first gap is where a tag does not exist. Interestingly, if we look at the code in the view, we can see that some of it is redundant:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> get_object_or_404(Tag, slug=slug)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged  %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> obj.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            tag = Tag.objects.get(slug=obj.slug)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">return</span> tag.post_set.all()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td></table></code></pre>
<p>Under the <code>items</code> function, we check to see if the tag exists. However, under <code>get_object</code> we can see that if the object didn’t exist, it would already have returned a 404 error. We can therefore safely amend <code>items</code> to not check, since that try statement will never fail:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> get_object_or_404(Tag, slug=slug)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged  %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> obj.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        tag = Tag.objects.get(slug=obj.slug)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">return</span> tag.post_set.all()</td></table></code></pre>
<p>The other two gaps are in our search view - we never get an empty result for the search in the following section:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSearchResults</span><span class="hljs-params">(request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Search for a post by title or text</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Get the query data</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    query = request.GET.get(<span class="hljs-string">'q'</span>, <span class="hljs-string">''</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    page = request.GET.get(<span class="hljs-string">'page'</span>, <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Query the database</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">if</span> query:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">else</span>:</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        results = <span class="hljs-keyword">None</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    pages = Paginator(results, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Get specified page</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        returned_page = pages.page(page)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">except</span> EmptyPage:</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        returned_page = pages.page(pages.num_pages)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment"># Display the search results</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'blogengine/search_post_list.html'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                              {<span class="hljs-string">'page_obj'</span>: returned_page,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                               <span class="hljs-string">'object_list'</span>: returned_page.object_list,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                               <span class="hljs-string">'search'</span>: query})</td></table></code></pre>
<p>So replace it with this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSearchResults</span><span class="hljs-params">(request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Search for a post by title or text</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Get the query data</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    query = request.GET.get(<span class="hljs-string">'q'</span>, <span class="hljs-string">''</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    page = request.GET.get(<span class="hljs-string">'page'</span>, <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Query the database</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    pages = Paginator(results, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Get specified page</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        returned_page = pages.page(page)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">except</span> EmptyPage:</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        returned_page = pages.page(pages.num_pages)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-comment"># Display the search results</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'blogengine/search_post_list.html'</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>                              {<span class="hljs-string">'page_obj'</span>: returned_page,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>                               <span class="hljs-string">'object_list'</span>: returned_page.object_list,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                               <span class="hljs-string">'search'</span>: query})</td></table></code></pre>
<p>We don’t need to check whether <code>query</code> is defined because if <code>q</code> is left blank, the value of <code>query</code> will be an empty string, so we may as well pull out the redundant code.</p>
<p>Finally, the other gap is for when a user tries to get an empty search page (eg, page two of something with five or less results). So let’s add another test to our <code>SearchViewTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_failing_search</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Search for something that is not present</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        response = self.client.get(<span class="hljs-string">'/search?q=wibble'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-comment"># Try to get nonexistent second page</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        response = self.client.get(<span class="hljs-string">'/search?q=wibble&amp;page=2'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Run our tests and check the coverage:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ coverage run --include=<span class="hljs-string">"blogengine/*"</span> --omit=<span class="hljs-string">"blogengine/migrations/*"</span> manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ coverage html</td></table></code></pre>
<p>If you open <code>htmlcov/index.html</code> in your browser, you should see that the test coverage is back up to 100%. With that done, it’s time to commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Fixed gaps in coverage'</span></td></table></code></pre>
<p>Remember, it’s not always possible to achieve 100% test coverage, and you shouldn’t worry too much about it if it’s not possible - <a href="http://nedbatchelder.com/code/coverage/excluding.html">it’s possible to ignore code</a> if necessary. However, it’s a good idea to aim for 100%.</p>
<h1 id="using-fabric-for-deployment">Using Fabric for deployment</h1>
<p>Next we’ll cover using Fabric, a handy tool for deploying your changes (any pretty much any other task you want to automate). First, you need to install it:</p>
<pre><code class="hljs lang-bash singleline">$ pip install Fabric</code></pre>
<p>If you have any problems installing it, you should be able to resolve them via Google - most of them are likely to be absent libraries that Fabric depends upon. Once it’s installed, add it to your <code>requirements.tzt</code>:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>Next, create a file called <code>fabfile.py</code> and enter the following text:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">#!/usr/bin/env python</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> fabric.api <span class="hljs-keyword">import</span> local</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy</span><span class="hljs-params">()</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    Deploy the latest version to Heroku</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment"># Push changes to master</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    local(<span class="hljs-string">"git push origin master"</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment"># Push changes to Heroku</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    local(<span class="hljs-string">"git push heroku master"</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment"># Run migrations on Heroku</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    local(<span class="hljs-string">"heroku run python manage.py migrate"</span>)</td></table></code></pre>
<p>Now, all this file does is push our changes to Github (or wherever else your repository is hosted) and to Heroku, and runs your migrations. It’s not a terribly big task anyway, but it’s handy to have it in place. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add fabfile.py requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Fabric task for deployment'</span></td></table></code></pre>
<p>Then, let’s try it out:</p>
<pre><code class="hljs lang-bash singleline">$ fab deploy</code></pre>
<p>There, wasn’t that more convenient? Fabric is much more powerful than this simple demonstration indicates, and can run tasks on remote servers via SSH easily. I recommend you take a look at the <a href="http://www.fabfile.org/">documentation</a> to see what else you can do with it. If you’re hosting your site on a VPS, you will probably find Fabric indispensable, as you will need to restart the application every time you push up a new revision.</p>
<h1 id="tidying-up">Tidying up</h1>
<p>We want our blog application to play nicely with other Django apps. For instance, say you’re working on a new site that includes a blogging engine. Wouldn’t it make sense to just be able to drop in this blogging engine and have it work immediately? At the moment, some of our URL’s are hard-coded, so we may have problems in doing so. Let’s fix that.</p>
<p>First we’ll amend our tests. Add this at the top of the tests file:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</code></pre>
<p>Next, replace every instance of this:</p>
<pre><code class="hljs lang-python singleline">        response = self.client.get(<span class="hljs-string">'/'</span>)</code></pre>
<p>with this:</p>
<pre><code class="hljs lang-python singleline">response = self.client.get(reverse(<span class="hljs-string">'blogengine:index'</span>))</code></pre>
<p>Then, rewrite the calls to the search route. For instance, this:</p>
<pre><code class="hljs lang-python singleline">        response = self.client.get(<span class="hljs-string">'/search?q=first'</span>)</code></pre>
<p>should become this:</p>
<pre><code class="hljs lang-python singleline">        response = self.client.get(reverse(<span class="hljs-string">'blogengine:search'</span>) + <span class="hljs-string">'?q=first'</span>)</code></pre>
<p>I’ll leave changing these as an exercise for the reader, but check the repository if you get stuck.</p>
<p>Next, we need to assign a namespace to our app’s routes:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.autodiscover()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Examples:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Blog URLs</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'blogengine.urls'</span>, namespace=<span class="hljs-string">"blogengine"</span>)),</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># Flat pages</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'django.contrib.flatpages.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="18"></td><td>)</td></table></code></pre>
<p>We then assign names to our routes in the app’s <code>urls.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed, CategoryPostsFeed, TagPostsFeed, getSearchResults</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.sitemaps.views <span class="hljs-keyword">import</span> sitemap</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> blogengine.sitemap <span class="hljs-keyword">import</span> PostSitemap, FlatpageSitemap</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-comment"># Define sitemaps</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>sitemaps = {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">'posts'</span>: PostSitemap,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-string">'pages'</span>: FlatpageSitemap</td><tr><td class="linenos" data-pseudo-content="12"></td><td>}</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        name=<span class="hljs-string">'index'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment"># Individual posts</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        name=<span class="hljs-string">'post'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment"># Categories</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        model=Category,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        name=<span class="hljs-string">'category'</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-comment"># Tags</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        model=Tag,</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        name=<span class="hljs-string">'tag'</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        ),</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-comment"># Post RSS feed</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),</td><tr><td class="linenos" data-pseudo-content="49"></td><td></td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-comment"># Category RSS feed</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    url(<span class="hljs-string">r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryPostsFeed()),</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-comment"># Tag RSS feed</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>    url(<span class="hljs-string">r'^feeds/posts/tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagPostsFeed()),</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-comment"># Search posts</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    url(<span class="hljs-string">r'^search'</span>, getSearchResults, name=<span class="hljs-string">'search'</span>),</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-comment"># Sitemap</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>    url(<span class="hljs-string">r'^sitemap\.xml$'</span>, sitemap, {<span class="hljs-string">'sitemaps'</span>: sitemaps},</td><tr><td class="linenos" data-pseudo-content="61"></td><td>            name=<span class="hljs-string">'django.contrib.sitemaps.views.sitemap'</span>),</td><tr><td class="linenos" data-pseudo-content="62"></td><td>)</td></table></code></pre>
<p>You also need to amend two of your templates:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"alternate"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/rss+xml"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Blog posts"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span> &gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> staticfiles %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s, id</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                js = d.createElement(s); js.id = id;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>                fjs.parentNode.insertBefore(js, fjs);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">url</span></span> 'blogengine:index' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav navbar-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="54"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_flatpages</span> <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="55"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="56"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="58"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/search"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"GET"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-form navbar-left"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"q"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Search..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> header %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="73"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="77"></td><td></td><tr><td class="linenos" data-pseudo-content="78"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="80"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container footer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">now</span></span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td></td><tr><td class="linenos" data-pseudo-content="91"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="92"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="handlebars"><span class="xml">"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">\</span>/<span class="hljs-attr">script</span>&gt;</span>')</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="98"></td><td>            (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b,o,i,l,e,r</span>)</span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=</td><tr><td class="linenos" data-pseudo-content="99"></td><td>            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</td><tr><td class="linenos" data-pseudo-content="100"></td><td>            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="101"></td><td>            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;</td><tr><td class="linenos" data-pseudo-content="102"></td><td>            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));</td><tr><td class="linenos" data-pseudo-content="103"></td><td>            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="105"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="106"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.category %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.tags %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-success"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pager"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">url</span></span> 'blogengine:search' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">?page=</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&amp;q=</span></span></span><span class="hljs-template-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">url</span></span> 'blogengine:search' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">?page=</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&amp;q=</span></span></span><span class="hljs-template-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.............................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 29 tests <span class="hljs-keyword">in</span> 10.456s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>And commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use named routes'</span></td></table></code></pre>
<h1 id="debugging-django">Debugging Django</h1>
<p>There are a number of handy ways to debug Django applications. One of the simplest is to use the Python debugger. To use it, just enter the following lines at the point you want to break at:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> pdb</td><tr><td class="linenos" data-pseudo-content="2"></td><td>pdb.set_trace()</td></table></code></pre>
<p>Now, whenever that line of code is run, you’ll be dropped into an interactive shell that lets you play around to find out what’s going wrong. However, it doesn’t offer autocompletion, so we’ll install <code>ipdb</code>, which is an improved version:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install ipdb</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Now you can use <code>ipdb</code> in much the same way as you would use <code>pdb</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> ipdb</td><tr><td class="linenos" data-pseudo-content="2"></td><td>ipdb.set_trace()</td></table></code></pre>
<p>Now, <code>ipdb</code> is very useful, but it isn’t much help for profiling your application. For that you need the Django Debug Toolbar. Run the following commands:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install django-debug-toolbar</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Then add the following line to <code>INSTALLED_APPS</code> in your settings file:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'debug_toolbar'</span>,</code></pre>
<p>Then, try running the development server, and you’ll see a toolbar on the right-hand side of the screen that allows you to view some useful data about your page. For instance, you’ll notice a field called <code>SQL</code> - this contains details of the queries carried out when building the page. To actually see the queries carried out, you’ll want to disable caching in your settings file by commenting out all the constants that start with <code>CACHE</code>.</p>
<p>We won’t go into using the toolbar to optimise queries, but using this, you can easily see what queries are being executed on a specific page, how long they take, and the values they return. Sometimes, you may need to optimise a slow query - in this case, Django allows you to drop down to writing raw SQL if necessary.</p>
<p>Note that if you’re running Django in production, you should set <code>DEBUG</code> to <code>False</code> as otherwise it gives rather too much information to potential attackers, and with Django Debug Toolbar installed, that’s even more important.</p>
<p>Please also note that when you disable debug mode, Django no longer handles static files automatically, so you’ll need to run <code>python manage.py collectstatic</code> and commit the <code>staticfiles</code> directory.</p>
<p>Once you’ve disabled debug mode, collected the static files, and re-enables caching, you can commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Installed debugging tools'</span></td></table></code></pre>
<h1 id="optimising-static-files">Optimising static files</h1>
<p>We want our blog to get the best SEO results it can, so making it fast is essential. One of the simplest things you can do is to concatenate and minify static assets such as CSS and JavaScript. There are numerous ways to do this, but I generally use Grunt. Let’s set up a Grunt config to concatenate and minify our CSS and JavaScript.</p>
<p>You’ll need to have Node.js installed on your development machine for this. Then, you need to install the Grunt command-line interface:</p>
<pre><code class="hljs lang-bash singleline">$ sudo npm install -g grunt-cli</code></pre>
<p>With that done, we need to create a <code>package.json</code> file. You can create one using the command <code>npm init</code>. Here’s mine:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"django_tutorial_blog_ng"</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Django Tutorial Blog NG ======================="</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-attr">"scripts"</span>: {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-attr">"repository"</span>: {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"git"</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://github.com/matthewbdaly/django_tutorial_blog_ng.git"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  <span class="hljs-attr">"bugs"</span>: {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://github.com/matthewbdaly/django_tutorial_blog_ng/issues"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-attr">"homepage"</span>: <span class="hljs-string">"https://github.com/matthewbdaly/django_tutorial_blog_ng"</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>}</td></table></code></pre>
<p>Feel free to amend  it as you see fit.</p>
<p>Next we install Grunt and the required plugins:</p>
<pre><code class="hljs lang-bash singleline">$ npm install grunt grunt-contrib-cssmin grunt-contrib-concat grunt-contrib-uglify --save-dev</code></pre>
<p>We now need to create a Gruntfile for our tasks:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">grunt</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">    'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    grunt.initConfig({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-attr">concat</span>: {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-attr">dist</span>: {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-attr">src</span>: [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                    <span class="hljs-string">'blogengine/static/bower_components/bootstrap/dist/css/bootstrap.css'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    <span class="hljs-string">'blogengine/static/bower_components/bootstrap/dist/css/bootstrap-theme.css'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    <span class="hljs-string">'blogengine/static/css/code.css'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                    <span class="hljs-string">'blogengine/static/css/main.css'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                ],</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                <span class="hljs-attr">dest</span>: <span class="hljs-string">'blogengine/static/css/style.css'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-attr">uglify</span>: {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-attr">dist</span>: {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>                <span class="hljs-attr">src</span>: [</td><tr><td class="linenos" data-pseudo-content="19"></td><td>                    <span class="hljs-string">'blogengine/static/bower_components/jquery/jquery.js'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>                    <span class="hljs-string">'blogengine/static/bower_components/bootstrap/dist/js/bootstrap.js'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>                ],</td><tr><td class="linenos" data-pseudo-content="22"></td><td>                <span class="hljs-attr">dest</span>: <span class="hljs-string">'blogengine/static/js/all.min.js'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-attr">cssmin</span>: {</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-attr">dist</span>: {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                <span class="hljs-attr">src</span>: <span class="hljs-string">'blogengine/static/css/style.css'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                <span class="hljs-attr">dest</span>: <span class="hljs-string">'blogengine/static/css/style.min.css'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-concat'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-uglify'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-cssmin'</span>);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    grunt.registerTask(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'concat'</span>, <span class="hljs-string">'uglify'</span>, <span class="hljs-string">'cssmin'</span>]);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>};</td></table></code></pre>
<p>You’ll also need to change the paths in your base HTML file to point to the minified versions:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"alternate"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/rss+xml"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Blog posts"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span> &gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> staticfiles %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/style.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s, id</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>                js = d.createElement(s); js.id = id;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;</td><tr><td class="linenos" data-pseudo-content="32"></td><td>                fjs.parentNode.insertBefore(js, fjs);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">url</span></span> 'blogengine:index' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav navbar-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="48"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_flatpages</span> <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="49"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="50"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="52"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/search"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"GET"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-form navbar-left"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"q"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Search..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> header %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="67"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="74"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container footer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">now</span></span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'js/all.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="89"></td><td>            (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b,o,i,l,e,r</span>)</span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=</td><tr><td class="linenos" data-pseudo-content="90"></td><td>            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</td><tr><td class="linenos" data-pseudo-content="91"></td><td>            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="92"></td><td>            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;</td><tr><td class="linenos" data-pseudo-content="93"></td><td>            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));</td><tr><td class="linenos" data-pseudo-content="94"></td><td>            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);</td><tr><td class="linenos" data-pseudo-content="95"></td><td>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="96"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Now, run the Grunt task:</p>
<pre><code class="hljs lang-bash singleline">$ grunt</code></pre>
<p>And collect the static files:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py collectstatic</code></pre>
<p>You’ll also want to add your <code>node_modules</code> folder to your <code>gitignore</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>*.pyc</td><tr><td class="linenos" data-pseudo-content="3"></td><td>db.sqlite3</td><tr><td class="linenos" data-pseudo-content="4"></td><td>reports/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>htmlcov/</td><tr><td class="linenos" data-pseudo-content="6"></td><td>.coverage</td><tr><td class="linenos" data-pseudo-content="7"></td><td>node_modules/</td></table></code></pre>
<p>Then commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Optimised static assets'</span></td></table></code></pre>
<p>Now, our <code>package.json</code> will cause a problem - it will mean that this app is mistakenly identified as a Node.js app. To prevent this, create the <code>.slugignore</code> file:</p>
<pre><code class="hljs lang-bash singleline">package.json</code></pre>
<p>Then commit your changes and push them up:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .slugignore</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added slugignore'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ fab deploy</td></table></code></pre>
<p>If you check, your site should now be loading the minified versions of the static files.</p>
<p>That’s our site done! As usual I’ve tagged the final commit with <code>lesson-8</code>.</p>
<p>Sadly, that’s our final instalment over with! I hope you’ve enjoyed these tutorials, and I look forward to seeing what you create with them.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 7]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/08/25/django-blog-tutorial-the-next-generation-part-7/</guid>
            <pubDate>Mon, 25 Aug 2014 16:15:01 GMT</pubDate>
            <description><![CDATA[<p>Hello once again! In this instalment we’ll cover:</p>
<ul>
<li>Caching your content with Memcached to improve your site’s performance</li>
<li>Refactoring and simplifying our tests</li>
<li>Implementing additional feeds</li>
<li>Creating a simple search engine</li>
</ul>
<p>Don’t forget to activate your virtualenv:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<p>Now let’s get started!</p>
<h1 id="memcached">Memcached</h1>
<p>If you frequent (or used to frequent) social media sites like Reddit, Slashdot or Digg, you may be familiar with something called variously the Digg or Slashdot effect, whereby if a page gets submitted to a social media site, and subsequently becomes popular, it can be hit by a huge number of HTTP requests in a very short period of time, slowing it down or even taking the server down completely.</p>
<p>Now, as a general rule of thumb, for most dynamic websites such as blogs, the bottleneck is not the web server or the programming language, but the database. If you have a lot of people hitting the same page over and over again in quick succession, then you’re essentially running the same query over and over again and getting the same result each time, which is expensive in terms of processing power. What you need to be able to do is cache the results of the query in memory for a given period of time so that the number of queries is reduced.</p>
<p>That’s where Memcached comes in. It’s a simple key-value store that allows you to store values in memory for a given period of time so that they can be retrieved without having to query the database. Memcached is a very common choice for caching, and is by far the fastest and most efficient type of cache available for Django. It’s also available on Heroku’s free tier.</p>
<p>Django has a very powerful caching framework that supports numerous types of cache in addition to Memcached, such as:</p>
<ul>
<li>Database caching</li>
<li>Filesystem caching</li>
<li>Local memory caching</li>
</ul>
<p>There are also third-party backends for using other caching systems such as Redis.</p>
<p>Now, the cache can be used in a number of different ways. You can cache only certain parts of your site if you wish. However, because our site is heavily content-driven, we should be pretty safe to use the per-site cache, which is the simplest way to set up caching.</p>
<p>In order to set up Memcached, there’s a couple of Python libraries we’ll need. If you want to install them locally, however, you’ll need to install both memcached and libmemcached (on Ubuntu, the packages you need are called <code>memcached</code> and <code>libmemcached-dev</code>) on your development machine. If you don’t want to do this, then just copy and paste these lines into <code>requirements.txt</code> instead:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>django-pylibmc-sasl==0.2.4</td><tr><td class="linenos" data-pseudo-content="2"></td><td>pylibmc==1.3.0</td></table></code></pre>
<p>If you are happy to install these dependencies locally, then run this command once memcached and libmemcached are installed:</p>
<pre><code class="hljs lang-bash singleline">$ pip install pylibmc django-pylibmc-sasl</code></pre>
<p>With that done let’s configure Memcached. Open up the settings file and add the following at the bottom:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cache</span><span class="hljs-params">()</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">import</span> os</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    os.environ[<span class="hljs-string">'MEMCACHE_SERVERS'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_SERVERS'</span>].replace(<span class="hljs-string">','</span>, <span class="hljs-string">';'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    os.environ[<span class="hljs-string">'MEMCACHE_USERNAME'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_USERNAME'</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    os.environ[<span class="hljs-string">'MEMCACHE_PASSWORD'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_PASSWORD'</span>]</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django_pylibmc.memcached.PyLibMCCache'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">'TIMEOUT'</span>: <span class="hljs-number">300</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-string">'BINARY'</span>: <span class="hljs-keyword">True</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-string">'OPTIONS'</span>: { <span class="hljs-string">'tcp_nodelay'</span>: <span class="hljs-keyword">True</span> }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  <span class="hljs-keyword">except</span>:</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django.core.cache.backends.locmem.LocMemCache'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>CACHES = get_cache()</td><tr><td class="linenos" data-pseudo-content="23"></td><td>CACHE_MIDDLEWARE_ALIAS = <span class="hljs-string">'default'</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>CACHE_MIDDLEWARE_SECONDS = <span class="hljs-number">300</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>CACHE_MIDDLEWARE_KEY_PREFIX = <span class="hljs-string">''</span></td></table></code></pre>
<p>Then add the following to <code>MIDDLEWARE_CLASSES</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-string">'django.middleware.cache.UpdateCacheMiddleware'</span>,</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.middleware.common.CommonMiddleware'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</td></table></code></pre>
<p>That’s it! The first section configures the application to use Memcached to cache the content when running on Heroku, and sets some configuration parameters, while the second  section tells Django to use the per-site cache in order to cache all the site content.</p>
<p>Now, Heroku doesn’t include Memcached by default - instead it’s available as an add-on called Memcachier. To use add-ons you need to set up a credit card for billing. We will set it up to use the free developer plan, but if you outgrow this you can easily switch to a paid plan. To add Memcachier, run this command:</p>
<pre><code class="hljs lang-bash singleline">$ heroku addons:add memcachier:dev</code></pre>
<p>Please note that Memcachier can take a few minutes to get set up, so you may want to leave it a little while between adding it and pushing up your changes. Now we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt django_tutorial_blog_ng/settings.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented caching with Memcached'</span></td></table></code></pre>
<p>Then we’ll push them up to our remote repository and to Heroku:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git push origin master</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git push heroku master</td></table></code></pre>
<p>And that’s all you need to do to set up Memcached. In addition to storing your query results in Memcached, enabling the caching framework in Django will also set various HTTP headers to enable web proxies and browsers to cache content for an appropriate length of time. If you open up your browser’s developer tools and compare the response headers for your homepage on the latest version of the code with the previous version, you’ll notice that a number of additional headers appear, including <code>Cache-Control</code>, <code>Expires</code> and <code>Last-Modified</code>. These tell web browsers and web proxies how often to request the latest version of the HTML document, in order to help you reduce the bandwidth used.</p>
<p>As you can see, for a site like this where you are the only person adding content, it’s really easy to implement caching with Django, and for a blog there’s very little reason not to do it. If you’re not using Heroku and are instead hosting your site on a VPS, then the configuration will be somewhat different - see <a href="https://docs.djangoproject.com/en/dev/topics/cache/#memcached">here</a> for details. You can also find information on using other cache backends on the same page.</p>
<p>That isn’t all you can do to speed up your site. Heroku doesn’t seem to be very good for serving static files, and if your site is attracting a lot of traffic you might want to host your static files elsewhere, such as on Amazon’s S3 service. Doing so is outside the scope of this tutorial, but for that use case, you should check out <a href="http://django-storages.readthedocs.org/en/latest/index.html">django-storages</a>.</p>
<h1 id="clearing-the-cache-automatically">Clearing the cache automatically</h1>
<p>There is one issue with this implementation. As it is right now, if you view the home page, add a post, then reload the page, you may not see the new post immediately because the cache will continue serving the old version until it has expired. That behaviour is less than ideal - we would like the cache to be cleared automatically when a new post gets added so that users will see the new version immediately. That response will still be cached afterwards, so it only means one extra query.</p>
<p>This is the ideal place to introduce <a href="https://docs.djangoproject.com/en/dev/topics/signals/">signals</a>. Signals are a way to carry out a given action when an event takes place. In our case, we plan to clear the cache when a post is saved (either created or updated).</p>
<p>Note that as we’ll be testing the behaviour of the cache at this point, you’ll need to install Memcached on your local machine, and we’ll need to change the settings to fall back to our local Memcached instance:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cache</span><span class="hljs-params">()</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">import</span> os</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    os.environ[<span class="hljs-string">'MEMCACHE_SERVERS'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_SERVERS'</span>].replace(<span class="hljs-string">','</span>, <span class="hljs-string">';'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    os.environ[<span class="hljs-string">'MEMCACHE_USERNAME'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_USERNAME'</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    os.environ[<span class="hljs-string">'MEMCACHE_PASSWORD'</span>] = os.environ[<span class="hljs-string">'MEMCACHIER_PASSWORD'</span>]</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django_pylibmc.memcached.PyLibMCCache'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">'TIMEOUT'</span>: <span class="hljs-number">300</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-string">'BINARY'</span>: <span class="hljs-keyword">True</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-string">'OPTIONS'</span>: { <span class="hljs-string">'tcp_nodelay'</span>: <span class="hljs-keyword">True</span> }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  <span class="hljs-keyword">except</span>:</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-string">'BACKEND'</span>: <span class="hljs-string">'django.core.cache.backends.memcached.PyLibMCCache'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-string">'LOCATION'</span>: <span class="hljs-string">'127.0.0.1:11211'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>CACHES = get_cache()</td><tr><td class="linenos" data-pseudo-content="24"></td><td>CACHE_MIDDLEWARE_ALIAS = <span class="hljs-string">'default'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>CACHE_MIDDLEWARE_SECONDS = <span class="hljs-number">300</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>CACHE_MIDDLEWARE_KEY_PREFIX = <span class="hljs-string">''</span></td></table></code></pre>
<p>If you don’t want to install Memcached locally, you can skip this step, but be aware that the test we write for clearing the cache will always pass if you do skip it.</p>
<p>Then we’ll run our tests to make sure nothing has been broken:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.......................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 23 tests <span class="hljs-keyword">in</span> 6.164s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td></table></code></pre>
<p>Let’s commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/settings.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Memcached in development'</span></td></table></code></pre>
<p>Now we’ll add a test for clearing the cache to <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_clear_cache</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag.name = <span class="hljs-string">'perl'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tag.description = <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Create the first post</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment"># Create the second post</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        post.title = <span class="hljs-string">'My second post'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        post.text = <span class="hljs-string">'This is [my second blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        post.slug = <span class="hljs-string">'my-second-post'</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-comment"># Fetch the index again</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-comment"># Check second post present</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertTrue(<span class="hljs-string">'my second blog post'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>This should be fairly self-explanatory. We create one post, and request the index page. We then add a second post, request the index page again, and check for the second post. The test should fail because the cached version is returned, rather than the version in the database.</p>
<p>Now we have a test in place, we can implement a fix. First, add this to the top of your <code>models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db.models.signals <span class="hljs-keyword">import</span> post_save</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.core.cache <span class="hljs-keyword">import</span> cache</td></table></code></pre>
<p>Then add the following at the bottom of the file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># Define signals</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_post</span><span class="hljs-params">(sender, instance, created, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    cache.clear()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># Set up signals</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>post_save.connect(new_post, sender=Post)</td></table></code></pre>
<p>This is fairly straightforward. What we’re doing is first defining a function called <code>new_post</code> that is called when a new post is created. We then connect it to the <code>post_save</code> signal. When a post is saved, it calls <code>new_post</code>, which clears the cache, making sure users are seeing the latest and greatest version of your site immediately.</p>
<p>Let’s test it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 8.473s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>There are a number of signals available, and when you create one, you have access to the created object via the <code>instance</code> parameter. Using signals you can implement all kinds of functionality. For instance, you could implement the functionality to send an email when a new post is published.</p>
<p>If you’re using Travis CI, you’ll also need to update the config file:</p>
<pre><code class="hljs lang-yaml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attr">language:</span> <span class="hljs-string">python</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">python:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-bullet">-</span> <span class="hljs-string">"2.7"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">services:</span> <span class="hljs-string">memcached</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">before_install:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-bullet">-y</span> <span class="hljs-string">libmemcached-dev</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment"># command to install dependencies</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attr">install:</span> <span class="hljs-string">"pip install -r requirements.txt"</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># command to run tests</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-attr">script:</span> <span class="hljs-string">coverage</span> <span class="hljs-string">run</span> <span class="hljs-bullet">--include="blogengine/*"</span> <span class="hljs-bullet">--omit="blogengine/migrations/*"</span> <span class="hljs-string">manage.py</span> <span class="hljs-string">test</span> <span class="hljs-string">blogengine</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-attr">after_success:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-string">coveralls</span></td></table></code></pre>
<p>Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ .travis.yml</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now clear cache when post added'</span></td></table></code></pre>
<h1 id="formatting-for-rss-feeds">Formatting for RSS feeds</h1>
<p>Now, we want to offer more than one option for RSS feeds. For instance, if your blog is aggregated on a site such as <a href="http://planet.python.org/">Planet Python</a>, but you also blog about JavaScript, you may want to be able to provide a feed for posts in the <code>python</code> category only.</p>
<p>If you have written any posts that use any of Markdown’s custom formatting, you may notice that if you load your RSS feed in a reader, it isn’t formatted as Markdown. Let’s fix that. First we’ll amend our test:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeedTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_all_post_feed</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Create a post</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.text = <span class="hljs-string">'This is my *first* blog post'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Add the tag</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Fetch the feed</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        response = self.client.get(<span class="hljs-string">'/feeds/posts/'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-comment"># Parse the feed</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        feed = feedparser.parse(response.content)</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment"># Check length</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-comment"># Check post retrieved is the correct one</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        feed_post = feed.entries[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertEquals(feed_post.title, post.title)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;first&lt;/em&gt; blog post'</span> <span class="hljs-keyword">in</span> feed_post.description)</td></table></code></pre>
<p>Don’t forget to run the tests to make sure they fail. Now, let’s fix it:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">import</span> markdown2</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            category = Category.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">except</span> Category.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            tag = Tag.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-keyword">return</span> tag.post_set.all()</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    title = <span class="hljs-string">"RSS feed - posts"</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    link = <span class="hljs-string">"feeds/posts/"</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    description = <span class="hljs-string">"RSS feed - blog posts"</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-keyword">return</span> item.title</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        extras = [<span class="hljs-string">"fenced-code-blocks"</span>]</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        content = mark_safe(markdown2.markdown(force_unicode(item.text),</td><tr><td class="linenos" data-pseudo-content="44"></td><td>                                               extras = extras))</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-keyword">return</span> content</td></table></code></pre>
<p>All we’re doing here is amending the <code>item_description</code> method of <code>PostsFeed</code> to render it as Markdown. Now let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 9.370s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>With that done, we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Fixed rendering for post feed'</span></td></table></code></pre>
<h1 id="refactoring-our-tests">Refactoring our tests</h1>
<p>Now, before we get into implementing the feed, our tests are a bit verbose. We create a lot of items over and over again - let’s sort that out. Factory Boy is a handy Python module that allows you to create easy-to-use factories for creating objects over and over again in tests. Let’s install it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install factory_boy</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git add requirements.txt</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ git commit -m <span class="hljs-string">'Installed Factory Boy'</span></td></table></code></pre>
<p>Now let’s set up a factory for creating posts. Add this at the top of the test file:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">import</span> factory.django</code></pre>
<p>Then, before your actual tests, insert the following:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Factories</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SiteFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        model = Site</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'domain'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    domain = <span class="hljs-string">'example.com'</span></td></table></code></pre>
<p>Now, wherever you call <code>Site()</code>, add its attributes, and save it, replace those lines with the following:</p>
<pre><code class="hljs lang-python singleline">        site = SiteFactory()</code></pre>
<p>Much simpler and more concise, I’m sure you’ll agree! Now, let’s run the tests to make sure they aren’t broken:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 7.482s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Factory Boy for site objects'</span></td></table></code></pre>
<p>Let’s do the same thing with <code>Category</code> objects:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        model = Category</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'description'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'slug'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    slug = <span class="hljs-string">'python'</span></td></table></code></pre>
<p>Again, just find every time we call <code>Category()</code> and replace it with the following:</p>
<pre><code class="hljs lang-python singleline">        category = CategoryFactory()</code></pre>
<p>Now if we run our tests, we’ll notice a serious error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>EE..EE.EE.EE...E.EEE..E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_create_category (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 42, <span class="hljs-keyword">in</span> test_create_category</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="29"></td><td>ERROR: test_create_post (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 80, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="53"></td><td>ERROR: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="55"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 339, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="58"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="60"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="73"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="77"></td><td>ERROR: test_create_post_without_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="79"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="80"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 378, <span class="hljs-keyword">in</span> test_create_post_without_tag</td><tr><td class="linenos" data-pseudo-content="81"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="82"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="84"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="85"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="86"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="87"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="88"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="89"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="92"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="93"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="94"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="95"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="96"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="97"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="98"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="99"></td><td></td><tr><td class="linenos" data-pseudo-content="100"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="101"></td><td>ERROR: test_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="102"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="103"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="104"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 245, <span class="hljs-keyword">in</span> test_delete_category</td><tr><td class="linenos" data-pseudo-content="105"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="106"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="107"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="108"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="109"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="110"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="111"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="112"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="113"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="114"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="115"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="116"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="117"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="118"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="119"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="120"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="121"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="122"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="123"></td><td></td><tr><td class="linenos" data-pseudo-content="124"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="125"></td><td>ERROR: test_delete_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="126"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="127"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="128"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 467, <span class="hljs-keyword">in</span> test_delete_post</td><tr><td class="linenos" data-pseudo-content="129"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="130"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="131"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="132"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="133"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="134"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="135"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="136"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="137"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="138"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="139"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="140"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="141"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="142"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="143"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="144"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="145"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="146"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="147"></td><td></td><tr><td class="linenos" data-pseudo-content="148"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="149"></td><td>ERROR: test_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="150"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="151"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="152"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 221, <span class="hljs-keyword">in</span> test_edit_category</td><tr><td class="linenos" data-pseudo-content="153"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="154"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="155"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="156"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="157"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="158"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="159"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="160"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="161"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="162"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="163"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="164"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="165"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="166"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="167"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="168"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="169"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="170"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="171"></td><td></td><tr><td class="linenos" data-pseudo-content="172"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="173"></td><td>ERROR: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="174"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="175"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="176"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 410, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="177"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="178"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="179"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="180"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="181"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="182"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="183"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="184"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="185"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="186"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="187"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="188"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="189"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="190"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="191"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="192"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="193"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="194"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="195"></td><td></td><tr><td class="linenos" data-pseudo-content="196"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="197"></td><td>ERROR: test_all_post_feed (blogengine.tests.FeedTest)</td><tr><td class="linenos" data-pseudo-content="198"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="199"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="200"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 810, <span class="hljs-keyword">in</span> test_all_post_feed</td><tr><td class="linenos" data-pseudo-content="201"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="202"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="203"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="204"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="205"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="206"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="207"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="208"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="209"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="210"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="211"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="212"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="213"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="214"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="215"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="216"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="217"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="218"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="219"></td><td></td><tr><td class="linenos" data-pseudo-content="220"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="221"></td><td>ERROR: test_category_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="222"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="223"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="224"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 640, <span class="hljs-keyword">in</span> test_category_page</td><tr><td class="linenos" data-pseudo-content="225"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="226"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="227"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="228"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="229"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="230"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="231"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="232"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="233"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="234"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="235"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="236"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="237"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="238"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="239"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="240"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="241"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="242"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="243"></td><td></td><tr><td class="linenos" data-pseudo-content="244"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="245"></td><td>ERROR: test_clear_cache (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="246"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="247"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="248"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 753, <span class="hljs-keyword">in</span> test_clear_cache</td><tr><td class="linenos" data-pseudo-content="249"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="250"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="251"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="252"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="253"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="254"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="255"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="256"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="257"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="258"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="259"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="260"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="261"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="262"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="263"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="264"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="265"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="266"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="267"></td><td></td><tr><td class="linenos" data-pseudo-content="268"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="269"></td><td>ERROR: test_index (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="270"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="271"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="272"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 518, <span class="hljs-keyword">in</span> test_index</td><tr><td class="linenos" data-pseudo-content="273"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="274"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="275"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="276"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="277"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="278"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="279"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="280"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="281"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="282"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="283"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="284"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="285"></td><td></td><tr><td class="linenos" data-pseudo-content="286"></td><td></td><tr><td class="linenos" data-pseudo-content="287"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="288"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="289"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="290"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="291"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="292"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="293"></td><td></td><tr><td class="linenos" data-pseudo-content="294"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="295"></td><td>ERROR: test_post_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="296"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="297"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="298"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 576, <span class="hljs-keyword">in</span> test_post_page</td><tr><td class="linenos" data-pseudo-content="299"></td><td>    category = CategoryFactory()</td><tr><td class="linenos" data-pseudo-content="300"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 82, <span class="hljs-keyword">in</span> __call__</td><tr><td class="linenos" data-pseudo-content="301"></td><td>    <span class="hljs-built_in">return</span> cls.create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="302"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 585, <span class="hljs-keyword">in</span> create</td><tr><td class="linenos" data-pseudo-content="303"></td><td>    <span class="hljs-built_in">return</span> cls._generate(True, attrs)</td><tr><td class="linenos" data-pseudo-content="304"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 510, <span class="hljs-keyword">in</span> _generate</td><tr><td class="linenos" data-pseudo-content="305"></td><td>    obj = cls._prepare(create, **attrs)</td><tr><td class="linenos" data-pseudo-content="306"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/base.py"</span>, line 485, <span class="hljs-keyword">in</span> _prepare</td><tr><td class="linenos" data-pseudo-content="307"></td><td>    <span class="hljs-built_in">return</span> cls._create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="308"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 151, <span class="hljs-keyword">in</span> _create</td><tr><td class="linenos" data-pseudo-content="309"></td><td></td><tr><td class="linenos" data-pseudo-content="310"></td><td></td><tr><td class="linenos" data-pseudo-content="311"></td><td>    <span class="hljs-built_in">return</span> cls._get_or_create(model_class, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="312"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/factory/django.py"</span>, line 142, <span class="hljs-keyword">in</span> _get_or_create</td><tr><td class="linenos" data-pseudo-content="313"></td><td>    obj, _created = manager.get_or_create(*args, **key_fields)</td><tr><td class="linenos" data-pseudo-content="314"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 154, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="315"></td><td>    <span class="hljs-built_in">return</span> self.get_queryset().get_or_create(**kwargs)</td><tr><td class="linenos" data-pseudo-content="316"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 383, <span class="hljs-keyword">in</span> get_or_create</td><tr><td class="linenos" data-pseudo-content="317"></td><td>    obj.save(force_insert=True, using=self.db)</td><tr><td class="linenos" data-pseudo-content="318"></td><td>TypeError: save() got an unexpected keyword argument <span class="hljs-string">'force_insert'</span></td><tr><td class="linenos" data-pseudo-content="319"></td><td></td><tr><td class="linenos" data-pseudo-content="320"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="321"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 5.162s</td><tr><td class="linenos" data-pseudo-content="322"></td><td></td><tr><td class="linenos" data-pseudo-content="323"></td><td>FAILED (errors=13)</td><tr><td class="linenos" data-pseudo-content="324"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Thankfully, this is easy to fix. We just need to amend the custom <code>save()</code> method of the <code>Category</code> model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            self.slug = slugify(unicode(self.name))</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        super(Category, self).save(*args, **kwargs)</td></table></code></pre>
<p>That should resolve the issue:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 7.749s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Category now uses Factory Boy'</span></td></table></code></pre>
<p>Now let’s do the same thing for tags:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        model = Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'description'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'slug'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    slug = <span class="hljs-string">'python'</span></td></table></code></pre>
<p>And replace the sections where we create new <code>Tag</code> objects:</p>
<pre><code class="hljs lang-python singleline">        tag = TagFactory()</code></pre>
<p>Note that some tags have different values. We can easily pass different values to our <code>TagFactory()</code> to override the default values:</p>
<pre><code class="hljs lang-python singleline">        tag = TagFactory(name=<span class="hljs-string">'perl'</span>, description=<span class="hljs-string">'The Perl programming language'</span>)</code></pre>
<p>The <code>Tag</code> model has the same issue as the <code>Category</code> one did, so let’s fix that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            self.slug = slugify(unicode(self.name))</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        super(Tag, self).save(*args, **kwargs)</td></table></code></pre>
<p>We run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 7.153s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Factory Boy for tags'</span></td></table></code></pre>
<p>Next we’ll create a factory for adding users. Note that the factory name doesn’t have to match the object name, so you can create factories for different types of users. Here we create a factory for authors - you could, for instance, create a separate factory for subscribers if you wanted:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        model = User</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        django_get_or_create = (<span class="hljs-string">'username'</span>,<span class="hljs-string">'email'</span>, <span class="hljs-string">'password'</span>,)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    username = <span class="hljs-string">'testuser'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    email = <span class="hljs-string">'user@example.com'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    password = <span class="hljs-string">'password'</span></td></table></code></pre>
<p>And as before, replace those sections where we create users with the following:</p>
<pre><code class="hljs lang-python singleline">        author = AuthorFactory()</code></pre>
<p>Run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 5.808s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Factory Boy for creating authors'</span></td></table></code></pre>
<p>Now we’ll create a flat page factory:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        model = FlatPage</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'url'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'title'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'content'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    url = <span class="hljs-string">'/about/'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    title = <span class="hljs-string">'About me'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    content = <span class="hljs-string">'All about me'</span></td></table></code></pre>
<p>And use it for our flat page test:</p>
<pre><code class="hljs lang-python singleline">        page = FlatPageFactory()</code></pre>
<p>Check the tests pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 24 tests <span class="hljs-keyword">in</span> 5.796s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>And commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Factory Boy for flat page test'</span></td></table></code></pre>
<p>Now we’ll create a final factory for posts:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        model = Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'title'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'text'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'slug'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'pub_date'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    author = factory.SubFactory(AuthorFactory)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    site = factory.SubFactory(SiteFactory)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    category = factory.SubFactory(CategoryFactory)</td></table></code></pre>
<p>This factory is a little bit different. Because our <code>Post</code> model depends on several others, we need to be able to create those additional objects on demand. By designating them as subfactories, we can easily create the associated objects for our <code>Post</code> object.</p>
<p>That means that not only can we get rid of our <code>Post()</code> calls, but we can also get rid of the factory calls to create the associated objects for <code>Post</code> models. Again, I’ll leave actually doing this as an exercise for the reader, but you can always refer to the GitHub repository if you’re not too sure.</p>
<p>Make sure your tests still pass, then commit the changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Factory Boy for testing posts'</span></td></table></code></pre>
<p>Using Factory Boy made a big difference to the size of the test file - I was able to cut it down by over 200 lines of code. As your application gets bigger, it gets harder to maintain, so do what you can to keep the size down.</p>
<h1 id="additional-rss-feeds">Additional RSS feeds</h1>
<p>Now, let’s implement our additional RSS feeds. First, we’ll write a test for the category feed. Add this to the <code>FeedTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_category_feed</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create a post</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        post = PostFactory(text=<span class="hljs-string">'This is my *first* blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Create another post in a different category</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category = CategoryFactory(name=<span class="hljs-string">'perl'</span>, description=<span class="hljs-string">'The Perl programming language'</span>, slug=<span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post2 = PostFactory(text=<span class="hljs-string">'This is my *second* blog post'</span>, title=<span class="hljs-string">'My second post'</span>, slug=<span class="hljs-string">'my-second-post'</span>, category=category)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Fetch the feed</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.get(<span class="hljs-string">'/feeds/posts/category/python/'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Parse the feed</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        feed = feedparser.parse(response.content)</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Check length</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Check post retrieved is the correct one</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        feed_post = feed.entries[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(feed_post.title, post.title)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;first&lt;/em&gt; blog post'</span> <span class="hljs-keyword">in</span> feed_post.description)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check other post is not in this feed</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;second&lt;/em&gt; blog post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Here we create two posts in different categories (note that we create a new category and override the post category for it). We then fetch <code>/feeds/posts/category/python/</code> and assert that it contains only one post, with the content of the first post and not the content of the second.</p>
<p>Run the tests and they should fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>................F........</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_category_feed (blogengine.tests.FeedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 716, <span class="hljs-keyword">in</span> test_category_feed</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 25 tests <span class="hljs-keyword">in</span> 5.804s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Because we haven’t yet implemented that route, we get a 404 error. So let’s create a route for this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed, CategoryPostsFeed</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Individual posts</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Categories</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        model=Category,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment"># Tags</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model=Tag,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment"># Post RSS feed</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment"># Category RSS feed</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    url(<span class="hljs-string">r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryPostsFeed()),</td><tr><td class="linenos" data-pseudo-content="35"></td><td>)</td></table></code></pre>
<p>Note that the category RSS feed route is similar to the post RSS feed route, but accepts a <code>slug</code> parameter. We will use this to pass through the slug for the category in question. Also note we import the <code>CategoryPostsFeed</code> view. Now, we need to create that view. Fortunately, because it’s written as a Python class, we can extend the existing <code>PostsFeed</code> class. Open up your views file and amend it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> get_object_or_404</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">import</span> markdown2</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            category = Category.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">except</span> Category.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            tag = Tag.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-keyword">return</span> tag.post_set.all()</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    title = <span class="hljs-string">"RSS feed - posts"</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    description = <span class="hljs-string">"RSS feed - blog posts"</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    link = <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-keyword">return</span> item.title</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        extras = [<span class="hljs-string">"fenced-code-blocks"</span>]</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        content = mark_safe(markdown2.markdown(force_unicode(item.text),</td><tr><td class="linenos" data-pseudo-content="44"></td><td>                                               extras = extras))</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-keyword">return</span> content</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-keyword">return</span> get_object_or_404(Category, slug=slug)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts in category %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-keyword">return</span> obj.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts in category %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-keyword">return</span> Post.objects.filter(category=obj).order_by(<span class="hljs-string">'-pub_date'</span>)</td></table></code></pre>
<p>Note that many of our fields don’t have to be explicitly defined as they are inherited from <code>PostsFeed</code>. We can’t hard-code the title, link or description because they depend on the category, so we instead define methods to return the appropriate text.</p>
<p>Also note <code>get_object()</code> - we define this so that we can ensure the category exists. If it doesn’t exist, then it returns a 404 error rather than showing an empty feed.</p>
<p>We also override <code>items()</code> to filter it to just those posts that are in the given category.</p>
<p>If you run the tests again, they should now pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 25 tests <span class="hljs-keyword">in</span> 5.867s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented category RSS feed'</span></td></table></code></pre>
<p>Now, we can get our category RSS feed, but how do we navigate to it? Let’s add a link to each category page that directs a user to its RSS feed. To do so, we’ll need to create a new template for category pages. First, let’s add some code to our tests to ensure that the right template is used at all times. Add the following to the end of the <code>test_index</code> method of <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-comment"># Check the correct template was used</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/post_list.html'</span>)</td></table></code></pre>
<p>Then, add this to the end of <code>test_post_page</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Check the correct template was used</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/post_detail.html'</span>)</td></table></code></pre>
<p>Finally, add this to the end of <code>test_category_page</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-comment"># Check the correct template was used</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/category_post_list.html'</span>)</td></table></code></pre>
<p>These assertions confirm which template was used to generate which request.</p>
<p>Next, we head into our views file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    template_name = <span class="hljs-string">'blogengine/category_post_list.html'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            category = Category.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">except</span> Category.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_context_data</span><span class="hljs-params">(self, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        context = super(CategoryListView, self).get_context_data(**kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            context[<span class="hljs-string">'category'</span>] = Category.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">except</span> Category.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            context[<span class="hljs-string">'category'</span>] = <span class="hljs-keyword">None</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">return</span> context</td></table></code></pre>
<p>Note that we first of all change the template used by this view. Then, we override <code>get_context_data</code> to add in additional data. What we’re doing is getting the slug that was passed through, looking up any category for which it is the slug, and returning it as additional context data. Using this method, you can easily add additional data that you may wish to render in your Django templates.</p>
<p>Finally, we create our new template:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.category %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.tags %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-success"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pager"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/category/</span></span></span><span class="hljs-template-variable">{{ category.slug }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>RSS feed for category </span><span class="hljs-template-variable">{{ category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Note that the category has been passed through to the template and is now accessible. If you run the tests, they should now pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 25 tests <span class="hljs-keyword">in</span> 7.232s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>With that done. we can commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/ blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added link to RSS feed from category page'</span></td></table></code></pre>
<p>Next up, let’s implement another RSS feed for tags. First, we’ll implement our test:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_tag_feed</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>          <span class="hljs-comment"># Create a post</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>          post = PostFactory(text=<span class="hljs-string">'This is my *first* blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>          tag = TagFactory()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>          post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>          post.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>          <span class="hljs-comment"># Create another post with a different tag</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>          tag2 = TagFactory(name=<span class="hljs-string">'perl'</span>, description=<span class="hljs-string">'The Perl programming language'</span>, slug=<span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>          post2 = PostFactory(text=<span class="hljs-string">'This is my *second* blog post'</span>, title=<span class="hljs-string">'My second post'</span>, slug=<span class="hljs-string">'my-second-post'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>          post2.tags.add(tag2)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>          post2.save()</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>          <span class="hljs-comment"># Fetch the feed</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>          response = self.client.get(<span class="hljs-string">'/feeds/posts/tag/python/'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>          self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>          <span class="hljs-comment"># Parse the feed</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>          feed = feedparser.parse(response.content)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>          <span class="hljs-comment"># Check length</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>          self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>          <span class="hljs-comment"># Check post retrieved is the correct one</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>          feed_post = feed.entries[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="26"></td><td>          self.assertEquals(feed_post.title, post.title)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>          self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;first&lt;/em&gt; blog post'</span> <span class="hljs-keyword">in</span> feed_post.description)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>          <span class="hljs-comment"># Check other post is not in this feed</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>          self.assertTrue(<span class="hljs-string">'This is my &lt;em&gt;second&lt;/em&gt; blog post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>This is virtually identical to the test for the categroy feed, but we adjust it to work with the <code>Tag</code> attribute and change the URL. Let’s check that our test fails:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.................F........</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_tag_feed (blogengine.tests.FeedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 757, <span class="hljs-keyword">in</span> test_tag_feed</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 26 tests <span class="hljs-keyword">in</span> 5.760s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>As before, we create a route for this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed, CategoryPostsFeed, TagPostsFeed</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Individual posts</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Categories</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        model=Category,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment"># Tags</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model=Tag,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment"># Post RSS feed</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment"># Category RSS feed</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    url(<span class="hljs-string">r'^feeds/posts/category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryPostsFeed()),</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-comment"># Tag RSS feed</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    url(<span class="hljs-string">r'^feeds/posts/tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagPostsFeed()),</td><tr><td class="linenos" data-pseudo-content="38"></td><td>)</td></table></code></pre>
<p>Next, we create our view:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagPostsFeed</span><span class="hljs-params">(PostsFeed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_object</span><span class="hljs-params">(self, request, slug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> get_object_or_404(Tag, slug=slug)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged  %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">link</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> obj.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">description</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"RSS feed - blog posts tagged %s"</span> % obj.name</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self, obj)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            tag = Tag.objects.get(slug=obj.slug)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">return</span> tag.post_set.all()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td></table></code></pre>
<p>Again, this inherits from <code>PostsFeed</code>, but the syntax for getting posts matching a tag is slightly different because they use a many-to-many relationship.</p>
<p>We also need a template for the tag pages. Add this to the end of the <code>test_tag_page</code> method:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Check the correct template was used</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.assertTemplateUsed(response, <span class="hljs-string">'blogengine/tag_post_list.html'</span>)</td></table></code></pre>
<p>Let’s create that template:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.category %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.tags %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-success"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pager"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/tag/</span></span></span><span class="hljs-template-variable">{{ tag.slug }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>RSS feed for tag </span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>This is virtually identical to the category template. You’ll also need to apply this template in the view for the tag list, and pass the tag name through as context data:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    template_name = <span class="hljs-string">'blogengine/tag_post_list.html'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            tag = Tag.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-keyword">return</span> tag.post_set.all()</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_context_data</span><span class="hljs-params">(self, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        context = super(TagListView, self).get_context_data(**kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            context[<span class="hljs-string">'tag'</span>] = Tag.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            context[<span class="hljs-string">'tag'</span>] = <span class="hljs-keyword">None</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">return</span> context</td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 26 tests <span class="hljs-keyword">in</span> 5.770s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>You may want to do a quick check to ensure your tag feed link works as expected. Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine templates</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented tag feeds'</span></td></table></code></pre>
<h1 id="moving-our-templates">Moving our templates</h1>
<p>Before we crack on with implementing search, there’s one more piece of housekeeping. In Django, templates can be applied at project level or at app level. So far, we’ve been storing them in the project, but we would like our app to be as self-contained as possible so it can just be dropped into future projects where we need a blog. That way, it can be easily overridden for specific projects. You can move the folders and update the Git repository at the same time with this command:</p>
<pre><code class="hljs lang-bash singleline">$ git mv templates/ blogengine/</code></pre>
<p>We run the tests to make sure nothing untoward has happened:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 26 tests <span class="hljs-keyword">in</span> 5.847s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>And we commit:</p>
<pre><code class="hljs lang-bash singleline">$ git commit -m <span class="hljs-string">'Moved templates'</span></code></pre>
<p>Note that <code>git mv</code> updates Git and moves the files, so you don’t need to call <code>git add</code>.</p>
<h1 id="implementing-search">Implementing search</h1>
<p>For our final task today, we will be implementing a very simple search engine. Our requirements are:</p>
<ul>
<li>It should be in the header, to allow for easy access from anywhere in the front end.</li>
<li>It should search the title and text of posts.</li>
</ul>
<p>First, we’ll write our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_search</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create a post</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post = PostFactory()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create another post</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post2 = PostFactory(text=<span class="hljs-string">'This is my *second* blog post'</span>, title=<span class="hljs-string">'My second post'</span>, slug=<span class="hljs-string">'my-second-post'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Search for first post</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.get(<span class="hljs-string">'/search?q=first'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Check the first post is contained in the results</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        self.assertTrue(<span class="hljs-string">'My first post'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Check the second post is not contained in the results</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertTrue(<span class="hljs-string">'My second post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Search for second post</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        response = self.client.get(<span class="hljs-string">'/search?q=second'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Check the first post is not contained in the results</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        self.assertTrue(<span class="hljs-string">'My first post'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Check the second post is contained in the results</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertTrue(<span class="hljs-string">'My second post'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Don’t forget to run the tests to make sure they fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..........................F</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_search (blogengine.tests.SearchViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 819, <span class="hljs-keyword">in</span> test_search</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 27 tests <span class="hljs-keyword">in</span> 6.919s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>With that done, we can add the search form to the header:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"alternate"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/rss+xml"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Blog posts"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span> &gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> staticfiles %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s, id</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                js = d.createElement(s); js.id = id;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>                fjs.parentNode.insertBefore(js, fjs);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav navbar-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="54"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_flatpages</span> <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="55"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="56"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="58"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/search"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"GET"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-form navbar-left"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"q"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Search..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> header %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="73"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="77"></td><td></td><tr><td class="linenos" data-pseudo-content="78"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="80"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container footer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">now</span></span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td></td><tr><td class="linenos" data-pseudo-content="91"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="92"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="handlebars"><span class="xml">"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">\</span>/<span class="hljs-attr">script</span>&gt;</span>')</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="98"></td><td>            (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b,o,i,l,e,r</span>)</span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=</td><tr><td class="linenos" data-pseudo-content="99"></td><td>            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</td><tr><td class="linenos" data-pseudo-content="100"></td><td>            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="101"></td><td>            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;</td><tr><td class="linenos" data-pseudo-content="102"></td><td>            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));</td><tr><td class="linenos" data-pseudo-content="103"></td><td>            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="105"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="106"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Now we’ll actually implement our search. Implementing search using Django’s generic views can be fiddly, so we’ll write our search view as a function instead. First, amend the imports at the top of your view file to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> get_object_or_404, render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator, EmptyPage</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Q</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">import</span> markdown2</td></table></code></pre>
<p>Next, add the following code to the end of the file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSearchResults</span><span class="hljs-params">(request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Search for a post by title or text</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Get the query data</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    query = request.GET.get(<span class="hljs-string">'q'</span>, <span class="hljs-string">''</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    page = request.GET.get(<span class="hljs-string">'page'</span>, <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Query the database</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">if</span> query:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        results = Post.objects.filter(Q(text__icontains=query) | Q(title__icontains=query))</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">else</span>:</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        results = <span class="hljs-keyword">None</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    pages = Paginator(results, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Get specified page</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        returned_page = pages.page(page)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">except</span> EmptyPage:</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        returned_page = pages.page(pages.num_pages)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment"># Display the search results</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'blogengine/search_post_list.html'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                              {<span class="hljs-string">'page_obj'</span>: returned_page,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                               <span class="hljs-string">'object_list'</span>: returned_page.object_list,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                               <span class="hljs-string">'search'</span>: query})</td></table></code></pre>
<p>As this is the first time we’ve written a view without using generic views, a little explanation is called for. First we get the values of the <code>q</code> and <code>page</code> parameters passed to the view. <code>q</code> contains the query text and <code>page</code> contains the page number. Note also that our page defaults to 1 if not set.</p>
<p>We then use the Q object to perform a query. The Django ORM will <code>AND</code> together keyword argument queries, but that’s not the behaviour we want here. Instead we want to be able to search for content in the title or text, so we need to use a query with an <code>OR</code> statement, which necessitates using the <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects">Q</a> object.</p>
<p>Next, we use the <code>Paginator</code> object to manually paginate the results, and if it raises an <code>EmptyPage</code> exception, to just show the last page instead. Finally we render the template <code>blogengine/search_post_list.html</code>, and pass through the parameters <code>page_obj</code> for the returned page, <code>object_list</code> for the objects, and <code>search</code> for the query.</p>
<p>We also need to add a route for our new view:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-comment"># Search posts</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    url(<span class="hljs-string">r'^search'</span>, <span class="hljs-string">'blogengine.views.getSearchResults'</span>),</td></table></code></pre>
<p>Finally, let’s create a new template to show our results:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.category %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.tags %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-success"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pager"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/search?page=</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&amp;q=</span></span></span><span class="hljs-template-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/search?page=</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&amp;q=</span></span></span><span class="hljs-template-variable">{{ search }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...........................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 27 tests <span class="hljs-keyword">in</span> 6.421s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Don’t forget to do a quick sense check to make sure it’s all working as expected. Then it’s time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented search'</span></td></table></code></pre>
<p>And push up your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git push origin master</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git push heroku master</td></table></code></pre>
<p>And that’s the end of this instalment. Please note this particular search solution is quite basic, and if you want something more powerful, you may want to look at <a href="http://haystacksearch.org/">Haystack</a>.</p>
<p>As usual, you can get this lesson with <code>git checkout lesson-7</code> - if you have any problems, the <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">repository</a> should be the first place you look for answers as this is the working code base for the application, and with judicious use of a tool like <code>diff</code>, it’s generally pretty easy to track down most issues.</p>
<p>In our next, and final instalment, we’ll cover:</p>
<ul>
<li>Tidying everything up</li>
<li>Implementing an XML sitemap for search engines</li>
<li>Optimising our site</li>
<li>Using Fabric to make deployment easier</li>
</ul>
<p>Hope to see you then!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 6]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/05/25/django-blog-tutorial-the-next-generation-part-6/</guid>
            <pubDate>Sun, 25 May 2014 16:23:28 GMT</pubDate>
            <description><![CDATA[<p>Welcome back! In this tutorial we’ll cover the following:</p>
<ul>
<li>Fixing bugs the TDD way</li>
<li>Setting up syntax highlighting for code snippets</li>
<li>Tidying up the front end</li>
</ul>
<p>Apologies, but I’m holding over implementing the search and additional feeds for a future instalment - in the past I’ve tried to cover too much in one post and that has led to me putting them off for much too long. So this instalment and future ones are going to be shorter so I can get them out the door quicker.</p>
<p>Ready? Let’s get started!</p>
<h1 id="fixing-bugs">Fixing bugs</h1>
<p>When someone reports a bug, it’s tempting to just dive straight in and start fixing it. But TDD cautions us against this practice. If we have a bug, then our tests should have caught it. If they don’t, then before we fix the bug, we have to make sure we can catch it if it crops up in future by implementing a test for it, and ensuring that it fails. Once that test is in place, we can then go ahead and fix the bug, safe in the knowledge that if it should reappear in future, we will be warned when our tests run.</p>
<p>As it happens, we have a bug in our web app. If you activate your virtualenv in the usual way and run the development server, and then try to create a new post without adding a tag, you’ll see that it fails as the tag is empty. Now, it’s pretty obvious that this is because the <code>tags</code> attribute of the <code>Post</code> model cannot be blank, so we have a good idea of what we need to do to fix this. But to make sure it never occurs again, we need to implement a test first.</p>
<p>Add the following method to <code>AdminTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post_without_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td></table></code></pre>
<p>This is virtually identical to our previous method for adding a post, but doesn’t add a tag to the post. If you run <code>python manage.py jenkins</code>, the test should fail. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added failing test for posts without tags'</span></td></table></code></pre>
<p>Now we’re in a position to fix our bug. Let’s take a look at our models:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    tags = models.ManyToManyField(Tag)</td></table></code></pre>
<p>If you compare <code>category</code> and <code>tags</code>, you’ll immediately see that <code>category</code> has the additional parameters <code>blank</code> and <code>null</code> both set to <code>True</code>. So that’s what we need to do for <code>tags</code> as well. Amend the model to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    tags = models.ManyToManyField(Tag, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td></table></code></pre>
<p>You shouldn’t have to create a migration for this. Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins --coverage-html-report=htmlcov</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.......................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 23 tests <span class="hljs-keyword">in</span> 7.634s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our tests pass! So we’ve fixed our bug, and we’ve ensured that if it happens again, we’ll catch it. With that done, it’s time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/models.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Fixed a bug with the Post model'</span></td></table></code></pre>
<p><strong>Remember</strong>: Always make the effort to create a test to reproduce your bug before fixing it. That way, you know you can catch it in future.</p>
<h1 id="syntax-highlighting">Syntax highlighting</h1>
<p>This is one feature that not everyone will want to implement. If you want to be able to show code snippets on your blog, then implementing syntax highlighting is well worth your time. However, if that’s not what you want to use your blog for, feel free to skip over this section.</p>
<p>Now, earlier in the series we implemented Markdown support. In Markdown there are two main ways to denote a code block. One is to indent the code by four spaces, while the other is to use <a href="https://help.github.com/articles/github-flavored-markdown#syntax-highlighting">fenced code blocks with syntax highlighting</a>. There are many flavours of Markdown available for Python, and unfortunately the one we’ve been using so far doesn’t support fenced code blocks, so we’ll be switching to one that does.</p>
<p>We also need to be able to generate a suitable stylesheet to highlight the code appropriately. For that, we’ll be using <a href="http://pygments.org/">Pygments</a>. So let’s first uninstall our existing implementation of Markdown:</p>
<pre><code class="hljs lang-bash singleline">$ pip uninstall Markdown</code></pre>
<p>And install the new modules:</p>
<pre><code class="hljs lang-bash singleline">$ pip install markdown2 Pygments</code></pre>
<p>Don’t forget to record the changes:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>Now, we need to amend our Markdown template tags to use the new version of Markdown:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> markdown2</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.template.defaultfilters <span class="hljs-keyword">import</span> stringfilter</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>register = template.Library()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-meta">@register.filter(is_safe=True)</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-meta">@stringfilter</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">custom_markdown</span><span class="hljs-params">(value)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    extras = [<span class="hljs-string">"fenced-code-blocks"</span>]</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">return</span> mark_safe(markdown2.markdown(force_unicode(value),</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                                       extras = extras))</td></table></code></pre>
<p>All we do here is change the Markdown module that gets imported, and amend how it is called. Note that we pass through the parameter <code>fenced-code-blocks</code> to enable this functionality.</p>
<p>If you now run the development server and create a post with some code in it (just copy the Ruby example from <a href="https://help.github.com/articles/github-flavored-markdown#syntax-highlighting">here</a>), then view it on the site, you should be able to see that it’s in a <code>&lt;code&gt;</code> block. However, it’s not highlighted yet. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements/txt blogengine/templatetags/custom_markdown.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Markdown2 to allow for syntax highlighting'</span></td></table></code></pre>
<p>Now, if you examine the markup for your code blocks using your browser’s developer tools, you’ll notice that the code is wrapped in many different spans with various classes. Pygments can generate a CSS file that uses those classes to highlight your code.</p>
<p>First, let’s create a folder to store our CSS files in:</p>
<pre><code class="hljs lang-bash singleline">$ mkdir blogengine/static/css</code></pre>
<p>Next, we’ll add a blank CSS file for any other styling we may want to apply:</p>
<pre><code class="hljs lang-bash singleline">$ touch blogengine/static/css/main.css</code></pre>
<p>Then, we generate our CSS file:</p>
<pre><code class="hljs lang-bash singleline">$ pygmentize -S default <span class="hljs-_">-f</span> html &gt; blogengine/static/css/code.css</code></pre>
<p>We need to include our CSS files in our HTML template:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> staticfiles %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s, id</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                js = d.createElement(s); js.id = id;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>                fjs.parentNode.insertBefore(js, fjs);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-inner"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-navbar"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">".nav-collapse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-collapse collapse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> header %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="57"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="64"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container footer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">now</span></span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="handlebars"><span class="xml">"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">\</span>/<span class="hljs-attr">script</span>&gt;</span>')</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="82"></td><td>            (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b,o,i,l,e,r</span>)</span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=</td><tr><td class="linenos" data-pseudo-content="83"></td><td>            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</td><tr><td class="linenos" data-pseudo-content="84"></td><td>            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="85"></td><td>            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;</td><tr><td class="linenos" data-pseudo-content="86"></td><td>            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));</td><tr><td class="linenos" data-pseudo-content="87"></td><td>            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Now, if you run the development server and reload the page, your code will be highlighted using the default Pygments style. If you don’t like it, there are plenty to choose from. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ pygmentize -L styles</code></pre>
<p>That will list the various styles available. For instance, let’s say we want to try the Tango style:</p>
<pre><code class="hljs lang-bash singleline">$ pygmentize -S tango <span class="hljs-_">-f</span> html &gt; blogengine/static/css/code.css</code></pre>
<p>If you like the Monokai theme in Sublime Text, there’s a Pygments version of that:</p>
<pre><code class="hljs lang-bash singleline">$ pygmentize -S monokai <span class="hljs-_">-f</span> html &gt; blogengine/static/css/code.css</code></pre>
<p>If you like the Solarized theme, that’s not bundled with Pygments, but can be installed separately:</p>
<pre><code class="hljs lang-bash singleline">$ pip install pygments-style-solarized</code></pre>
<p>Then run this for the light version:</p>
<pre><code class="hljs lang-bash singleline">$ pygmentize -S solarizedlight <span class="hljs-_">-f</span> html &gt; blogengine/static/css/code.css</code></pre>
<p>And this for the dark version:</p>
<pre><code class="hljs lang-bash singleline">$ pygmentize -S solarizeddark <span class="hljs-_">-f</span> html &gt; blogengine/static/css/code.css</code></pre>
<p>Pick one that you like - I’m going to go for the dark version of Solarized.</p>
<p>Note that this doesn’t actually change the background colour of the code blocks. You will therefore need to set this manually using the CSS file we created earlier. If you’re using Solarized Dark like I am, then this should set it correctly:</p>
<pre><code class="hljs lang-css"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.codehilite</span> <span class="hljs-selector-tag">pre</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#002b36</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>If you’re using Solarized Light, then this should be more appropriate:</p>
<pre><code class="hljs lang-css"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.codehilite</span> <span class="hljs-selector-tag">pre</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdf6e3</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>Or, if you’re using Monokai, black will do:</p>
<pre><code class="hljs lang-css"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.codehilite</span> <span class="hljs-selector-tag">pre</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000000</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>With that done, let’s record the additional Pygments style:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>And commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt blogengine/static/css/ templates/blogengine/includes/base.html</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Styled code with Solarized Dark'</span></td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py jenkins</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 254, <span class="hljs-keyword">in</span> _find_tests</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 232, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 7, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    import markdown</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: No module named markdown</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Whoops! We introduced an error here. If we take a look, we can see that the problem is on line 7, where we import the Markdown module. That makes sense, as we now use a different implementation of Markdown. Fortunately, in Python you can import modules with a different name, which makes this a breeze to fix. Change the line to:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">import</span> markdown2 <span class="hljs-keyword">as</span> markdown</code></pre>
<p>Now, if you run your tests, they should pass. It’s important that if a test breaks, you fix it as soon as possible and don’t put it off. Let’s commit these changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Fixed a broken test'</span></td></table></code></pre>
<p>Our syntax highlighting is now done! If you want to see it in action using the Solarized Dark theme, check out the copy of this blogging engine hosted <a href="http://blog.shellshocked.info/">here</a>.</p>
<h1 id="tidying-up">Tidying up</h1>
<p>Now that our blog is up and running on Heroku, it could do with a bit of work on the front end to make it look a bit nicer. If you recall, we’re using Bootstrap for our front end, so you may want to refer to the documentation for that to give you some ideas on how you want to style your blog.</p>
<p>Bootstrap has a nifty pager class for Next and Previous links, so let’s apply that to our post list template:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pager"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></td></table></code></pre>
<p>Let’s also add labels to our categories and tags. We’ll also place our posts and other content inside proper columns:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.category %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> post.tags %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-success"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pager"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"previous"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"next"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>We’ll also want to tidy up the layout for our individual post pages:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ object.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object.category %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ object.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span></span><span class="hljs-template-variable">{{ object.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object.tags %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> object.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-success"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fb-comments"</span> <span class="hljs-attr">data-href</span>=<span class="hljs-string">"http://</span></span></span><span class="hljs-template-variable">{{ object.site }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"></span></span></span><span class="hljs-template-variable">{{ object.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">"470"</span> <span class="hljs-attr">data-num-posts</span>=<span class="hljs-string">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Tidied up post templates'</span></td></table></code></pre>
<p>With that done, let’s turn our attention to our base template. We’ll amend the header to collapse down at smaller screen widths. This is easy to do with Bootstrap:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"alternate"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/rss+xml"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Blog posts"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span> &gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> staticfiles %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'css/code.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s, id</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                js = d.createElement(s); js.id = id;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>                fjs.parentNode.insertBefore(js, fjs);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav navbar-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="54"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_flatpages</span> <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="55"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="56"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>                        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="58"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span>&gt;</span>RSS feed<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> header %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="66"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="73"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container footer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">now</span></span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="handlebars"><span class="xml">"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">\</span>/<span class="hljs-attr">script</span>&gt;</span>')</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="91"></td><td>            (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b,o,i,l,e,r</span>)</span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=</td><tr><td class="linenos" data-pseudo-content="92"></td><td>            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</td><tr><td class="linenos" data-pseudo-content="93"></td><td>            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="94"></td><td>            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;</td><tr><td class="linenos" data-pseudo-content="95"></td><td>            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));</td><tr><td class="linenos" data-pseudo-content="96"></td><td>            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);</td><tr><td class="linenos" data-pseudo-content="97"></td><td>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="99"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Here we’ve also added a link to our RSS feed in the header, and another in the page head to facilitate working with browsers that support RSS better.</p>
<p>Our blog’s now looking much more presentable. All that remains is to commit it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/blogengine/includes/base.html</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Amended base template'</span></td></table></code></pre>
<p>Now we can push it to GitHub and deploy it on Heroku:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git push origin master</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git push heroku master</td></table></code></pre>
<p>And we’re done! Don’t forget, you can grab this lesson with <code>git checkout lesson-6</code>.</p>
<p>Next time, we’ll cover search (I promise!).</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 5]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/05/24/django-blog-tutorial-the-next-generation-part-5/</guid>
            <pubDate>Sat, 24 May 2014 19:15:54 GMT</pubDate>
            <description><![CDATA[<p>Hello again! I was originally planning to cover implementing a search system, adding more feeds, and tidying up the front end in this instalment. However, I felt it was time for a change of pace, so instead, we’re going to look at:</p>
<ul>
<li>Checking code coverage and getting it to 100%</li>
<li>Using continuous integration</li>
<li>Deploying to Heroku</li>
</ul>
<p>Don’t worry, the original lesson isn’t going anywhere. We’ll still be implementing all of that later on, but today is the day we get your Django blog up and running on the web. That way, you can get a better idea of how Django works in the wild, and you have something concrete to show for your efforts.</p>
<h1 id="continuous-integration">Continuous integration</h1>
<p>If you’re not familiar with continuous integration, it’s basically a process that carries out some tasks automatically when you push a new commit to the repository. These tasks may include running unit tests, linting your code, and checking it to see what percentage of the code base is covered by the tests (after all, if your tests don’t actually cover every scenario, then there’s more of a chance that something might slip through the net. It’s also possible to implement hooks to automatically deploy your application only if the tests pass.</p>
<p>Typically, you will have a continuous integration server running somewhere that regularly polls your Git repository for changes, and when it finds a new commit, will check it out and run the tests (or whatever other task you configure it to). One of the most popular continuous integration servers around is <a href="http://jenkins-ci.org/">Jenkins</a> - I use it at work and can highly recommend it. However, we aren’t going to cover using Jenkins here because setting it up is quite a big deal and it really is best kept on a server of its own (although feel free to use it if you prefer). Instead, we’re going to use <a href="https://travis-ci.org/">Travis CI</a>, which integrates nicely with GitHub and is free for open source projects. If you don’t mind your code being publicly available on GitHub, then Travis is a really great way to dip your toe into continuous integration.</p>
<p>NB: You don’t have to use continuous integration at all if you don’t want to - this isn’t a big project so you don’t really need it. If you don’t want to put your code on GitHub, then feel free to just follow along and not bother pushing your code to GitHub and configuring Travis.</p>
<h1 id="code-coverage">Code coverage</h1>
<p>As mentioned above, code coverage is a measure of the percentage of the code that is covered by tests. While not infallible, it’s a fairly good guide to how comprehensive your tests are. If you have 100% code coverage, you can be fairly confident that your tests are comprehensive enough to catch most errors, so it’s a good rule of thumb to aim for 100% test coverage on a project.</p>
<p>So how do we check our test coverage? The <code>coverage</code> Python module is the most common tool for this. There’s also a handy Django module called <code>django-jenkins</code>, which is designed to work with Jenkins, but can be used with any continuous integration server, that can not only run your tests, but also check code coverage at the same time. So, make sure your virtualenv is up and running:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<p>Then, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ pip install coverage django-jenkins</code></pre>
<p>Once that’s done, add these to our requirements file:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>We now need to configure our Django project to use <code>django-jenkins</code>. Add the following to the bottom of the settings file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS += (<span class="hljs-string">'django_jenkins'</span>,)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>JENKINS_TASKS = (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django_jenkins.tasks.run_pylint'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django_jenkins.tasks.with_coverage'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>PROJECT_APPS = [<span class="hljs-string">'blogengine'</span>]</td></table></code></pre>
<p>This adds <code>django-jenkins</code> to our installed apps and tells it to include two additional tasks, besides running the tests. The first task runs Pylint to check our code quality (but we aren’t really concerned about that at this point). The second checks the coverage. Finally, we tell <code>django-jenkins</code> that the <code>blogengine</code> app is the only one to be tested.</p>
<p>You’ll also want to add the following lines to your <code>.gitignore</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>reports/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>htmlcov/</td></table></code></pre>
<p>These are the reports generated by <code>django-jenkins</code>, and should not be kept under version control. With that done, it’s time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .gitignore django_tutorial_blog_ng/ requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added coverage checking using django-jenkins'</span></td></table></code></pre>
<p>Now, let’s run our tests. From now on, you’ll use the following command to run your tests:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py jenkins</code></pre>
<p>This ensures we check the coverage at the same time. Now, you’ll notice that the <code>reports</code> folder has been created, and it will contain three files, including one called <code>coverage.xml</code>. However, XML isn’t a very friendly format. Happily, we can easily generate reports in HTML instead:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py jenkins --coverage-html-report=htmlcov</code></pre>
<p>Running this command will create another folder called <code>htmlcov/</code>, and in here you will find your report, nicely formatted as HTML. Open up <code>index.html</code> in your web browser and you should see a file-by-file breakdown of your code coverage. Nice, huh?</p>
<p>Now, if your code so far is largely identical to mine, you’ll notice that the model and view files don’t have 100% coverage yet. If you click on each one, you’ll see a handy line-by-line breakdown of the test coverage for each file. You’ll notice that in the views file, the areas of the code for when tags and categories don’t exist are highlighted in pink - this tells you that these lines of code are never executed during the tests. So let’s fix that.</p>
<p>First, our template needs to be able to handle empty lists.</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts found<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Let’s commit the changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/blogengine/post_list.html</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added a "No posts found" message to post list template'</span></td></table></code></pre>
<p>Next, we need to write tests to check that we get a “No posts found” message when we view a tag or category that does not exist. Add the following methods to the class <code>PostViewTest()</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_nonexistent_category_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        category_url = <span class="hljs-string">'/category/blah/'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        response = self.client.get(category_url)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_nonexistent_tag_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        tag_url = <span class="hljs-string">'/tag/blah/'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        response = self.client.get(tag_url)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertTrue(<span class="hljs-string">'No posts found'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Now, let’s run our tests again:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py jenkins --coverage-html-report=htmlcov</code></pre>
<p>Assuming they all pass as expected, then your coverage reports will be regenerated. If you reload the coverage report, you should see that your views now have 100% test coverage. Let’s commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Views file now has 100% coverage'</span></td></table></code></pre>
<p>Now, our models still don’t have 100% coverage yet. If you look at the breakdown for <code>models.py</code>, you’ll see that the line <code>if not self.slug:</code> has only partial coverage, because we missed out setting a slug for the categories and tags in our test. So, let’s fix that. In <code>PostTest()</code>, amend the <code>test_create_category()</code> and <code>test_create_tag()</code> methods as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Add attributes</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        category.slug = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        only_category = all_categories[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEquals(only_category, category)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(only_category.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(only_category.description, <span class="hljs-string">'The Python programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(only_category.slug, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Add attributes</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        tag.slug = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        only_tag = all_tags[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(only_tag, tag)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(only_tag.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(only_tag.description, <span class="hljs-string">'The Python programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertEquals(only_tag.slug, <span class="hljs-string">'python'</span>)</td></table></code></pre>
<p>Run the tests again:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py jenkins --coverage-html-report=htmlcov</code></pre>
<p>Then refresh your coverage page, and we should have hit 100% coverage. Excellent news! This means that we can be confident that if any problems get introduced in future, we can pick them up easily. To demonstrate this, let’s upgrade our Django install to the latest version and check everything still works as expected:</p>
<pre><code class="hljs lang-bash singleline">$ pip install Django --upgrade</code></pre>
<p>This will upgrade the copy of Django in our virtualenv to the latest version. Then we can run our tests again:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py jenkins --coverage-html-report=htmlcov</code></pre>
<p>Our tests should still pass, indicating that the upgrade to our Django version does not appear to have broken any functionality. Let’s update our <code>requirements.txt</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip freeze &gt; requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git add requirements.txt</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git commit -m <span class="hljs-string">'Upgraded Django version'</span></td></table></code></pre>
<h1 id="preparing-our-web-app-for-deployment-to-heroku">Preparing our web app for deployment to Heroku</h1>
<p>As mentioned previously, I’m going to assume you plan to deploy your site on <a href="https://www.heroku.com/">Heroku</a>. It has good Django support, and you can quite happily host a blog there using their free tariff. If you’d prefer to use another hosting provider, then you should be able to adapt these instructions accordingly.</p>
<p>Now, so far we’ve used SQLite as our database for development purposes. However, SQLite isn’t really suitable for production purposes. Heroku provide a Postgresql database for each web app, so we will use that. To configure it, open up <code>settings.py</code> and amend the database configuration section to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>}</td></table></code></pre>
<p>Then, add the following at the end of the file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># Heroku config</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Parse database configuration from $DATABASE_URL</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> dj_database_url</td><tr><td class="linenos" data-pseudo-content="5"></td><td>DATABASES[<span class="hljs-string">'default'</span>] =  dj_database_url.config(default=<span class="hljs-string">"sqlite:///db.sqlite3"</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment"># Honor the 'X-Forwarded-Proto' header for request.is_secure()</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>SECURE_PROXY_SSL_HEADER = (<span class="hljs-string">'HTTP_X_FORWARDED_PROTO'</span>, <span class="hljs-string">'https'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-comment"># Allow all host headers</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>ALLOWED_HOSTS = [<span class="hljs-string">'*'</span>]</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Static asset configuration</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>STATIC_ROOT = <span class="hljs-string">'staticfiles'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>STATICFILES_DIRS = (</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    os.path.join(BASE_DIR, <span class="hljs-string">'static'</span>),</td><tr><td class="linenos" data-pseudo-content="18"></td><td>)</td></table></code></pre>
<p>A little explanation is called for. Remember when we first started out, we installed the <code>django-toolbelt</code> package, which included <code>dj-database-url</code>? Well, here we use the <code>dj_database_url</code> module to get the database from an environment variable set on Heroku. We set a default value so as to fall back to SQLite when that variable is not set. The other settings are required by Heroku.</p>
<p>You may want to run your tests again to ensure everything is still working before committing:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/settings.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Amended settings to work on desktop and Heroku'</span></td></table></code></pre>
<h1 id="setting-up-continuous-integration-and-coverage">Setting up Continuous Integration and coverage</h1>
<p>Now, as mentioned previously, I’ll be demonstrating how to set up Travis CI for our project. Travis CI is only free for open-source projects, so if you don’t want to make your code publicly accessible, you may want to use Jenkins instead. I’ll leave setting that up and running it as an exercise for the reader, but I recommend a plugin called Cobertura which allows you to publish details of your code’s test coverage.</p>
<p>Unfortunately, Travis CI doesn’t have the capability to publish your coverage results. Fortunately, you can use <a href="https://coveralls.io/">Coveralls.io</a> to pick up the slack. Like Travis, it’s free for open-source projects, and if you host your code on GitHub, it’s pretty easy to use.</p>
<p>You can find instructions on setting up a project on Travis CI <a href="http://docs.travis-ci.com/user/getting-started/">here</a>. Once you’ve configured it, you’ll need to set up your <code>.travis.yml</code> file. This is a simple text file that tells Travis CI how to run your tests. Put the following content in the file:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">language</span>: <span class="hljs-keyword">python</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">python</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>- <span class="hljs-string">"2.7"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td># <span class="hljs-keyword">command</span> <span class="hljs-keyword">to</span> install dependencies</td><tr><td class="linenos" data-pseudo-content="5"></td><td>instal<span class="hljs-variable">l:</span> <span class="hljs-string">"pip install -r requirements.txt"</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td># <span class="hljs-keyword">command</span> <span class="hljs-keyword">to</span> run tests</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">scrip</span><span class="hljs-variable">t:</span> coverage run --include=<span class="hljs-string">"blogengine/*"</span> --omit=<span class="hljs-string">"blogengine/migrations/*"</span> manage.<span class="hljs-keyword">py</span> test blogengine</td><tr><td class="linenos" data-pseudo-content="8"></td><td>after_succes<span class="hljs-variable">s:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    coveralls</td></table></code></pre>
<p>Now, this tells Travis that this is a Python application, and we should be using Python 2.7. Please note you can test against multiple versions of Python if you wish - just add another line with the Python version you want to test against.</p>
<p>Then, we see that we use Pip to install our requirements. Finally we run our tests with Coverage, in order to generate coverage data, and afterwards call <code>coveralls</code> to pass the coverage data to Coveralls.io.</p>
<p>We also need to install the <code>coveralls</code> module:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install coveralls</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>And we need to keep our coverage data out of version control:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>env/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>*.pyc</td><tr><td class="linenos" data-pseudo-content="3"></td><td>db.sqlite3</td><tr><td class="linenos" data-pseudo-content="4"></td><td>blogengine/static/bower_components/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>reports/</td><tr><td class="linenos" data-pseudo-content="6"></td><td>htmlcov/</td><tr><td class="linenos" data-pseudo-content="7"></td><td>.coverage</td></table></code></pre>
<p>You’ll also want to set up your project on Coveralls, as described <a href="https://coveralls.io/docs">here</a> - please note that this requires your project be in a public GitHub repository.</p>
<p>With that done, let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .gitignore .travis.yml requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Travis config file and Coveralls support'</span></td></table></code></pre>
<p>With that done, assuming you have Travis CI and Coveralls configured, and your code is already hosted on GitHub, then you should be able to just push your code up to trigger the build:</p>
<pre><code class="hljs lang-bash singleline">$ git push origin master</code></pre>
<p>If you keep an eye on Travis in your browser, you can watch what happens as your tests are run. If for any reason the build fails, then it shouldn’t be too hard to figure out what has gone wrong using the documentation for Travis and Coveralls - both services are pretty easy to use.</p>
<p>Congratulations - you’re now using Continuous Integration! That wasn’t so hard, was it? Now, every time you push to GitHub, Travis will run your tests, and you’ll get an email if they fail, giving you early warning of any problems, and you can check your coverage at the same time. Both Travis and Coveralls offer badges that you can place in your README file on GitHub to show off your coverage and build status - feel free to add these to your repo.</p>
<p>You may want to try making a change that breaks your tests and committing it, then pushing it up, so that you can see what happens when the build breaks.</p>
<h1 id="deploying-to-heroku">Deploying to Heroku</h1>
<p>Our final task today is deploying our blog to Heroku so we can see it in action. First of all, if you don’t already have an account with Heroku, you’ll need to sign up <a href="https://www.heroku.com/">here</a>. You should also be prompted to install the Heroku toolbelt. Once that’s done, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ heroku login</code></pre>
<p>You’ll be prompted for your credentials - enter these and you should be able to log in successfully.</p>
<p>Now, in order to run our Django app on Heroku, we’ll need to add a <code>Procfile</code> to tell Heroku what command to run in order to start your app. In this case, we will be using Gunicorn as our web server. Assuming our project is called <code>django_tutorial_blog_ng</code>, this is what you need to put in this file:</p>
<pre><code class="hljs lang-bash singleline">web: gunicorn django_tutorial_blog_ng.wsgi</code></pre>
<p>That tells Heroku that the file we need to run for this application is <code>django_tutorial_blog_ng/wsgi.py</code>. To test it, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ foreman start</code></pre>
<p>That will start our web server on port 5000, using Gunicorn rather than the Django development server. You should be able to see it in action <a href="http://127.0.0.1:5000/">here</a>, but you’ll notice a very serious issue - namely that the static files aren’t being served. Now, Django has a command called <code>collectstatic</code> that collects all the static files and drops them into one convenient folder. Heroku will run this command automatically, so we need to ensure our static files are available. Amend your <code>.gitignore</code> file so it no longer excludes our static files:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>*.pyc</td><tr><td class="linenos" data-pseudo-content="3"></td><td>db.sqlite3</td><tr><td class="linenos" data-pseudo-content="4"></td><td>reports/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>htmlcov/</td><tr><td class="linenos" data-pseudo-content="6"></td><td>.coverage</td></table></code></pre>
<p>We also need to amend our wsgi.py to serve static files:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> os</td><tr><td class="linenos" data-pseudo-content="2"></td><td>os.environ.setdefault(<span class="hljs-string">"DJANGO_SETTINGS_MODULE"</span>, <span class="hljs-string">"django_tutorial_blog_ng.settings"</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.core.wsgi <span class="hljs-keyword">import</span> get_wsgi_application</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> dj_static <span class="hljs-keyword">import</span> Cling</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>application = Cling(get_wsgi_application())</td></table></code></pre>
<p>This should solve our problem. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/wsgi.py Procfile blogengine/static/ .gitignore</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Configured app for deployment on Heroku'</span></td></table></code></pre>
<p>Now we’re ready to deploy our app!</p>
<h1 id="deployment">Deployment</h1>
<p>Every Heroku app needs a unique name. If you don’t specify one, then Heroku will generate one for you. Your app will have the domain name <code>appname.herokuapp.com</code> - however, if you already have a domain name lined up for your blog, you can point that domain name at the Heroku app if you wish. I’m going to deploy mine with the name <code>blog-shellshocked-info</code>.</p>
<p>You also need to consider where you want to deploy it. Heroku has two regions - North America and EU. By default it will deploy to North America, but as I’m in the EU, that’s where I want to deploy my app to - obviously if you’re in the Americas, you may be better off sticking with North America.</p>
<p>So, let’s create our app. Here’s the command you need to run:</p>
<pre><code class="hljs lang-bash singleline">$ heroku apps:create blog-shellshocked-info --region eu</code></pre>
<p>You will want to change the app name, or remove it entirely if you’re happy for Heroku to generate one for you. If you want to host it in North America, drop the <code>--region eu</code> section.</p>
<p>Once completed, this will have created your new app, and added a Git remote for it, but will not have deployed it. To deploy your app, run this command:</p>
<pre><code class="hljs lang-bash singleline">$ git push heroku master</code></pre>
<p>That will push your code up to Heroku. Please note that building the app may take a little while. Once it’s done, you can run <code>heroku open</code> to open it in your web browser. You should see an error message stating that the relation <code>blogengine_post</code> does not exist. That’s because we need to create our database structure. Heroku allows you to easily run commands on your app with <code>heroku run</code>, so let’s create our database and run our migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ heroku run python manage.py syncdb</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ heroku run python manage.py migrate</td></table></code></pre>
<p>These are exactly the same commands you would run locally to create your database, but prefaced with <code>heroku run</code> so that they get run by Heroku. As usual, you will be prompted to create a superuser - you’ll want to do this so you can log into the admin.</p>
<p>That’s all for today! We’ve finally got our site up and running on Heroku, and set up continuous integration so our tests will get run for us. You can see an example of the site working <a href="http://blog.shellshocked.info/">here</a>. As usual, you can check out the latest version of the code with <code>git checkout lesson-5</code>. If you’d like a homework assignment, then take a look at <a href="http://docs.travis-ci.com/user/deployment/heroku/">automating deployment to Heroku on successful builds</a> and see if you can get it set up successfully.</p>
<p>Next time around, we’ll get back to implementing our search and tidying up the front end. See you then!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 4]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/02/15/django-blog-tutorial-the-next-generation-part-4/</guid>
            <pubDate>Sat, 15 Feb 2014 17:45:00 GMT</pubDate>
            <description><![CDATA[<p>Hello again! As promised, in this instalment we’ll implement categories and tags, as well as an RSS feed.</p>
<p>As usual, we need to switch into our virtualenv:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<h2 id="categories">Categories</h2>
<p>It’s worth taking a little time at this point to set out what we mean by categories and tags in this case, as the two can be very similar. In this case, we’ll use the following criteria:</p>
<ul>
<li>A post can have only one category, or none, but a category can be applied to any number of posts</li>
<li>A post can have any number of tags, and a tag can be applied to any number of posts</li>
</ul>
<p>If you’re not too familiar with relational database theory, the significance of this may not be apparent, so here’s a quick explanation. Because the categories are limited to one per post, the relationship between a post and a category is known as <em>one-to-many</em>. In other words, one post can only have one category, but one category can have many posts. You can therefore define the categories in one table in your database, and refer to them by their ID (the reference to the category in the post table is referred to as a <em>foreign key</em>).</p>
<p>As usual, we will write a test first. Open up <code>blogengine/tests.py</code> and edit the line importing the <code>Post</code> model as follows:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category</code></pre>
<p>Also, add the following method before <code>test_create_post</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Add attributes</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        only_category = all_categories[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEquals(only_category, category)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(only_category.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(only_category.description, <span class="hljs-string">'The Python programming language'</span>)</td></table></code></pre>
<p>This test checks that we can create categories. But categories aren’t much use unless we can actually apply them to our posts. So we need to edit our <code>Post</code> model as well, and to do so we need to have a test in place first. Edit the <code>test_create_post</code> method as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(only_post.site.domain, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        self.assertEquals(only_post.category.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        self.assertEquals(only_post.category.description, <span class="hljs-string">'The Python programming language'</span>)</td></table></code></pre>
<p>What we’re doing here is adding a <code>category</code> attribute to the posts. This attribute contains a reference to a <code>Category</code> object.</p>
<p>Now, we also want to test adding, editing, and deleting a category from the admin interface. Add this code to the <code>AdminTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/category/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the new category</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check new category now in database</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Edit the category</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>            }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check category amended</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_category = all_categories[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEquals(only_category.name, <span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(only_category.description, <span class="hljs-string">'The Perl programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_category</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment"># Delete the category</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/category/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="64"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-comment"># Check category deleted</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        all_categories = Category.objects.all()</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEquals(len(all_categories), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>This is very similar to the prior code for the posts, and just checks we can create categories via the admin. We also need to check we can apply these categories to posts, and that they don’t break the existing tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="68"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="70"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="71"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="72"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,</td><tr><td class="linenos" data-pseudo-content="73"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="74"></td><td>            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="78"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="86"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="87"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="89"></td><td></td><tr><td class="linenos" data-pseudo-content="90"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="91"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="92"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="93"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="96"></td><td></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="99"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="100"></td><td></td><tr><td class="linenos" data-pseudo-content="101"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="102"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="103"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="104"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="105"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="106"></td><td></td><tr><td class="linenos" data-pseudo-content="107"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="108"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="109"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="112"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="113"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="114"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="115"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="116"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="117"></td><td></td><tr><td class="linenos" data-pseudo-content="118"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="119"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="120"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="121"></td><td></td><tr><td class="linenos" data-pseudo-content="122"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="123"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="124"></td><td></td><tr><td class="linenos" data-pseudo-content="125"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="126"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="127"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="128"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="129"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="130"></td><td></td><tr><td class="linenos" data-pseudo-content="131"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="132"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="133"></td><td></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        <span class="hljs-comment"># Check post deleted</span></td><tr><td class="linenos" data-pseudo-content="135"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="136"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>Here we basically take our existing post tests in the admin interface and add the category to them. Finally, we edit the <code>PostViewTest</code> class to include categories:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="77"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="78"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="82"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="83"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="84"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="88"></td><td></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="92"></td><td></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="98"></td><td></td><tr><td class="linenos" data-pseudo-content="99"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="101"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="102"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="103"></td><td></td><tr><td class="linenos" data-pseudo-content="104"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="105"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Now it’s time to run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 254, <span class="hljs-keyword">in</span> _find_tests</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 232, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 3, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from blogengine.models import Post, Category</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name Category</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.000s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>This is the expected result. We need to create our Category model. So let’s do that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>Note that we add <code>Category</code> before <code>Post</code> - this is because <code>Category</code> is a foreign key in <code>Post</code>, and must be defined in order to be used. Also, note that we add the <code>category</code> attribute as a <code>ForeignKey</code> field, like <code>User</code> and <code>Site</code>, indicating that it is an item in another table being references.</p>
<p>We also allow for <code>category</code> to be blank or null, so the user does not have to apply a category if they don’t wish to.</p>
<p>If we run our tests, they should still fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>EEFEEEEE...EE</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_create_category (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 20, <span class="hljs-keyword">in</span> test_create_category</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="35"></td><td>ERROR: test_create_post (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="37"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 37, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="60"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="65"></td><td>ERROR: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="67"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="68"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 215, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="70"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="73"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="75"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="77"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="79"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="81"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="82"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="84"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="85"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="86"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="87"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="88"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="89"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="92"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="93"></td><td></td><tr><td class="linenos" data-pseudo-content="94"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="95"></td><td>ERROR: test_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="96"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="97"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="98"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 192, <span class="hljs-keyword">in</span> test_delete_category</td><tr><td class="linenos" data-pseudo-content="99"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="100"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="101"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="102"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="103"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="104"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="105"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="106"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="107"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="108"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="109"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="110"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="111"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="112"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="113"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="114"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="115"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="116"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="117"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="118"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="119"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="120"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="121"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="122"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="123"></td><td></td><tr><td class="linenos" data-pseudo-content="124"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="125"></td><td>ERROR: test_delete_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="126"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="127"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="128"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 304, <span class="hljs-keyword">in</span> test_delete_post</td><tr><td class="linenos" data-pseudo-content="129"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="130"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="131"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="132"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="133"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="134"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="135"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="136"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="137"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="138"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="139"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="140"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="141"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="142"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="143"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="144"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="145"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="146"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="147"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="148"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="149"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="150"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="151"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="152"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="153"></td><td></td><tr><td class="linenos" data-pseudo-content="154"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="155"></td><td>ERROR: test_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="156"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="157"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="158"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 165, <span class="hljs-keyword">in</span> test_edit_category</td><tr><td class="linenos" data-pseudo-content="159"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="160"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="161"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="162"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="163"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="164"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="165"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="166"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="167"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="168"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="169"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="170"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="171"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="172"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="173"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="174"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="175"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="176"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="177"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="178"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="179"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="180"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="181"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="182"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="183"></td><td></td><tr><td class="linenos" data-pseudo-content="184"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="185"></td><td>ERROR: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="186"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="187"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="188"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 250, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="189"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="190"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="191"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="192"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="193"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="194"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="195"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="196"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="197"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="198"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="199"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="200"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="201"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="202"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="203"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="204"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="205"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="206"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="207"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="208"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="209"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="210"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="211"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="212"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="213"></td><td></td><tr><td class="linenos" data-pseudo-content="214"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="215"></td><td>ERROR: test_index (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="216"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="217"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="218"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 353, <span class="hljs-keyword">in</span> test_index</td><tr><td class="linenos" data-pseudo-content="219"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="220"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="221"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="222"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="223"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="224"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="225"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="226"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="227"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="228"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="229"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="230"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="231"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="232"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="233"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="234"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="235"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="236"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="237"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="238"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="239"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="240"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="241"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="242"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="243"></td><td></td><tr><td class="linenos" data-pseudo-content="244"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="245"></td><td>ERROR: test_post_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="246"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="247"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="248"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 403, <span class="hljs-keyword">in</span> test_post_page</td><tr><td class="linenos" data-pseudo-content="249"></td><td>    category.save()</td><tr><td class="linenos" data-pseudo-content="250"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="251"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="252"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="253"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="254"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="255"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="256"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="257"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="258"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="259"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="260"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="261"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="262"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="263"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="264"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="265"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="266"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="267"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="268"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="269"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="270"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="271"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="272"></td><td>OperationalError: no such table: blogengine_category</td><tr><td class="linenos" data-pseudo-content="273"></td><td></td><tr><td class="linenos" data-pseudo-content="274"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="275"></td><td>FAIL: test_create_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="276"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="277"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="278"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 142, <span class="hljs-keyword">in</span> test_create_category</td><tr><td class="linenos" data-pseudo-content="279"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="280"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="281"></td><td></td><tr><td class="linenos" data-pseudo-content="282"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="283"></td><td>Ran 13 tests <span class="hljs-keyword">in</span> 3.393s</td><tr><td class="linenos" data-pseudo-content="284"></td><td></td><tr><td class="linenos" data-pseudo-content="285"></td><td>FAILED (failures=1, errors=9)</td><tr><td class="linenos" data-pseudo-content="286"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>The category table hasn’t yet been created, so we need to use South to create and run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py schemamigration --auto blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>If we then run our tests again, some of them will still fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="2"></td><td>..F.F.F......</td><tr><td class="linenos" data-pseudo-content="3"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="4"></td><td>FAIL: test_create_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 142, <span class="hljs-keyword">in</span> test_create_category</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="12"></td><td>FAIL: test_delete_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="14"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 201, <span class="hljs-keyword">in</span> test_delete_category</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="20"></td><td>FAIL: test_edit_category (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 175, <span class="hljs-keyword">in</span> test_edit_category</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Ran 13 tests <span class="hljs-keyword">in</span> 4.047s</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>FAILED (failures=3)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>That’s because we haven’t registered the categories in the admin. So, that’s our next job:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    exclude = (<span class="hljs-string">'author'</span>,)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        obj.author = request.user</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        obj.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>admin.site.register(models.Category)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>admin.site.register(models.Post, PostAdmin)</td></table></code></pre>
<p>Now we try again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.............</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 13 tests <span class="hljs-keyword">in</span> 4.092s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>It passes! Let’s do a quick sense check before committing. Run the server:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py runserver</code></pre>
<p>If you visit the <a href="http://127.0.0.1:8000/admin/">admin</a>, you’ll see the text for category is <code>Categorys</code>, which is incorrect. We also don’t have a good representation of the category in the admin. Let’s fix that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> self.name</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        verbose_name_plural = <span class="hljs-string">'categories'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented categories'</span></td></table></code></pre>
<p>Now, as yet our categories don’t actually do all that much. We would like to be able to:</p>
<ul>
<li>List all posts under a category</li>
<li>Show the post category at the base of the post</li>
</ul>
<p>So, let’s implement that. First, as usual, we implement tests first:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment"># Check the post category is in the response</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="78"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="79"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="80"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="81"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="86"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="87"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="88"></td><td></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="91"></td><td></td><tr><td class="linenos" data-pseudo-content="92"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="94"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="98"></td><td></td><tr><td class="linenos" data-pseudo-content="99"></td><td>        <span class="hljs-comment"># Check the post category is in the response</span></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="101"></td><td></td><tr><td class="linenos" data-pseudo-content="102"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="103"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="104"></td><td></td><tr><td class="linenos" data-pseudo-content="105"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="106"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="107"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="108"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="109"></td><td></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>All we do here is assert that for both the post pages and the index, the text from the category name is shown in the response. We also need to check the category-specific route works. Add this method to <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_category_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Get the category URL</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        category_url = post.category.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Fetch the category</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        response = self.client.get(category_url)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check the category name is in the response</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>This is very similar to the previous tests, but fetches the absolute URL for the category, and ensures the category name and post content are shown. Now, let’s run our new tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...........EFF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_category_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 494, <span class="hljs-keyword">in</span> test_category_page</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    category_url = post.category.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AttributeError: <span class="hljs-string">'Category'</span> object has no attribute <span class="hljs-string">'get_absolute_url'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_index (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 391, <span class="hljs-keyword">in</span> test_index</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: test_post_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 446, <span class="hljs-keyword">in</span> test_post_page</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Ran 14 tests <span class="hljs-keyword">in</span> 5.017s</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>FAILED (failures=2, errors=1)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s take a look at why they failed. <code>test_category_page</code> failed because the <code>Category</code> object had no method <code>get_absolute_url</code>. So we need to implement one. To do so, we really need to add a slug field, like the posts already have. Ideally, we want this to be populated automatically, but with the option to create one manually. So, edit the models as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.utils.text <span class="hljs-keyword">import</span> slugify</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            self.slug = slugify(unicode(self.name))</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        super(Category, self).save()</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/category/%s/"</span> % (self.slug)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> self.name</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        verbose_name_plural = <span class="hljs-string">'categories'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>We’re adding the <code>slug</code> attribute to the <code>Category</code> model here. However, we’re also overriding the <code>save</code> method to detect if the slug is set, and if not, to create a slug using the <code>slugify</code> function, and set it as the category’s slug. We also define an absolute URL for the category.</p>
<p>Now, if you run the tests, they will fail because we haven’t made the changes to the database. So, we use South again:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py schemamigration --auto blogengine</code></pre>
<p>Then run the migration:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py migrate</code></pre>
<p>Now, running our tests will show that the tables are in place, but we still have some work to do. The index and post pages don’t show our categories, so we’ll fix that. First, we’ll fix our post list:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Next, we’ll take care of our post detail page:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ object.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ object.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ object.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fb-comments"</span> <span class="hljs-attr">data-href</span>=<span class="hljs-string">"http://</span></span></span><span class="hljs-template-variable">{{ post.site }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"></span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">"470"</span> <span class="hljs-attr">data-num-posts</span>=<span class="hljs-string">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Note that in both cases we include a link to the category URL.</p>
<p>Now, we should only have one failing test outstanding - the category page. For this, generic views aren’t sufficient as we need to limit the queryset to only show those posts with a specific category. Fortunately, we can extend Django’s generic views to add this functionality. First, we edit our URLconfs:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Individual posts</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Categories</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        model=Category,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="23"></td><td>)</td></table></code></pre>
<p>Note we import a new view from <code>blogengine.views</code> called <code>CategoryListView</code>. Next, we create that listview:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            category = Category.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">except</span> Category.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td></table></code></pre>
<p>This is quite simple. We import the <code>ListView</code>, as well as our models. Then we extend <code>ListView</code> by getting the slug from the request, fetching the appropriate category, and returning only those posts that have that category. If the category does not exist, we return the empty <code>Post</code> object list. We haven’t had to set the template manually as it is inherited from <code>ListView</code>.</p>
<p>If you run the tests, they should now pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="2"></td><td>..............</td><tr><td class="linenos" data-pseudo-content="3"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Ran 14 tests <span class="hljs-keyword">in</span> 5.083s</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ templates/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Categories are now shown'</span></td></table></code></pre>
<h2 id="tags">Tags</h2>
<p>Tags are fairly similar to categories, but more complex. The relationship they have is called <em>many-to-many</em> - in other words, a tag can be applied to many posts, and one post can have many tags. This is more difficult to model with a relational database. The usual way to do so is to create an intermediate table between the posts and tags, to identify mappings between the two. Fortunately, Django makes this quite easy.</p>
<p>Let’s write the tests for our tagging system. As with the categories, we’ll write the tests for creating and editing them first, and add in tests for them being visible later. First we’ll create a test for creating a new tag object:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Add attributes</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        only_tag = all_tags[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEquals(only_tag, tag)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(only_tag.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(only_tag.description, <span class="hljs-string">'The Python programming language'</span>)</td></table></code></pre>
<p>Next, we’ll amend the test for creating a post to include tags:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Add the tag</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        self.assertEquals(only_post.site.domain, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        self.assertEquals(only_post.category.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertEquals(only_post.category.description, <span class="hljs-string">'The Python programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check tags</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        post_tags = only_post.tags.all()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEquals(len(post_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        only_post_tag = post_tags[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEquals(only_post_tag, tag)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        self.assertEquals(only_post_tag.name, <span class="hljs-string">'python'</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        self.assertEquals(only_post_tag.description, <span class="hljs-string">'The Python programming language'</span>)</td></table></code></pre>
<p>Note the difference in how we apply the tags. Because a post can have more than one tag, we can’t just define <code>post.tag</code> in the same way. Instead, we have <code>post.tags</code>, which you can think of as a list, and we use the <code>add</code> method to add a new tag. Note also that the post must already exist before we can add a tag.</p>
<p>We also need to create acceptance tests for creating, editing and deleting tags:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the new tag</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'python'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            },</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check new tag now in database</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Edit the tag</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'name'</span>: <span class="hljs-string">'perl'</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">'description'</span>: <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>            }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check tag amended</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_tag = all_tags[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEquals(only_tag.name, <span class="hljs-string">'perl'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(only_tag.description, <span class="hljs-string">'The Perl programming language'</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_tag</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment"># Delete the tag</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/tag/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="64"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-comment"># Check tag deleted</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        all_tags = Tag.objects.all()</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEquals(len(all_tags), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>These tests are virtually identical to those for the <code>Category</code> objects, as we plan for our <code>Tag</code> objects to be very similar. Finally, we need to amend the acceptance tests for <code>Post</code> objects to include a tag:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'tags'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="49"></td><td></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="77"></td><td></td><tr><td class="linenos" data-pseudo-content="78"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="83"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="84"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="85"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="86"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="87"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,</td><tr><td class="linenos" data-pseudo-content="88"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="89"></td><td>            <span class="hljs-string">'category'</span>: <span class="hljs-string">'1'</span>,</td><tr><td class="linenos" data-pseudo-content="90"></td><td>            <span class="hljs-string">'tags'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="91"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="92"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="94"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="98"></td><td></td><tr><td class="linenos" data-pseudo-content="99"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="101"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="102"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="103"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="105"></td><td></td><tr><td class="linenos" data-pseudo-content="106"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="107"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="108"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="109"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="112"></td><td></td><tr><td class="linenos" data-pseudo-content="113"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="114"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="115"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="116"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="117"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="118"></td><td></td><tr><td class="linenos" data-pseudo-content="119"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="120"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="121"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="122"></td><td></td><tr><td class="linenos" data-pseudo-content="123"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="124"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="125"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="126"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="127"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="128"></td><td></td><tr><td class="linenos" data-pseudo-content="129"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="130"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="131"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="132"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="133"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="135"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="136"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="137"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="138"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="139"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="140"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="141"></td><td></td><tr><td class="linenos" data-pseudo-content="142"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="143"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="144"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="145"></td><td></td><tr><td class="linenos" data-pseudo-content="146"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="147"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="148"></td><td></td><tr><td class="linenos" data-pseudo-content="149"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="150"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="151"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="152"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="153"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="154"></td><td></td><tr><td class="linenos" data-pseudo-content="155"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="156"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="157"></td><td></td><tr><td class="linenos" data-pseudo-content="158"></td><td>        <span class="hljs-comment"># Check post deleted</span></td><tr><td class="linenos" data-pseudo-content="159"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="160"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>Here we’re just adding tags to our <code>Post</code> objects.</p>
<p>Now it’s time to run our tests to make sure they fail as expected:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 254, <span class="hljs-keyword">in</span> _find_tests</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 232, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 3, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from blogengine.models import Post, Category, Tag</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name Tag</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.000s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So here we can’t import our <code>Tag</code> model, because we haven’t created it. So, we’ll do that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tag</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.slug:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            self.slug = slugify(unicode(self.name))</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/tag/%s/"</span> % (self.slug)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> self.name</td></table></code></pre>
<p>Our <code>Tag</code> model is very much like our <code>Category</code> model, but we don’t need to change the <code>verbose_name_plural</code> value, and we amend the absolute URL to show it as a tag rather than a category.</p>
<p>We also need to amend our <code>Post</code> model to include a <code>tags</code> field:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    category = models.ForeignKey(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    tags = models.ManyToManyField(Tag)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>Note that <code>tags</code> is a <code>ManyToManyField</code>, and we pass through the model we wish to use, much like we did with the categories. The difference is that one tag can be applied to many posts and a post can have many tags, so we need an intermediate database table to handle the relationship between the two. With Django’s ORM we can handle this quickly and easily.</p>
<p>Run our tests and they should still fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.EE.EF.EE.EE......</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_create_post (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 64, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="37"></td><td>ERROR: test_create_tag (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="39"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 41, <span class="hljs-keyword">in</span> test_create_tag</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="60"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="62"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="69"></td><td>ERROR: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="71"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="72"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 335, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="73"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="74"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="75"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="76"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="77"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="79"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="81"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="82"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="84"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="85"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="86"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="88"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="89"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="92"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="93"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="94"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="95"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="96"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="97"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="98"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="99"></td><td></td><tr><td class="linenos" data-pseudo-content="100"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="101"></td><td>ERROR: test_delete_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="102"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="103"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="104"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 440, <span class="hljs-keyword">in</span> test_delete_post</td><tr><td class="linenos" data-pseudo-content="105"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="106"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="107"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="108"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="109"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="110"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="111"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="112"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="113"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="114"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="115"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="116"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="117"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="118"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="119"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="120"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="121"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="122"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="123"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="124"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="125"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="126"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="127"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="128"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="129"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="130"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="131"></td><td></td><tr><td class="linenos" data-pseudo-content="132"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="133"></td><td>ERROR: test_delete_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="134"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="135"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="136"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 306, <span class="hljs-keyword">in</span> test_delete_tag</td><tr><td class="linenos" data-pseudo-content="137"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="138"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="139"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="140"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="141"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="142"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="143"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="144"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="145"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="146"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="147"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="148"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="149"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="150"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="151"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="152"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="153"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="154"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="155"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="156"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="157"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="158"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="159"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="160"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="161"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="162"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="163"></td><td></td><tr><td class="linenos" data-pseudo-content="164"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="165"></td><td>ERROR: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="166"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="167"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="168"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 377, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="169"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="170"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="171"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="172"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="173"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="174"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="175"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="176"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="177"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="178"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="179"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="180"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="181"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="182"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="183"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="184"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="185"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="186"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="187"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="188"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="189"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="190"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="191"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="192"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="193"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="194"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="195"></td><td></td><tr><td class="linenos" data-pseudo-content="196"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="197"></td><td>ERROR: test_edit_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="198"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="199"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="200"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 279, <span class="hljs-keyword">in</span> test_edit_tag</td><tr><td class="linenos" data-pseudo-content="201"></td><td>    tag.save()</td><tr><td class="linenos" data-pseudo-content="202"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/models.py"</span>, line 34, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="203"></td><td>    super(Tag, self).save()</td><tr><td class="linenos" data-pseudo-content="204"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="205"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="206"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="207"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="208"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="209"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="210"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="211"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="212"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="213"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="214"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="215"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="216"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="217"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="218"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="219"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="220"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="221"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="222"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="223"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="224"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="225"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="226"></td><td>OperationalError: no such table: blogengine_tag</td><tr><td class="linenos" data-pseudo-content="227"></td><td></td><tr><td class="linenos" data-pseudo-content="228"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="229"></td><td>FAIL: test_create_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="230"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="231"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="232"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 256, <span class="hljs-keyword">in</span> test_create_tag</td><tr><td class="linenos" data-pseudo-content="233"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="234"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="235"></td><td></td><tr><td class="linenos" data-pseudo-content="236"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="237"></td><td>Ran 18 tests <span class="hljs-keyword">in</span> 3.981s</td><tr><td class="linenos" data-pseudo-content="238"></td><td></td><tr><td class="linenos" data-pseudo-content="239"></td><td>FAILED (failures=1, errors=7)</td><tr><td class="linenos" data-pseudo-content="240"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Again, we can easily see why they failed - the <code>blogengine_tag</code> table is not in place. So let’s create and run our migrations to fix that:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py schemamigration --auto blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>Now, we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.....F..F..F......</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 256, <span class="hljs-keyword">in</span> test_create_tag</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_delete_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 315, <span class="hljs-keyword">in</span> test_delete_tag</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: test_edit_tag (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 289, <span class="hljs-keyword">in</span> test_edit_tag</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Ran 18 tests <span class="hljs-keyword">in</span> 5.124s</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>FAILED (failures=3)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can’t yet amend our tags in the admin, because we haven’t registered them. So we do that next:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    exclude = (<span class="hljs-string">'author'</span>,)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        obj.author = request.user</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        obj.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>admin.site.register(models.Category)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>admin.site.register(models.Tag)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>admin.site.register(models.Post, PostAdmin)</td></table></code></pre>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 18 tests <span class="hljs-keyword">in</span> 5.444s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented tags'</span></td></table></code></pre>
<p>Now, like with the categories beforehand, we want to be able to show the tags applied to a post at the base of it, and list all posts for a specific tag. So, first of all, we’ll amend our <code>PostViewTest</code> class to check for the tags:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tag.name = <span class="hljs-string">'perl'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        tag.description = <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check the post category is in the response</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Check the post tag is in the response</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        post_tag = all_posts[<span class="hljs-number">0</span>].tags.all()[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        tag.name = <span class="hljs-string">'perl'</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        tag.description = <span class="hljs-string">'The Perl programming language'</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="85"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="88"></td><td></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="92"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="95"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="96"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="97"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="98"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="99"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="100"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="101"></td><td></td><tr><td class="linenos" data-pseudo-content="102"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="103"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="105"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="106"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="107"></td><td></td><tr><td class="linenos" data-pseudo-content="108"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="109"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="110"></td><td></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="112"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="113"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="114"></td><td></td><tr><td class="linenos" data-pseudo-content="115"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="116"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="117"></td><td></td><tr><td class="linenos" data-pseudo-content="118"></td><td>        <span class="hljs-comment"># Check the post category is in the response</span></td><tr><td class="linenos" data-pseudo-content="119"></td><td>        self.assertTrue(post.category.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="120"></td><td></td><tr><td class="linenos" data-pseudo-content="121"></td><td>        <span class="hljs-comment"># Check the post tag is in the response</span></td><tr><td class="linenos" data-pseudo-content="122"></td><td>        post_tag = all_posts[<span class="hljs-number">0</span>].tags.all()[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="123"></td><td>        self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="124"></td><td></td><tr><td class="linenos" data-pseudo-content="125"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="126"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="127"></td><td></td><tr><td class="linenos" data-pseudo-content="128"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="129"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="130"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="131"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="132"></td><td></td><tr><td class="linenos" data-pseudo-content="133"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>We create a tag near the top, and check for the text in the page (note that to avoid false positives from the categories, we set the name of the tags to something different). We do this on both the index and post pages.</p>
<p>We also need to put a test in place for the tag-specific page:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_tag_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Get the tag URL</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        tag_url = post.tags.all()[<span class="hljs-number">0</span>].get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Fetch the tag</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        response = self.client.get(tag_url)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check the tag name is in the response</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertTrue(post.tags.all()[<span class="hljs-number">0</span>].name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Again, this is virtually identical to the category page, adjusted to allow for the fact that we need to get a specific tag. If we now run our tests, they should fail as expected:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>................FFF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_index (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 540, <span class="hljs-keyword">in</span> test_index</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_post_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 607, <span class="hljs-keyword">in</span> test_post_page</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(post_tag.name <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: test_tag_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 714, <span class="hljs-keyword">in</span> test_tag_page</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Ran 19 tests <span class="hljs-keyword">in</span> 5.375s</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>FAILED (failures=3)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So, we need to implement the following things:</p>
<ul>
<li>Show tags on the index page</li>
<li>Show tags on the post pages</li>
<li>Create a page listing the posts with a specific tag</li>
</ul>
<p>As we have seen already with the categories, this is actually quite simple. First, we’ll sort out the tags on the index page:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>This is quite simple. We retrieve all the tags with <code>post.tags.all</code> and loop through them. We then do basically the same for the individual post pages:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ object.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ object.category.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ object.category.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> tag <span class="hljs-keyword">in</span> post.tags.all %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ tag.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ tag.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fb-comments"</span> <span class="hljs-attr">data-href</span>=<span class="hljs-string">"http://</span></span></span><span class="hljs-template-variable">{{ post.site }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"></span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">"470"</span> <span class="hljs-attr">data-num-posts</span>=<span class="hljs-string">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>This should resolve two of our outstanding tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..................F</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_tag_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 714, <span class="hljs-keyword">in</span> test_tag_page</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 19 tests <span class="hljs-keyword">in</span> 5.440s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>The final test is for the tag pages. As we saw with the categories, we can limit our querysets on specific pages. So we’ll extend the <code>ListView</code> generic view again to handle tags:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            category = Category.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-keyword">return</span> Post.objects.filter(category=category)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">except</span> Category.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagListView</span><span class="hljs-params">(ListView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        slug = self.kwargs[<span class="hljs-string">'slug'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            tag = Tag.objects.get(slug=slug)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-keyword">return</span> tag.post_set.all()</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">except</span> Tag.DoesNotExist:</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-keyword">return</span> Post.objects.none()</td></table></code></pre>
<p>Note that here, <code>Tag</code> objects have access to their assigned <code>Post</code> objects - we just use <code>post_set</code> to refer to them and get all of the posts associated with that tag. Next we’ll add the URLconfs:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category, Tag</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Individual posts</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Categories</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    url(<span class="hljs-string">r'^category/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, CategoryListView.as_view(</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        model=Category,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment"># Tags</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    url(<span class="hljs-string">r'^tag/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, TagListView.as_view(</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model=Tag,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="29"></td><td>)</td></table></code></pre>
<p>We import the <code>Tag</code> model and the <code>TagListView</code> view, and use them to set up the tag page.</p>
<p>If we now run our tests again, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 19 tests <span class="hljs-keyword">in</span> 5.473s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Well done! Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/ blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Tags are now shown'</span></td></table></code></pre>
<h2 id="rss-feed">RSS Feed</h2>
<p>For the final task today, we’ll implement an RSS feed for our posts. Django ships with a handy syndication framework that makes it easy to implement this kind of functionality.</p>
<p>As usual, we’ll create some tests first. In this case, we won’t be adding any new models, so we don’t need to test them. Instead we can jump straight into creating acceptance tests for our feed. For now we’ll just create one type of feed: a feed of all the blog posts. In a later instalment we’ll add feeds for categories and tags.</p>
<p>First of all, we’ll implement our test. Now, in order to test our feed, we need to have a solution in place for parsing an RSS feed. Django won’t do this natively, so we’ll install the <code>feedparser</code> Python module. Run the following commands:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install feedparser</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Once that’s done, feedparser should be available. You may wish to refer to the <a href="http://pythonhosted.org/feedparser/">documentation</a> as we go to help.</p>
<p>Let’s write our test for the RSS feed. First, we import feedparser near the top of the file:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">import</span> feedparser</code></pre>
<p>Then we define a new class for our feed tests. Put this towards the end of the file - I put it just before the flat page tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeedTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_all_post_feed</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create the category</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        category = Category()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        category.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        category.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        category.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the tag</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        tag = Tag()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tag.name = <span class="hljs-string">'python'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        tag.description = <span class="hljs-string">'The Python programming language'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        tag.save()</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Create a post</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        post.category = category</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Add the tag</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        post.tags.add(tag)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Fetch the feed</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        response = self.client.get(<span class="hljs-string">'/feeds/posts/'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-comment"># Parse the feed</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        feed = feedparser.parse(response.content)</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment"># Check length</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        self.assertEquals(len(feed.entries), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-comment"># Check post retrieved is the correct one</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        feed_post = feed.entries[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        self.assertEquals(feed_post.title, post.title)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        self.assertEquals(feed_post.description, post.text)</td></table></code></pre>
<p>Run the tests and you’ll see something like this:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..............F.....</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_all_post_feed (blogengine.tests.FeedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 781, <span class="hljs-keyword">in</span> test_all_post_feed</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 20 tests <span class="hljs-keyword">in</span> 6.743s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We’re getting a 404 error because the post feed isn’t implemented. So let’s implement it. We’re going to use Django’s syndication framework, which will make it easy, but we need to enable it. Open up <code>django_tutorial_blog_ng/settings/py</code> and add the following under <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'django.contrib.syndication'</span>,</code></pre>
<p>Next, we need to enable the URLconf for this RSS feed. Open up <code>blogengine/urls.py and amend the import from</code>blogengine.views` near the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> CategoryListView, TagListView, PostsFeed</code></pre>
<p>Further down, add in the following code to define the URL for the feed:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Post RSS feed</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),</td></table></code></pre>
<p>Note that we imported the PostsFeed class, but that hasn’t yet been defined. So we need to do that. First of all, add this line near the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed</code></pre>
<p>This imports the syndication views - yes, they’re another generic view! Our <code>PostsFeed</code> class is going to inherit from <code>Feed</code>. Next, we define the class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    title = <span class="hljs-string">"RSS feed - posts"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    link = <span class="hljs-string">"feeds/posts/"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    description = <span class="hljs-string">"RSS feed - blog posts"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> item.title</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> item.text</td></table></code></pre>
<p>This is fairly straightforward. We define our title, link, and description for the feed inside the class definition. We define the <code>items</code> method which sets what items are returned by the RSS feed. We also define the <code>item_title</code> and <code>item_description</code> methods.</p>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span> blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....................</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 20 tests <span class="hljs-keyword">in</span> 5.933s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ django_tutorial_blog_ng/ requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'RSS feed implemented'</span></td></table></code></pre>
<p>And that’s enough for now. Don’t forget, you can get the code for this lesson by cloning the repository from <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">Github</a> and running <code>git checkout lesson-4</code> to switch to this lesson.</p>
<p>Next time we’ll:</p>
<ul>
<li>Implement a search system</li>
<li>Add feeds for categories and posts</li>
<li>Tidy up the user interface</li>
</ul>
<p>Hope to see you then!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django Blog Tutorial - the Next Generation - Part 3]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/01/03/django-blog-tutorial-the-next-generation-part-3/</guid>
            <pubDate>Fri, 03 Jan 2014 12:57:30 GMT</pubDate>
            <description><![CDATA[<p>Hello again! In this instalment, we’re going to do the following:</p>
<ul>
<li>Add support for flat pages</li>
<li>Add support for multiple authors</li>
<li>Add a third-party comment system</li>
</ul>
<h2 id="flat-pages">Flat pages</h2>
<p>Django ships with a number of useful apps - we’ve already used the admin interface. The flat pages app is another very handy app that comes with Django, and we’ll use it to allow the blog author to create a handful of flat pages.</p>
<p>First of all, you’ll need to install the flatpages app. Edit the <code>INSTALLED_APPS</code> setting as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'south'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'blogengine'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">'django.contrib.sites'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-string">'django.contrib.flatpages'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>)</td></table></code></pre>
<p>Note that we needed to enable the <code>sites</code> framework as well. You’ll also need to set the <code>SITE_ID</code> setting:</p>
<pre><code class="hljs lang-python singleline">SITE_ID = <span class="hljs-number">1</span></code></pre>
<p>With that done, run <code>python manage.py syncdb</code> to create the required database tables. Now, let’s use the <code>sqlall</code> command to take a look at the database structure generated for the flat pages:</p>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">BEGIN</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_flatpage_sites"</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"flatpage_id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"site_id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">REFERENCES</span> <span class="hljs-string">"django_site"</span> (<span class="hljs-string">"id"</span>),</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">UNIQUE</span> (<span class="hljs-string">"flatpage_id"</span>, <span class="hljs-string">"site_id"</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_flatpage"</span> (</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-string">"url"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-string">"content"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-string">"enable_comments"</span> bool <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-string">"template_name"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">70</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-string">"registration_required"</span> bool <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_sites_872c4601"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage_sites"</span> (<span class="hljs-string">"flatpage_id"</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_sites_99732b5c"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage_sites"</span> (<span class="hljs-string">"site_id"</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_c379dc61"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage"</span> (<span class="hljs-string">"url"</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-keyword">COMMIT</span>;</td></table></code></pre>
<p>As mentioned previously, all models in Django have an <code>id</code> attribute by default. Each flat page also has a URL, title, and content. </p>
<p>Also note the separate <code>django_flatpage_sites</code> table, which maps sites to flat pages. Django can run multiple sites from the same web app, and so flat pages must be allocated to a specific site. This relationship is a many-to-many relationship, so one flat page can appear on more than one site.</p>
<p>The other fields <a href="http://127.0.0.1:8000/admin/flatpages/flatpage/add/">are hidden by default in the admin</a> and can be ignored. Let’s have a go with Django’s handy shell to explore the flatpage. Run <code>python manage.py shell</code> and you’ll be able to interact with your Django application interactively:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py shell</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Python 2.7.6 (default, Nov 23 2013, 13:53:45)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Type "help", "copyright", "credits" or "license" for more information.</td><tr><td class="linenos" data-pseudo-content="5"></td><td>(InteractiveConsole)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>&gt;&gt;&gt; from django.contrib.flatpages.models import *</td><tr><td class="linenos" data-pseudo-content="7"></td><td>&gt;&gt;&gt; FlatPage</td><tr><td class="linenos" data-pseudo-content="8"></td><td>&lt;class 'django.contrib.flatpages.models.FlatPage'&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>&gt;&gt;&gt; from django.contrib.sites.models import Site</td><tr><td class="linenos" data-pseudo-content="10"></td><td>&gt;&gt;&gt; Site.objects.all()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>[&lt;Site: example.com&gt;]</td></table></code></pre>
<p>As you can see, <code>flatpages</code> is a Django app similar to the <code>blogengine</code> one, with its own models, as is <code>sites</code>. You can see that the <code>FlatPage</code> class is a model. We can create an instance of it and save it interactively:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f = FlatPage()</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.url = <span class="hljs-string">'/about/'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.title = <span class="hljs-string">'About me'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.content = <span class="hljs-string">'All about me'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.save()</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.save()</td></table></code></pre>
<p>Note that because the relationship between the site and the flat page is a many-to-many relationship, we need to save it first, then use the <code>add</code> method to add the site to the list of sites.</p>
<p>We can retrieve it:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>FlatPage.objects.all()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>[&lt;FlatPage: /about/ -- About me&gt;]</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>FlatPage.objects.all()[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&lt;FlatPage: /about/ -- About me&gt;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>FlatPage.objects.all()[<span class="hljs-number">0</span>].title</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-string">u'About me'</span></td></table></code></pre>
<p>This command is often handy for debugging problems with your models interactively. If you now run the server and visit the admin, you should notice that the Flatpages app is now visible there, and the ‘About me’ flat page is now shown in there.</p>
<p>Let’s also take a look at the SQL required for the <code>Site</code> model. Run <code>python manage.py sqlall sites</code>:</p>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">BEGIN</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_site"</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"domain"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"name"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">COMMIT</span>;</td></table></code></pre>
<p>Again, very simple - just a domain and a name.</p>
<p>So, now that we have a good idea of how the flat page system works, we can write a test for it. We don’t need to write unit tests for the model because Django already does that, but we do need to write an acceptance test to ensure we can create flat pages and they will be where we expect them to be. Add the following to the top of the test file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td></table></code></pre>
<p>Now, before we write this test, there’s some duplication to resolve. We have two tests that subclass <code>LiveServerTestCase</code>, and both have the same method, <code>setUp</code>. We can save ourselves some hassle by creating a new class containing this method and having both these tests inherit from it. We’ll do that now because the flat page test can also be based on it. Create the following class just after <code>PostTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAcceptanceTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client = Client()</td></table></code></pre>
<p>Then remove the setUp method from each of the two tests based on <code>LiveServerTestCase</code>, and change their parent class to <code>BaseAcceptanceTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td></table></code></pre>
<p>With that done, run the tests and they should pass. Commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/tests.py django_tutorial_blog_ng/settings.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added flatpages to installed apps'</span></td></table></code></pre>
<p>Now we can get started in earnest on our test for the flat pages:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_flat_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create flat page</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        page = FlatPage()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        page.url = <span class="hljs-string">'/about/'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        page.title = <span class="hljs-string">'About me'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        page.content = <span class="hljs-string">'All about me'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        page.save()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-comment"># Add the site</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        page.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        page.save()</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Check new page saved</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        all_pages = FlatPage.objects.all()</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEquals(len(all_pages), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        only_page = all_pages[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.assertEquals(only_page, page)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Check data correct</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(only_page.url, <span class="hljs-string">'/about/'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(only_page.title, <span class="hljs-string">'About me'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertEquals(only_page.content, <span class="hljs-string">'All about me'</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Get URL</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        page_url = only_page.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Get the page</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        response = self.client.get(page_url)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Check title and content in response</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertTrue(<span class="hljs-string">'About me'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        self.assertTrue(<span class="hljs-string">'All about me'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>......F..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_flat_page (blogengine.tests.FlatPageViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 272, <span class="hljs-keyword">in</span> test_create_flat_page</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 9 tests <span class="hljs-keyword">in</span> 2.760s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td></table></code></pre>
<p>We can see why it’s failed - in our flat page test, the status code is 404, indicating the page was not found. This just means we haven’t put flat page support into our URLconf. So let’s fix that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.autodiscover()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Examples:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Blog URLs</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'blogengine.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># Flat pages</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'django.contrib.flatpages.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="18"></td><td>)</td></table></code></pre>
<p>Let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>......E..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_create_flat_page (blogengine.tests.FlatPageViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 276, <span class="hljs-keyword">in</span> test_create_flat_page</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = self.client.get(page_url)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py"</span>, line 473, <span class="hljs-keyword">in</span> get</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    response = super(Client, self).get(path, data=data, **extra)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py"</span>, line 280, <span class="hljs-keyword">in</span> get</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> self.request(**r)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/test/client.py"</span>, line 444, <span class="hljs-keyword">in</span> request</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    six.reraise(*exc_info)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/core/handlers/base.py"</span>, line 114, <span class="hljs-keyword">in</span> get_response</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    response = wrapped_callback(request, *callback_args, **callback_kwargs)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/flatpages/views.py"</span>, line 45, <span class="hljs-keyword">in</span> flatpage</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-built_in">return</span> render_flatpage(request, f)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/utils/decorators.py"</span>, line 99, <span class="hljs-keyword">in</span> _wrapped_view</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    response = view_func(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/contrib/flatpages/views.py"</span>, line 60, <span class="hljs-keyword">in</span> render_flatpage</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    t = loader.get_template(DEFAULT_TEMPLATE)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/template/loader.py"</span>, line 138, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    template, origin = find_template(template_name)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/template/loader.py"</span>, line 131, <span class="hljs-keyword">in</span> find_template</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    raise TemplateDoesNotExist(name)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>TemplateDoesNotExist: flatpages/default.html</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="31"></td><td>Ran 9 tests <span class="hljs-keyword">in</span> 3.557s</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our test still fails, but we can easily see  why - the template <code>flatpages/default.html</code> doesn’t exist. So we create it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-variable">{{ flatpage.content|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>This template is based on the blog post one, and just changes a handful of variable names. Note that it can still inherit from the blogengine base template, and in this case we’re using that for the sake of consistency.</p>
<p>If you run your tests, you should now see that they pass, so we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/ django_tutorial_blog_ng/ blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented flat page support'</span></td></table></code></pre>
<h2 id="multiple-authors">Multiple authors</h2>
<p>Next we’ll add support for multiple authors. Now, Django already has a User model, and we’ll leverage that to represent the authors. But first we’ll write our test:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, LiveServerTestCase, Client</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">import</span> markdown</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># Create your tests here.</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAcceptanceTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="82"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="83"></td><td></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        self.client.logout()</td><tr><td class="linenos" data-pseudo-content="89"></td><td></td><tr><td class="linenos" data-pseudo-content="90"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="91"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="92"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="93"></td><td></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="96"></td><td></td><tr><td class="linenos" data-pseudo-content="97"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="99"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="100"></td><td></td><tr><td class="linenos" data-pseudo-content="101"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="102"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="103"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="104"></td><td></td><tr><td class="linenos" data-pseudo-content="105"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="106"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="107"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="108"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="109"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="110"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="111"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="112"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="113"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="114"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="115"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="116"></td><td></td><tr><td class="linenos" data-pseudo-content="117"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="118"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="119"></td><td></td><tr><td class="linenos" data-pseudo-content="120"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="121"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="122"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="123"></td><td></td><tr><td class="linenos" data-pseudo-content="124"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="125"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="126"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="127"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="128"></td><td></td><tr><td class="linenos" data-pseudo-content="129"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="130"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="131"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="132"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="133"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="135"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="136"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="137"></td><td></td><tr><td class="linenos" data-pseudo-content="138"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="139"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="140"></td><td></td><tr><td class="linenos" data-pseudo-content="141"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="142"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="143"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="144"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="145"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="146"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="147"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span></td><tr><td class="linenos" data-pseudo-content="148"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="149"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="150"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="151"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="152"></td><td></td><tr><td class="linenos" data-pseudo-content="153"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="154"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="155"></td><td></td><tr><td class="linenos" data-pseudo-content="156"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="157"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="158"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="159"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="160"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="161"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="162"></td><td></td><tr><td class="linenos" data-pseudo-content="163"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="164"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="165"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="166"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="167"></td><td></td><tr><td class="linenos" data-pseudo-content="168"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="169"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="170"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="171"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="172"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="173"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="174"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="175"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="176"></td><td></td><tr><td class="linenos" data-pseudo-content="177"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="178"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="179"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="180"></td><td></td><tr><td class="linenos" data-pseudo-content="181"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="182"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="183"></td><td></td><tr><td class="linenos" data-pseudo-content="184"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="185"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="186"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="187"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="188"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="189"></td><td></td><tr><td class="linenos" data-pseudo-content="190"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="191"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="192"></td><td></td><tr><td class="linenos" data-pseudo-content="193"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="194"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="195"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td><tr><td class="linenos" data-pseudo-content="196"></td><td></td><tr><td class="linenos" data-pseudo-content="197"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="198"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="199"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="200"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="201"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="202"></td><td></td><tr><td class="linenos" data-pseudo-content="203"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="204"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="205"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="206"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="207"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="208"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="209"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="210"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="211"></td><td></td><tr><td class="linenos" data-pseudo-content="212"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="213"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="214"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="215"></td><td></td><tr><td class="linenos" data-pseudo-content="216"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="217"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="218"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="219"></td><td></td><tr><td class="linenos" data-pseudo-content="220"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="221"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="222"></td><td></td><tr><td class="linenos" data-pseudo-content="223"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="224"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="225"></td><td></td><tr><td class="linenos" data-pseudo-content="226"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="227"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="228"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="229"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="230"></td><td></td><tr><td class="linenos" data-pseudo-content="231"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="232"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="233"></td><td></td><tr><td class="linenos" data-pseudo-content="234"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="235"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="236"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="237"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="238"></td><td></td><tr><td class="linenos" data-pseudo-content="239"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="240"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="241"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="242"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="243"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="244"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="245"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="246"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="247"></td><td></td><tr><td class="linenos" data-pseudo-content="248"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="249"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="250"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="251"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="252"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="253"></td><td></td><tr><td class="linenos" data-pseudo-content="254"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="255"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="256"></td><td></td><tr><td class="linenos" data-pseudo-content="257"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="258"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="259"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="260"></td><td></td><tr><td class="linenos" data-pseudo-content="261"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="262"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="263"></td><td></td><tr><td class="linenos" data-pseudo-content="264"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="265"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="266"></td><td></td><tr><td class="linenos" data-pseudo-content="267"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="268"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="269"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="270"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="271"></td><td></td><tr><td class="linenos" data-pseudo-content="272"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="273"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="274"></td><td></td><tr><td class="linenos" data-pseudo-content="275"></td><td></td><tr><td class="linenos" data-pseudo-content="276"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="277"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_flat_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="278"></td><td>        <span class="hljs-comment"># Create flat page</span></td><tr><td class="linenos" data-pseudo-content="279"></td><td>        page = FlatPage()</td><tr><td class="linenos" data-pseudo-content="280"></td><td>        page.url = <span class="hljs-string">'/about/'</span></td><tr><td class="linenos" data-pseudo-content="281"></td><td>        page.title = <span class="hljs-string">'About me'</span></td><tr><td class="linenos" data-pseudo-content="282"></td><td>        page.content = <span class="hljs-string">'All about me'</span></td><tr><td class="linenos" data-pseudo-content="283"></td><td>        page.save()</td><tr><td class="linenos" data-pseudo-content="284"></td><td></td><tr><td class="linenos" data-pseudo-content="285"></td><td>        <span class="hljs-comment"># Add the site</span></td><tr><td class="linenos" data-pseudo-content="286"></td><td>        page.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])</td><tr><td class="linenos" data-pseudo-content="287"></td><td>        page.save()</td><tr><td class="linenos" data-pseudo-content="288"></td><td></td><tr><td class="linenos" data-pseudo-content="289"></td><td>        <span class="hljs-comment"># Check new page saved</span></td><tr><td class="linenos" data-pseudo-content="290"></td><td>        all_pages = FlatPage.objects.all()</td><tr><td class="linenos" data-pseudo-content="291"></td><td>        self.assertEquals(len(all_pages), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="292"></td><td>        only_page = all_pages[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="293"></td><td>        self.assertEquals(only_page, page)</td><tr><td class="linenos" data-pseudo-content="294"></td><td></td><tr><td class="linenos" data-pseudo-content="295"></td><td>        <span class="hljs-comment"># Check data correct</span></td><tr><td class="linenos" data-pseudo-content="296"></td><td>        self.assertEquals(only_page.url, <span class="hljs-string">'/about/'</span>)</td><tr><td class="linenos" data-pseudo-content="297"></td><td>        self.assertEquals(only_page.title, <span class="hljs-string">'About me'</span>)</td><tr><td class="linenos" data-pseudo-content="298"></td><td>        self.assertEquals(only_page.content, <span class="hljs-string">'All about me'</span>)</td><tr><td class="linenos" data-pseudo-content="299"></td><td></td><tr><td class="linenos" data-pseudo-content="300"></td><td>        <span class="hljs-comment"># Get URL</span></td><tr><td class="linenos" data-pseudo-content="301"></td><td>        page_url = str(only_page.get_absolute_url())</td><tr><td class="linenos" data-pseudo-content="302"></td><td></td><tr><td class="linenos" data-pseudo-content="303"></td><td>        <span class="hljs-comment"># Get the page</span></td><tr><td class="linenos" data-pseudo-content="304"></td><td>        response = self.client.get(page_url)</td><tr><td class="linenos" data-pseudo-content="305"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="306"></td><td></td><tr><td class="linenos" data-pseudo-content="307"></td><td>        <span class="hljs-comment"># Check title and content in response</span></td><tr><td class="linenos" data-pseudo-content="308"></td><td>        self.assertTrue(<span class="hljs-string">'About me'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="309"></td><td>        self.assertTrue(<span class="hljs-string">'All about me'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Here we create a <code>User</code> object to represent the author. Note the <code>create_user</code> convenience method for creating new users quickly and easily.</p>
<p>We’re going to exclude the author field from the admin - instead it’s going to be automatically populated based on the session data, so that when a user creates a post they are automatically set as the author. We therefore don’t need to make any changes for the acceptance tests for posts - our changes to the unit tests for the <code>Post</code> model are sufficient.</p>
<p>Run the tests, and they should fail:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py test</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E........</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_create_post (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line <span class="hljs-number">45</span>, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AttributeError: <span class="hljs-string">'Post'</span> object has no attribute <span class="hljs-string">'author'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran <span class="hljs-number">9</span> tests <span class="hljs-keyword">in</span> <span class="hljs-number">3.620</span>s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (errors=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s add the missing <code>author</code> attribute:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>Next, create the migrations:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py schemamigration --auto blogengine</code></pre>
<p>You’ll be prompted to either quit or provide a default author ID - select option 2 to provide the ID, then enter 1, which should be your own user account ID. Then run the migrations:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py migrate</code></pre>
<p>Let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.F.F.....</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 118, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 154, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Ran 9 tests <span class="hljs-keyword">in</span> 3.390s</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>FAILED (failures=2)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our test still fails because the author field isn’t set automatically. So we’ll amend the admin to automatically set the author when the <code>Post</code> object is saved:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    exclude = (<span class="hljs-string">'author'</span>,)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        obj.author = request.user</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        obj.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>admin.site.register(models.Post, PostAdmin)</td></table></code></pre>
<p>This tells the admin to exclude the <code>author</code> field from any form for a post, and when the model is saved, to set the author to the user making the HTTP request. Now run the tests, and they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.........</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 9 tests <span class="hljs-keyword">in</span> 4.086s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added author field'</span></td></table></code></pre>
<h2 id="comments">Comments</h2>
<p>The <a href="http://matthewdaly.co.uk/blog/2012/03/29/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-4/">previous version of this tutorial</a> implemented comments using Django’s own comment system. However, this has since been deprecated from Django and turned into <a href="https://github.com/django/django-contrib-comments">a separate project</a>. So we have two options for how to implement comments:</p>
<ul>
<li>We can use <a href="http://django-contrib-comments.readthedocs.org/en/latest/">the comments system</a></li>
<li>We can use a third-party comments system</li>
</ul>
<p>Now, if you want to use the Django comment system, you can do so, and it shouldn’t be too hard to puzzle out how to implement it using the documentation and my prior post. However, in my humble opinion, using a third-party comment system is the way to go for blog comments - they make it extremely easy for people to log in with multiple services without you having to write lots of additional code. They also make it significantly easier to moderate comments, and they’re generally pretty good at handling comment spam.</p>
<p>Some of the available providers include:</p>
<ul>
<li><a href="http://disqus.com/">Disqus</a></li>
<li><a href="http://intensedebate.com/">IntenseDebate</a></li>
<li><a href="https://developers.facebook.com/docs/plugins/comments/">Facebook</a></li>
</ul>
<p>For demonstration purposes, we’ll use Facebook comments, but this shouldn’t require much work to adapt it to the other providers.</p>
<p>First of all, we need to include the Facebook JavaScript SDK:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fb-root"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s, id</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-keyword">if</span> (d.getElementById(id)) <span class="hljs-keyword">return</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                js = d.createElement(s); js.id = id;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                js.src = <span class="hljs-string">"//connect.facebook.net/en_GB/all.js#xfbml=1"</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                fjs.parentNode.insertBefore(js, fjs);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            }(<span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, <span class="hljs-string">'facebook-jssdk'</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-inner"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-navbar"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">".nav-collapse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-collapse collapse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td></table></code></pre>
<p>Now, the Facebook comment system requires that you pass through the absolute page URL when initialising the comments. At present we can’t do that without hard-coding the domain name in our template, which we want to avoid. So, we need to add a site field to each post to identify the site it’s associated with.</p>
<p>As usual, we update our tests first:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, LiveServerTestCase, Client</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">import</span> markdown</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># Create your tests here.</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEquals(only_post.site.domain, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        self.assertEquals(only_post.author.username, <span class="hljs-string">'testuser'</span>)</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        self.assertEquals(only_post.author.email, <span class="hljs-string">'user@example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAcceptanceTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="77"></td><td></td><tr><td class="linenos" data-pseudo-content="78"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="80"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="81"></td><td></td><tr><td class="linenos" data-pseudo-content="82"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="84"></td><td></td><tr><td class="linenos" data-pseudo-content="85"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="88"></td><td></td><tr><td class="linenos" data-pseudo-content="89"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="90"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="92"></td><td></td><tr><td class="linenos" data-pseudo-content="93"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="95"></td><td></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>        self.client.logout()</td><tr><td class="linenos" data-pseudo-content="98"></td><td></td><tr><td class="linenos" data-pseudo-content="99"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="101"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="102"></td><td></td><tr><td class="linenos" data-pseudo-content="103"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="104"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="105"></td><td></td><tr><td class="linenos" data-pseudo-content="106"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="107"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="108"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="109"></td><td></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="112"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="113"></td><td></td><tr><td class="linenos" data-pseudo-content="114"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="115"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="116"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="117"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="118"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="119"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="120"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span>,</td><tr><td class="linenos" data-pseudo-content="121"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="122"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="123"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="124"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="125"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="126"></td><td></td><tr><td class="linenos" data-pseudo-content="127"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="128"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="129"></td><td></td><tr><td class="linenos" data-pseudo-content="130"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="131"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="132"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="133"></td><td></td><tr><td class="linenos" data-pseudo-content="134"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="135"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="136"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="137"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="138"></td><td></td><tr><td class="linenos" data-pseudo-content="139"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="140"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="141"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="142"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="143"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="144"></td><td></td><tr><td class="linenos" data-pseudo-content="145"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="146"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="147"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="148"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="149"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="150"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="151"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="152"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="153"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="154"></td><td></td><tr><td class="linenos" data-pseudo-content="155"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="156"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="157"></td><td></td><tr><td class="linenos" data-pseudo-content="158"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="159"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="160"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="161"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="162"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="163"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="164"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span>,</td><tr><td class="linenos" data-pseudo-content="165"></td><td>            <span class="hljs-string">'site'</span>: <span class="hljs-string">'1'</span></td><tr><td class="linenos" data-pseudo-content="166"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="167"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="168"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="169"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="170"></td><td></td><tr><td class="linenos" data-pseudo-content="171"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="172"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="173"></td><td></td><tr><td class="linenos" data-pseudo-content="174"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="175"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="176"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="177"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="178"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="179"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="180"></td><td></td><tr><td class="linenos" data-pseudo-content="181"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="182"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="183"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="184"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="185"></td><td></td><tr><td class="linenos" data-pseudo-content="186"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="187"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="188"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="189"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="190"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="191"></td><td></td><tr><td class="linenos" data-pseudo-content="192"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="193"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="194"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="195"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="196"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="197"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="198"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="199"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="200"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="201"></td><td></td><tr><td class="linenos" data-pseudo-content="202"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="203"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="204"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="205"></td><td></td><tr><td class="linenos" data-pseudo-content="206"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="207"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="208"></td><td></td><tr><td class="linenos" data-pseudo-content="209"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="210"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="211"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="212"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="213"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="214"></td><td></td><tr><td class="linenos" data-pseudo-content="215"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="216"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="217"></td><td></td><tr><td class="linenos" data-pseudo-content="218"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="219"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="220"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td><tr><td class="linenos" data-pseudo-content="221"></td><td></td><tr><td class="linenos" data-pseudo-content="222"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="223"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="224"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="225"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="226"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="227"></td><td></td><tr><td class="linenos" data-pseudo-content="228"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="229"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="230"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="231"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="232"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="233"></td><td></td><tr><td class="linenos" data-pseudo-content="234"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="235"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="236"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="237"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="238"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="239"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="240"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="241"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="242"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="243"></td><td></td><tr><td class="linenos" data-pseudo-content="244"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="245"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="246"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="247"></td><td></td><tr><td class="linenos" data-pseudo-content="248"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="249"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="250"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="251"></td><td></td><tr><td class="linenos" data-pseudo-content="252"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="253"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="254"></td><td></td><tr><td class="linenos" data-pseudo-content="255"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="256"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="257"></td><td></td><tr><td class="linenos" data-pseudo-content="258"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="259"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="260"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="261"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="262"></td><td></td><tr><td class="linenos" data-pseudo-content="263"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="264"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="265"></td><td></td><tr><td class="linenos" data-pseudo-content="266"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="267"></td><td>        <span class="hljs-comment"># Create the author</span></td><tr><td class="linenos" data-pseudo-content="268"></td><td>        author = User.objects.create_user(<span class="hljs-string">'testuser'</span>, <span class="hljs-string">'user@example.com'</span>, <span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="269"></td><td>        author.save()</td><tr><td class="linenos" data-pseudo-content="270"></td><td></td><tr><td class="linenos" data-pseudo-content="271"></td><td>        <span class="hljs-comment"># Create the site</span></td><tr><td class="linenos" data-pseudo-content="272"></td><td>        site = Site()</td><tr><td class="linenos" data-pseudo-content="273"></td><td>        site.name = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="274"></td><td>        site.domain = <span class="hljs-string">'example.com'</span></td><tr><td class="linenos" data-pseudo-content="275"></td><td>        site.save()</td><tr><td class="linenos" data-pseudo-content="276"></td><td></td><tr><td class="linenos" data-pseudo-content="277"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="278"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="279"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="280"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="281"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="282"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="283"></td><td>        post.author = author</td><tr><td class="linenos" data-pseudo-content="284"></td><td>        post.site = site</td><tr><td class="linenos" data-pseudo-content="285"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="286"></td><td></td><tr><td class="linenos" data-pseudo-content="287"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="288"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="289"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="290"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="291"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="292"></td><td></td><tr><td class="linenos" data-pseudo-content="293"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="294"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="295"></td><td></td><tr><td class="linenos" data-pseudo-content="296"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="297"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="298"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="299"></td><td></td><tr><td class="linenos" data-pseudo-content="300"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="301"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="302"></td><td></td><tr><td class="linenos" data-pseudo-content="303"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="304"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="305"></td><td></td><tr><td class="linenos" data-pseudo-content="306"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="307"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="308"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="309"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="310"></td><td></td><tr><td class="linenos" data-pseudo-content="311"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="312"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="313"></td><td></td><tr><td class="linenos" data-pseudo-content="314"></td><td></td><tr><td class="linenos" data-pseudo-content="315"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlatPageViewTest</span><span class="hljs-params">(BaseAcceptanceTest)</span>:</span></td><tr><td class="linenos" data-pseudo-content="316"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_flat_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="317"></td><td>        <span class="hljs-comment"># Create flat page</span></td><tr><td class="linenos" data-pseudo-content="318"></td><td>        page = FlatPage()</td><tr><td class="linenos" data-pseudo-content="319"></td><td>        page.url = <span class="hljs-string">'/about/'</span></td><tr><td class="linenos" data-pseudo-content="320"></td><td>        page.title = <span class="hljs-string">'About me'</span></td><tr><td class="linenos" data-pseudo-content="321"></td><td>        page.content = <span class="hljs-string">'All about me'</span></td><tr><td class="linenos" data-pseudo-content="322"></td><td>        page.save()</td><tr><td class="linenos" data-pseudo-content="323"></td><td></td><tr><td class="linenos" data-pseudo-content="324"></td><td>        <span class="hljs-comment"># Add the site</span></td><tr><td class="linenos" data-pseudo-content="325"></td><td>        page.sites.add(Site.objects.all()[<span class="hljs-number">0</span>])</td><tr><td class="linenos" data-pseudo-content="326"></td><td>        page.save()</td><tr><td class="linenos" data-pseudo-content="327"></td><td></td><tr><td class="linenos" data-pseudo-content="328"></td><td>        <span class="hljs-comment"># Check new page saved</span></td><tr><td class="linenos" data-pseudo-content="329"></td><td>        all_pages = FlatPage.objects.all()</td><tr><td class="linenos" data-pseudo-content="330"></td><td>        self.assertEquals(len(all_pages), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="331"></td><td>        only_page = all_pages[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="332"></td><td>        self.assertEquals(only_page, page)</td><tr><td class="linenos" data-pseudo-content="333"></td><td></td><tr><td class="linenos" data-pseudo-content="334"></td><td>        <span class="hljs-comment"># Check data correct</span></td><tr><td class="linenos" data-pseudo-content="335"></td><td>        self.assertEquals(only_page.url, <span class="hljs-string">'/about/'</span>)</td><tr><td class="linenos" data-pseudo-content="336"></td><td>        self.assertEquals(only_page.title, <span class="hljs-string">'About me'</span>)</td><tr><td class="linenos" data-pseudo-content="337"></td><td>        self.assertEquals(only_page.content, <span class="hljs-string">'All about me'</span>)</td><tr><td class="linenos" data-pseudo-content="338"></td><td></td><tr><td class="linenos" data-pseudo-content="339"></td><td>        <span class="hljs-comment"># Get URL</span></td><tr><td class="linenos" data-pseudo-content="340"></td><td>        page_url = str(only_page.get_absolute_url())</td><tr><td class="linenos" data-pseudo-content="341"></td><td></td><tr><td class="linenos" data-pseudo-content="342"></td><td>        <span class="hljs-comment"># Get the page</span></td><tr><td class="linenos" data-pseudo-content="343"></td><td>        response = self.client.get(page_url)</td><tr><td class="linenos" data-pseudo-content="344"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="345"></td><td></td><tr><td class="linenos" data-pseudo-content="346"></td><td>        <span class="hljs-comment"># Check title and content in response</span></td><tr><td class="linenos" data-pseudo-content="347"></td><td>        self.assertTrue(<span class="hljs-string">'About me'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="348"></td><td>        self.assertTrue(<span class="hljs-string">'All about me'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>All we’ve done here is to add the <code>site</code> attribute when creating a new post using the Django database API, and when we create one via the admin, we add an additional <code>site</code> aparameter to the HTTP POST request with a value of 1. Run the tests and they should fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="2"></td><td>E........</td><tr><td class="linenos" data-pseudo-content="3"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="4"></td><td>ERROR: test_create_post (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 46, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    self.assertEquals(only_post.site.name, <span class="hljs-string">'example.com'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>AttributeError: <span class="hljs-string">'Post'</span> object has no attribute <span class="hljs-string">'site'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Ran 9 tests <span class="hljs-keyword">in</span> 4.313s</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So we need to add the <code>site</code> attribute to the <code>Post</code> model. Let’s do that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.sites.models <span class="hljs-keyword">import</span> Site</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    site = models.ForeignKey(Site)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>Now create and run the migrations - you’ll be prompted to create a default value for the site attribute as well:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py schemamigration --auto blogengine</td><tr><td class="linenos" data-pseudo-content="2"></td><td> ? The field <span class="hljs-string">'Post.site'</span> does not have a default specified, yet is NOT NULL.</td><tr><td class="linenos" data-pseudo-content="3"></td><td> ? Since you are adding this field, you MUST specify a default</td><tr><td class="linenos" data-pseudo-content="4"></td><td> ? value to use <span class="hljs-keyword">for</span> existing rows. Would you like to:</td><tr><td class="linenos" data-pseudo-content="5"></td><td> ?  1. Quit now, and add a default to the field <span class="hljs-keyword">in</span> models.py</td><tr><td class="linenos" data-pseudo-content="6"></td><td> ?  2. Specify a one-off value to use <span class="hljs-keyword">for</span> existing columns now</td><tr><td class="linenos" data-pseudo-content="7"></td><td> ? Please select a choice: 2</td><tr><td class="linenos" data-pseudo-content="8"></td><td> ? Please enter Python code <span class="hljs-keyword">for</span> your one-off default value.</td><tr><td class="linenos" data-pseudo-content="9"></td><td> ? The datetime module is available, so you can <span class="hljs-keyword">do</span> e.g. datetime.date.today()</td><tr><td class="linenos" data-pseudo-content="10"></td><td> &gt;&gt;&gt; 1</td><tr><td class="linenos" data-pseudo-content="11"></td><td> + Added field site on blogengine.Post</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Created 0005_auto__add_field_post_site.py. You can now apply this migration with: ./manage.py migrate blogengine</td><tr><td class="linenos" data-pseudo-content="13"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="14"></td><td>Running migrations <span class="hljs-keyword">for</span> blogengine:</td><tr><td class="linenos" data-pseudo-content="15"></td><td> - Migrating forwards to 0005_auto__add_field_post_site.</td><tr><td class="linenos" data-pseudo-content="16"></td><td> &gt; blogengine:0005_auto__add_field_post_site</td><tr><td class="linenos" data-pseudo-content="17"></td><td> - Loading initial data <span class="hljs-keyword">for</span> blogengine.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Installed 0 object(s) from 0 fixture(s)</td></table></code></pre>
<p>Our tests should then pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.........</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 9 tests <span class="hljs-keyword">in</span> 4.261s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Now we can include our full page URL on the post detail page:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ object.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Comments<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fb-comments"</span> <span class="hljs-attr">data-href</span>=<span class="hljs-string">"http://</span></span></span><span class="hljs-template-variable">{{ post.site }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"></span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">"470"</span> <span class="hljs-attr">data-num-posts</span>=<span class="hljs-string">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>If you want to customise the comments, take a look at <a href="https://developers.facebook.com/docs/plugins/comments/">the documentation for Facebook Comments</a>.</p>
<p>With that done, we can commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ templates/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented Facebook comments'</span></td></table></code></pre>
<p>And that wraps up this lesson. As usual, you can easily switch to today’s lesson with <code>git checkout lesson-3</code>. Next time we’ll implement categories and tags, and create an RSS feed for our blog posts.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 2]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/01/02/django-blog-tutorial-the-next-generation-part-2/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/01/02/django-blog-tutorial-the-next-generation-part-2/</guid>
            <pubDate>Thu, 02 Jan 2014 11:28:48 GMT</pubDate>
            <description><![CDATA[<p>Welcome back! In this lesson, we’ll use Twitter Bootstrap to make our blog look nicer, and we’ll implement individual pages for each post.</p>
<p>Now, before we get started, don’t forget to switch into your virtualenv. From within the directory for the project, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<p>If you haven’t used Bootstrap before, you’re in for a treat. With Bootstrap, it’s easy to make a good-looking website quickly that’s responsive and mobile-friendly. We’ll also use HTML5 Boilerplate to get a basic HTML template in place.</p>
<p>Now, to install these easily, we’ll use Bower, which requires <a href="http://nodejs.org/">Node.js</a>. Install Node.js first. On most Linux distros, you’ll also need to set <code>NODE_PATH</code>, which can be done by pasting the following into your <code>.bashrc</code>:</p>
<pre><code class="hljs lang-bash singleline">NODE_PATH=<span class="hljs-string">"/usr/local/lib/node_modules"</span></code></pre>
<p>With that done, run the following command to install Bower:</p>
<pre><code class="hljs lang-bash singleline">$ sudo npm install -g bower</code></pre>
<p>Next we need to create a Bower config. First, create the folder <code>blogengine/static</code>. Then create a new file called <code>.bowerrc</code> and paste in the following content:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attr">"directory"</span>: <span class="hljs-string">"blogengine/static/bower_components"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>This tells Bower where it should put downloaded libraries. Next, run the following command to gener Bower:</p>
<pre><code class="hljs lang-bash singleline">$ bower init</code></pre>
<p>Answer all the questions it asks you - for those with defaults, these should be fine, and everything else should be easy enough. Next, run the following command to install Bootstrap and HTML5 Boilerplate:</p>
<pre><code class="hljs lang-bash singleline">$ bower install bootstrap html5-boilerplate --save</code></pre>
<p>Note that as jQuery is a dependency of Bootstrap, it will also be installed automatically. Now, we need to keep our Bower-installed files out of version control - the <code>bower.json</code> file keeps track of them for us. So add the following to your .gitignore file:</p>
<pre><code class="hljs lang-bash singleline">blogengine/static/bower_components/</code></pre>
<p>All done? Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .gitignore .bowerrc bower.json</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Bower config'</span></td></table></code></pre>
<p>Now, let’s make our template nicer. Django’s templating system is very powerful and lets one template inherit from another. We’re going to create a base template, using HTML5 Boilerplate as a starting point, that all of our web-facing pages will use. First, create a directory to hold the base template:</p>
<pre><code class="hljs lang-bash singleline">$ mkdir templates/blogengine/includes</code></pre>
<p>Then copy the <code>index.html</code> file from HTML5 Boilerplate to this directory as <code>base.html</code>:</p>
<pre><code class="hljs lang-bash singleline">$ cp blogengine/static/bower_components/html5-boilerplate/index.html templates/blogengine/includes/base.html</code></pre>
<p>Now amend this file to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> title %}</span><span class="xml">My Django Blog</span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> staticfiles %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/normalize.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/css/main.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/css/bootstrap-theme.min.css' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">&lt;!-- Add your site or application content here --&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.jQuery || <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;script src="</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js' %}</span><span class="xml"><span class="handlebars"><span class="xml">"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">\</span>/<span class="hljs-attr">script</span>&gt;</span>')</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/html5-boilerplate/js/plugins.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">static</span></span> 'bower_components/bootstrap/dist/js/bootstrap.min.js' %}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment">&lt;!-- Google Analytics: change UA-XXXXX-X to be your site's ID. --&gt;</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="37"></td><td>            (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b,o,i,l,e,r</span>)</span>{b.GoogleAnalyticsObject=l;b[l]||(b[l]=</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(b[l].q=b[l].q||[]).push(<span class="hljs-built_in">arguments</span>)});b[l].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            e=o.createElement(i);r=o.getElementsByTagName(i)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="40"></td><td>            e.src=<span class="hljs-string">'//www.google-analytics.com/analytics.js'</span>;</td><tr><td class="linenos" data-pseudo-content="41"></td><td>            r.parentNode.insertBefore(e,r)}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'ga'</span>));</td><tr><td class="linenos" data-pseudo-content="42"></td><td>            ga(<span class="hljs-string">'create'</span>,<span class="hljs-string">'UA-XXXXX-X'</span>);ga(<span class="hljs-string">'send'</span>,<span class="hljs-string">'pageview'</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Note the following:</p>
<ul>
<li>We need to use <code>{% load staticfiles %}</code> to be able to load any static files.</li>
<li>We use the <code>{% static %}</code> template tag to load static files such as CSS and HTML</li>
<li>We define blocks called <code>title</code> and <code>content</code>. Any template that extends this one can override whatever is inside this template.</li>
</ul>
<p>Please note that HTML5 Boilerplate may conceivable change in future, so bear in mind that all you really need to do is load the staticfiles app, use the <code>static</code> tag for any static files that need to be loaded, and define the blocks in the appropriate places.</p>
<p>Next, let’s amend our existing template to inherit from this one:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Now fire up the server with <code>python manage.py runserver</code> and check everything is working OK. You should see that your new base template is now in use and the CSS and JS files are being loaded correctly. Let’s commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Now use Bootstrap and HTML5 Boilerplate for templates'</span></td></table></code></pre>
<p>Now, let’s use Bootstrap to style our blog a little. First we’ll add a navigation bar at the top of our blog. Edit the base template as follows:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-static-top navbar-inverse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-inner"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-navbar"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">".nav-collapse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav-collapse collapse"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> header %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>            </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container footer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Copyright &amp;copy; </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">now</span></span> "Y" %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td></table></code></pre>
<p>Note the footer copyright section. Here we output the current year using <code>now</code>. Also note the addition of the header block. This will let us override the page header if necessary.</p>
<p>We’ll also wrap the posts in a div:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add templates/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Amended templates'</span></td></table></code></pre>
<h2 id="formatting-our-content">Formatting our content</h2>
<p>As it stands right now, we can’t do much to format our posts. It is possible to include HTML in our posts with Django, but by default it will strip it out. Also, we don’t want users to have to write HTML manually - we want to make our blog user friendly!</p>
<p>There are two possible approaches. One is to embed a rich text editor like TinyMCE in the admin and use that for editing the files, but I’ve found things like that to be cumbersome. The alternative is to use some other form of lightweight markup, and that’s the approach we’ll take here. We’re going to use Markdown for editing our posts.</p>
<p>Django has actually dropped support for Markdown, but it’s not hard to implement your own version. First, install Markdown and add it to your <code>requirements.txt</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install markdown</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Now, we shouldn’t write any production code before writing a test, so let’s amend our existing post test to check to see that Markdown is working as expected:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>You’ll also need to add the following at the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">import</span> markdown</code></pre>
<p>What we do here is we convert our post text to include a link using Markdown. We also need to render that post in markdown within the test so that what we have in the test matches what will be produced - otherwise our test will be broken. We also check that the link is marked up correctly.</p>
<p>Save the file and run the tests - they should fail. Now, create the following directory and file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir blogengine/templatetags</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ touch blogengine/templatetags/__init__.py</td></table></code></pre>
<p>Note that the <code>__init__.py</code> file is meant to be blank.</p>
<p>Then create the following file and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> markdown</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.template.defaultfilters <span class="hljs-keyword">import</span> stringfilter</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils.encoding <span class="hljs-keyword">import</span> force_unicode</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>register = template.Library()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-meta">@register.filter(is_safe=True)</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-meta">@stringfilter</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">custom_markdown</span><span class="hljs-params">(value)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    extensions = [<span class="hljs-string">"nl2br"</span>, ]</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">return</span> mark_safe(markdown.markdown(force_unicode(value),</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                                       extensions,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>                                       safe_mode=<span class="hljs-keyword">True</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>                                       enable_attributes=<span class="hljs-keyword">False</span>))</td></table></code></pre>
<p>Then just amend the post list template to use it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>It’s that easy to use a custom markup system with your blog!</p>
<p>Let’s commit the changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt templates/ blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Markdown support'</span></td></table></code></pre>
<h2 id="pagination">Pagination</h2>
<p>As at right now, all of our posts are displayed on the index page. We want to fix that by implementing pagination. Fortunately, that’s very easy for us because we’re using Django’s generic views. Go into <code>blogengine/urls.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>)</td></table></code></pre>
<p>That will automatically paginate our posts by 5 - feel free to change the value of <code>paginate_by</code> if you wish. However, we need to place the links in our template as well:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Try adding a few more blog posts, and you’ll see the pagination links. But give them a try, and they won’t work. Why not? Well, as it turns out there was a bug in the project-wide <code>urls.py</code> file (my bad!). Let’s fix that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.autodiscover()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Examples:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Blog URLs</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'blogengine.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="15"></td><td>)</td></table></code></pre>
<p>If you try again, you’ll see that the <code>blogengine</code> app now happily deals with the paginated posts. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ django_tutorial_blog_ng/ templates/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented pagination'</span></td></table></code></pre>
<h2 id="viewing-individual-posts">Viewing individual posts</h2>
<p>As our last task for today, we’ll implement individual pages for each post. We want each post to have a nice, friendly URL that is as human-readable as possible, and also includes the date the post was created.</p>
<p>First of all, we’ll implement our test for it, however:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Add this method to the <code>PostViewTest</code> class, after <code>test_index</code>. It’s very similar to <code>test_index</code>, since it’s testing much the same content. However, not that we fetch the post-specific URL using the method <code>get_absolute_url</code>, and we then fetch that page.</p>
<p>Now, if you run the test, it will fail because <code>get_absolute_url</code> isn’t implemented. It’s often a good idea to have a <code>get_absolute_url</code> method for your models, which defines a single URL scheme for that type of object. So let’s create one. However, to implement our URL scheme we need to make some changes. Right now we have the date, but we don’t have a text string we can use, known in Django as a <em>slug</em>. So we’ll add a slug field, which will be prepopulated based on the post title. Edit your model as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>Here we’ve added a slug field to the model, as well as implementing our <code>get_absolute_url</code> method. Note we’ve limited the date to year and month, but you can include days if you wish.</p>
<p>While we’re in here, we’ve also implemented the <code>__unicode__</code> method. Essentially, this sets how Django describes the object in the admin - in this case, the post title is a logical way of describing that <code>Post</code> object, so it returns the post title.</p>
<p>We’ve also added the class Meta, with the ordering field. This tells Django that by default any list of posts should return them ordered by <code>pub_date</code> in reverse - in other words, latest first.</p>
<p>To have the slug filled in automatically, we need to customise the admin interface a little as well:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>admin.site.register(models.Post, PostAdmin)</td></table></code></pre>
<p>Now, I recommend at this stage going into the admin and deleting all of your posts, because otherwise you’ll have problems in migrating them. The issue is that each slug is compulsory and must be unique, and it’s not practical to use South to automatically generate new slugs from the title on the fly, so by deleting them at this stage you’ll avoid problems. Once that’s done, run this command:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py schemamigration --auto blogengine</code></pre>
<p>You’ll be prompted to specify a one-off default value - enter any string you like, such as “blah”. Then run the migration:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py migrate</code></pre>
<p>Let’s run our tests now:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.F.F...F</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 103, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="13"></td><td>FAIL: test_edit_post (blogengine.tests.AdminTest)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 132, <span class="hljs-keyword">in</span> test_edit_post</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAIL: test_post_page (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="23"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 222, <span class="hljs-keyword">in</span> test_post_page</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    self.assertEquals(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>AssertionError: 404 != 200</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="29"></td><td>Ran 8 tests <span class="hljs-keyword">in</span> 2.180s</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>FAILED (failures=3)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Whoops! Our tests are broken, because the slug field isn’t being filled in. If you take a look at the page for adding a post, you’ll notice that the slug is filled in using JavaScript, so our test fails because the test client doesn’t interpret JavaScript. So in the tests we have to fill in the slug field manually.</p>
<p>Also, for the unit tests, the slug attribute isn’t being created at all, so it can’t be saved. Let’s remedy that. First, edit the <code>test_create_post</code> method of <code>PostTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        self.assertEquals(only_post.slug, <span class="hljs-string">'my-first-post'</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td></table></code></pre>
<p>Next, let’s amend <code>AdminTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.client.logout()</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="58"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="59"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="78"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="80"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="82"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="83"></td><td></td><tr><td class="linenos" data-pseudo-content="84"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="89"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="90"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="91"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="92"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span>,</td><tr><td class="linenos" data-pseudo-content="93"></td><td>            <span class="hljs-string">'slug'</span>: <span class="hljs-string">'my-second-post'</span></td><tr><td class="linenos" data-pseudo-content="94"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="95"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="96"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="97"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="98"></td><td></td><tr><td class="linenos" data-pseudo-content="99"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="100"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="101"></td><td></td><tr><td class="linenos" data-pseudo-content="102"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="103"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="104"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="105"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="106"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="107"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="108"></td><td></td><tr><td class="linenos" data-pseudo-content="109"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="112"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="113"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="114"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="115"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="116"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="117"></td><td></td><tr><td class="linenos" data-pseudo-content="118"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="119"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="120"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="121"></td><td></td><tr><td class="linenos" data-pseudo-content="122"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="123"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="124"></td><td></td><tr><td class="linenos" data-pseudo-content="125"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="126"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="127"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="128"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="129"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="130"></td><td></td><tr><td class="linenos" data-pseudo-content="131"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="132"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="133"></td><td></td><tr><td class="linenos" data-pseudo-content="134"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="135"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="136"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>And <code>PostViewTest</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post_page</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        post.text = <span class="hljs-string">'This is [my first blog post](http://127.0.0.1:8000/)'</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        post.slug = <span class="hljs-string">'my-first-post'</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Get the post URL</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        post_url = only_post.get_absolute_url()</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Fetch the post</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        response = self.client.get(post_url)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        self.assertTrue(markdown.markdown(post.text) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check the link is marked up properly</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertTrue(<span class="hljs-string">'&lt;a href="http://127.0.0.1:8000/"&gt;my first blog post&lt;/a&gt;'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>What we’re doing here is that every time we create a Post object programmatically, we add the <code>post.slug</code> atttribute to it. Also, when submitting a post via the admin, we pass the <code>slug</code> parameter via HTTP POST, thus emulating how a form would submit this data.</p>
<p>If you run the tests again, you’ll see that <code>test_post_page</code> still fails. This is because we haven’t yet up the URLs, templates and views to do so. Let’s fix that. We’ll use another generic view, called a DetailView, to display the posts. Amend <code>blogengine/urls.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>rom django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView, DetailView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># Individual posts</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    url(<span class="hljs-string">r'^(?P&lt;pub_date__year&gt;\d{4})/(?P&lt;pub_date__month&gt;\d{1,2})/(?P&lt;slug&gt;[a-zA-Z0-9-]+)/?$'</span>, DetailView.as_view(</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="16"></td><td>)</td></table></code></pre>
<p>Running our tests again will still fail, but now because the template <code>post_detail.html</code> has not been found. So let’s create it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ object.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ object.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ object.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>If you run your tests again, they should now pass. However, we still need to provide a hyperlink from each post in the index to the post page, so let’s do that:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "blogengine/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> custom_markdown %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-variable">{{ post.text|custom_markdown }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>And that’s all for today! We now have individual post pages, we’ve styled our blog a bit, and we’ve implemented Markdown support. All that remains is to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/ templates/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented post pages'</span></td></table></code></pre>
<p>As before, I’ve tagged the final commit with ‘lesson-2’, so if you’re following along, you can switch to this point with <code>git checkout lesson-2</code>.</p>
<p>Next time we’ll add support for flat pages and multiple authors, as well as adding support for comments via a third-party commenting system.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Django blog tutorial - the next generation - part 1]]></title>
            <link>https://matthewdaly.co.uk/blog/2013/12/28/django-blog-tutorial-the-next-generation-part-1/</link>
            <guid>https://matthewdaly.co.uk/blog/2013/12/28/django-blog-tutorial-the-next-generation-part-1/</guid>
            <pubDate>Sat, 28 Dec 2013 15:00:32 GMT</pubDate>
            <description><![CDATA[<p>My series of Django tutorials for building a blogging engine are by far the most popular posts I’ve ever written on here. I’ve had a lot of people contact me with questions or just to express their thanks, for which I’m very grateful!</p>
<p>However, these tutorials haven’t really aged well. I’ve since had the opportunity to use Django in a professional capacity, which has significantly improved my understanding of the framework and the whole Python ecosystem, and there’s a lot of best practices that I didn’t follow and now wish I had. There’s also been a few gotchas that have hindered a few people in the past that I’d like to have the opportunity to correct.</p>
<p>So, I’m therefore creating a brand new series of tutorials to remedy this situation. This series will cover exactly the same basic idea of using Django to build a blogging engine, but will expand on what the original series did in many ways. We will cover such additional topics as:</p>
<ul>
<li>Using Twitter Bootstrap to make your blog look good without too much hassle</li>
<li>Using Virtualenv to sandbox your blog application</li>
<li>Using South to effectively manage changes to your database structure</li>
<li>Writing some simple unit tests</li>
<li>Deploying the finished application to Heroku</li>
</ul>
<p>Ready? Let’s get started!</p>
<h2 id="getting-everything-set-up">Getting everything set up</h2>
<p>Now, first of all, I’m going to assume you’re using some variant of Unix, such as Linux or Mac OS X. I’m not saying you can’t follow this tutorial with Windows, but you’ll have a harder time, because Windows just isn’t as developer-friendly as Unix in general. A modern Linux distro like Ubuntu is generally pretty easy to use, and you can easily run it in Virtualbox, so if you use Windows I would recommend you use that to make things easier.</p>
<p>You should also have at least a basic grasp of the command line, such as how to create and navigate directories. You don’t have to be a wizard with it, though.</p>
<p>You also need a proper programmer’s text editor. I use Vim, but I freely admit that Vim has a very steep learning curve and you may have trouble picking it up at the same time as following this tutorial. Emacs is also a very powerful text editor, and if you like it, feel free to use it. If you haven’t yet found a programmer’s text editor you like, I suggest you check out <a href="http://www.sublimetext.com/">Sublime Text</a>, which is easy to get started with, but also very powerful, and can be used without purchasing a license. Don’t worry too much about your text editor - it’s not vitally import that you use what I use, just find one that works for you. That said, I will say one thing - DON’T use an IDE. IDE’s hide too many details from new users and make it harder to figure out what’s going on.</p>
<p>You will also need to ensure you have the following installed:</p>
<ul>
<li>Python. I recommend installing Python 2.7, because you may have issues with Python 2.6, and Python 3 isn’t universally supported yet so you might have some issues with that</li>
<li>Virtualenv</li>
<li>Pip</li>
<li>Git</li>
</ul>
<p>On most Linux distros, you can find packages for all of these items easily enough using your package manager. On Mac OS X, I recommend using Homebrew to install them, though if you have another package manager installed you can use that too. If you have issues with installing any of these, a quick Google search should be sufficient to resolve the issue.</p>
<h2 id="beginning-work">Beginning work</h2>
<p>With all that done, we’re ready to get started. Create a folder in a suitable place on your file system and switch into it. I generally keep a dedicated folder in my home directory called <code>Projects</code> to use for all of my projects, and give each project a folder within it - in this case the project is called <code>django_tutorial_blog_ng</code>.</p>
<p>Now, we’ll use Git to keep track of our source code. If you prefer Mercurial, feel free to use that, but this tutorial will assume use of Git, so you’ll want to adapt the commands used accordingly. Start tracking your project with the following command from the shell, when you’re in the project directory:</p>
<pre><code class="hljs lang-bash singleline">$ git init</code></pre>
<p>If you haven’t used Git before, you’ll also want to <a href="http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup">configure it</a>.</p>
<p>Next, we set up our virtualenv. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ virtualenv venv --distribute</code></pre>
<p>Followed by:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<p>Every time you come back to work on this project, you’ll need to run the previous command to make sure you’re running the version of Python installed under venv/ rather than your system Python. You can tell it’s using this because your shell prompt will be prefixed with <code>(venv)</code>.</p>
<p>Why do this? Well, it means you can install whatever version of a Python module you like, without having root access, and means the Python install you’re using will only have those modules you explicitly install, rather than all of those ones available with your operating system. For instance, you could have multiple projects using different versions of Django, rather than having to update a global installation of Django and potentially break existing applications.</p>
<p>Now that our virtualenv is set up, we’ll install Django, as well as several other useful Python modules. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ pip install django-toolbelt South</code></pre>
<p>A little explanation is called for here. The package <code>django-toolbelt</code> includes a number of packages we’ll be using, including Django, as well as Gunicorn (a simple web server we’ll use when the time comes to deploy the app to Heroku). South is a migration tool that is commonly used with Django - basically, if you make changes to existing models, Django doesn’t natively have the capacity to apply those changes (yet - native migrations are planned at some point in the future), so South can be used to apply those changes for you without having to either manually change the database structure or dump the database and rebuild it.</p>
<p>Please note that one of the packages, <code>psycopg2</code>, may fail if you don’t have PostgreSQL installed, but don’t worry about installing it. We’ll be using SQLite for developing the application locally, and we’ll be deploying the finished product to Heroku, which does have it installed.</p>
<p>Once the installation is complete, run the following command to record the new modules installed:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>The file <code>requirements.txt</code> will be created, which stores the packages and versions you have installed so that they can be easily recreated. If you had issues installing <code>psycopg2</code>, then here’s what your <code>requirements.txt</code> should look like - feel free to edit it manually to look like this, as when we deploy it to Heroku, it will need to be correct to ensure that our application can be deployed successfully:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Django==1.6.1</td><tr><td class="linenos" data-pseudo-content="2"></td><td>South==0.8.4</td><tr><td class="linenos" data-pseudo-content="3"></td><td>dj-database-url==0.2.2</td><tr><td class="linenos" data-pseudo-content="4"></td><td>dj-static==0.0.5</td><tr><td class="linenos" data-pseudo-content="5"></td><td>django-toolbelt==0.0.1</td><tr><td class="linenos" data-pseudo-content="6"></td><td>gunicorn==18.0</td><tr><td class="linenos" data-pseudo-content="7"></td><td>psycopg2==2.5.1</td><tr><td class="linenos" data-pseudo-content="8"></td><td>static==0.4</td><tr><td class="linenos" data-pseudo-content="9"></td><td>wsgiref==0.1.2</td></table></code></pre>
<p>Next, we’ll commit these changes with Git:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Committed requirements'</span></td></table></code></pre>
<p>Next we’ll add a <code>.gitignore</code> file to ignore our virtualenv - we want to keep this out of version control because it’s something specific to that install. We have all we need to recreate it so we don’t want to store it. In addition, we also want to ignore any compiled Python files (identifiable by the .pyc suffix):</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>*.pyc</td></table></code></pre>
<p>Let’s commit that too:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .gitignore</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added a gitignore file'</span></td></table></code></pre>
<p>Now, let’s generate our project’s basic skeleton:</p>
<pre><code class="hljs lang-bash singleline">$ django-admin.py startproject django_tutorial_blog_ng .</code></pre>
<p>This application skeleton includes a basic configuration which will be sufficient for now, but you will also want to add the SQLite database file to your <code>.gitignore</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>env/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>*.pyc</td><tr><td class="linenos" data-pseudo-content="3"></td><td>db.sqlite3</td></table></code></pre>
<p>Let’s commit what we’ve done:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add .gitignore django_tutorial_blog_ng/ manage.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Created project skeleton'</span></td></table></code></pre>
<p>Now, before we create our database, we need to ensure we are using South. Go into <code>django_tutorial_blog_ng/settings.py</code> and find <code>INSTALLED_APPS</code>. Edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'south'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>)</td></table></code></pre>
<p>Now, you can create your database. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py syncdb</code></pre>
<p>You’ll be prompted to create a superuser - go ahead and fill in the details. Now, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py runserver</code></pre>
<p>This will run Django’s built-in web server on port 8000, and if you click <a href="http://127.0.0.1:8000">here</a>, you should see a page congratulating you on your first Django-powered page. Once you’re finished with it, you can stop the web server with <kbd>Ctrl-C</kbd>.</p>
<p>Don’t forget to commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/settings.py</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added South to installed apps'</span></td></table></code></pre>
<h2 id="your-first-app">Your first app</h2>
<p>Django distinguishes between the concepts of <strong>projects</strong> and <strong>apps</strong>. A project is a specific project that may consist of one or more apps, such as a web app, whereas an app is a set of functionality within a project. For instance, one website might include some flat pages, an admin interface, and a blogging engine, and these could easily be different apps. By encouraging you to separate different types of functionality into different apps, Django makes it easier for you to reuse existing content elsewhere.</p>
<p>We’re going to create our first app, which is the blogging engine. Run the following command to create a basic skeleton for this app:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py startapp blogengine</code></pre>
<p>Next, we need to amend our settings to install this app:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'south'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'blogengine'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>)</td></table></code></pre>
<p>Now, before we can use this app, we want to let South know about it so that changes to your database structure will be managed right from the start by South. Run the following command to create your initial migration:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py schemamigration --initial blogengine</code></pre>
<p>That creates the file for your first migration,but doesn’t run it. To migrate your database structure to the latest version, run the following:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py migrate</code></pre>
<p>This won’t actually make any changes, but it will ensure that all future changes to your models for the <code>blogengine</code> app are handled by South. Let’s commit our app skeleton:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/settings.py blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added blogengine app skeleton'</span></td></table></code></pre>
<p>So, we now have our first app set up, but it doesn’t do anything much.</p>
<p>Remember that I mentioned how Django differentiates between projects and apps? Well, Django actually ships with a number of useful apps, and one of those is the admin interface. I consider the Django admin to be one of the framework’s killer features because it’s easy to use and customise, and saves you a lot of grief.</p>
<p>In the past, the admin interface needed a little work to get it working, but in Django 1.6 it’s configured to work out of the box, so if you click <a href="http://127.0.0.1:8000/admin/">here</a>, you should see the login screen for it. You should be able to sign in using the username and password you set when you ran <code>syncdb</code>.</p>
<p>Next, we’ll set up our first model.</p>
<h2 id="an-introduction-to-mvc">An introduction to MVC</h2>
<p>MVC is a common pattern used in web development. Many web development frameworks can be loosely described as MVC, including Django, Rails, CodeIgniter, Laravel and Symfony, as well as some client-side frameworks like Backbone.js. The basic concept is that a web app is divided into three basic components:</p>
<ul>
<li><strong>Models</strong> - the data managed with the application</li>
<li><strong>Views</strong> - the presentation of the data</li>
<li><strong>Controllers</strong> - an intermediary between the models and the views</li>
</ul>
<p>Now, Django’s interpretation of MVC is slightly different to many other frameworks. While in most frameworks the views are HTML templates for rendering the data, in Django this role is taken by the templates, and the views are functions or objects that render data from the models using a template. Effectively, you can think of Django’s views as being like controllers in other frameworks, and Django templates as being views.</p>
<p>In Django, you create your models as Python classes that represent your data, and you use the Django ORM to query the database. As a result, it’s rare to have to directly query your database using SQL, making it more portable between different databases.</p>
<p>Now, our first model is going to be of a blog post. At least initially, each post will have the following attributes:</p>
<ul>
<li>A title</li>
<li>A publication date and time</li>
<li>Some text</li>
</ul>
<p>Now, we could just jump straight into creating our first model, but we’re going to make a point of following the practices of test-driven development here. The basic concept of TDD is that you write a failing test before writing any code, then you write the code to pass that test afterwards. It does make things a bit slower, but it’s all too easy to neglect writing tests at all if you leave it till later.</p>
<p>If you take a look in the <code>blogengine</code> folder you’ll notice there’s a file called <code>tests.py</code>. Open it up and you should see the following:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Create your tests here.</span></td></table></code></pre>
<p>It’s worth taking a little time to plan out what we want to test from our post model. Each post object will have the attributes I mentioned above, and what we want to be able to do is test that we can:</p>
<ul>
<li>Set the title</li>
<li>Set the publication date and time</li>
<li>Set the text</li>
<li>Save it successfully</li>
<li>Retrieve it successfully</li>
</ul>
<p>So, let’s create a test for our post model. We’ll go through the relevant sections of the test bit by bit:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td></table></code></pre>
<p>Here we’re importing the required functionality. <code>TestCase</code> is provided by Django, and is an object all of your tests should inherit from. <code>timezone</code> is a utility for handling dates and times correctly. Finally, <code>Post</code> is our model, which we have yet to implement.</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Create your tests here.</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        post = Post()</td></table></code></pre>
<p>Here we create the PostTest class, which represents a test for your <code>Post</code> model. So far it only has one method, but you can add additional ones if required.</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        post.pub_date = timezone.now()</td></table></code></pre>
<p>Here we set the post’s attributes.</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        post.save()</td></table></code></pre>
<p>Now we save it. At this point it has been added to the database, and the rest of the test involves us ensuring it has been saved correctly and can be retrieved.</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        self.assertEquals(only_post, post)</td></table></code></pre>
<p>Here we use the Django database API to fetch all of the Post objects, assert that there is only 1 post object, retrieve that post object, and assert that it is the same object as the post object we just saved.</p>
<p>If unit testing is new to you, assertions may be new to you. Essentially you’re saying to the Python interpreter, “I assert that X is true, so please raise an error if this is not true”. Here we assert that the length of the variable <code>all_posts</code> is 1, and that that post is the same object as the previously saved object, so that the test will fail if that is not the case.</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td></table></code></pre>
<p>Finally, we assert that the values of each of the post’s attributes as stored in the database match up with those in the post object we set. For the <code>title</code> and <code>text</code> fields, these are easy to validate as we can just check the values against those we set. For the <code>pub_date</code> field, things are a bit more complex, since this will be an object in its own right, so you need to check the day, month, year, hour, minute and second attributes separately.</p>
<p>The whole thing should look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your tests here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td></table></code></pre>
<p>With that in place, the time has come to run our test with the following command:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py <span class="hljs-built_in">test</span></code></pre>
<p>You should see something like this:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: blogengine.tests (unittest.loader.ModuleImportFailure)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: blogengine.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 254, <span class="hljs-keyword">in</span> _find_tests</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/loader.py"</span>, line 232, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 3, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from blogengine.models import Post</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name Post</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.000s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Don’t worry about the error - this is exactly what we expect to see because we haven’t implemented our Post model yet. Now that we have a failing test in place, we can implement our model to make the test pass. Open up <code>blogengine/models.py</code> and enter the following:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    text = models.TextField()</td></table></code></pre>
<p>Save the file and run the test again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_create_post (blogengine.tests.PostTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 17, <span class="hljs-keyword">in</span> test_create_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    post.save()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 545, <span class="hljs-keyword">in</span> save</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    force_update=force_update, update_fields=update_fields)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 573, <span class="hljs-keyword">in</span> save_base</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 654, <span class="hljs-keyword">in</span> _save_table</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/base.py"</span>, line 687, <span class="hljs-keyword">in</span> _do_insert</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    using=using, raw=raw)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line 232, <span class="hljs-keyword">in</span> _insert</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-built_in">return</span> insert_query(self.model, objs, fields, **kwargs)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/query.py"</span>, line 1511, <span class="hljs-keyword">in</span> insert_query</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-built_in">return</span> query.get_compiler(using=using).execute_sql(return_id)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/models/sql/compiler.py"</span>, line 898, <span class="hljs-keyword">in</span> execute_sql</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/utils.py"</span>, line 99, <span class="hljs-keyword">in</span> __exit__</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/util.py"</span>, line 53, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/venv/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py"</span>, line 450, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-built_in">return</span> Database.Cursor.execute(self, query, params)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>OperationalError: no such table: blogengine_post</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="35"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.059s</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our test still fails, but if we take a look at this error message, we can see why - there is no database table for the posts (called <code>blogengine_post</code>). Using South, we can easily remedy that by creating a new migration to create this table:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py schemamigration --auto blogengine</code></pre>
<p>That creates the new migration. Now let’s run it:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py migrate</code></pre>
<p>Now, let’s run our tests to check it’s working as expected:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>(venv)Smith:django_tutorial_blog_ng matthewdaly$ python manage.py <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Success! We now have a model in place that passes our test. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added post model with passing test'</span></td></table></code></pre>
<p>Now, Django’s ORM is basically a layer on top of SQL that abstracts away differences between different relational databases, but the underlying queries are still being run. You can view the SQL created to generate the table by using the <code>sqlall</code> command. Just run <code>python manage.py sqlall blogengine</code> and you should see something like this:</p>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">BEGIN</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"blogengine_post"</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"pub_date"</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">"text"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">COMMIT</span>;</td></table></code></pre>
<p>Note the addition of the <code>id</code> field as the primary key. If you’re at all familiar with relational databases, you’ll know that every table must have one field, called a primary key, that is a unique reference to that row. This can be overridden, but here it’s exactly the behaviour we want.</p>
<h2 id="creating-blog-posts-via-the-admin">Creating blog posts via the admin</h2>
<p>Now, we need a way to be able to create, edit and delete blog posts. Django’s admin interface allows us to do so easily. However, before we do so, we want to create automated acceptance tests for this functionality, in order to test the ability to create posts from an end-user’s perspective. While unit tests are for testing sections of an application’s functionality from the perspective of other sections of the application, acceptance tests are testing from the user’s perspective. In other words, they test what the application needs to do to be acceptable.</p>
<p>First, we will test logging into the admin. Open up <code>blogengine/tests.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase, LiveServerTestCase, Client</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment"># Create your tests here.</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Set the attributes</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Save it</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertEquals(only_post, post)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My first post'</span>)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my first blog post'</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        self.assertEquals(only_post.pub_date.day, post.pub_date.day)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertEquals(only_post.pub_date.month, post.pub_date.month)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(only_post.pub_date.year, post.pub_date.year)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(only_post.pub_date.second, post.pub_date.second)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment"># Create client</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        c = Client()</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td></table></code></pre>
<p>First of all, we import two new objects from <code>django.test</code>, <code>LiveServerTestCase</code> and <code>Client</code>. Then we create the first part of our first test for the admin, named <code>AdminTest</code>. Eventually, this will test that we can log successfully into the admin interface. For now, we’re just doing the following:</p>
<ul>
<li>Creating a Client object</li>
<li>Fetching the <code>/admin/</code> route</li>
<li>Asserting that the status code for this HTTP request is 200, (in other words, that the page was fetched successfully).</li>
</ul>
<p>If you run <code>python manage.py test</code>, you should see that both tests pass successfully. Now we’ll extend <code>AdminTest</code> - we’ll verify that the response contains the string ‘Log in’, which in the Django admin interface, appears on the login page:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create client</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        c = Client()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Here <code>response.content</code> is a string containing the content of the HTTP response - we’re asserting that the substring ‘Log in’ appears in there. If you run <code>python manage.py test</code> again, it should pass.</p>
<p>Now, we need to actually log in. This could be fiddly, but Django has a handy convenience method to log you in when testing:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-comment"># Create client</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        c = Client()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Here, we use the <code>login</code> method of the <code>Client</code> object to log into the admin interface, and then we fetch the <code>/admin/</code> route again. We assert that we get a 200 status code, and we assert that the response contains the string ‘Log out’ - in other words, that we are logged in.</p>
<p>Try running <code>python manage.py test</code> and we’ll get an error., because the user details we’ve used to log in don’t exist. Let’s resolve that.</p>
<p>Now, you could put your own credentials in there, but that’s not a good idea because it’s a security risk. Instead, we’ll create a fixture for the test user that will be loaded when the tests are run. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py createsuperuser</code></pre>
<p>Give the username as <code>bobsmith</code>, the email address as <code>bob@example.com</code>, and the password as <code>password</code>. Once that’s done, run these commands to dump the existing users to a fixture:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir blogengine/fixtures</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py dumpdata auth.User --indent=2 &gt; blogengine/fixtures/users.json</td></table></code></pre>
<p>This will dump all of the existing users to <code>blogengine/fixtures/users.json</code>. You may wish to edit this file to remove your own superuser account and leave only the newly created one in there.</p>
<p>Next we need to amend our test to load this fixture:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Create client</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        c = Client()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Now, if you run <code>python manage.py test</code>, you should find that the test passes. Next, we’ll test that we can log out:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Create client</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        c = Client()</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Create client</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        c = Client()</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        c.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        c.logout()</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        response = c.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>This test works along very similar lines. We log in, verify that ‘Log out’ is in the response, then we log out, and verify that ‘Log in’ is in the response. Run the tests again, and they should pass. Assuming they do, let’s commit our changes again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added tests for admin auth'</span></td></table></code></pre>
<p>This code is a little repetitive. We create the client twice, when we could do so only once. Amend the AdminTest class as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    fixtures = [<span class="hljs-string">'users.json'</span>]</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_login</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment"># Get login page</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Log the user in</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_logout</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check 'Log out' in response</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertTrue(<span class="hljs-string">'Log out'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-comment"># Log out</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        self.client.logout()</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/'</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check 'Log in' in response</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertTrue(<span class="hljs-string">'Log in'</span> <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>The <code>setUp()</code> method is automatically run when the test runs, and ensures we only need to start up the client once. Run your tests to make sure they pass, then commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Refactored admin test'</span></td></table></code></pre>
<p>Now, we’ll implement a test for creating a new post. The admin interface implements URLs for creating new instances of a model in a consistent format of <code>/admin/app_name/model_name/add/</code>, so the URL for adding a new post will be <code>/admin/blogengine/post/add/</code>.</p>
<p>Add this method to the AdminTest class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td></table></code></pre>
<p>Try running it and this will fail, because we haven’t registered the Post model in the Django admin. So we need to do that. To do so, open a new file at <code>blogengine/admin.py</code> and add the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(models.Post)</td></table></code></pre>
<p>Now, run <code>python manage.py test</code> and the test should pass. If you want to confirm that the post model appears in the admin, run <code>python manage.py runserver</code> and click <a href="http://127.0.0.1:8000/admin/">here</a>.</p>
<p>So now we can reach the page for adding a post, but we haven’t yet tested that we can submit one. Let’s remedy that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-comment"># Check response code</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        response = self.client.get(<span class="hljs-string">'/admin/blogengine/post/add/'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Create the new post</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/add/'</span>, {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first post'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my first post'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Check added successfully</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertTrue(<span class="hljs-string">'added successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Check new post now in database</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td></table></code></pre>
<p>Here we submit the new post via HTTP POST, with all the data passed through. This mirrors the form created by the Django admin interface - if you take a look at the HTML generated by the admin, you’ll see that the inputs are given names that match these. Note that the <code>pub_date</code> field, because it represents a datetime object, is split up into a separate date and time field. Also note the parameter <code>follow=True</code> - this denotes that the test client should follow any HTTP redirect.</p>
<p>We confirm that the POST request responded with a 200 code, denoting success. We also confirm that the response included the phrase ‘added successfully’. Finally we confirm that there is now a single Post object in the database. Don’t worry about any existing content - Django creates a dedicated test database and destroys it after the tests are done, so you can be sure that no posts are present unless you explicitly load them from a fixture.</p>
<p>We can now test creating a post, but we also need to ensure we can test editing and deleting them. First we’ll add a test for editing posts:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_edit_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment"># Edit the post</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/'</span>, {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">'title'</span>: <span class="hljs-string">'My second post'</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'text'</span>: <span class="hljs-string">'This is my second blog post'</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'pub_date_0'</span>: <span class="hljs-string">'2013-12-28'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'pub_date_1'</span>: <span class="hljs-string">'22:00:04'</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        follow=<span class="hljs-keyword">True</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Check changed successfully</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        self.assertTrue(<span class="hljs-string">'changed successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        only_post = all_posts[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertEquals(only_post.title, <span class="hljs-string">'My second post'</span>)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEquals(only_post.text, <span class="hljs-string">'This is my second blog post'</span>)</td></table></code></pre>
<p>Here we create a new blog post, then verify we can edit it by resubmitting it with different values, and checking that we get the expected response, and that the data in the database has been updated. Run <code>python manage.py test</code>, and this should pass.</p>
<p>Finally, we’ll set up a test for deleting posts:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_delete_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Log in</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        self.client.login(username=<span class="hljs-string">'bobsmith'</span>, password=<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Delete the post</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        response = self.client.post(<span class="hljs-string">'/admin/blogengine/post/1/delete/'</span>, {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'post'</span>: <span class="hljs-string">'yes'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        }, follow=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment"># Check deleted successfully</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        self.assertTrue(<span class="hljs-string">'deleted successfully'</span> <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment"># Check post amended</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">0</span>)</td></table></code></pre>
<p>Again, this is pretty similar to what we did before. We create a new post, verify that it is the sole post in the database, and log into the admin. Then we delete the post via the admin, and confirm that the admin interface confirmed it has been deleted, and the post is gone from the database.</p>
<p>I think it’s now time to commit again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Post admin tests in place'</span></td></table></code></pre>
<p>So we now know that we can create, edit and delete posts, and we have tests in place to confirm this. So our next task is to be able to display our posts.</p>
<p>For now, to keep things simple, we’re only going to implement the index view - in other words, all the posts in reverse chronological order. We’ll use Django’s generic views to keep things really easy.</p>
<p>Django’s generic views are another really handy feature. As mentioned earlier, a view is a function or class that describes how a specific route should render an object. Now, there are many tasks that recur in web development. For instance, many web pages you may have seen may be a list of objects - in this case, the index page for a blog is a list of blog posts. For that reason, Django has the ListView generic view, which makes it easy to render a list of objects.</p>
<p>Now, like before, we want to have a test in place. Open up <code>blogengine/tests.py</code> and add the following class at the end of the file:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostViewTest</span><span class="hljs-params">(LiveServerTestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        self.client = Client()</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_index</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment"># Create the post</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        post = Post()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        post.title = <span class="hljs-string">'My first post'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        post.text = <span class="hljs-string">'This is my first blog post'</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        post.pub_date = timezone.now()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        post.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment"># Check new post saved</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        all_posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        self.assertEquals(len(all_posts), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Fetch the index</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        response = self.client.get(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        self.assertEquals(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Check the post title is in the response</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Check the post text is in the response</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        self.assertTrue(post.text <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Check the post date is in the response</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        self.assertTrue(str(post.pub_date.year) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        self.assertTrue(post.pub_date.strftime(<span class="hljs-string">'%b'</span>) <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        self.assertTrue(str(post.pub_date.day) <span class="hljs-keyword">in</span> response.content)</td></table></code></pre>
<p>Here we create the post, and assert that it is the sole post object. We then fetch the index page, and assert that the HTTP status code is 200 (ie. the page exists and is returned). We then verify that the response contains the post title, text and publication date.</p>
<p>Note that for the month, we need to do a bit of jiggery-pokery to get the month name. By default Django will return short month names (eg Jan, Feb etc), but Python stores months as numbers, so we need to format it as a short month name using <code>%b</code>.</p>
<p>If you run this, you will get an error because the index route isn’t implemented. So let’s fix that. Open up the existing <code>django_tutorial_blog_ng/urls.py</code> file and amend it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, include, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.autodiscover()</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Examples:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment"># url(r'^$', 'django_tutorial_blog_ng.views.home', name='home'),</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># url(r'^blog/', include('blog.urls')),</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Blog URLs</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    url(<span class="hljs-string">r'^.*$'</span>, include(<span class="hljs-string">'blogengine.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="15"></td><td>)</td></table></code></pre>
<p>Then, create a new file at <code>blogengine/urls.py</code> and edit it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> patterns, url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Index</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    url(<span class="hljs-string">'^$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        )),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>)</td></table></code></pre>
<p>A little explanation is called for. The project has its own <code>urls.py</code> file that handles routing throughout the project. However, because Django encourages you to make your apps reusable, we want to keep the routes in the individual apps as far as possible. So, in the project file, we include the <code>blogengine/urls.py</code> file.</p>
<p>In the app-specific <code>urls.py</code>, we import the Post model and the ListView generic view. We then define a route for the index page - the regular expression <code>^$</code> will match only an empty string, so that page will be the index. For this route, we then call the <code>as_view()</code> method of the ListView object, and set the model as Post.</p>
<p>Now, if you either run the tests, or run the development server and visit <a href="http://127.0.0.1:8000">the index page</a>, you’ll see that it isn’t working yet - you should see the error <code>TemplateDoesNotExist: blogengine/post_list.html</code>. This tells us that we need to create a template called <code>blogengine/post_list.html</code>, so let’s do that. First of all, add the following at the end of <code>django_tutorial_blog_ng/settings.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># Template directory</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>TEMPLATE_DIRS = [os.path.join(BASE_DIR, <span class="hljs-string">'templates'</span>)]</td></table></code></pre>
<p>Next, create the folders for the templates, and a blank <code>post_list.html</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir templates</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir templates/blogengine</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ touch templates/blogengine/post_list.html</td></table></code></pre>
<p>Now, run your tests again, and you’ll see that the template now exists, but a new error is showing up:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="2"></td><td>......F</td><tr><td class="linenos" data-pseudo-content="3"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="4"></td><td>FAIL: test_index (blogengine.tests.PostViewTest)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/django_tutorial_blog_ng/blogengine/tests.py"</span>, line 189, <span class="hljs-keyword">in</span> test_index</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    self.assertTrue(post.title <span class="hljs-keyword">in</span> response.content)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>AssertionError: False is not <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Ran 7 tests <span class="hljs-keyword">in</span> 2.162s</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>To fix this, we make sure the template shows the data we want. Open up <code>templates/blogengine/post_list.html</code> and enter the following:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>This is only a very basic template, and we’ll expand upon it in future.</p>
<p>With that done, you can run <code>python manage.py test</code>, and it should pass. Well done! Don’t forget to commit your changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add django_tutorial_blog_ng/ templates/ blogengine/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented list view for posts'</span></td></table></code></pre>
<p>And that’s all for this lesson! We’ve done a hell of a lot in this lesson - set up our project, created a comprehensive test suite for it, and implemented the basic functionality. Next time we’ll make it a bit prettier using Twitter Bootstrap, as well as implementing more of the basic functionality for the blog.</p>
<p>You can find the source code <a href="https://github.com/matthewbdaly/django_tutorial_blog_ng">on Github</a>. For your convenience, I’ve tagged this lesson as <code>lesson-1</code>, so you can just clone the repository and switch to the end of this lesson with the following commands:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git <span class="hljs-built_in">clone</span> https://github.com/matthewbdaly/django_tutorial_blog_ng.git</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ <span class="hljs-built_in">cd</span> django_tutorial_blog_ng</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git checkout lesson-1</td></table></code></pre>
<p>That way, you can easily check that what you’ve done matches up with the repository. Future lessons will be similarly tagged to make them easy to navigate.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Yet another tutorial for building a blog using Python and Django - part 5]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/04/23/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-5/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/04/23/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-5/</guid>
            <pubDate>Mon, 23 Apr 2012 20:55:40 GMT</pubDate>
            <description><![CDATA[<p>In this instalment I’ll be showing you how we can make our blogging engine a little nicer to look at by adding some CSS and images, as well as expanding on Django’s templating system.</p>
<p>First of all, let’s add some CSS to our blog. When developing a web app with Django, you should place static files such as stylesheets and images in a folder inside your app (not project) folder called static. My project is called DjangoBlog, and my app is called blogengine, so all my static content should go in DjangoBlog/blogengine/static/. Here’s the stylesheet, which I’ve saved as style.css:</p>
<pre><code class="hljs lang-css"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-selector-tag">body</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>}</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-selector-id">#main</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-selector-tag">ul</span><span class="hljs-selector-id">#pageList</span> {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0px</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>}</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-selector-tag">ul</span><span class="hljs-selector-id">#pageList</span> <span class="hljs-selector-tag">li</span> {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">display</span>: inline;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>}</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-selector-class">.post</span>, <span class="hljs-selector-class">.page</span> {</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff</span>;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>In the same folder, I have a PNG icon for an RSS feed, and if you had some JavaScript files you wanted to use (such as a copy of jQuery), you would put them here too. Note that there’s nothing to stop you creating subfolders within /static, and in fact I would recommend you do so for any future project so you can separate out images, CSS and JavaScript easily.</p>
<p>With that done, we now need to change our templates to make use of this CSS. Here’s what header.html should look like:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/static/style.css"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"main"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/static/rss.png"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"50px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"50px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pageList"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name">get_flatpages</span> <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></td></table></code></pre>
<p>Next, here’s footer.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Now here’s category.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Posts for </span><span class="hljs-template-variable">{{ category.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts matched<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>Then, posts.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts matched<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="24"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>Here’s single.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>By </span><span class="hljs-template-variable">{{ post.author.first_name }}</span><span class="xml"> </span><span class="hljs-template-variable">{{ post.author.last_name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Categories: </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> category <span class="hljs-keyword">in</span> post.categories.all %}</span><span class="xml"> </span><span class="hljs-template-variable">{{ category.title }}</span><span class="xml"> </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_list</span> for post <span class="hljs-keyword">as</span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> comment <span class="hljs-keyword">in</span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ comment }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">render_comment_form</span> for post %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="28"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>And finally, flatpages/default.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-variable">{{ flatpage.content }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>Phew! There’s quite a lot there, so you may wish to grab these files from the GitHub repository rather than enter them yourself.</p>
<p>Now, all of the references to the CSS or image file need to refer to the /static folder under the root of the web server. Here’s the reference to our stylesheet:</p>
<pre><code class="hljs lang-django singleline"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/static/style.css"</span> /&gt;</span></span></code></pre>
<p>And here’s where we get the image:</p>
<pre><code class="hljs lang-django singleline"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/feeds/posts/"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/static/rss.png"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"50px"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"50px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></code></pre>
<p>All of our static files can be referenced via the /static folder by default, without needing to set up a rule to cover them in urls.py.</p>
<p>One other point worth noting is that we’ve added some code to the header to display links to all of the flat pages. This particular snippet of code in header.html is noteworthy:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name">get_flatpages</span> <span class="hljs-keyword">as</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> flatpage <span class="hljs-keyword">in</span> flatpages %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ flatpage.url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Here, we first of all load the flat pages. Then we retrieve them, and loop through each of them. For each page, we create a new list item containing a link to the flat page, with the text being the flat page’s title. Note that we’re just referring to each flatpage object’s attributes here. Then we end the for loop.</p>
<p>The only problem with this is that all of the pages except the flat pages are handled by the blogengine application, not the flatpages one, so we can’t get the values for the flat pages, so we need to amend blogengine/views.py. Open it and add the following line near the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage</code></pre>
<p>Now, nowhere else in the view is the FlatPage application needed, but it’s required in the template, so by importing it here we make it available in the template.</p>
<p>With that done, our Django-powered blog is beginning to look a bit more presentable, so I’ll leave it to you to style it however you wish, using this as a starting point. The blog is now pretty much feature-complete, however there’s one more thing I’d like to demonstrate before we finish up, namely generic views.</p>
<p>As you may have gathered by now, Django uses slightly different terminology to many other web development frameworks. Although it can be considered an MVC (Model-View-Controller) framework like many others, it’s generally referred to as an MTV (Model-Template-View) framework, with views containing the logic needed to present the data. While Django ships with a number of built-in applications to do certain repetitive tasks easily, not every task lends itself well to being handled by one generic application. However, these tasks may still require something similar be implemented over and over again, and that’s what generic views are for.</p>
<p>We don’t yet have a list of all of the available categories, so let’s use a generic view to do that. In urls.py, add the following lines at the top:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.views.generic <span class="hljs-keyword">import</span> ListView</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category</td></table></code></pre>
<p>Then, add the following lines at the top of the section for categories:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    url(<span class="hljs-string">r'^categories/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        model=Category,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        )),</td></table></code></pre>
<p>Then, go into your templates folder and create a new folder in there called blogengine (or whatever you’re calling your blog application). In there, create a new file called category_list.html and enter the following code in it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> category <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ category.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">{{ category.description }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>Now, ensure the development server is running, and go to <a href="http://127.0.0.1:8000/categories/">http://127.0.0.1:8000/categories/</a>, and you should see a list of your categories.</p>
<p>Now, you didn’t write a view for this at all. Instead, this is handled by a generic view. In urls.py, we imported the ListView generic view, which is nothing more than a list of objects. We then import the Category model. Then, we define a URLconf that maps the categories/ url to ListView, which displays a list of all the Category objects. The template used is determined automatically, and we create that template as normal. Note that in the template we refer to object_list - this demonstrates that we’re referring to the objects passed through generically, and in theory this same template could display any objects with attributes called title and description.</p>
<p>Now, it probably won’t have escaped your notice that a blog is effectively a list of posts, so can’t we use a generic view to display them? Well, yes we can! So why don’t we cut down on the amount of code we need to maintain and use a generic view, rather than writing our own view?</p>
<p>Go into blogengine/views.py and delete the getPosts function in its entirety. Next, go into urls.py and delete the part that deals with showing the posts (the two lines just under the Home page comment), and replace them with this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    url(<span class="hljs-string">r'^(?P&lt;page&gt;\d+)?/?$'</span>, ListView.as_view(</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        model=Post,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        paginate_by=<span class="hljs-number">5</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        )),</td></table></code></pre>
<p>Note here that we specify how many items we paginate by. The ListView generic view supports pagination, making it ideally suited for any list of objects that may be spread across multiple pages - you just import the model you want and pass it through in the model parameter.</p>
<p>We also need to import the Post object in urls.py. Amend the line where you imported the Category model as follows:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Category, Post</code></pre>
<p>Then move posts.html into your templates/blogengine folder and rename it post_list.html, then amend it to look like the following:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> object_list %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page_obj.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page_obj.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts matched<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="24"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>The changes here are minimal, just adjusting the names of objects to what the generic view uses. Now, if you refresh the browser, you should be able to see your blog posts, only now they’re being handled by Django’s ListView generic view. But they’re in the wrong order, so go into blogengine/models.py and add this code to the Post model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        ordering = [<span class="hljs-string">"-pub_date"</span>]</td></table></code></pre>
<p>This defines the order the Post objects should be in the model, rather than the view. If you now refresh the browser, they should be in the right order.</p>
<p>A ListView is only one of the generic views available in Django. There are others that are useful under other circumstances, but they’re beyond the scope of this tutorial, so I suggest that if you’re interested, you take the time to learn more about them on your own. They can save you a lot of time and effort if used well.</p>
<p>Sadly, that brings this series of tutorials to an end. I hope you’ve enjoyed learning about Django, and I hope you’ll be inspired to build something cool with it! As always, the code is available on <a href="https://github.com/matthewbdaly/Django-Tutorial-Blog">GitHub</a>, so feel free to download it, use it as the basis for your own projects, or whatever else you’d like to do with it.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Yet another tutorial for building a blog using Python and Django - part 4]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/03/29/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-4/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/03/29/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-4/</guid>
            <pubDate>Thu, 29 Mar 2012 20:29:59 GMT</pubDate>
            <description><![CDATA[<p>Welcome back! In this tutorial we’ll continue extending our Django-powered blogging engine. We’ll add the capability to assign blog posts to categories, and comment on posts. We’ll also generate an RSS feed for our blog posts.</p>
<p>Categories are somewhat tougher to implement than most of what we’ve done beforehand. One category can be assigned to many blog posts, and many categories can be assigned to one blog post, so this relationship is described as a “many to many relationship” when drawing up the database structure. What it means is that you can’t directly map categories onto posts and vice versa - you have to create an intermediate database table for the relationship between posts and categories.</p>
<p>Here’s what your models.py should look like:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models </td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here. </span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span> </td><tr><td class="linenos" data-pseudo-content="6"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>) </td><tr><td class="linenos" data-pseudo-content="7"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>) </td><tr><td class="linenos" data-pseudo-content="8"></td><td>    description = models.TextField() </td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span> </td><tr><td class="linenos" data-pseudo-content="11"></td><td>        verbose_name_plural = <span class="hljs-string">"Categories"</span> </td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span> </td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/categories/%s/"</span> % self.slug</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    categories = models.ManyToManyField(Category, blank=<span class="hljs-keyword">True</span>, null=<span class="hljs-keyword">True</span>, through=<span class="hljs-string">'CategoryToPost'</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryToPost</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    post = models.ForeignKey(Post)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    category = models.ForeignKey(Category)</td></table></code></pre>
<p>We’re adding quite a bit of new code here. First of all we’re defining a new model called Category. Each category has a title, a description, and a slug (so we can have a dedicated page for each category). As usual, we define methods for <strong>unicode</strong> and get_absolute_url, but also note the class Meta. Here we’re defining some metadata for the class (ie, data about the data). The only thing we do here is essentially telling the admin interface that the plural of Category is not “Categorys” but “Categories”.</p>
<p>Then, in Post we add an additional field called Category, which we define as a ManyToManyField. Note the parameters passed through - we’re saying here that a post need not be assigned a category, and that CategoryToPost should be used as an intermediate table to link posts to categories.</p>
<p>Finally, we define the aforementioned CategoryToPost model, which has two fields, post and category. Both of these are foreign keys, mapping to a blog post and a category respectively. By creating entries in this table, a link can be created between a post and a category.</p>
<p>With our model changed, it’s time to update our admin.py as well:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryToPostInline</span><span class="hljs-params">(admin.TabularInline)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    model = models.CategoryToPost</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    extra = <span class="hljs-number">1</span> </td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    exclude = (<span class="hljs-string">'author'</span>,)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    inlines = [CategoryToPostInline]</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        obj.author = request.user</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        obj.save()</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>admin.site.register(models.Post, PostAdmin)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>admin.site.register(models.Category, CategoryAdmin)</td></table></code></pre>
<p>Here we define a new class called CategoryAdmin, which details how we’re changing the admin interface for Category from the defaults generated from the fields provided. The only change we make here is that we prepopulate the slug field from the title, much like we did with blog posts.</p>
<p>Next, we define an inline for the relationships between categories and post, called CategoryToPostInline. This is a new concept - essentially it means that the category to post relationships can be defined in another model’s admin interface. We define the model this applies to, and that by default we will only add one additional field for adding categories when writing or editing a post (though users can add as many as they wish, or none). Note that the model this is based on is admin.TabularInline - this represents a tabular layout. If you prefer, you can use an alternative layout by using StackedInline instead.</p>
<p>Then, in PostAdmin we add our newly declared CategoryToPostInline to the PostAdmin class as an inline. Finally, at the bottom we register Category with the admin interface, so we can create and manage categories easily.</p>
<p>With that done, it’s time to edit our views.py:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator, EmptyPage</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post, Category</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPosts</span><span class="hljs-params">(request, selected_page=<span class="hljs-number">1</span>)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Get all blog posts</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    posts = Post.objects.all().order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    pages = Paginator(posts, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Get the specified page</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        returned_page = pages.page(selected_page)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">except</span> EmptyPage:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        returned_page = pages.page(pages.num_pages)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:returned_page.object_list, <span class="hljs-string">'page'</span>:returned_page})</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPost</span><span class="hljs-params">(request, postSlug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment"># Get specified post</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    post = Post.objects.filter(slug=postSlug)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment"># Display specified post</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'single.html'</span>, { <span class="hljs-string">'posts'</span>:post})</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCategory</span><span class="hljs-params">(request, categorySlug, selected_page=<span class="hljs-number">1</span>)</span>:</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment"># Get specified category</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    posts = Post.objects.all().order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    category_posts = []</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> posts:</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">if</span> post.categories.filter(slug=categorySlug):</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            category_posts.append(post)</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    pages = Paginator(category_posts, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment"># Get the category</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    category = Category.objects.filter(slug=categorySlug)[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="42"></td><td></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-comment"># Get the specified page</span></td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        returned_page = pages.page(selected_page)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">except</span> EmptyPage:</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        returned_page = pages.page(pages.num_pages)</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'category.html'</span>, { <span class="hljs-string">'posts'</span>: returned_page.object_list, <span class="hljs-string">'page'</span>: returned_page, <span class="hljs-string">'category'</span>: category})</td></table></code></pre>
<p>Here we import the Category model as well as the Post model. Then, the only additional change we need to make is to add a brand new getCategory view function. Note that this is quite similar to the getPosts function - we set up pagination in the same way, and rather than get all the posts, we get just those in the specified category. Also note that we’re using the template category.html rather than posts.html here, and we pass through category as well as posts and page when we return the render_to_response.</p>
<p>The next change we need to make is adding category.html. Go into your template directory and save the code below as category.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Posts for </span><span class="hljs-template-variable">{{ category.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts matched<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>With our template in place, the last step is to add an appropriate URLconf. Edit urls.py to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls.defaults <span class="hljs-keyword">import</span> patterns, include, url </td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Uncomment the next two lines to enable the admin:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="5"></td><td>admin.autodiscover()</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>urlpatterns = patterns(<span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment"># Examples:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># url(r'^$', 'blog.views.home', name='home'),</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment"># url(r'^blog/', include('blog.foo.urls')),</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># Uncomment the admin/doc line below to enable admin documentation:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># url(r'^admin/doc/', include('django.contrib.admindocs.urls')),</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment"># Uncomment the next line to enable the admin:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, include(admin.site.urls)),</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment"># Home page</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    url(<span class="hljs-string">r'^$'</span>, <span class="hljs-string">'blogengine.views.getPosts'</span>),</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    url(<span class="hljs-string">r'^(?P&lt;selected_page&gt;\d+)/?$'</span>, <span class="hljs-string">'blogengine.views.getPosts'</span>),</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment"># Blog posts</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    url(<span class="hljs-string">r'^\d{4}/\d{1,2}/(?P[-a-zA-Z0-9]+)/?$'</span>, <span class="hljs-string">'blogengine.views.getPost'</span>),</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment"># Categories</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    url(<span class="hljs-string">r'^categories/(?P&lt;categorySlug&gt;\w+)/?$'</span>, <span class="hljs-string">'blogengine.views.getCategory'</span>),</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    url(<span class="hljs-string">r'^categories/(?P&lt;categorySlug&gt;\w+)/(?P&lt;selected_page&gt;\d+)/?$'</span>, <span class="hljs-string">'blogengine.views.getCategory'</span>),</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-comment"># Flat pages</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'django.contrib.flatpages.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="31"></td><td>)</td></table></code></pre>
<p>Now, if you run python manage.py syncdb again, the category system should be up and running.</p>
<p>The next step is to add the facility to handle comments. Again, Django has its own application built in for handling comments, so go into setings.py and enter the following under INSTALLED_APPS:</p>
<pre><code class="hljs lang-python singleline">     <span class="hljs-string">'django.contrib.comments'</span>,</code></pre>
<p>Then run python manage.py syncdb again to generate the appropriate database tables. You’ll also need to amend urls.py to provide a dedicated URL for comments:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Comments</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r'^comments/'</span>, include(<span class="hljs-string">'django.contrib.comments.urls'</span>)),</td></table></code></pre>
<p>Place this before the URLconf for the flat pages.</p>
<p>Comments can be attached to any type of content, but we only want to attach them to blog posts, and they should only be visible in the single post template. But first of all, let’s add a comment count to posts in posts.html and category.html. Replace posts.html with this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts matched<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="20"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>And replace category.html with this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Posts for </span><span class="hljs-template-variable">{{ category.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">else</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No posts matched<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>The only significant changes here are that at the top we load comments, and underneath the post text we get the comment count for each post as the variable comment_count, then we display it underneath.</p>
<p>Now, we want to go further with our single post template. As well as a comment count, we want to add the actual comments themselves. Finally, we need a form for adding comments - in theory you can use the admin interface for doing this, but it’s very unlikely you’d want to do so. Open up single.html and edit it to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">load</span></span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>By </span><span class="hljs-template-variable">{{ post.author.first_name }}</span><span class="xml"> </span><span class="hljs-template-variable">{{ post.author.last_name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Categories: </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> category <span class="hljs-keyword">in</span> post.categories.all %}</span><span class="xml"> </span><span class="hljs-template-variable">{{ category.title }}</span><span class="xml"> </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_count</span> for post <span class="hljs-keyword">as</span> comment_count %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Comments: </span><span class="hljs-template-variable">{{ comment_count }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">get_comment_list</span> for post <span class="hljs-keyword">as</span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> comment <span class="hljs-keyword">in</span> comments %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ comment }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name">render_comment_form</span> for post %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="26"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>This includes the same changes as the other two templates, so we load comments and display the comment count. Afterwards, we get the comment list for this post as comments, and then loop through the comments, showing them in an ordered list. Afterwards, we then use render_comment_form to show the default comment form for this post. If you’d prefer to create your own comment form, you can use get_comment_form instead to get a form object you can use in the template.</p>
<p>You’ll also need to make some minor changes to the view to get the form working. Save single.html and open blogengine/views.py and add the following line of code to your import statements:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> RequestContext</code></pre>
<p>Then, amend the final line of the getPost function as follows:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'single.html'</span>, { <span class="hljs-string">'posts'</span>:post}, context_instance=RequestContext(request))</code></pre>
<p>The reason this needs to be changed is that the comment form includes the {% csrf_token %} tag, which requires information from the request object, and in order to do so rather than the default context, you need to pass through a RequestContext object instead, but don’t worry too much about the details.</p>
<p>If you now ensure the development server is running and visit a blog post, you should now see that you can post comments. If you want to enhance this very basic comment form, take a look at the excellent documentation on the Django website. Alternatively, there are a number of third-party comment services, such as Disqus and IntenseDebate that can handle comments for you and just require you to paste a snippet of code into whatever template you want to enable comments on, and these may be more convenient.</p>
<p>Finally for this lesson, as promised, we’ll implement our RSS feed. Again, there’s an application bundled with Django that will do this - the syndication framework. Open settings.py and paste the following line in at the bottom of your INSTALLED_APPS:</p>
<pre><code class="hljs lang-python singleline">     <span class="hljs-string">'django.contrib.syndication'</span>,</code></pre>
<p>Save the file and run python manage.py syncdb to add the appropriate tables to your database. Then, we need to add a URLconf for the RSS feed. We’ll allow a consistent naming scheme for RSS feeds, so this will be /feeds/posts, and if you wanted to you could add /feeds/comments, for instance. Add this to you urls.py, before the url for flat pages:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># RSS feeds</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r'^feeds/posts/$'</span>, PostsFeed()),</td></table></code></pre>
<p>We’ll also need to tell urls.py where to find PostsFeed(). In this case, we’re going to put it in the view, so add this import line near the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> blogengine.views <span class="hljs-keyword">import</span> PostsFeed</code></pre>
<p>Now open blogengine/views.py and add the following line to the import statements at the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.contrib.syndication.views <span class="hljs-keyword">import</span> Feed</code></pre>
<p>Then add the following class declaration to the bottom:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostsFeed</span><span class="hljs-params">(Feed)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    title = <span class="hljs-string">"My Django Blog posts"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    link = <span class="hljs-string">"feeds/posts/"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    description = <span class="hljs-string">"Posts from My Django Blog"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">return</span> Post.objects.order_by(<span class="hljs-string">'-pub_date'</span>)[:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_title</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> item.title</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">item_description</span><span class="hljs-params">(self, item)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> item.text</td></table></code></pre>
<p>This is pretty simple. We import the Feed class from thew views provided by the syndication framework, then we base PostsFeed on Feed. We set the title, the link for the feed, and a description for the feed. Then we get the last 5 Post objects in reverse chronological order, and we define each item’s title as the post title. and each item’s description as the text of the post. From here’ it’s pretty easy to see how you could create feeds based on comments, or pretty much any other object that might exist in the database.</p>
<p>And with that done, our blogging engine is pretty-much feature-complete. We have blog posts with comments, categories, an RSS feed, and flat pages, but the look and feel of the site definitely needs some attention. Next time, we’ll make our blogging engine look a little nicer. Once again, the code is available on GitHub in case you find that more convenient.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Yet another tutorial for building a blog using Python and Django - Part 3]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/03/24/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-3/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/03/24/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-3/</guid>
            <pubDate>Sat, 24 Mar 2012 18:23:25 GMT</pubDate>
            <description><![CDATA[<p>Welcome back! In this installment, we’ll make some changes to our URL structure for blog posts, we’ll add support for multiple authors and static pages, and we’ll add some more templates.</p>
<p>First of all, our URL structure. The existing structure works fine, but it would be better if we included a representation of the date of publication. If you’re familiar with WordPress, you’ll know it offers several different URL forms, one of which is the post name alone as we’re using here, and another of which is the year, month and name. We’ll use the latter of these URL schemes with our blogging engine.</p>
<p>This seems like a good opportunity to introduce the interactive Python shell that comes with Django. Make sure you have a few dummy posts set up, then in the project directory (DjangoBlog/, not the top-level one but the one inside that), enter the following command:</p>
<pre><code class="hljs lang-bash singleline">python manage.py shell</code></pre>
<p>This will start up an interactive Python shell which you can use to interact with your Post objects. Now, the first step is to import your Post model:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</code></pre>
<p>We now have access to our Post objects – let’s take a look at them:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>[&lt;Post: My first blog post&gt;, &lt;Post: My second blog post&gt;, &lt;Post: My third post&gt;, &lt;Post: My fourth post&gt;, &lt;Post: My fifth post&gt;, &lt;Post: My sixth post&gt;]</td></table></code></pre>
<p>You may have completely different post objects, or a different number of them, but that’s fine. Remember we set <code>__unicode__(self)</code> to return self.title? Here we see that each blog post is represented by its title. Now let’s get one of our Post objects:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p = Post.objects.get(pk=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p</td><tr><td class="linenos" data-pseudo-content="3"></td><td>&lt;Post: My first blog post&gt;</td></table></code></pre>
<p>In the first line above, we get the Post object with the primary key of 1, and store a reference to it as p. We then demonstrate that it is, indeed, one of our blog posts by outputting its title.</p>
<p>If you’re not familiar with relational database theory, a primary key is a value in a database table that refers uniquely to one entry in the table, so that if you refer to an entry by its primary key, you can be sure you’re getting the correct value. By default, Django models generate a field called id in addition to the ones you define, which is set as the primary key, and this is set to auto-increment, so for instance, every time you add an additional blog post, it gets the next number as its id. Here, we just want to get access to a single blog post object, so we just enter 1 as the primary key in order to get the earliest blog post.</p>
<p>Next, we get the publication date:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.pub_date</td><tr><td class="linenos" data-pseudo-content="2"></td><td>datetime.datetime(<span class="hljs-number">2012</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>)</td></table></code></pre>
<p>This returns a datetime.datetime object. If you look at the documentation for Python’s datetime module, you’ll notice that it has attributes called day, month and year. Here’s how we can use these to get the information we want:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.pub_date.month</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.pub_date.day</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-number">19</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.pub_date.month</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.pub_date.year</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-number">2012</span></td></table></code></pre>
<p>It’s that simple – we just refer to the attribute we want to retrieve. So, it should now be pretty easy to understand how we can get the date for each blog post.</p>
<p>Exit your Python shell with <kbd>Ctrl-D</kbd> and head back into the blogengine/ folder. Then open models.py in your text editor and add the following method to the bottom of your Post class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td></table></code></pre>
<p>Now, you haven’t seen get_absolute_url before. Every time you create a model in Django, you should really create a get_absolute_url method for it. In essence, it defines a single, canonical URL for that object, whether it’s a blog post, a user, or what have you. By creating one method that defines the structure for the URL for this type of object and referring to it elsewhere, we only need to change it in one place if we want to make any changes to how we determine the URL for that type of object.</p>
<p>What we do here is we define the URL as being /year/month/slug/. If you want, you can quite easily make it include the day as well like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/%s/%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.pub_date.day, self.slug)</td></table></code></pre>
<p>With our model updated, let’s change our URLconf accordingly. Return to the inner DjangoBlog/ directory and open up urls.py, then amend the lines for the blog posts as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Blog posts</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r'^\d{4}/\d{1,2}/(?P&lt;postSlug&gt;[-a-zA-Z0-9]+)/?$'</span>, <span class="hljs-string">'blogengine.views.getPost'</span>),</td></table></code></pre>
<p>What we’ve changed here is that we’ve told urls.py to expect blog posts that look like 4 digits, then a forward slash, then one or two digits, then another forward slash, then a slug that can include hyphens, upper or lower case letters, and numbers.</p>
<p>With that done, we just need to update our template. Edit templates/posts.html to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Literally all we do is replace post.slug with post.get_absolute_url and remove the leading forward slash. If you then run python manage.py syncdb, restart the development server and go clicking around your posts, you should be able to see that our new URL system is now up and running.</p>
<p>With that done, the next step is to add support for multiple authors. Now, you might think that we’re going to have to create a new model for users, but that’s not so – Django ships with a number of useful models already, and we’re going to use one of them here.</p>
<p>Now, first of all, we need to amend our Post model to include the author’s details. Edit your blogengine/models.py to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    author = models.ForeignKey(User)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> self.title</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_absolute_url</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"%s/%s/%s/"</span> % (self.pub_date.year, self.pub_date.month, self.slug)</td></table></code></pre>
<p>There are two significant changes here. First, we import User from django.contrib.auth.models. User is a model provided by the auth model, and we’re going to use it here to represent the author of a given post. Then in the class definition of Post, we add a new field called author.</p>
<p>Note here that author is a foreign key field, and is passed a User object. Again for those unfamiliar with relational databases, a foreign key is a field in a database table that is also a primary key in another database table. Here we’re declaring that the author is one of the entries in the User table.</p>
<p>As well as this, we need to make some changes to the admin interface. By default, when we make a field in a model a foreign key, the admin interface will show a dropdown list of all of the instances of that object (so here, it would be a list of all the users on the system). But we don’t want that. We want the author to automatically be set as the current user, and for there to be no way to override this.</p>
<p>Open up admin.py and change it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    exclude = (<span class="hljs-string">'author'</span>,)</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span><span class="hljs-params">(self, request, obj, form, change)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        obj.author = request.user</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        obj.save()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>admin.site.register(models.Post, PostAdmin)</td></table></code></pre>
<p>The changes made here are simple. We import the User model, and in the PostAdmin class definition we exclude the author field – this means that we don’t show this field at all.</p>
<p>Note the addition of the save_model method. In Django it’s easy to create a new object using your models:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p = Post()</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&lt;Post: &gt;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.title=<span class="hljs-string">"My new blog post"</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p</td><tr><td class="linenos" data-pseudo-content="7"></td><td>&lt;Post: My new blog post&gt;</td></table></code></pre>
<p>However, the new object won’t actually be stored in the database properly until you call the save() method. Here, you would need to enter p.save() (Note this won’t actually work unless you enter all the fields manually). What we’re doing in admin.py is overriding the default save() method to set the author to the name of the user who wrote the post.</p>
<p>Now run python manage.py syncdb again. Note that as you’ve changed the Post model, your existing posts will be lacking the required author field, and so you may need to add these again manually – this will be a numeric ID mapping to a user id. If you only have one user set up, you should just be able to set this to 1 by using an UPDATE SQL query.</p>
<p>If you now make sure the development server is running and log into the administrative interface, the first page you see should have a section marked “Auth”, with two items underneath named Groups and Users.</p>
<p>Now, cast your mind back to when you activated the admin interface and synced the database. If you recall, at this time you were asked to create a superuser account in order to log into the admin interface. This was actually provided by the django.contrib.auth application, one of the applications that are shipped with Django and are active by default. This contains the User and Group models.</p>
<p>If you’re familiar with Linux or Unix, the Auth application will feel very familiar. The account you created at the start was a superuser account, much like the root account on a Unix system, with unlimited privileges. Other users can be created, and given permissions on an individual basis. You can also create groups and add users to those groups, and then set the privileges for those groups en masse. For instance, in a large collaborative blog with many authors, you may have one group for people who contribute articles who can create new posts, editors who can edit existing posts and so on. Similarly, if you had a working comments system, you could easily set up a moderators group who can delete comments, and add people to that group.</p>
<p>Let’s create another user account so we have more than one. From the main admin page, click on the link for Add next to Users. You’ll be taken to a screen that prompts you for a username and password for the new user. Fill these in (there are two password fields for confirmation purposes) as you wish – here I’m setting the new user as bob. On the next screen you can add some additional details for the new user account, such as first name, last name and email address – do this so you have some information to work with.</p>
<p>Lower down you’ll see a dialogue for entering the permissions. You can make the new user a superuser so that they have permission to do anything, you can say whether or not they are staff (they need to be staff to use the admin interface, so check that), and whether they are active (making it easy to deactivate a user account without the need to delete it). Below you’ll see another dialogue showing the available permissions and allowing you to allocate them to that user. Further down, you’ll see a dialogue for changing the start date and last login date for the user, and finally a dialogue for adding new groups and adding the user to existing groups.</p>
<p>Save the user details once you’re done, then go into your superuser account and add a first and last name so we have some data to work with for that as well. Note that just as with a root account on a Unix box, it’s not a great idea to use a superuser account for everyday work (you should create an account that has the minimum privileges you need and use that), but we’ll stick with it for now just for learning purposes – don’t forget if you should roll out a public facing Django-powered site in future, though!</p>
<p>With that done, we now have some data to work with to identify the author of a given post. Let’s fire up the interactive shell again with python manage.py shell:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="3"></td><td>[&lt;Post: My first post&gt;]</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p = Post.objects.get()</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p</td><tr><td class="linenos" data-pseudo-content="6"></td><td>&lt;Post: My first post&gt;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.author</td><tr><td class="linenos" data-pseudo-content="8"></td><td>&lt;User: root&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.author.first_name</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-string">u'Matthew'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>p.author.last_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-string">u'Daly</span></td></table></code></pre>
<p>Here, we can see that it’s easy to get the author’s details from the post. We define p as a reference to the single Post object,then we get the author, which in this case is called root. As I’ve defined a first and last name, we can get those too with p.author.first_name and p.author.last_name, which are strings containing the first and last name respectively. Note the ‘u’ before the string – this just indicates that the string is Unicode.</p>
<p>So from here, it’s pretty easy to display the author’s name in each post. Go into templates/posts.html and add the following line where you want your author details to appear:</p>
<pre><code class="hljs lang-django singleline"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>By </span><span class="hljs-template-variable">{{ post.author.first_name }}</span><span class="xml"> </span><span class="hljs-template-variable">{{ post.author.last_name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></code></pre>
<p>Now, as long as you’ve added a first name and last name to that author’s details, if you visit <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, you should see the appropriate details.</p>
<p>Our next step is to add the facility to create flat pages, somewhat like the Pages functionality in WordPress. Again, Django comes with an application that will handle this, called flatpages, but it’s not enabled by default. Go into DjangoBlog/settings.py and at the bottom of INSTALLED_APPS, add the following:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'django.contrib.flatpages'</span>,</code></pre>
<p>Then run python manage.py syncdb again to add the appropriate tables to your database. Now, we need to add a flat page. Go back to the main page of the admin interface, and you should see that you now have the facility to add flat pages. Click on the Add link for flat pages, and give your page a URL, a title, and some text (here I’m giving it a URL of /about/ and a title of About), add it to a site at the bottom (this will say example.com, but don’t worry about that, it’s to do with the Sites application, which we’re not looking at right now) then save it. You should now have a FlatPage object available.</p>
<p>Let’s take a look at the tables created for flatpages using the sqlall command:</p>
<pre><code class="hljs lang-bash singleline">python manage.py sqlall flatpages</code></pre>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">BEGIN</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_flatpage_sites"</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"flatpage_id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"site_id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">REFERENCES</span> <span class="hljs-string">"django_site"</span> (<span class="hljs-string">"id"</span>),</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">UNIQUE</span> (<span class="hljs-string">"flatpage_id"</span>, <span class="hljs-string">"site_id"</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"django_flatpage"</span> (</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-string">"url"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-string">"content"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-string">"enable_comments"</span> bool <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-string">"template_name"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">70</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-string">"registration_required"</span> bool <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-string">"django_flatpage_a4b49ab"</span> <span class="hljs-keyword">ON</span> <span class="hljs-string">"django_flatpage"</span> (<span class="hljs-string">"url"</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-keyword">COMMIT</span>;</td></table></code></pre>
<p>So we can see that django_flatpage, which contains the details about the actual flat pages, has the fields id, url, title, content, enable_comments, template_name, and registration_required. Some of these options are under the advanced options in the flat page interface, so you may have missed them.
Now fire up python manage.py shell again:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> django.contrib.flatpages.models <span class="hljs-keyword">import</span> FlatPage</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f = FlatPage.objects.get()</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&lt;FlatPage: /about/ -- About&gt;</td></table></code></pre>
<p>Here we have one FlatPage object only (note that get() should only be used if you will only get one result back), which is represented by a string that includes the URL and title.</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>f.content</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-string">u'This is my about page.'</span></td></table></code></pre>
<p>We can easily access any of the fields in the flat page. Now, we need to define some URLs for our flat pages. Exit the Python shell and open urls.py, then insert the following rule underneath the one for blog posts:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Flat pages</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'django.contrib.flatpages.urls'</span>)),</td></table></code></pre>
<p>Note that this must be the last rule in your urls.py, because it will match anything. Now, you can try and load /about/, or whatever page you’ve created, but you’ll get an error stating that the template does not exist, so we need to create that. Go into your template directory, and create a directory inside that called flatpages. Then create a new file in there called default.html, and add the following code to it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-variable">{{ flatpage.content }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Now, make sure you have the development server running and try to load <a href="http://127.0.0.1:8000/about/">http://127.0.0.1:8000/about/</a>, or whatever your flat page URL is, and you should see your flat page’s title and content.</p>
<p>One final task for this lesson – we’re going to refactor our templates a little so that as little code as possible is duplicated and if we want to change anything we need to only do so in one place. Go to your template directory and edit posts.html to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>By </span><span class="hljs-template-variable">{{ post.author.first_name }}</span><span class="xml"> </span><span class="hljs-template-variable">{{ post.author.last_name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>Here we’re taking the header and footer of the page out and replacing them with code that includes another file there instead. Next, we need to create those files in the same directory. Here’s header.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></td></table></code></pre>
<p>And here’s footer.html:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>None of this is terribly complex – we’re just moving the code into another file so that other templates can use the same files. Now save a copy of posts.html as single.html – we’re going to create a template for a single blog post. Edit the original posts.html to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ post.get_absolute_url }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>We’re just removing the date and author details from the template that shows multiple posts. Our existing single.html file can remain as it is for now, since that still has all the additional information we want to include in an individual post.</p>
<p>While we’re here, let’s update our flat pages to use the same header and footer. Go into the flatpages directory and change default.html to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'header.html' %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ flatpage.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        </span><span class="hljs-template-variable">{{ flatpage.content }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">include</span></span> 'footer.html' %}</span><span class="xml"></span></td></table></code></pre>
<p>Note that the path to the template files is not relative to flatpages/default.html, but relative to the root of the template directory.</p>
<p>The last thing to do is to amend the view for our blog to use the correct templates. Go into blogengine/views.py and change the getPost (NOT getPosts) function to pass the single.html template to render_to_response, instead of the posts.html template:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Display specified post</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'single.html'</span>, { <span class="hljs-string">'posts'</span>:post})</td></table></code></pre>
<p>You should now notice that the single posts and multiple posts are using different templates.</p>
<p>Hope you’ve enjoyed this lesson, and I’ll do another one as soon as I can. The code is available on GitHub if you prefer to get it that way.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Yet another tutorial for building a blog using Python and Django – Part 2]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/03/19/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-2/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/03/19/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-2/</guid>
            <pubDate>Mon, 19 Mar 2012 15:18:57 GMT</pubDate>
            <description><![CDATA[<p>In the first part of this tutorial, we got the core elements of our blogging application working - we set up our model for posts, and a view, template and URL configuration to view the index. Next we’ll start extending this very basic functionality - we’ll add a view for individual posts as well, and we’ll allow for each post to have a separate URL.</p>
<p>First, we need to set up some pagination for the home page. At this point, it’s worth taking the time to look at how we want our URL to look. Here, we’ll work on the basis that by default, the home page will show the first five blog posts, and if someone wants to see later posts, they need to append a number to the end. Here’s the URL for the second page assuming it’s at example.com:</p>
<pre><code class="singleline">http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/2/</span></code></pre><p>So, we need two separate rules for the URLs. We need one for a URL with no number at the end, and one for a URL with a number at the end, and an optional forward slash. Open up urls.py and edit it so the Home page section looks like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Home page</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>url(<span class="hljs-string">r'^$'</span>, <span class="hljs-string">'blogengine.views.getPosts'</span>),</td><tr><td class="linenos" data-pseudo-content="3"></td><td>url(<span class="hljs-string">r'^(?P&lt;selected_page&gt;\d+)/?$'</span>, <span class="hljs-string">'blogengine.views.getPosts'</span>),</td></table></code></pre>
<p>Note that I’ve edited the first rule to include ^$ as the regular expression. ^ denotes the start of a regex, and $ denotes the end, so this represents a URL with nothing added after the domain name, such as <a href="http://www.example.com">http://www.example.com</a>. We’ve also changed getRecentPosts to getPosts, as that’s now a more descriptive name.</p>
<p>The second line will match if there is a digit (denoted by the \d+ section) and will pass that digit through to the getPosts function as selected_page. With that done, we now need to make the necessary changes in the view, so move into the blogengine directory and amend views.py to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPosts</span><span class="hljs-params">(request, selected_page=<span class="hljs-number">1</span>)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Get all blog posts</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    posts = Post.objects.all().order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    pages = Paginator(posts, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    returned_page = pages.page(selected_page)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, {<span class="hljs-string">'posts'</span>:returned_page.object_list})</td></table></code></pre>
<p>Again, note the change in function name from getRecentPosts to getPosts. Now, let’s work through the rest of the code. You’ll notice the following line near the top:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator</code></pre>
<p>This imports the Paginator class, which is very useful for creating pagination. Then, you’ll notice the following line:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPosts</span><span class="hljs-params">(request, selected_page=<span class="hljs-number">1</span>)</span>:</span></code></pre>
<p>If you know much about Python, you’ll know that you can specify a default value for a parameter passed to a function or method. Here, what we’re doing is setting the default value of selected_page to 1, so if someone visits <a href="http://www.example.com">http://www.example.com</a>, for which the URLconf doesn’t specify a number, this defaults to 1. If they visit <a href="http://www.example.com/2">http://www.example.com/2</a> instead, the default value for selected_page will be overriden to 2.</p>
<p>Then you’ll note that we’ve refactored the lines that fetched the posts and sorted them into one line, and called that posts. After that we define pages as a Paginator object, and passed it the values of posts and 5. The first parameter is what we want to divide between pages, and the second is how many instances of this we should allow on an individual page. Here we’re passing through all of the posts, and allowing 5 posts per page. We then define returned_page as the page from pages that matches the number submitted in the selected_page variable. Finally we pass a list of all the objects that make up returned_page through to the template as posts.</p>
<p>So, we now have basic pagination in place. Next, we’ll add the capability to display individual posts.</p>
<p>Now, we could just be lazy and have each post referred to by the numerical ID that’s automatically added by Django to the database, but why would we want to do that? We want a nice, human and search engine friendly URL that gives some idea what the blog post is about. Django is structured in such a way that nice, friendly URLs without cruft are very easy to create, and it actually has a special type of field in the models called a slug field that’s ideal for creating URLs.</p>
<p>So first of all, go into blogengine/models.py and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    slug = models.SlugField(max_length=<span class="hljs-number">40</span>, unique=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> self.title</td></table></code></pre>
<p>The only change is the addition of the slug field. Like any other field, you’ll be able to edit the slug field using the admin interface. But, why should you have to? Existing blogging solutions like WordPress will suggest a URL for a blog post, so that’s what we want to do as well. Open blogengine/admin.py and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    prepopulated_fields = {<span class="hljs-string">"slug"</span>: (<span class="hljs-string">"title"</span>,)}</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>admin.site.register(models.Post, PostAdmin)</td></table></code></pre>
<p>If you know a little about object-oriented programming in Python, you should be able to grasp what’s going on here. We’re creating PostAdmin, which inherits from ModelAdmin, and using the title to prepopulate the slug field. We then register this as before, but using PostAdmin rather than the default ModelAdmin.</p>
<p>A fairly typical slug will be based on your title, but will strip out whitespace and other characters between the words and replace them with hyphens, and convert the result to lowercase, so a title like “My new bike” will become my-new-bike.</p>
<p>Also, note that in models.py, we pass the parameter unique=True for the slug. This indicates that the slug must be unique, so we can’t have the same URL applied to two different posts.</p>
<p>With our model and admin amended, it’s now time to create a view to deal with displaying an individual post. Add the following function to blogengine/views.py:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPost</span><span class="hljs-params">(request, postSlug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-comment"># Get specified post</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    post = Post.objects.filter(slug=postSlug)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Display specified post</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:post})</td></table></code></pre>
<p>This function receives the request object and a slug for the post. It then gets the specific post with that slug, and returns it. For now we’ll just use the existing posts.html template, but we’ll want to add a new template for single posts at some point.</p>
<p>With that done, the next step is to add a URLconf to handle blog posts. Open urls.py and add the following code after the lines for the home page:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Blog posts</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r'^(?P&lt;postSlug&gt;[-a-zA-Z0-9]+)/?$'</span>, <span class="hljs-string">'blogengine.views.getPost'</span>),</td></table></code></pre>
<p>So, now we have a dedicated URL for each post. But how do we get there? We need to create a link from the home page to each individual blog post. Open up your posts.html template and edit it to look like this:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ post.slug }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Now, if you run python manage.py syncdb, the changes to your database schema will be made automatically. However, if you already have some test posts in the database, these won’t have a slug and that could cause problems. So you can either add slugs to the existing posts manually using an UPDATE SQL command, or if you’re using something like PHPMyAdmin you can use that to add slugs for these posts. Or if they’re just test posts and you don’t care about them in the slightest, just delete your database and start again from scratch.</p>
<p>With that done, if you then run python manage.py runserver, and then visit <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, you should see your home page. If you have at least one blog post set up, you should see those posts on the home page, and the title should be a hyperlink to that post. If you have more than 5 posts, you should be able to go to <a href="http://127.0.0.1:8000/2">http://127.0.0.1:8000/2</a> and see the next 5 posts.</p>
<p>But wait! What if you don’t have more posts? You want some code in place to handle what happens if you try to go to <a href="http://127.0.0.1:8000/2">http://127.0.0.1:8000/2</a> and it isn’t there. You also want to dynamically generate links for older and newer posts so that users can click back as far as they need to.</p>
<p>First of all, let’s put something in place to catch nonexistent pages. Open blogengine/views.py and edit the getPosts function to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator, EmptyPage</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPosts</span><span class="hljs-params">(request, selected_page=<span class="hljs-number">1</span>)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Get all blog posts</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    posts = Post.objects.all().order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment"># Add pagination</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    pages = Paginator(posts, <span class="hljs-number">5</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment"># Get the specified page</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">try</span>:</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        returned_page = pages.page(selected_page)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">except</span> EmptyPage:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        returned_page = pages.page(pages.num_pages)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:returned_page.object_list})</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPost</span><span class="hljs-params">(request, postSlug)</span>:</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment"># Get specified post</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    post = Post.objects.filter(slug=postSlug)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment"># Display specified post</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:post})</td></table></code></pre>
<p>The only differences here are that EmptyPage is imported, and we add error checking to returned_page so that if it throws an EmptyPage exception (meaning that the given page doesn’t exist), then it defaults to returning the highest numbered page. The value of pages.num_pages is the number of pages in total, so you use this to get the last numbered page. If you prefer, you can change it to default to the first page by replacing pages.num_pages with 1.</p>
<p>With this done, the next step is to create links for the next and previous pages. Fortunately Django makes this really easy. First, you have to pass through the returned_page object in views.py, like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:returned_page.object_list, <span class="hljs-string">'page'</span>:returned_page})</td></table></code></pre>
<p>Here in addition to the existing posts object, we now pass through returned_page as page. Now, amend your posts.html template as follows:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ post.slug }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_previous %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.previous_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Previous Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">if</span></span> page.has_next %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/</span></span></span><span class="hljs-template-variable">{{ page.next_page_number }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/"</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endif</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Here, if the given page has a previous page, we display a link to it, and if it has a next page, we display a link to that too. page.has_previous and page.has_next return True or False, and page.previous_page_number and page.next_page_number display a number for the appropriate page, so it’s easy to use them to link to the appropriate page.</p>
<p>And that will do for now! We’ve gotten quite a lot done this time, and we actually have something that, although it’s still missing many of the more sophisticated features of blogging platforms such as WordPress, is fundamentally usable as a blog as long as you either don’t want comment functionality or are prepared to use a third-party system such as Disqus. Feel free to congratulate yourself with a beverage of your choice, and we’ll carry on later.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Yet another tutorial for building a blog using Python and Django - Part 1]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/02/24/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-1/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/02/24/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-1/</guid>
            <pubDate>Fri, 24 Feb 2012 16:17:10 GMT</pubDate>
            <description><![CDATA[<p>While I’m extremely fond of Perl for quick hacks and scripts, and have used PHP a fair amount for web development purposes (both on its own and with the CodeIgniter framework), there is one language I love above all others, and that’s Python. I’ve found that, when compared to PHP or Perl, at least for me, it’s a lot easier to “get into the zone” when programming in Python, the code I produce tends to be a lot more readable and easier to follow, and the interactive interpreter makes it really easy to figure out what’s going on in a way that just isn’t possible with PHP or Perl. Also, Python was always designed to be an object-oriented language, and IMHO has a better object model than either Perl or PHP.</p>
<p>While it would be fair to say that Python doesn’t have a single web development framework that monopolises developer’s attention the way Rails does for Ruby programmers, Django is undoubtedly the best-known Python framework. It’s solid, easy to use, and has the best documentation of any web development framework I’ve ever seen (don’t get me wrong, CodeIgniter in particular has very good documentation, but Django’s is exceptional).</p>
<p>In this tutorial, we’re going to build a very simple blogging engine using Django. In its initial stages, it will be an extremely simple web app - we won’t bother with comments, tags, categories or multiple users , or any of the other niceties of a fully-fledged blogging engine. Instead, we will build a very basic Tumblr-style blogging engine, capable of publishing blog posts and very little else. As time goes by, we can add further functionality to this and build it up into a more capable blogging solution.</p>
<p>So, let’s get started. Go to the <a href="https://www.djangoproject.com/">Django project website</a> and download the latest release (NOTE: as at time of writing this was 1.3.1, but we’re now up to 1.4.3 as at 14 January 2013, and some changes have been made to Django’s structure). Follow the installation instructions given there, and you should be ready to go. Note that from here on, I’m assuming you’re using a Unix-like operating system such as a Linux distro or Mac OS X - if you’re using Windows, there’s a few extra steps you’ll have to take, such as installing Python, and some of the commands you use may be different.</p>
<p>Once Django is installed, find a suitable folder in which to store your new Django project (perhaps a Projects folder in your home directory might be a good place). Note that Django includes its own development server, so you don’t need to install a full LAMP stack like you would if you were developing in PHP. Then, from the folder you want to store your project in, run the following command:</p>
<pre><code class="hljs lang-bash singleline">django-admin.py startproject DjangoB<span class="hljs-built_in">log</span></code></pre>
<p>This will create a brand-new directory containing all the files you need for your new Django project. If you now cd into this directory, you should see manage.py, as well as a folder called DjangoBlog containing the files <code>__init__.py</code>, <code>settings.py</code> and <code>urls.py</code>.</p>
<p>Let’s go through what these files do. First of all, there’s <code>__init__.py</code> - don’t worry about this, it’s a blank file and you don’t need to touch it.</p>
<p>Next, manage.py contains a number of extremely useful commands that you will find handy when using Django. You’re unlikely to need to edit it, but you’ll use it a lot.</p>
<p>Next, settings.py is the settings for the web app you’re building. It will specify details like what Django applications you’re using, what timezone you’re in, your database connection details and so on. You’ll need to edit this, so open it up in your favourite text editor.</p>
<p>Look for a line that reads “DATABASES”. Under here you’ll notice the following line:</p>
<pre><code class="hljs lang-python singleline">      <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.'</span>, <span class="hljs-comment"># Add 'postgresql_psycopg2',     'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></code></pre>
<p>You can use pretty much any relational database you like with Django, and because it uses its own Object-Relational Mapping (ORM), it generates the SQL needed for you, taking into account any quirks in that particular database engine. It therefore doesn’t really matter what database you use, and it’s easy to swap them out. For development purposes, we’ll use SQLite as it ships with Python and requires less configuration, so change this line to read as follows:</p>
<pre><code class="hljs lang-python singleline">      <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.sqlite3'</span>, <span class="hljs-comment"># Add 'postgresql_psycopg2',     'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></code></pre>
<p>Next you’ll see this line:</p>
<pre><code class="hljs lang-python singleline">      <span class="hljs-string">'NAME'</span>: <span class="hljs-string">''</span>,                      <span class="hljs-comment"># Or path to database file if using sqlite3.</span></code></pre>
<p>It really doesn’t matter what you call the file. I tend to call mine backend.db, as follows:</p>
<pre><code class="hljs lang-python singleline">        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'backend.db'</span>,                      <span class="hljs-comment"># Or path to database file if using sqlite3.</span></code></pre>
<p>If you keep going down, you’ll notice <code>TIME_ZONE</code> and <code>LANGUAGE_CODE</code>. You may wish to change these from their default settings (I change mine to <code>Europe/London</code> for <code>TIME_ZONE</code> and <code>en-gb</code> for <code>LANGUAGE_CODE</code>).</p>
<p>Even further down, you’ll notice the <code>INSTALLED_APPS</code> section. Django distinguishes between a project and an application - while a project will normally be a single website, an application will be a set of functionality within that website. For instance, our blog will be a single application, but we could reuse that application on multiple projects. Django also includes a number of applications out of the box - for instance, the flatpages and admin applications can be used together if you wanted to use Django to build a simple CMS, without having to build a new application at all.</p>
<p>For now, we don’t need to add any new applications, so let’s save the changes we’ve made to settings.py and move on to urls.py. This handles directing any incoming HTTP requests to the appropriate place to deal with them. It uses simple regular expressions to evaluate the incoming requests, and maps them to specific view functions. Note that it already includes URLs for the admin functionality, but these are commented out by default.</p>
<p>Exit urls.py and head back to the main directory for your project. Now, we need to test that everything works OK. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">python manage.py runserver</code></pre>
<p>Remember I said that the manage.py script had a lot of useful functions? This is one of them. Django has its own simple web server so you don’t have to faff around setting up Apache just for development purposes, and this launches it. If you go to <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, you should see a screen telling you that Django is running.</p>
<p>Now, you can stop the server for now using <kbd>Ctrl-C</kbd>, and we’ll start work on your new app. Run the following command to create your new app:</p>
<pre><code class="hljs lang-bash singleline">python manage.py startapp blogengine</code></pre>
<p>Again, note that you used manage.py to do this. There should now be a directory called blogengine in your project. Move into it, and you should find that it contains four files - <code>__init__.py</code>, <code>models.py</code>, <code>tests.py</code> and <code>views.py</code>. Again, <code>__init__.py</code> can be safely ignored, and <code>tests.py</code> can also be left alone, but <code>models.py</code> and <code>views.py</code> deserve closer examination.</p>
<p>If you haven’t used an MVC framework before, then you’ll need this explaining. MVC stands for Model-View-Controller, and it describes a method of logically separating out code for a web application to make it easier to work with. Models represent the data held by the application, views represent what end-users see of the application, and controllers represent the logic that ties the two together.</p>
<p>Django uses a slightly unusual interpretation of MVC. The models work exactly the same as they do in other frameworks, but the logic is handled by the view, and the presentation is handled by templates. Compared to more conventional MVC frameworks such as CodeIgniter, Django’s views are more like controllers, and its templates are more like views. Django is therefore often described as an MTV framework (Model-Template-View), instead of an MVC one.</p>
<p>So, to create our blog, we first need to create a model to describe the data. Edit models.py so it looks like the following:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> self.title</td></table></code></pre>
<p>To activate our new app, we also need to include it under INSTALLED_APPS in settings.py:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'blogengine'</span>,</code></pre>
<p>In Django, you create your models as Python classes, which makes it very easy to grasp. Here, a blog post is an object, and it has a title, a publication date, and some text. Note that Post here inherits from models.Model, and has specific types of field that map to field types in the database table. For instance, models.CharField obviously maps to a VARCHAR field in the database, and TextField maps to a TEXT field. You can actually see the SQL that will generate the database table for this model by returning to the project’s main directory and running python manage.py sqlall blogengine:</p>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">BEGIN</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"blogengine_post"</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"pub_date"</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">"text"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">COMMIT</span>;</td></table></code></pre>
<p>Note the “id” field. You didn’t add this - by default, Django will create an id field in any new table, and will make this the primary key in that database table. You can, however, override this behaviour if you wish. Here it’s exactly what we want so we’ll stick with it for now.</p>
<p>Also note the <strong>unicode</strong> method. This represents a string that describes that object. Here the title of a blog post seems the most logical way of describing it, so we return the object’s title.</p>
<p>Now that we’ve got our model set up, how do we get the information into it? For a blog post, all of the information will be submitted by the user, so we need to set up some kind of administrative interface. Fortunately, one of Django’s killer features is the admin interface that ships with it. This makes it really quick and easy to get certain kinds of sites up and running.</p>
<p>First of all, we need to activate the admin application. Head up to settings.py and uncomment the line that reads:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'django.contrib.admin'</span>,</code></pre>
<p>Save it, then head for urls.py and uncomment the following lines:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># from django.contrib import admin</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># admin.autodiscover()</span></td></table></code></pre>
<p>And:</p>
<pre><code class="hljs lang-python singleline">   <span class="hljs-comment"># url(r'^admin/', include(admin.site.urls)),</span></code></pre>
<p>Now, in order for the admin interface to be able to set up new blog posts, you need to also register it. In the blogengine directory containing your app, create a new file called admin.py, and fill it out with the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(models.Post)</td></table></code></pre>
<p>Once that’s done, return to the project directory and run this command to create the database tables you need:</p>
<pre><code class="hljs lang-bash singleline">python manage.py syncdb</code></pre>
<p>You’ll get asked for some information to set up your user account - remember it as you’ll need it to log into the admin interface. Once that’s done, run python manage.py runserver again, and return to <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a> again. You should be confronted with a 404 page - that’s fine, that’s exactly what we should be seeing. You’ll note that the message states that Django tried the ^admin/ path without success - what this means is that this is the only URL pattern in urls.py at the moment, and the path you entered didn’t match this.</p>
<p>If you change the URL in the browser to <a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a>, you should get a login screen. Enter the username and password you set when you ran syncdb and click Log in. You should now see Django’s admin interface, with Posts available, and an Add and Change dialogue visible next to it. If you want to add a few blog posts, just to have some data to work with, go ahead. Note that for the Date and Time dialogues, Django automatically adds the Today and Now shortcuts.</p>
<p>So, our model is now sorted and we have some data in the web app. The next step is to write our views. You’ll notice that the blogengine app contains a file called views.py - open this up and enter the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getRecentPosts</span><span class="hljs-params">(request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Get all blog posts</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Sort posts into chronological order</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    sorted_posts = posts.order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:sorted_posts})</td></table></code></pre>
<p>Let’s go through this code. The first line imports the render_to_response method, which is used to render a template. The second line imports the Post model.</p>
<p>Next, we define the getRecentPosts view. For simplicity’s sake, we aren’t going to bother about pagination for the moment, so we’ll just get all the posts. The view is written as a Python function, and we pass it the request object as the sole parameter.</p>
<p>Next, we get all of the Post objects, using Post.objects.all(), and assign it to a list called posts. As we want these to be in reverse chronological order, we then reorder them by pub_date (note the - sign at the beginning to denote reverse order) and assign the result to sorted_posts. Finally, we load the posts.html template and pass through sorted_posts as the value in a dictionary called posts.</p>
<p>With our view done, we now need to produce a template for it. Head back up to your main project directory and create a new folder called templates. Then, go into settings.py and find the line marked TEMPLATE_DIRS. Inside the brackets, underneath the comments, add the full, absolute path to the new templates folder, as in this example:</p>
<pre><code class="hljs lang-bash singleline">  <span class="hljs-string">"/Users/matthewdaly/Development/Python/Django/blog/templates"</span></code></pre>
<p>You’ll have to change this to the full, absolute path on your machine. This will tell Django to look for the templates in that folder. Now, go into templates, and create a new file called posts.html. Enter the following text into it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Most of this is just plain old HTML, but you’ll notice that {% %} denotes tags that can include some logic (such as a for loop in this case), and {{ }} denotes a variable. Remember that in the view we passed through a dictionary containing all of the Post objects, and here we’re iterating through all of those post objects, outputting their title, publication date and text content.</p>
<p>With this done, we need to configure the routes to call the getRecentPosts view when someone visits the home page. Open urls.py again and add the following code underneath where you enabled the admin, but still inside the parentheses:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Home page</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r''</span>, <span class="hljs-string">'blogengine.views.getRecentPosts'</span>),</td></table></code></pre>
<p>Now, this is a very simple regular expression. Here, this is our default page, so we leave the single quotes after the r empty. We then specify that this URL should be handled by the getRecentPosts function, inside views.py, in the blogengine application.</p>
<p>Save that, and start up the development server again with python manage.py runserver. Then, if you haven’t already added a few test posts, do so via the admin interface. Then open <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, and you should see your blog posts.</p>
<p>So, we now have the beginnings of a blogging application! We’ll leave it here for now, and will go on to add functionality like viewing individual posts and pagination later. We’ll also look into adding further functionality to our blog, such as supporting multiple authors, tagging posts, and adding flat pages.</p>
]]></description>
        </item>
    </channel>
</rss>
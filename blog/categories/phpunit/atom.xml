<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>phpunit | Matthew Daly&apos;s Blog</title>
    <updated>2019-04-15T19:59:36Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/phpunit/"/>
    <subtitle>phpunit | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2019</rights>
    <entry>
        <title type="html"><![CDATA[Creating custom assertions with PHPUnit]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/11/16/creating-custom-assertions-with-phpunit/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/11/16/creating-custom-assertions-with-phpunit/">
        </link>
        <updated>2017-11-16T15:15:50Z</updated>
        <summary type="html"><![CDATA[<p>Today I’ve been working on a library I’m building for making it easier to build RESTful API’s with Laravel. It uses an abstract RESTful controller, which inherits from the default Laravel controller, and I wanted to verify that the instantiated controller includes all the traits from the base controller.</p>
<p>However, there was a problem. The only practical way to verify that a class includes a trait is with the <code>class_uses()</code> function, but this doesn’t work if the class inherits from a parent that includes these traits. As the class is abstract, it can’t be instantiated directly, so you must either create a dummy class just for testing that extends it, or mock the class, and that means that <code>class_uses()</code> won’t work. As a result, I needed to first get the parent class, then call <code>class_uses()</code> on that, which is possible, but a bit verbose to do repeatedly for several tests.</p>
<p>Fortunately it’s quite easy to create your own custom assertions in PHPUnit. I started out by setting up the test with the assertion I wanted to have:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\Unit\Http\Controllers;

use Tests\TestCase;
use Mockery as m;

class RestfulControllerTest extends TestCase
{
    public function testTraits()
    {
        $controller = m::mock(&#39;Matthewbdaly\Harmony\Http\Controllers\RestfulController&#39;)-&gt;makePartial();
        $this-&gt;assertParentHasTrait(&#39;Illuminate\Foundation\Bus\DispatchesJobs&#39;, $controller);
        $this-&gt;assertParentHasTrait(&#39;Illuminate\Foundation\Validation\ValidatesRequests&#39;, $controller);
        $this-&gt;assertParentHasTrait(&#39;Illuminate\Foundation\Auth\Access\AuthorizesRequests&#39;, $controller);
    }
}
</code></pre>
<p>Actually implementing the assertion is fairly straightforward. You simply add the assertion as a method on the base test case you’re using. and accept whatever arguments are required, plus a final argument of <code>$message = &#39;&#39;</code>. Then you call <code>self::assertThat()</code>, as demonstrated below:</p>
<pre><code class="lang-php">    public function assertParentHasTrait($trait, $class, $message = &#39;&#39;)
    {
        $parent = get_parent_class($class);
        $traits = class_uses($parent);
        self::assertThat(in_array($trait, $traits), self::isTrue(), $message);
    }
</code></pre>
<p>In this case we’re asserting that the specified trait appears in the list of traits on the parent class. Note the use of <code>self::isTrue()</code> - this just verifies that the response is truthy.</p>
<p>Using this method it’s quite easy to create custom assertions, which can help make your tests less verbose and easier to read.</p>
]]></summary>
    </entry>
</feed>
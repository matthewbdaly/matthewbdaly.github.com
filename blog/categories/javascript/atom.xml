<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>javascript | Matthew Daly&apos;s Blog</title>
    <updated>2019-01-13T20:17:08Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/javascript/"/>
    <subtitle>javascript | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2019</rights>
    <entry>
        <title type="html"><![CDATA[Adding React to a legacy project]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/10/16/adding-react-to-a-legacy-project/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/10/16/adding-react-to-a-legacy-project/">
        </link>
        <updated>2018-10-16T08:00:29Z</updated>
        <summary type="html"><![CDATA[<p>The project I’m currently working on is a textbook example of what happens when a project uses jQuery when it really ought to use a proper Javascript framework, or it starts out just using jQuery and grows out of all proportion. It’s also not helped by the fact that historically it’s just been worked on when new functionality needs to be added, meaning that rather than refactoring the code base, it’s been copied-and-pasted. As a result, there’s lots of repetitive code in desparate need of refactoring, and huge reams of horrible jQuery spaghetti code.</p>
<p>When I first took over responsibility for the project, I integrated Laravel Mix into it so that I had the means to refactor some of the common functionality into separate files and require them during the build process, as well as use ES6. However, this was only the first step, as it didn’t sort out the fundamental problem of repetitive boilerplate code being copied and pasted. What I needed was a refactor to use something more opinionated. As it happened, I was asked to add a couple of modals to the admin, and since the modals were one of the worst parts of the admin in terms of repetitive code, they were a strong candidate for implementing using a more suitable library.</p>
<p>I looked at a few options:</p>
<ul>
<li>I’ve used Angular 1 quite successfully in the past, but I didn’t really want to use a framework that was being killed off, and it would be difficult to retrofit into a legacy application</li>
<li>Angular 2+ is actively maintained, but it would again be difficult to retrofit it into a legacy application. In addition, the need for TypeScript would make it problematic.</li>
<li>Vue was a possibility, but it did a bit too much for this use case, and it wasn’t all that clear how to retrofit it to an existing application</li>
</ul>
<p>Eventually, I settled on React.js, for the following reasons:</p>
<ul>
<li>It has a preset in Laravel Mix, making it easy to get started with it.</li>
<li>It has a very limited target - React is closely focused on the view layer, dealing only with rendering and event handling, so it does just what I needed in this case.</li>
<li>It has a strong record of use with legacy applications - after all, it was created by Facebook and they added it incrementally.</li>
<li>It’s easy to test - Jest’s snapshot tests make it easy to verify the rendered content hasn’t changed, and using Enzyme it’s straightforward to test interactions with the component</li>
<li>Higher order components provide a straightforward way to share functionality between components, which I needed to allow different modals to deal with another modal in the same way.</li>
<li>By creating a series of components for common user interface elements, I could then re-use those components in future work, saving time and effort.</li>
</ul>
<p>However, it wasn’t entirely clear how I might go about integrating React into a legacy application. In the end, I managed to figure out an approach which worked.</p>
<p>Normally, I would create a single root for my application, something like this:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./components/App&#39;;

ReactDOM.render(
    &lt;App /&gt;,
    document.getElementById(&#39;root&#39;)
);
</code></pre>
<p>However, that wasn’t an option here. The existing modals were using jQuery and Bootstrap, and the new modals had to work with them. I therefore needed to have only certain parts of the UI managed with React, and the rest wouldn’t be touched. Here’s an example of how I rendered the modal in the end:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import higherOrderComponent from &#39;./components/higherOrderComponent&#39;;
import modalComponent from &#39;./components/modalComponent&#39;;

const Modal = higherOrderComponent(modalComponent);
window.componentWrapper = ReactDOM.render(
  &lt;Modal /&gt;,
  document.getElementById(&#39;modalTarget&#39;)
);

window.componentWrapper.setState({
  foo: &#39;bar&#39;
});
</code></pre>
<p>By extracting the duplicate functionality into a higher order component, I could easily wrap the new modals in that component and share that functionality between the modals. I could then render each component in a different target element, and assign it to a variable in the <code>window</code> namespace. The div with a ID of <code>modalTarget</code> needed to be added in the appropriate place, but otherwise the HTML didn’t need to be touched, since the required markup was in the React component instead.</p>
<p>Then, when I needed to change a value int the statee of the component, I could just call <code>window.componentWrapper.setState({})</code>, passing through the values to set, and these would propogate down to the child components as usual. I could also render multiple different modal components on the page, and refer to each one separately in order to set the state.</p>
<p>This isn’t an approach I’d recommend on a greenfield project - state isn’t really something you should be setting from outside a component like this, and normally I wouldn’t do it. However, it seemed to be the easiest way for this particular use case. Over time I’ll port more and more of the UI over to React, and eventually it won’t be necessary as I’ll be storing the application state in something like Redux.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Do you still need jQuery?]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/10/11/do-you-still-need-jquery/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/10/11/do-you-still-need-jquery/">
        </link>
        <updated>2018-10-11T08:21:58Z</updated>
        <summary type="html"><![CDATA[<p>There was a time not so long ago when jQuery was ubiquitous. It was used on almost every website as a matter of course, to the point that many HTML boilerplates included a reference to the CDN.</p>
<p>However, more and more I think it’s probably unnecessary for two main use cases:</p>
<h2 id="jquery-is-probably-unnecessary-for-many-web-apps-with-simple-javascript">jQuery is probably unnecessary for many web apps with simple Javascript</h2>
<p>When jQuery first appeared, IE6 was commonplace, and browser API’s were notoriously inconsistent. jQuery was very useful in ironing out those inconsistencies and helping to make the developer’s experience a bit better.</p>
<p>Nowadays, that’s no longer the case. Internet Explorer is on its way out, with IE11 being the only version still supported by Microsoft, and it’s becoming increasingly hard to justify support for older versions, especially with mobile browsers forming a bigger than ever chunk of the market. We’ll probably need to continue supporting IE11 for a good long while, and possibly IE10 for some time too, but these aren’t anything like as bad to work with as IE6. It’s worth noting that newer versions of jQuery are also dropping support for these older browsers, so in many ways it actually does less than it used to.</p>
<p><a href="http://lmgtfy.com/?q=do+you+still+need+jquery">This is the usual thrust of articles on whether you should still be using jQuery</a> so I’m not going to go over this matter , but for many smaller web apps, jQuery is no longer necessary, and a lot of developers have a tendency to keep using it when it’s probably not required.</p>
<h2 id="jquery-is-insufficient-for-web-apps-with-complex-javascript">jQuery is insufficient for web apps with complex Javascript</h2>
<p>Nowadays, there’s a lot of web applications that have moved big chunks of functionality from the server side to the client side. Beyond a certain (and quite small) level of complexity, jQuery just doesn’t do enough to cut it. For me personally, the nature of the projects I work on means that this is a far, far bigger issue than the first one.</p>
<p>I used to work predominantly with Phonegap, which meant that a lot of functionality traditionally done on the server side had to be moved to the client side, and for that jQuery was never sufficient. My first Phonegap app started out using jQuery, but it quickly became obvious that it was going to be problematic. It wound up as a huge mass of jQuery callbacks and Handlebars templates, which was almost impossible to test and hard to maintain. Given this experience, I resolved to switch to a full-fledged Javascript framework next time I built a mobile app, and for the next one I chose Backbone.js, which still used jQuery as a dependency, but made things more maintainable by giving a structure that it didn’t have before, which was the crucial difference.</p>
<p>The more modern generation of Javascript frameworks such as Vue and React, go further in making jQuery redundant. Both of these implement a so-called Virtual DOM, which is used to calculate the minimum changes required to re-render the element in question. Subsequently using jQuery to mutate the DOM would cause problems because it would get out of sync with the Virtual DOM - in fact, in order to get a jQuery plugin working in the context of a React component, you have to actively prevent React from touching the DOM, thereby losing most of the benefits of using React in the first place. You usually see better results from using a React component designed for that purpose (or writing one, which React makes surprisingly simple), than from trying to shoehorn a jQuery plugin into it.</p>
<p>They also make a lot of things that jQuery does trivially easy - for instance, if you want to conditionally show and hide content in a React component, it’s just a case of building it to hide that content based on a particular value in the props or state, or filtering a list is just a case of applying a filter to the array containing the data and setting the state as appropriate.</p>
<p>In short, for single-page web apps or other ones with a lot of Javascript, you should look at other solutions first, and not just blithely assume jQuery will be up to the task. It’s technically possible to build this sort of web app using jQuery, but it’s apt to turn into a morass of spaghetti code unless approached with a great deal of discipline, one that sadly many developers don’t have, and it doesn’t exactly make it easy to promote code reuse. These days, I prefer React for complex web apps, because it makes it extremely intuitive to break my user interface up into reusable components, and test them individually. Using React would be overkill on brochure-style sites (unless you wanted to build it with something like Gatsby), but for more complex apps it’s often a better fit than jQuery.</p>
<h2 id="so-when-should-you-use-jquery-">So when should you use jQuery?</h2>
<p>In truth, I’m finding it harder and harder to justify using it at all on new builds. I use it on my personal site because that’s built on Bootstrap 3 and so depends on jQuery, but for bigger web apps I’m generally finding myself moving to React, which renders it not just unnecessary for DOM manipulation, but counter-productive to use it. Most of what I do is big enough to justify something like React, and it generally results in code that is more declarative, easier to test and reason about, and less repetitive. Using jQuery for an application like this is probably a bad idea, because it’s difficult (not impossible, mind, if you follow some of the advice <a href="https://learn.jquery.com/code-organization/">here</a>, use a linter and consider using a proper client-side templating system alongside jQuery) to build an elegant and maintainable Javascript-heavy application.</p>
<p>As a rule of thumb, I find anything which is likely to require more than a few hundred lines of Javascript to be written, is probably complex enough that jQuery isn’t sufficient, and I should instead consider something like React.</p>
<p>I doubt it’d be worth the bother of ripping jQuery out of a legacy application and rewriting the whole thing to not require it, but for new builds I would think very hard about:</p>
<ul>
<li>Whether jQuery is sufficient, or you’d be better off using something like React, Vue or Angular</li>
<li>If it is sufficient, whether it’s actually necessary</li>
</ul>
<p>In all honesty, I don’t think using it when it’s technically not necessary is as much of a big deal as the issue of using it when it’s not really sufficient. Yes, dowloading a library you technically don’t need for a page is a bad practice, and it does make your site slower and harder for users on slow mobile connections, but there are ways to mitigate that such as CDN’s, caching and minification. If you build a web app using jQuery alone when React, Vue or Angular would be more suitable, you’re probably going to have to write a lot more code that will be difficult to maintain, test and understand. Things like React were created to solve the problems that arose when developers built complex client-side applications with jQuery, and are therefore a good fit for bigger applications. The complex setup does mean they have a threshold below which it’s not worth the bother of using them, but past that threshold they result in better, more maintainable, more testable and more reusable code.</p>
<h2 id="now-react-is-cool-you-hate-jquery-you-hipster-">Now React is cool, you hate jQuery, you hipster…</h2>
<p>Don’t be a prat. Bitter experience has taught me that for a lot of my own personal use cases, jQuery is insufficient. It doesn’t suck, it’s just insufficient. If for your use case, jQuery <em>is</em> sufficient, then that’s fine. All I’m saying is that when a web app becomes sufficiently complex, jQuery can begin to cause more problems than it solves, and that for a sufficiently complex web app you should consider other solutions.</p>
<p>I currently maintain a legacy application that includes thousands of lines of Javascript. Most of it is done with jQuery and some plugins, and it’s resulted in some extremely repetitive jQuery callbacks that are hard to maintain and understand, and impossible to test. Recently I was asked to add a couple of modals to the admin interface, and rather than continuing to add them using jQuery and adding more spaghetti code, I instead opted to build them with React. During the process of building the first modal, I produced a number of components for different elements of the UI. Then, when I built the second one, I refactored those components to be more generic, and moved some common functionality into a higher-order component so that it could be reused. Now, if I need to add another modal, it will be trivial because I already have those components available, and I can just create a new component for the modal, import those components that I need, wrap it in the higher-order component if necessary, and that’s all. I can also easily test those components in isolation. In short, I’ve saved myself some work in the long run by writing it to use a library that was a better fit.</p>
<p>It’s not like using jQuery inevitably results in unmaintainable code, but it does require a certain amount of discipline to avoid it. A more opinionated library such as React makes it far, far harder to create spaghetti code, and makes code reuse natural in a way that jQuery doesn’t.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snapshot test your Vue components with Jest]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/">
        </link>
        <updated>2017-06-17T13:12:02Z</updated>
        <summary type="html"><![CDATA[<p>At work I’ve recently started using <a href="https://vuejs.org/">Vue</a> as my main front-end framework instead of Angular 1. It has a relatively shallow learning curve and has enough similarities with both React and Angular 1 that if you’re familiar with one or both of them it feels quite familiar. We’re a Laravel shop and Laravel comes out of the box with a basic scaffolding for using Vue, so not only is it the path of least resistance, but many of my colleagues knew it already and it’s used on some existing projects (one of which I’ve been helping out on this week), so it made sense to learn it. Add to that the fact that the main alternative is Angular 2, which I vehemently dislike, and learning Vue was a no-brainer.</p>
<p><a href="https://facebook.github.io/jest/docs/snapshot-testing.html">Snapshot tests</a> are a really useful way of making sure your user interface doesn’t change unexpectedly. Facebook introduced them to their Jest testing framework last year, and they’ve started to appear in other testing frameworks too. In their words…</p>
<blockquote>
<p>A typical snapshot test case for a mobile app renders a UI component, takes a screenshot, then compares it to a reference image stored alongside the test. The test will fail if the two images do not match: either the change is unexpected, or the screenshot needs to be updated to the new version of the UI component.</p>
</blockquote>
<p>This makes it easy to make sure than a UI component, such as a React or Vue component, does not unexpectedly change how it is rendered. In the event that it does change, it will fail the test, and it’s up to the developer to confirm whether or not that’s expected - if so they can generate a new version of the snapshot and be on their way. Without it, you’re stuck manually testing that the right HTML tags get generated, which is a chore.</p>
<p>Jest’s documentation is aimed pretty squarely at React, but it’s not hard to adapt it to work with Vue components. Here I’ll show you how I got it working with Vue.</p>
<h2 id="setting-up-a-new-project">Setting up a new project</h2>
<p>I used the <a href="https://github.com/vuejs/vue-cli">Vue CLI</a> boilerplate generator to set up my initial dependencies for this project. I then had to install some further packages:</p>
<pre><code class="lang-bash">$ npm install --save-dev jest babel-jest jest-vue-preprocessor
</code></pre>
<p>After that, I had to configure Jest to work with Vue. The finished <code>package.json</code> looked like this:</p>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;myproject&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A project&quot;,
  &quot;author&quot;: &quot;Matthew Daly &lt;matthew@matthewdaly.co.uk&gt;&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,
    &quot;start&quot;: &quot;node build/dev-server.js&quot;,
    &quot;build&quot;: &quot;node build/build.js&quot;,
    &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;,
    &quot;test&quot;: &quot;jest __test__/ --coverage&quot;
  },
  &quot;dependencies&quot;: {
    &quot;vue&quot;: &quot;^2.3.3&quot;,
    &quot;vue-router&quot;: &quot;^2.3.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;autoprefixer&quot;: &quot;^6.7.2&quot;,
    &quot;babel-core&quot;: &quot;^6.22.1&quot;,
    &quot;babel-eslint&quot;: &quot;^7.1.1&quot;,
    &quot;babel-jest&quot;: &quot;^20.0.3&quot;,
    &quot;babel-loader&quot;: &quot;^6.2.10&quot;,
    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.22.0&quot;,
    &quot;babel-preset-env&quot;: &quot;^1.3.2&quot;,
    &quot;babel-preset-stage-2&quot;: &quot;^6.22.0&quot;,
    &quot;babel-register&quot;: &quot;^6.22.0&quot;,
    &quot;chalk&quot;: &quot;^1.1.3&quot;,
    &quot;connect-history-api-fallback&quot;: &quot;^1.3.0&quot;,
    &quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;,
    &quot;css-loader&quot;: &quot;^0.28.0&quot;,
    &quot;eslint&quot;: &quot;^3.19.0&quot;,
    &quot;eslint-config-standard&quot;: &quot;^6.2.1&quot;,
    &quot;eslint-friendly-formatter&quot;: &quot;^2.0.7&quot;,
    &quot;eslint-loader&quot;: &quot;^1.7.1&quot;,
    &quot;eslint-plugin-html&quot;: &quot;^2.0.0&quot;,
    &quot;eslint-plugin-promise&quot;: &quot;^3.4.0&quot;,
    &quot;eslint-plugin-standard&quot;: &quot;^2.0.1&quot;,
    &quot;eventsource-polyfill&quot;: &quot;^0.9.6&quot;,
    &quot;express&quot;: &quot;^4.14.1&quot;,
    &quot;extract-text-webpack-plugin&quot;: &quot;^2.0.0&quot;,
    &quot;file-loader&quot;: &quot;^0.11.1&quot;,
    &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.1.3&quot;,
    &quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;,
    &quot;http-proxy-middleware&quot;: &quot;^0.17.3&quot;,
    &quot;jest&quot;: &quot;^20.0.4&quot;,
    &quot;jest-vue-preprocessor&quot;: &quot;^1.0.1&quot;,
    &quot;opn&quot;: &quot;^4.0.2&quot;,
    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^1.3.0&quot;,
    &quot;ora&quot;: &quot;^1.2.0&quot;,
    &quot;rimraf&quot;: &quot;^2.6.0&quot;,
    &quot;semver&quot;: &quot;^5.3.0&quot;,
    &quot;shelljs&quot;: &quot;^0.7.6&quot;,
    &quot;url-loader&quot;: &quot;^0.5.8&quot;,
    &quot;vue-loader&quot;: &quot;^12.1.0&quot;,
    &quot;vue-style-loader&quot;: &quot;^3.0.1&quot;,
    &quot;vue-template-compiler&quot;: &quot;^2.3.3&quot;,
    &quot;webpack&quot;: &quot;^2.6.1&quot;,
    &quot;webpack-bundle-analyzer&quot;: &quot;^2.2.1&quot;,
    &quot;webpack-dev-middleware&quot;: &quot;^1.10.0&quot;,
    &quot;webpack-hot-middleware&quot;: &quot;^2.18.0&quot;,
    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;
  },
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,
    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;
  },
  &quot;browserslist&quot;: [
    &quot;&gt; 1%&quot;,
    &quot;last 2 versions&quot;,
    &quot;not ie &lt;= 8&quot;
  ],
  &quot;jest&quot;: {
    &quot;testRegex&quot;: &quot;spec.js$&quot;,
    &quot;moduleFileExtensions&quot;: [
      &quot;js&quot;,
      &quot;vue&quot;
    ],
    &quot;transform&quot;: {
      &quot;^.+\\.js$&quot;: &quot;&lt;rootDir&gt;/node_modules/babel-jest&quot;,
      &quot;.*\\.(vue)$&quot;: &quot;&lt;rootDir&gt;/node_modules/jest-vue-preprocessor&quot;
    }
  }
}
</code></pre>
<p>I won’t include things like the Webpack config, because that’s all generated by Vue CLI. Note that we need to tell Jest what file extensions it should work with, including <code>.vue</code>, and we need to specify the appropriate transforms for different types of files. We use <code>jest-vue-preprocessor</code> for <code>.vue</code> files and <code>babel-jest</code> for <code>.js</code> files.</p>
<p>With that done, we can create a basic component. We’ll assume we’re writing a simple issue tracker here, and our first component will be at <code>src/components/Issue.vue</code>:</p>
<pre><code class="lang-html">&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;An Issue&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data () {
    return {}
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
&lt;/style&gt;
</code></pre>
<p>Next, we create a simple test for this component. Save this as <code>__test__/components/issue.spec.js</code>:</p>
<pre><code class="lang-javascript">import Issue from &#39;../../src/components/Issue.vue&#39;
import Vue from &#39;vue&#39;

const Constructor = Vue.extend(Issue)
const vm = new Constructor().$mount()

describe(&#39;Issue&#39;, () =&gt; {
  it(&#39;should render&#39;, () =&gt; {
    expect(vm.$el.querySelector(&#39;h1&#39;).textContent).toEqual(&#39;An Issue&#39;)
  });

  it(&#39;should match the snapshot&#39;, () =&gt; {
    expect(vm.$el).toMatchSnapshot()
  });
});
</code></pre>
<p><code>Constructor</code> is what creates our Vue component, while <code>vm</code> is our actual newly-mounted Vue component. We can refer to the HTML inside the component through <code>vm.$el</code>, so we can then work with the virtual DOM easily.</p>
<p>In the first test we use the more traditional method of verifying our UI component has worked as expected - we fetch an HTML tag inside it and verify that the content inside is what we expect. This is fine for a small component, but as the components get larger we’ll find it more of a chore.</p>
<p>The second test is much simpler and more concise. We simply assert that it matches the snapshot. Not only is that easier, but it can scale to components of any size because we don’t have to check every little element.</p>
<p>Let’s run our tests:</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 PASS  __test__/components/issue.spec.js
  Issue
    ✓ should render (46ms)
    ✓ should match the snapshot (14ms)

Snapshot Summary
 › 1 snapshot written in 1 test suite.

Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   1 added, 1 total
Time:        8.264s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |    96.15 |       50 |      100 |       96 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Note this section:</p>
<pre><code class="lang-bash">Snapshot Summary
 › 1 snapshot written in 1 test suite.
</code></pre>
<p>This tells us that the snapshot has been successfully written. If we run the tests again we should see that it checks against the existing snapshot:</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 PASS  __test__/components/issue.spec.js
  Issue
    ✓ should render (40ms)
    ✓ should match the snapshot (12ms)

Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   1 passed, 1 total
Time:        3.554s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |    96.15 |       50 |      100 |       96 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Great stuff. Now, if we make a minor change to our component, such as changing the text from <code>An Issue</code> to <code>My Issue</code>, does it pick that up?</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 FAIL  __test__/components/issue.spec.js (5.252s)
  ● Issue › should render

    expect(received).toEqual(expected)

    Expected value to equal:
      &quot;An Issue&quot;
    Received:
      &quot;My Issue&quot;

      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:9:52)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)

  ● Issue › should match the snapshot

    expect(value).toMatchSnapshot()

    Received value does not match stored snapshot 1.

    - Snapshot
    + Received

     &lt;div&gt;
       &lt;h1&gt;
    -    An Issue
    +    My Issue
       &lt;/h1&gt;
     &lt;/div&gt;

      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:13:20)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)

  Issue
    ✕ should render (48ms)
    ✕ should match the snapshot (25ms)

Snapshot Summary
 › 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.

Test Suites: 1 failed, 1 total
Tests:       2 failed, 2 total
Snapshots:   1 failed, 1 total
Time:        7.082s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |    96.15 |       50 |      100 |       96 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Yes, we can see that it’s picked up on the change and thrown an error. Note this line:</p>
<pre><code class="lang-bash"> › 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.
</code></pre>
<p>Jest is telling us that our snapshot has changed, but if we expect that, we can just run <code>npm test -- -u</code> to replace the existing one with our new one. Then, our tests will pass again.</p>
<p>Now, this component is pretty useless. It doesn’t accept any external input whatsoever, so the response is always going to be the same. How do we test a more dynamic component? Amend the component to look like this:</p>
<pre><code class="lang-html">&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;{{ issue.name }}&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  props: {
    issue: Object
  },
  data () {
    return {}
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
&lt;/style&gt;
</code></pre>
<p>We’re now passing the <code>issue</code> object into our component as a prop, and getting the name from that. That will break our test, so we need to amend it to pass through the props:</p>
<pre><code class="lang-javascript">import Issue from &#39;../../src/components/Issue.vue&#39;
import Vue from &#39;vue&#39;

const Constructor = Vue.extend(Issue)
const issue = {
  name: &#39;My Issue&#39;
}
const vm = new Constructor({
  propsData: { issue: issue }
}).$mount()

describe(&#39;Issue&#39;, () =&gt; {
  it(&#39;should render&#39;, () =&gt; {
    expect(vm.$el.querySelector(&#39;h1&#39;).textContent).toEqual(&#39;My Issue&#39;)
  });

  it(&#39;should match the snapshot&#39;, () =&gt; {
    expect(vm.$el).toMatchSnapshot()
  });
});
</code></pre>
<p>Here we pass our prop into the constructor for the component. Now, let’s run the tests again:</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 FAIL  __test__/components/issue.spec.js
  ● Issue › should match the snapshot

    expect(value).toMatchSnapshot()

    Received value does not match stored snapshot 1.

    - Snapshot
    + Received

     &lt;div&gt;
       &lt;h1&gt;
    -    An Issue
    +    My Issue
       &lt;/h1&gt;
     &lt;/div&gt;

      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:18:20)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)

  Issue
    ✓ should render (39ms)
    ✕ should match the snapshot (25ms)

Snapshot Summary
 › 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 passed, 2 total
Snapshots:   1 failed, 1 total
Time:        3.717s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |     96.3 |       50 |      100 |    96.15 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Jest has picked up on our changes and thrown an error. However, because we know the UI has changed, we’re happy with this situation, so we can tell Jest to replace the prior snapshot with <code>npm test -- -u</code> as mentioned earlier:</p>
<pre><code class="lang-bash">$ npm test -- -u

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage &quot;-u&quot;

 PASS  __test__/components/issue.spec.js
  Issue
    ✓ should render (39ms)
    ✓ should match the snapshot (14ms)

Snapshot Summary
 › 1 snapshot updated in 1 test suite.

Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   1 updated, 1 total
Time:        3.668s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |     96.3 |       50 |      100 |    96.15 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Great, we now have a passing test suite again! That’s all we need to make sure that any regressions in the generated HTML of a component get caught.</p>
<p>Of course, this won’t help with the actual functionality of the component. However, Jest is pretty easy to use to write tests for the actual functionality of the application. If you prefer another testing framework, it’s possible to do the same with them, although I will leave setting them up as an exercise for the reader.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Phonegap App with Laravel and Angular - Part 4]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/">
        </link>
        <updated>2016-11-13T16:15:00Z</updated>
        <summary type="html"><![CDATA[<p>In this instalment we’ll return to the back end. What we’ve done so far is typical of the kind of proof of concept we might do for a client early on, before going back and implementing the full set of features later on. Now we’ll go back and start to improve on that rather quick-and-dirty API by making sure we follow a few best practices.</p>
<p>For those of you who want to follow the Laravel Phonegap tutorials, I’ve created a dedicated category <a href="/blog/categories/laravel-phonegap-tutorial/">here</a> for those tutorials. This category include RSS and Atom feeds, so if you only want to read those posts, you can do so. I’ve also done the same for the <a href="/blog/categories/django-blog-tutorial/">Django tutorials</a>.</p>
<h2 id="the-repository-pattern">The Repository pattern</h2>
<p>One of the issues we currently have with our API is that we’re passing our Eloquent models into our controllers. This may not seem like a huge issue, but it means that our controllers are tightly coupled to the Eloquent ORM, so if we wanted to switch to another ORM, or to a completely different database such as MongoDB, we’d have to amend our controllers. That’s not good.</p>
<p>However, using the <a href="http://designpatternsphp.readthedocs.io/en/latest/More/Repository/README.html">Repository pattern</a> we can first of all define an interface for our repository, and then create a repository class that implements that interface. That way we can interact with the repository class in our controllers, rather than using Eloquent models directly. Then, if we want to switch databases, we merely amend the repository class to change the implementation of those methods, without having to touch our controllers. Also, it makes it much easier to test our controllers in isolation, because we can easily mock our repository class using Mockery and hard-code the response, so our tests won’t touch the database and will therefore run more quickly. We won’t touch on that this time, but it’s a very significant advantage.</p>
<p>If you haven’t used interfaces before in PHP, they aren’t that hard. They merely specify what methods an object implementing that method must have and what arguments they must accept, but do not specify the details of the implementation. This makes it easy to determine if a class implements an interface correctly, because it will throw an exception if it doesn’t.</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories\Interfaces;

interface PetRepositoryInterface {
    public function all();

    public function findOrFail($id);

    public function create($input);
}
</code></pre>
<p>That’s all there is to it. We define it using the <code>interface</code> keyword and we specify the methods it must implement. Save this file at <code>app/Repositories/Interfaces/PetRepositoryInterface.php</code>.</p>
<p>Next, we implement the repository class:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories;

use AnimalFriend\Pet;
use AnimalFriend\Repositories\Interfaces\PetRepositoryInterface;

class EloquentPetRepository implements PetRepositoryInterface {

    private $pet;

    public function __construct(Pet $pet)
    {
        $this-&gt;pet = $pet;
    }

    public function all()
    {
        return $this-&gt;pet-&gt;all();
    }

    public function findOrFail($id)
    {
        return $this-&gt;pet-&gt;findOrFail($id);
    }

    public function create($input)
    {
        return $this-&gt;pet-&gt;create($input);
    }
}
</code></pre>
<p>Save this to <code>app/Repositories/EloquentPetRepository.php</code>. Note how the methods closely mirror the underlying Eloquent methods, but they don’t need to - you could change the underlying implementation of each method, but the repository would still work in exactly the same way.</p>
<p>To make this work, we need to make a few changes elsewhere. In <code>composer.json</code>, we need to add the new <code>Repositories</code> folder to our classmap:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;classmap&quot;: [
            &quot;database&quot;,
            &quot;app/Repositories&quot;
        ],
        &quot;psr-4&quot;: {
            &quot;AnimalFriend\\&quot;: &quot;app/&quot;
        }
    },
</code></pre>
<p>And in <code>app/Providers/AppServiceProvider.php</code>, we need to bind our new files:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this-&gt;app-&gt;bind(
            &#39;AnimalFriend\Repositories\Interfaces\PetRepositoryInterface&#39;,
            &#39;AnimalFriend\Repositories\EloquentPetRepository&#39;
        );
    }
}
</code></pre>
<p>With that done, we can now update <code>app/Http/Controllers/PetController.php</code> to use the repository:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Repositories\Interfaces\PetRepositoryInterface as Pet;

class PetController extends Controller
{
    private $pet;

    public function __construct(Pet $pet) {
        $this-&gt;pet = $pet;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Get all pets
        $pets = $this-&gt;pet-&gt;all();

        // Send response
        return response()-&gt;json($pets, 200);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Get pet
        $pet = $this-&gt;pet-&gt;findOrFail($id);

        // Send response
        return response()-&gt;json($pet, 200);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>Our repository is now injected automatically into the controller. To make this work we need to run the following command:</p>
<pre><code class="lang-bash">$ composer dump-autoload
</code></pre>
<p>Running our tests should confirm that everything is still working:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.
............                                                      12 / 12 (100%)

Time: 897 ms, Memory: 18.00MB

OK (12 tests, 46 assertions)
</code></pre>
<p>Let’s do the same for the User model. First we implement our interface in <code>app/Repositories/Interfaces/UserRepositoryInterface.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories\Interfaces;

interface UserRepositoryInterface {
    public function all();

    public function findOrFail($id);

    public function create($input);
}
</code></pre>
<p>Next we create our repository at <code>app/Repositories/EloquentUserRepository.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories;

use AnimalFriend\User;
use AnimalFriend\Repositories\Interfaces\UserRepositoryInterface;
use JWTAuth;
use Hash;

class EloquentUserRepository implements UserRepositoryInterface {

    private $user;

    public function __construct(User $user)
    {
        $this-&gt;user = $user;
    }

    public function all()
    {
        return $this-&gt;user-&gt;all();
    }

    public function findOrFail($id)
    {
        return $this-&gt;user-&gt;findOrFail($id);
    }

    public function create($input)
    {
        $user = new $this-&gt;user;
        $user-&gt;email = $input[&#39;email&#39;];
        $user-&gt;name = $input[&#39;name&#39;];
        $user-&gt;password = Hash::make($input[&#39;password&#39;]);
        $user-&gt;save();

        // Create token
        return JWTAuth::fromUser($user);
    }
}
</code></pre>
<p>Note how we’ve moved much of the logic for creating a user into the <code>create()</code> method, and we return the token, not the user model. This makes sense as right now we only ever want to get a token back when we create a user. Later that may change, but there’s nothing stopping us adding a new method to implement that behaviour alongside this.</p>
<p>Then we update <code>app/Http/Controllers/UserController.php</code> to use our repository:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Repositories\Interfaces\UserRepositoryInterface as User;
use JWTAuth;
use Hash;

class UserController extends Controller
{
    private $user;

    public function __construct(User $user) {
        $this-&gt;user = $user;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // Validate request
        $valid = $this-&gt;validate($request, [
            &#39;email&#39; =&gt; &#39;required|email|unique:users,email&#39;,
            &#39;name&#39; =&gt; &#39;required|string&#39;,
            &#39;password&#39; =&gt; &#39;required|confirmed&#39;
        ]);

        // Create token
        $token = $this-&gt;user-&gt;create($request-&gt;only(
            &#39;email&#39;,
            &#39;name&#39;,
            &#39;password&#39;
        ));

        // Send response
        return response()-&gt;json([&#39;token&#39; =&gt; $token], 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>And add a new binding in <code>app/Providers/AppServiceProvider.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this-&gt;app-&gt;bind(
            &#39;AnimalFriend\Repositories\Interfaces\PetRepositoryInterface&#39;,
            &#39;AnimalFriend\Repositories\EloquentPetRepository&#39;
        );
        $this-&gt;app-&gt;bind(
            &#39;AnimalFriend\Repositories\Interfaces\UserRepositoryInterface&#39;,
            &#39;AnimalFriend\Repositories\EloquentUserRepository&#39;
        );
    }
}
</code></pre>
<p>Note that we bind the two sets separately - this allows Laravel to figure out which one maps to which.</p>
<p>Let’s run our tests to make sure nothing is broken:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 956 ms, Memory: 18.00MB

OK (12 tests, 46 assertions)
</code></pre>
<p>Now that we’ve got our repositories in place, we’re no longer tightly coupled to Eloquent, and have a more flexible implementation which is easier to test.</p>
<h2 id="separating-our-models-from-our-json-with-fractal">Separating our models from our JSON with Fractal</h2>
<p>Another problem with our API is that our representation of our data is tightly coupled to our underlying implementation of our models. We therefore can’t change our models without potentially changing the data returned by the API. We need to separate our representation of our data from our actual model so that we can more easily specify the exact data we want to return, regardless of the underlying database structure.</p>
<p>Enter <a href="http://fractal.thephpleague.com/">Fractal</a>. From the website:</p>
<blockquote>
<p>Fractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc.</p>
</blockquote>
<p>In other words, Fractal lets you specify the format your data will take in one place so that it’s easier to return that data in a desired format. We’ll use Fractal to specify how we want our API responses to be formatted.</p>
<p>Install Fractal with the following command:</p>
<pre><code class="lang-php">$ composer require league/fractal
</code></pre>
<p>Then amend the classmap in <code>composer.json</code>:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;classmap&quot;: [
            &quot;database&quot;,
            &quot;app/Repositories&quot;,
            &quot;app/Transformers&quot;
        ],
        &quot;psr-4&quot;: {
            &quot;AnimalFriend\\&quot;: &quot;app/&quot;
        }
    },
</code></pre>
<p>Then create the folder <code>app/Transformers</code> and run <code>composer dump-autoload</code>. We’re now ready to write our first transformer. Save this as <code>app/Transformers/PetTransformer.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Transformers;

use AnimalFriend\Pet;
use League\Fractal;

class PetTransformer extends Fractal\TransformerAbstract
{
    public function transform(Pet $pet)
    {
        return [
            &#39;id&#39;            =&gt; (int) $pet-&gt;id,
            &#39;name&#39;          =&gt; (string) $pet-&gt;name,
            &#39;type&#39;          =&gt; (string) $pet-&gt;type,
            &#39;available&#39;     =&gt; (bool) $pet-&gt;available,
            &#39;picture&#39;       =&gt; (string) $pet-&gt;picture
        ];
    }
}
</code></pre>
<p>The <code>transform</code> method specifies how we want to represent our objects with our API. We can return only those attributes we want to expose, and amend the structure as we see fit. We could easily represemt relations in whatever manner we see fit, whereas before we needed to amend our queries to return the data in the right format, which would potentially be cumbersome.</p>
<p>Now let’s amend <code>PetController.php</code> to use this:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Repositories\Interfaces\PetRepositoryInterface as Pet;
use AnimalFriend\Transformers\PetTransformer;
use League\Fractal;
use League\Fractal\Manager;

class PetController extends Controller
{
    private $pet, $fractal;

    public function __construct(Pet $pet, Manager $fractal) {
        $this-&gt;pet = $pet;
        $this-&gt;fractal = $fractal;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Get all pets
        $pets = $this-&gt;pet-&gt;all();

        // Format it
        $resource = new Fractal\Resource\Collection($pets, new PetTransformer);
        $data = $this-&gt;fractal-&gt;createData($resource)-&gt;toArray();

        // Send response
        return response()-&gt;json($data, 200);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Get pet
        $pet = $this-&gt;pet-&gt;findOrFail($id);

        // Format it
        $resource = new Fractal\Resource\Item($pet, new PetTransformer);
        $data = $this-&gt;fractal-&gt;createData($resource)-&gt;toArray();

        // Send response
        return response()-&gt;json($data, 200);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>Note that by default, Fractal places our data inside a dedicated <code>data</code> namespace. This is good because it leaves a place for us to put metadata such as pagination links, but it does mean our controller test has been broken. Let’s fix it:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class PetControllerTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Test fetching pets when unauthorised
     *
     * @return void
     */
    public function testFetchingPetsWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets&#39;);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pets when authorised
     *
     * @return void
     */
    public function testFetchingPets()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets&#39;, [], $headers)
            -&gt;seeJsonStructure([
                &#39;data&#39; =&gt; [
                    &#39;*&#39; =&gt; [
                        &#39;id&#39;,
                        &#39;name&#39;,
                        &#39;type&#39;,
                        &#39;available&#39;,
                        &#39;picture&#39;
                    ]
                ]
            ]);
        $this-&gt;assertResponseStatus(200);
    }

    /**
     * Test fetching pet when unauthorised
     *
     * @return void
     */
    public function testFetchingPetWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Send request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pet which does not exist
     *
     * @return void
     */
    public function testFetchingPetDoesNotExist()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/1&#39;, [], $headers);
        $this-&gt;assertResponseStatus(404);
    }

    /**
     * Test fetching pet when authorised
     *
     * @return void
     */
    public function testFetchingPet()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id, [], $headers)
            -&gt;seeJsonStructure([
                &#39;data&#39; =&gt; [
                    &#39;id&#39;,
                    &#39;name&#39;,
                    &#39;type&#39;,
                    &#39;available&#39;,
                    &#39;picture&#39;
                ]
            ]);
        $this-&gt;assertResponseStatus(200);
    }
}
</code></pre>
<p>We’re also going to amend our test settings to use the array backend for the cache, as this does not require any external dependencies, but still allows us to tag our cache keys (I’ll cover that in a future instalment). Change the cache settings in <code>phpunit.xml</code> as follows:</p>
<pre><code class="lang-xml">        &lt;env name=&quot;CACHE_DRIVER&quot; value=&quot;array&quot;/&gt;
</code></pre>
<p>Let’s run our tests to make sure everything’s fine:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 859 ms, Memory: 18.00MB

OK (12 tests, 44 assertions)
</code></pre>
<p>At present our <code>User</code> controller doesn’t actually return anything, and the auth only ever returns the token, so it’s not worth while adding a transformer now.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That ends this lesson. We haven’t added any functionality, but we have improved the design of our API, and we’re now ready to develop it further. As usual, the backend repository has been tagged as <code>lesson-4</code>.</p>
<p>Next time we’ll start adding the additional functionality we need to our API.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Phonegap app with Laravel and Angular - Part 3]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/">
        </link>
        <updated>2016-10-16T17:10:13Z</updated>
        <summary type="html"><![CDATA[<p>Apologies for how long it’s taken for this post to appear. I’ve got a lot on my plate at present as I recently started a new job, so I haven’t been able to devote as much time to this series as I’d like.</p>
<p>In this instalment we’ll begin extending our app beyond the basic authentication we’ve already implemented. We’ll start by adding the means to sign up, before adding the list of pets.</p>
<h2 id="adding-a-signup-method-to-our-backend">Adding a signup method to our backend</h2>
<p>We’ll create a controller for our users in the Laravel backend. First we’ll create our tests:</p>
<pre><code class="lang-bash">$ php artisan make:test UserControllerTest
</code></pre>
<p>We’ll create three tests. The first will check to see that an invalid request raises the correct status code (422). The second will check that a valid request returns the correct status code (201) and creates the user. The third will check that trying to create a duplicate user raises an error. Here they are - they should be saved in the new <code>tests/UserControllerTest.php</code> file:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class UserControllerTest extends TestCase
{
    /**
     * Test creating a user - invalid
     *
     * @return void
     */
    public function testPostingInvalidUser()
    {
        // Create a request
        $data = array(
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;
        );
        $this-&gt;json(&#39;POST&#39;, &#39;/api/users&#39;, $data);
        $this-&gt;assertResponseStatus(422);
    }

    /**
     * Test creating a user
     *
     * @return void
     */
    public function testPostingUser()
    {
        // Create a request
        $data = array(
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;,
            &#39;password_confirmation&#39; =&gt; &#39;password&#39;
        );
        $this-&gt;json(&#39;POST&#39;, &#39;/api/users&#39;, $data);
        $this-&gt;assertResponseStatus(201);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Check user exists
        $saved = User::first();
        $this-&gt;assertEquals($saved-&gt;email, &#39;bob@example.com&#39;);
        $this-&gt;assertEquals($saved-&gt;name, &#39;Bob Smith&#39;);
    }

    /**
     * Test creating a duplicate user
     *
     * @return void
     */
    public function testPostingDuplicateUser()
    {
        // Create user
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create a request
        $data = array(
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;,
            &#39;password_confirmation&#39; =&gt; &#39;password&#39;
        );
        $this-&gt;json(&#39;POST&#39;, &#39;/api/users&#39;, $data);
        $this-&gt;assertResponseStatus(422);
    }
}
</code></pre>
<p>Note the use of <code>$this-&gt;json()</code> to make the request. This method is ideal for testing a REST API.</p>
<p>Running our tests should confirm that they fail:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

........FFF.                                                      12 / 12 (100%)

Time: 827 ms, Memory: 18.00MB

There were 3 failures:

1) UserControllerTest::testPostingInvalidUser
Expected status code 422, got 404.
Failed asserting that 404 matches expected 422.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:21

2) UserControllerTest::testPostingUser
Expected status code 201, got 404.
Failed asserting that 404 matches expected 201.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:39

3) UserControllerTest::testPostingDuplicateUser
Expected status code 422, got 404.
Failed asserting that 404 matches expected 422.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:71

FAILURES!
Tests: 12, Assertions: 43, Failures: 3.
</code></pre>
<p>Next, we create our new controller:</p>
<pre><code class="lang-bash">$ php artisan make:controller UserController --resource
</code></pre>
<p>Let’s populate it:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\User;
use JWTAuth;
use Hash;

class UserController extends Controller
{
    private $user;

    public function __construct(User $user) {
        $this-&gt;user = $user;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // Validate request
        $valid = $this-&gt;validate($request, [
            &#39;email&#39; =&gt; &#39;required|email|unique:users,email&#39;,
            &#39;name&#39; =&gt; &#39;required|string&#39;,
            &#39;password&#39; =&gt; &#39;required|confirmed&#39;,
        ]);

        // Create user
        $user = new $this-&gt;user;
        $user-&gt;email = $request-&gt;input(&#39;email&#39;);
        $user-&gt;name = $request-&gt;input(&#39;name&#39;);
        $user-&gt;password = Hash::make($request-&gt;input(&#39;password&#39;));
        $user-&gt;save();

        // Create token
        $token = JWTAuth::fromUser($user);

        // Send response
        return response()-&gt;json([&#39;token&#39; =&gt; $token], 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>For now we’ll leave the other methods blank, but we’ll be using them later so we won’t get rid of them. At the top, note we load not only the <code>User</code> model, but also the <code>JWTAuth</code> and <code>Hash</code> facades. We use <code>JWTAuth::fromUser()</code> to return a JSON web token for the given user model.</p>
<p>In the <code>store()</code> method we first of all use <a href="https://laravel.com/docs/5.3/validation">Laravel’s validation support</a> to validate our input. We specify that the user must provide a unique email address, a username, and a password, which must be confirmed. Note that we don’t need to specify an action if the request is invalid, as Laravel will do that for us. Also, note that the <code>confirmed</code> rule means that the <code>password</code> field must be accompanied by a matching <code>password_confirmation</code> field.</p>
<p>Next, we create the user. Note that we hash the password before storing it, which is a best practice (storing passwords in plain text is a REALLY bad idea!). Then we create the token for the new user and return it. From then on, the user can use that token to authenticate their requests.</p>
<p>We also need to add this route in <code>routes/api.php</code>:</p>
<pre><code class="lang-php">Route::resource(&#39;users&#39;, &#39;UserController&#39;);
</code></pre>
<p>Let’s check the test passes:</p>
<pre><code class="lang-php">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 905 ms, Memory: 20.00MB

OK (12 tests, 46 assertions)
</code></pre>
<h2 id="building-the-registration-in-the-app">Building the registration in the app</h2>
<p>With registration in place on the server side, we can move back to the app. We need to create another route for the registration form. Add this to <code>test/routes.spec.js</code>:</p>
<pre><code class="lang-javascript">  it(&#39;should map register route to register controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/register&#39;].controller).toBe(&#39;RegisterCtrl&#39;);
      expect($route.routes[&#39;/register&#39;].templateUrl).toEqual(&#39;templates/register.html&#39;);
    });
  });
</code></pre>
<p>Running the tests should confirm that this fails. So next you should add this to the route provider section of <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">  .when(&#39;/register&#39;, {
    templateUrl: &#39;templates/register.html&#39;,
    controller: &#39;RegisterCtrl&#39;
  })
</code></pre>
<p>We also need to allow the register path to be accessed when not logged in:</p>
<pre><code class="lang-javascript">.run([&#39;$rootScope&#39;, &#39;$location&#39;, &#39;Auth&#39;, function ($rootScope, $location, Auth) {
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event) {

    if (!Auth.isLoggedIn()) {
      if ($location.path() !== &#39;/login&#39; &amp;&amp; $location.path() !== &#39;/register&#39;) {
        $location.path(&#39;/login&#39;);
      }
    }
  });
}])
</code></pre>
<p>Our next step is to create a service representing the <code>User</code> endpoint. Here’s the test for it:</p>
<pre><code class="lang-javascript">  describe(&#39;User service&#39;, function () {
    var mockBackend, User;

    beforeEach(inject(function (_User_, _$httpBackend_) {
      User = _User_;
      mockBackend = _$httpBackend_;
    }));

    it(&#39;can create a new user&#39;, function () {
      mockBackend.expectPOST(&#39;http://localhost:8000/api/users&#39;, &#39;{&quot;email&quot;:&quot;bob@example.com&quot;,&quot;name&quot;:&quot;bobsmith&quot;,&quot;password&quot;:&quot;password&quot;,&quot;password_confirmation&quot;:&quot;password&quot;}&#39;).respond({token: &#39;mytoken&#39;});
      var user = new User({
        email: &#39;bob@example.com&#39;,
        name: &#39;bobsmith&#39;,
        password: &#39;password&#39;,
        password_confirmation: &#39;password&#39;
      });
      user.$save(function (response) {
        expect(response).toEqualData({token: &#39;mytoken&#39;});
      });
      mockBackend.flush();
    });
  });
</code></pre>
<p>We’re only interested in using this model to create new users at this point, so this is the full scope of this test for now. Make sure the test fails, then we’re ready to create the new service in <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">.factory(&#39;User&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/users/:id&#39;, null, {
    &#39;update&#39;: { method: &#39;PATCH&#39; }
  });
})
</code></pre>
<p>Note that <code>angular-resource</code> does not support the <code>PUT</code> or <code>PATCH</code> methods by default, but as shown here it’s easy to implement it ourselves. That should be sufficient to make our test pass.</p>
<p>Next, we need to create the controller for registration. Here’s the test for it:</p>
<pre><code class="lang-javascript">  describe(&#39;Register Controller&#39;, function () {
    var mockBackend, scope;

    beforeEach(inject(function ($rootScope, $controller, _$httpBackend_) {
      mockBackend = _$httpBackend_;
      scope = $rootScope.$new();
      $controller(&#39;RegisterCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test doRegister is defined
    it(&#39;should define the register method&#39;, function () {
      expect(scope.doRegister).toBeDefined();
    });

    // Test doRegister works
    it(&#39;should allow the user to register&#39;, function () {
      // Mock the backend
      mockBackend.expectPOST(&#39;http://localhost:8000/api/users&#39;, &#39;{&quot;email&quot;:&quot;user@example.com&quot;,&quot;name&quot;:&quot;bobsmith&quot;,&quot;password&quot;:&quot;password&quot;,&quot;password_confirmation&quot;:&quot;password&quot;}&#39;).respond({token: 123});

      // Define login data
      scope.credentials = {
        email: &#39;user@example.com&#39;,
        name: &quot;bobsmith&quot;,
        password: &#39;password&#39;,
        password_confirmation: &#39;password&#39;
      };

      //  Submit the request
      scope.doRegister();

      // Flush the backend
      mockBackend.flush();

      // Check login complete
      expect(localStorage.getItem(&#39;authHeader&#39;)).toEqual(&#39;Bearer 123&#39;);
    });
  });
</code></pre>
<p>Make sure the test fails before proceeding. Our <code>RegisterCtrl</code> is very similar to the login controller:</p>
<pre><code class="lang-javascript">.controller(&#39;RegisterCtrl&#39;, function ($scope, $location, User, Auth) {
  $scope.doRegister = function () {
    var user = new User($scope.credentials);
    user.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
})
</code></pre>
<p>Check the tests pass,and we’re ready to move on to creating our HTML template. Save this as <code>www/templates/register.html</code>:</p>
<pre><code class="lang-html">&lt;md-content md-theme=&quot;default&quot; layout-gt-sm=&quot;row&quot; layout-padding&gt;
    &lt;div&gt;
        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Email&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.email&quot; type=&quot;email&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Username&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.name&quot; type=&quot;text&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password&quot; type=&quot;password&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Confirm Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password_confirmation&quot; type=&quot;password&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-button class=&quot;md-raised md-primary&quot; ng-click=&quot;doRegister()&quot;&gt;Submit&lt;/md-button&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; href=&quot;/login&quot;&gt;Log in&lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-content&gt;
</code></pre>
<p>It’s very similar to our login template. Speaking of which, we need to add a link to this route there:</p>
<pre><code class="lang-html">&lt;md-content md-theme=&quot;default&quot; layout-gt-sm=&quot;row&quot; layout-padding&gt;
    &lt;div&gt;
        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Email&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.email&quot; type=&quot;email&quot; /&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password&quot; type=&quot;password&quot; /&gt;
        &lt;/md-input-container&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; ng-click=&quot;doLogin()&quot;&gt;Submit&lt;/md-button&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; href=&quot;register&quot;&gt;Register&lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-content&gt;
</code></pre>
<p>With that done, you should now be able to run the Gulp server for the app with <code>gulp</code> and the Laravel backend with <code>php artisan serve</code> and create a new user account.</p>
<h2 id="adding-pets-to-the-home-page">Adding pets to the home page</h2>
<p>Our final task for this lesson is to display a list of pets on the home page. Later we’ll refine that functionality, but for now we’ll just get a list of all current pets and display them. First we need to write a test for our <code>Pet</code> service:</p>
<pre><code class="lang-javascript">  describe(&#39;Pet service&#39;, function () {
    var mockBackend, Pet;

    beforeEach(inject(function (_Pet_, _$httpBackend_) {
      Pet = _Pet_;
      mockBackend = _$httpBackend_;
    }));

    it(&#39;can fetch pets&#39;, function () {
      mockBackend.expectGET(&#39;http://localhost:8000/api/pets&#39;).respond([{id:1,name:&quot;Freddie&quot;,type:&quot;Cat&quot;}]);
      expect(Pet).toBeDefined();
      var pets = Pet.query();
      mockBackend.flush();
      expect(pets).toEqualData([{id: 1,name:&quot;Freddie&quot;,type:&quot;Cat&quot;}]);
    });
  });
</code></pre>
<p>Once you know that fails, it’s time to implement the service:</p>
<pre><code class="lang-javascript">.factory(&#39;Pet&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/pets/:id&#39;, null, {
    &#39;update&#39;: { method: &#39;PATCH&#39; }
  });
})
</code></pre>
<p>Next, we want to add the pets to the scope of the home controller. Amend the test for it as follows:</p>
<pre><code class="lang-javascript">  describe(&#39;Home Controller&#39;, function () {
    var pets, scope;

    beforeEach(inject(function ($rootScope, $controller, Pet) {
      pets = Pet;
      scope = $rootScope.$new();
      $controller(&#39;HomeCtrl&#39;, {
        $scope: scope,
        pets: [{id:1},{id:2}]
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test pets
    it(&#39;should define the pets&#39;, function () {
      expect(scope.pets).toEqualData([{id: 1}, {id: 2}]);
    });
  });
</code></pre>
<p>We check to see if the scope contains the <code>pets</code> variable. Once you have a failing test, amend the home controller as follows:</p>
<pre><code class="lang-javascript">.controller(&#39;HomeCtrl&#39;, function ($scope, Pet, pets) {
  $scope.pets = pets;
});
</code></pre>
<p>We could fetch the via AJAX inside the controller, but there’s a better way. We’ll create a loader for the pet data and have it resolve that before the page is displayed. To do so, first we need to add the loader service to <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">.factory(&#39;PetsLoader&#39;, [&#39;Pet&#39;, &#39;$q&#39;, function (Pet, $q) {
  return function () {
    var delay = $q.defer();
    Pet.query(function (response) {
      delay.resolve(response);
    }, function () {
      delay.reject(&#39;Unable to fetch pets&#39;);
    });
    return delay.promise;
  };
}])
</code></pre>
<p>Then we set that route up to resolve it in <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;,
    resolve: {
      pets: [&#39;PetsLoader&#39;, function (PetsLoader) {
        return PetsLoader();
      }]
    }
  })
</code></pre>
<p>Now, when we load that route, it will first of all fetch those pets and populate <code>$scope.pets</code> with them.</p>
<p>Now, we need to have some pets in the database, so we’ll make a seeder for it. Head back to the backend and run this command:</p>
<pre><code class="lang-bash">$ php artisan make:seeder PetTableSeeder
</code></pre>
<p>Then amend the file at <code>database/seeds/PetTableSeeder.php</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;
use Carbon\Carbon;

class PetTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Add Pets
        DB::table(&#39;pets&#39;)-&gt;insert([[
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
            &#39;available&#39; =&gt; 1,
            &#39;picture&#39;   =&gt; &#39;https://placekitten.com/300/300&#39;,
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
        ], [
            &#39;name&#39; =&gt; &#39;Sophie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
            &#39;available&#39; =&gt; 1,
            &#39;picture&#39;   =&gt; &#39;https://placekitten.com/300/300&#39;,
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
        ]]);
    }
}
</code></pre>
<p>And we need to update <code>database/seeds/DatabaseSeeder.php</code> to call our seeder:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $this-&gt;call(UserTableSeeder::class);
        $this-&gt;call(PetTableSeeder::class);
    }
}
</code></pre>
<p>For now we’ll use placeholder images, but at a later point our backend will be set up to use images uploaded from the admin. Then we need to refresh our migrations and apply the seeders:</p>
<pre><code class="lang-bash">$ php artisan migrate:refresh
$ php artisan db:seed
</code></pre>
<p>Now we just need to amend our home template to show the pets and we’re done for today:</p>
<pre><code class="lang-html">&lt;md-toolbar&gt;
    &lt;div class=&quot;md-toolbar-tools&quot;&gt;
        &lt;md-button aria-label=&quot;Log out&quot; href=&quot;/logout&quot;&gt;
            Log out
        &lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-toolbar&gt;

&lt;div layout=&quot;column&quot; flex=&quot;grow&quot; layout-align=&quot;center stretch&quot;&gt;
    &lt;md-card md-theme=&quot;default&quot; ng-repeat=&quot;pet in pets&quot;&gt;
        &lt;md-card-title&gt;
            &lt;md-card-title-text&gt;
                &lt;span class=&quot;md-headline&quot;&gt;{{ pet.name }}&lt;/span&gt;
                &lt;span class=&quot;md-subhead&quot;&gt;{{ pet.type }}&lt;/span&gt;
            &lt;/md-card-title-text&gt;
        &lt;/md-card-title&gt;
        &lt;md-card-content&gt;
            &lt;img class=&quot;md-card-image md-media-lg&quot; ng-src=&quot;{{ pet.picture }}&quot;&gt;&lt;/img&gt;
        &lt;/md-card-content&gt;
    &lt;/md-card&gt;
&lt;/div&gt;
</code></pre>
<p>Now we can see our pets in the app.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That’s enough for today - the fact that we can log in and out, register, and view the home page is sufficient as a proof of concept for a client. As usual, the results are on Github, tagged <code>lesson-3</code>. </p>
<p>Next time, we’ll concentrate exclusively on the back end. We’ll build upon what we already have using Laravel to create a full REST API for our app. In a later instalment, we’ll move on to build our admin interface for the staff, before switching back to finish off the app. I hope you’ll join me then.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Phonegap app with Laravel and Angular - Part 2]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/">
        </link>
        <updated>2016-09-18T22:18:06Z</updated>
        <summary type="html"><![CDATA[<p>In this lesson, the initial scope of the app will be extremely simple. We will implement functionality that:</p>
<ul>
<li>Allows users to log in and out</li>
<li>Displays the home page</li>
</ul>
<p>That’s fairly simple, and easily achievable within a fairly short timeframe. We’ll also write automated tests for our app. By the end of this lesson, we’ll have built a first pass for our app using Angular.js.</p>
<p>NOTE: As at time of writing, Angular 2 has just come out. I’m using Angular 1 here, and the two are not compatible, so make sure you’re using Angular 1.</p>
<h2 id="creating-our-app">Creating our app</h2>
<p>Start by creating a new folder, separate from the backend, for the app. Then, in there, run the following command:</p>
<pre><code class="lang-bash">$ npm init -y
</code></pre>
<p>Then let’s install our dependencies:</p>
<pre><code class="lang-bash">$ npm install --save-dev gulp karma karma-browserify karma-phantomjs-launcher browserify angular angular-route angular-mocks angular-animate angular-messages angular-sanitize angular-material angular-resource vinyl-buffer vinyl-source-stream gulp-sass karma-coverage karma-jasmine jasmine-core gulp-webserver
</code></pre>
<p>We’re going to use <a href="https://material.angularjs.org/latest/">Angular Material</a> for our user interface as it includes support out of the box for swiping left and right. You’ll notice it mentioned as one of the dependencies above.</p>
<p>We’ll also use Karma for running our tests. Save the following as <code>karma.conf.js</code>:</p>
<pre><code class="lang-javascript">module.exports = function(config) {
    config.set({
        basePath: &#39;&#39;,
        frameworks: [&#39;browserify&#39;, &#39;jasmine&#39;],
        files: [
            &#39;node_modules/angular/angular.min.js&#39;,
            &#39;node_modules/angular-mocks/angular-mocks.js&#39;,
            &#39;node_modules/angular-material/angular-material-mocks.js&#39;,
            &#39;js/*.js&#39;,
            &#39;test/*.js&#39;
        ],
        exclude: [
        ],
        preprocessors: {
            &#39;js/*.js&#39;: [&#39;browserify&#39;, &#39;coverage&#39;],
            &#39;tests/js&#39;: [&#39;browserify&#39;]
        },
        browserify: {
          debug: true
        },
        reporters: [&#39;progress&#39;, &#39;coverage&#39;],
        port: 9876,
        colors: true,
        logLevel: config.LOG_DEBUG,
        autoWatch: true,
        browsers: [&#39;PhantomJS&#39;],
        singleRun: true,
        coverageReporter: {
          dir : &#39;coverage/&#39;,
          reporters: [
            { type: &#39;html&#39;, subdir: &#39;report-html&#39; },
            { type: &#39;cobertura&#39;, subdir: &#39;report-cobertura&#39; }
          ]
        }
    });
};
</code></pre>
<p>This is our Karma configuration. Karma can run the same test in multiple browsers. Here we’re going to use PhantomJS, but it’s trivial to amend the <code>browsers</code> section to add more. You just need to make sure you install the appropriate launchers for those browsers.</p>
<p>We’ll use Gulp to build the app. Here’s the <code>gulpfile.js</code>:</p>
<pre><code class="lang-javascript">var gulp = require(&#39;gulp&#39;);
var source = require(&#39;vinyl-source-stream&#39;);
var buffer = require(&#39;vinyl-buffer&#39;);
var browserify = require(&#39;browserify&#39;);
var sass = require(&#39;gulp-sass&#39;);
var server = require(&#39;gulp-webserver&#39;);

var paths = {
  scripts: [&#39;js/*.js&#39;],
  styles: [&#39;sass/*.scss&#39;]
};

gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;sass/style.scss&#39;)
   .pipe(sass().on(&#39;error&#39;, sass.logError))
   .pipe(gulp.dest(&#39;www/css&#39;));
});;

gulp.task(&#39;js&#39;, function () {
  return browserify({ entries: [&#39;js/main.js&#39;], debug: true })
    .bundle()
    .pipe(source(&#39;bundle.js&#39;))
    .pipe(buffer())
    .pipe(gulp.dest(&#39;www/js/&#39;));
});

gulp.task(&#39;server&#39;, function () {
  gulp.src(&#39;www/&#39;)
    .pipe(server({
      livereload: true,
      open: true,
      port: 5000
    }));
});


gulp.task(&#39;watch&#39;, function () {
  gulp.watch(paths.scripts, [&#39;js&#39;]);
  gulp.watch(paths.styles, [&#39;sass&#39;]);
});

gulp.task(&#39;default&#39;, [&#39;sass&#39;,&#39;js&#39;,&#39;server&#39;, &#39;watch&#39;]);
</code></pre>
<p>Note that we’re going to be using Browserify to handle our dependencies. If you haven’t used it before, it lets you use the <code>require()</code> syntax from Node.js to include other JavaScript files, including ones available via NPM such as jQuery or Angular, allowing you to compile them all into a single file.</p>
<p>We should be able to test and run the app using NPM, so add these scripts to <code>package.json</code>:</p>
<pre><code class="lang-javascript">  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;karma start&quot;,
    &quot;run&quot;: &quot;gulp&quot;
  },
</code></pre>
<p>We also need an HTML file. Save this as <code>www/index.html</code>:</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;
        &lt;title&gt;My New Animal Friend&lt;/title&gt;
        &lt;link href=&quot;/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div&gt;
        &lt;div ng-app=&quot;mynewanimalfriend&quot; ng-cloak&gt;
            &lt;div ng-view&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;/js/bundle.js&quot;&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p>Note the use of the Angular directives. <code>ng-app</code> denotes the name of the app namespace, <code>ng-cloak</code> hides the application until it’s fully loaded, and <code>ng-view</code> denotes the area containing our content.</p>
<p>You should also create the files <code>js/main.js</code>, <code>sass/style.scss</code>, and the <code>test</code> folder.</p>
<h2 id="creating-our-first-routes">Creating our first routes</h2>
<p>Our first task is to create the routes we need. Our default route will be <code>/</code>, representing the home page. However, users will need to be logged in to see this. Otherwise, they should be redirected to the login route, which will be <code>/login</code>, appropriately enough. We’ll also have a <code>/logout</code> route, which should be self-explanatory.</p>
<p>Before we implement these routes, we need to write a test for them. We’ll start with our login route, and we’ll test that for this route, the controller will be <code>LoginCtrl</code> and the template will be <code>templates/login.html</code>. The significance of these will become apparent later. Save this as <code>test/routes.spec.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Routes&#39;, function () {

  beforeEach(angular.mock.module(&#39;mynewanimalfriend&#39;));
  it(&#39;should map login route to login controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/login&#39;].controller).toBe(&#39;LoginCtrl&#39;);
      expect($route.routes[&#39;/login&#39;].templateUrl).toEqual(&#39;templates/login.html&#39;);
    });
  });
});
</code></pre>
<p>Note the <code>beforeEach()</code> hook. This is used to set up the application.</p>
<p>We can run this test with <code>npm test</code> as that calls Karma directly. Note that we’re using Jasmine to write our tests.</p>
<pre><code class="lang-bash">$ npm test

&gt; mynewanimalfriend-app@1.0.0 test /home/matthew/Projects/mynewanimalfriend-app
&gt; karma start

12 09 2016 22:22:34.168:DEBUG [config]: autoWatch set to false, because of singleRun
12 09 2016 22:22:34.172:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules
12 09 2016 22:22:34.176:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.
12 09 2016 22:22:34.314:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.
12 09 2016 22:22:34.484:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.
12 09 2016 22:22:34.485:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.
12 09 2016 22:22:34.535:DEBUG [framework.browserify]: created browserify bundle: /tmp/f8c46bd8d72c5b8578e64552192273be.browserify
12 09 2016 22:22:34.553:DEBUG [framework.browserify]: add bundle to config.files at position 3
12 09 2016 22:22:34.559:DEBUG [web-server]: Instantiating middleware
12 09 2016 22:22:34.569:DEBUG [reporter]: Trying to load reporter: coverage
12 09 2016 22:22:34.570:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)
12 09 2016 22:22:34.571:DEBUG [reporter]: Couldn&#39;t load color-version.
12 09 2016 22:22:34.596:DEBUG [framework.browserify]: updating js/main.js in bundle
12 09 2016 22:22:34.597:DEBUG [framework.browserify]: building bundle
12 09 2016 22:22:35.302:DEBUG [framework.browserify]: bundling
12 09 2016 22:22:35.328:DEBUG [preprocessor.coverage]: Processing &quot;/home/matthew/Projects/mynewanimalfriend-app/js/main.js&quot;.
12 09 2016 22:22:35.345:INFO [framework.browserify]: bundle built
12 09 2016 22:22:35.352:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/
12 09 2016 22:22:35.352:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency
12 09 2016 22:22:35.361:INFO [launcher]: Starting browser PhantomJS
12 09 2016 22:22:35.361:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-17657666
12 09 2016 22:22:35.364:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-17657666/capture.js
12 09 2016 22:22:35.466:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html
12 09 2016 22:22:35.478:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js
12 09 2016 22:22:35.541:DEBUG [karma]: A browser has connected on socket /#dQYjOD4F_HJwPXiYAAAA
12 09 2016 22:22:35.564:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=dQYjOD4F_HJwPXiYAAAA
12 09 2016 22:22:35.629:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#dQYjOD4F_HJwPXiYAAAA with id 17657666
12 09 2016 22:22:35.630:DEBUG [launcher]: PhantomJS (id 17657666) captured in 0.277 secs
12 09 2016 22:22:35.642:DEBUG [phantomjs.launcher]: 

12 09 2016 22:22:35.643:DEBUG [middleware:karma]: custom files null null
12 09 2016 22:22:35.644:DEBUG [middleware:karma]: Serving static request /context.html
12 09 2016 22:22:35.646:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html
12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /
12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:22:35.652:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /
12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /
12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /
12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /
12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /
12 09 2016 22:22:35.657:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:22:35.657:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:22:35.660:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js
12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Requesting /absolute/tmp/f8c46bd8d72c5b8578e64552192273be.browserify?8ffde4eef27d38e92cc62da4e8dd0ffa5a3a4a4c /
12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Fetching /tmp/f8c46bd8d72c5b8578e64552192273be.browserify
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
12 09 2016 22:22:35.663:DEBUG [web-server]: serving (cached): /tmp/f8c46bd8d72c5b8578e64552192273be.browserify
12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
PhantomJS 2.1.1 (Linux 0.0.0) Routes should map login route to login controller FAILED
        Error: [$injector:modulerr] http://errors.angularjs.org/1.5.8/$injector/modulerr?p0=mynewanimalfriend&amp;p1=%5B%24injector%3Anomod%5D%20http%3A%2F%2Ferrors.angularjs.org%2F1.5.8%2F%24injector%2Fnomod%3Fp0%3Dmynewanimalfriend%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A25%3A111%0Ab%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A143%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A489%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A473%0Aq%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A7%3A359%0Ag%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A320%0Acb%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A43%3A337%0AworkFn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3074%3A60%0Ainject%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3054%3A46%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Ftest%2Froutes.spec.js%3F92b15bb7c24bc6ead636994fb1c737b91727d887%3A5%3A11%0AattemptSync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1942%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1930%3A20%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A367%3A28%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2568%3A44%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2553%3A31%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2415%3A25%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A772%3A24%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fkarma-jasmine%2Flib%2Fadapter.js%3F7975a273517f1eb29d7bd018790fd4c7b9a485d5%3A320%3A23%0Aloaded%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.js%3A151%3A17%0Aglobal%20code%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.html%3A50%3A28 in node_modules/angular/angular.min.js (line 40)
        node_modules/angular/angular.min.js:40:260
        q@node_modules/angular/angular.min.js:7:359
        g@node_modules/angular/angular.min.js:39:320
        cb@node_modules/angular/angular.min.js:43:337
        workFn@node_modules/angular-mocks/angular-mocks.js:3074:60
        inject@node_modules/angular-mocks/angular-mocks.js:3054:46
        test/routes.spec.js:5:11
        loaded@http://localhost:9876/context.js:151:17
PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 (1 FAILED) ERROR (0.044 secs / 0.006 secs)
12 09 2016 22:22:35.778:DEBUG [karma]: Run complete, exiting.
12 09 2016 22:22:35.778:DEBUG [launcher]: Disconnecting all browsers
12 09 2016 22:22:35.778:DEBUG [framework.browserify]: cleaning up
12 09 2016 22:22:35.782:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html
12 09 2016 22:22:35.876:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura
12 09 2016 22:22:35.880:DEBUG [launcher]: Process PhantomJS exited with code 0
12 09 2016 22:22:35.881:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-17657666
12 09 2016 22:22:35.884:DEBUG [launcher]: Finished all browsers
npm ERR! Test failed.  See above for more details.
</code></pre>
<p>Now that we have a failing test, we can set about making it pass. Save this at <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  });
});
</code></pre>
<p>As mentioned earlier, because we’re using Browserify, we can use the <code>require()</code> syntax to import our dependencies. Note we also give our module a name and specify the dependencies. Finally, note that we use <code>$routeProvider</code> to set up our first route, and we map the template URL and controller to match our test.</p>
<p>Let’s run the test again:</p>
<pre><code class="lang-bash">$ npm test

&gt; mynewanimalfriend-app@1.0.0 test /home/matthew/Projects/mynewanimalfriend-app
&gt; karma start

12 09 2016 22:35:51.231:DEBUG [config]: autoWatch set to false, because of singleRun
12 09 2016 22:35:51.235:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules
12 09 2016 22:35:51.237:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.
12 09 2016 22:35:51.354:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.
12 09 2016 22:35:51.496:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.
12 09 2016 22:35:51.497:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.
12 09 2016 22:35:51.547:DEBUG [framework.browserify]: created browserify bundle: /tmp/02002698e6d413a542186462d3a0a6ce.browserify
12 09 2016 22:35:51.559:DEBUG [framework.browserify]: add bundle to config.files at position 3
12 09 2016 22:35:51.564:DEBUG [web-server]: Instantiating middleware
12 09 2016 22:35:51.581:DEBUG [reporter]: Trying to load reporter: coverage
12 09 2016 22:35:51.582:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)
12 09 2016 22:35:51.582:DEBUG [reporter]: Couldn&#39;t load color-version.
12 09 2016 22:35:51.602:DEBUG [framework.browserify]: updating js/main.js in bundle
12 09 2016 22:35:51.603:DEBUG [framework.browserify]: building bundle
12 09 2016 22:35:52.306:DEBUG [framework.browserify]: bundling
12 09 2016 22:35:54.095:DEBUG [preprocessor.coverage]: Processing &quot;/home/matthew/Projects/mynewanimalfriend-app/js/main.js&quot;.
12 09 2016 22:35:54.170:INFO [framework.browserify]: bundle built
12 09 2016 22:35:54.189:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/
12 09 2016 22:35:54.189:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency
12 09 2016 22:35:54.197:INFO [launcher]: Starting browser PhantomJS
12 09 2016 22:35:54.198:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-91342786
12 09 2016 22:35:54.201:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-91342786/capture.js
12 09 2016 22:35:54.300:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html
12 09 2016 22:35:54.308:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js
12 09 2016 22:35:54.366:DEBUG [karma]: A browser has connected on socket /#FpcuZAJUT-u6Dl4sAAAA
12 09 2016 22:35:54.386:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=FpcuZAJUT-u6Dl4sAAAA
12 09 2016 22:35:54.442:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#FpcuZAJUT-u6Dl4sAAAA with id 91342786
12 09 2016 22:35:54.442:DEBUG [launcher]: PhantomJS (id 91342786) captured in 0.253 secs
12 09 2016 22:35:54.447:DEBUG [phantomjs.launcher]: 

12 09 2016 22:35:54.448:DEBUG [middleware:karma]: custom files null null
12 09 2016 22:35:54.448:DEBUG [middleware:karma]: Serving static request /context.html
12 09 2016 22:35:54.449:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html
12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /
12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:35:54.452:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /
12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /
12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:35:54.456:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:35:54.457:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /absolute/tmp/02002698e6d413a542186462d3a0a6ce.browserify?f4c82dc0618d979f84c89967ea1c412e646a5fe5 /
12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Fetching /tmp/02002698e6d413a542186462d3a0a6ce.browserify
12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /
12 09 2016 22:35:54.459:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:35:54.460:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /
12 09 2016 22:35:54.461:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
12 09 2016 22:35:54.461:DEBUG [web-server]: serving (cached): /tmp/02002698e6d413a542186462d3a0a6ce.browserify
12 09 2016 22:35:54.496:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:35:54.497:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
12 09 2016 22:35:54.497:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js
12 09 2016 22:35:54.582:DEBUG [phantomjs.launcher]: WARNING: Tried to load angular more than once.

PhantomJS 2.1.1 (Linux 0.0.0) LOG: &#39;WARNING: Tried to load angular more than once.&#39;

PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.358 secs)
12 09 2016 22:35:55.003:DEBUG [karma]: Run complete, exiting.
12 09 2016 22:35:55.003:DEBUG [launcher]: Disconnecting all browsers
12 09 2016 22:35:55.003:DEBUG [framework.browserify]: cleaning up
12 09 2016 22:35:55.006:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html
12 09 2016 22:35:55.078:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura
12 09 2016 22:35:55.082:DEBUG [launcher]: Process PhantomJS exited with code 0
12 09 2016 22:35:55.082:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-91342786
12 09 2016 22:35:55.085:DEBUG [launcher]: Finished all browsers
</code></pre>
<p>Our first test has passed. Let’s add tests for the other routes:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Routes&#39;, function () {

  beforeEach(angular.mock.module(&#39;mynewanimalfriend&#39;));
  it(&#39;should map default route to home controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/&#39;].controller).toBe(&#39;HomeCtrl&#39;);
      expect($route.routes[&#39;/&#39;].templateUrl).toEqual(&#39;templates/home.html&#39;);
    });
  });

  it(&#39;should map login route to login controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/login&#39;].controller).toBe(&#39;LoginCtrl&#39;);
      expect($route.routes[&#39;/login&#39;].templateUrl).toEqual(&#39;templates/login.html&#39;);
    });
  });

  it(&#39;should map logout route to logout controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/logout&#39;].controller).toBe(&#39;LogoutCtrl&#39;);
      expect($route.routes[&#39;/logout&#39;].templateUrl).toEqual(&#39;templates/login.html&#39;);
    });
  });
});
</code></pre>
<p>Note that the logout route uses the login template. This is because all it will do is redirect the user to the login form.</p>
<p>For the sake of brevity I won’t display the test output, but two of these tests should now fail. We can easily set up the new routes in <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  });
});
</code></pre>
<p>That’s looking good so far. But what if someone navigates to a URL that doesn’t exist? Our router should handle that. Add this to the test:</p>
<pre><code class="lang-javascript">  it(&#39;should redirect other or empty routes to the home controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[null].redirectTo).toEqual(&#39;/&#39;)
    });
  });
</code></pre>
<p>Once again, the test should fail. Fixing it is fairly straightforward - we’ll use the <code>otherwise()</code> method to define a fallback route:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>Now our routes are in place, we need to implement the three controllers we will need. However, as two of these controllers deal with authentication, we’ll first create some services to handle that, and they’ll need to be tested. Save this as <code>test/services.spec.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Services&#39;, function () {

  beforeEach(function(){
    jasmine.addMatchers({
      toEqualData: function(util, customEqualityTesters) {
        return {
          compare: function(actual, expected) {
            return {
              pass: angular.equals(actual, expected)
            };
          }
        };
      }
    });
  });

  beforeEach(angular.mock.module(&#39;mynewanimalfriend.services&#39;));

  describe(&#39;Token service&#39;, function () {
    var mockBackend, Token;

    beforeEach(inject(function (_Token_, _$httpBackend_) {
      Token = _Token_;
      mockBackend = _$httpBackend_;
    }));

    it(&#39;can create a new token&#39;, function () {
      mockBackend.expectPOST(&#39;http://localhost:8000/api/authenticate&#39;, &#39;{&quot;email&quot;:&quot;bob@example.com&quot;,&quot;password&quot;:&quot;password&quot;}&#39;).respond({token: &#39;mytoken&#39;});
      var token = new Token({
        email: &#39;bob@example.com&#39;,
        password: &#39;password&#39;
      });
      token.$save(function (response) {
        expect(response).toEqualData({token: &#39;mytoken&#39;});
      });
      mockBackend.flush();
    });
  });
});
</code></pre>
<p>In this test we use the <code>$httpBackend</code> facility from <code>ngMock</code> to mock out our API endpoints. We already have a REST API capable of generating a token, and we set this test up to behave similarly. We specify that it should expect to receive a certain POST request, and should respond with the token <code>mytoken</code>. Run the test to make sure it fails, then save this as <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&quot;angular-resource&quot;);

angular.module(&#39;mynewanimalfriend.services&#39;, [&#39;ngResource&#39;])

.factory(&#39;Token&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/authenticate/&#39;);
});
</code></pre>
<p>A little explanation is called for. In Angular, the <code>$resource</code> dependency represents an HTTP resource. By default it supports making HTTP requests to the denoted endpoint via GET, POST and DELETE, and it’s trivial to add support for PUT or PATCH methods. Using <code>$resource</code>, you can easily interface with a RESTful web service, and it’s one of my favourite things about Angular.</p>
<p>We also need to load <code>services.js</code> in our <code>main.js</code> file:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;,
  &#39;mynewanimalfriend.services&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>Now, running the tests should show that they pass.</p>
<p>With that in place, we will also create an authentication service that lets the app determine if the user is logged in. Add this to <code>test/services.spec.js</code>:</p>
<pre><code class="lang-javascript">  describe(&#39;Auth service&#39;, function () {
    var Auth;

    beforeEach(inject(function (_Auth_) {
      Auth = _Auth_;
    }));

    it(&#39;can set user&#39;, function () {
      Auth.setUser(&#39;mytoken&#39;);
      var token = localStorage.getItem(&#39;authHeader&#39;);
      expect(token).toEqual(&#39;Bearer mytoken&#39;);
    });

    it(&#39;can return login status&#39;, function () {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer mytoken&#39;);
      expect(Auth.isLoggedIn()).toBeTruthy();
    });

    it(&#39;can log the user out&#39;, function () {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer mytoken&#39;);
      Auth.logUserOut();
      expect(Auth.isLoggedIn()).toBeFalsy();
      expect(localStorage.getItem(&#39;authHeader&#39;)).toBeFalsy();
    });
  });
</code></pre>
<p>This service is expected to do three things:</p>
<ul>
<li>Set the current user’s details in local storage</li>
<li>Return whether the user is logged in</li>
<li>Log the user out</li>
</ul>
<p>Make sure the test fails, then amend <code>js/services.js</code> as follows:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&quot;angular-resource&quot;);

angular.module(&#39;mynewanimalfriend.services&#39;, [&#39;ngResource&#39;])

.factory(&#39;Auth&#39;, function(){
  return{
    setUser : function (aUser) {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer &#39; + aUser);
    },
    isLoggedIn: function () {
      var user = localStorage.getItem(&#39;authHeader&#39;);
      return(user)? user : false;
    },
    logUserOut: function () {
      localStorage.removeItem(&#39;authHeader&#39;);
    }
  }
})

.factory(&#39;Token&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/authenticate/&#39;);
});
</code></pre>
<p>When the user is set, we store the authentication details we need in local storage. We can then use that to determine if they are logged in. When they log out, we simply clear local storage,</p>
<p>That should be enough to make these tests pass. Now we can move on to our controllers. We’ll do the login controller first. Save this as <code>test/controllers.spec.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Controllers&#39;, function () {

  beforeEach(function(){
    jasmine.addMatchers({
      toEqualData: function(util, customEqualityTesters) {
        return {
          compare: function(actual, expected) {
            return {
              pass: angular.equals(actual, expected)
            };
          }
        };
      }
    });
  });

  beforeEach(angular.mock.module(&#39;mynewanimalfriend.controllers&#39;));

  describe(&#39;Login Controller&#39;, function () {
    var mockBackend, scope;

    beforeEach(inject(function ($rootScope, $controller, _$httpBackend_) {
      mockBackend = _$httpBackend_;
      scope = $rootScope.$new();
      $controller(&#39;LoginCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test doLogin is defined
    it(&#39;should define the login method&#39;, function () {
      expect(scope.doLogin).toBeDefined();
    });

    // Test doLogin works
    it(&#39;should allow the user to log in&#39;, function () {
      // Mock the backend
      mockBackend.expectPOST(&#39;http://localhost:8000/api/authenticate&#39;, &#39;{&quot;email&quot;:&quot;user@example.com&quot;,&quot;password&quot;:&quot;password&quot;}&#39;).respond({token: 123});

      // Define login data
      scope.credentials = {
        email: &#39;user@example.com&#39;,
        password: &#39;password&#39;
      };

      //  Submit the request
      scope.doLogin();

      // Flush the backend
      mockBackend.flush();

      // Check login complete
      expect(localStorage.getItem(&#39;authHeader&#39;)).toEqual(&#39;Bearer 123&#39;);
    });
  });
});
</code></pre>
<p>We check that the scope and the <code>doLogin()</code> method are defined. We then mock the backend’s <code>/api/authenticate</code> route to respond with a dummy token when our credentials are provided. Then, we set the credentials in the variable <code>$scope.credentials</code>, call <code>doLogin()</code>, flush the backend, and check the authentication header has been set.</p>
<p>Once you’ve verified these tests fail, we can start making them pass. Save this as <code>js/controllers.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend.controllers&#39;, [
  &#39;mynewanimalfriend.services&#39;,
  &quot;ngMaterial&quot;
])

.controller(&#39;LoginCtrl&#39;, function ($scope, $location, Token, Auth) {
  $scope.doLogin = function () {
    var token = new Token($scope.credentials);
    token.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
});
</code></pre>
<p>The <code>LoginCtrl</code> controller accepts the scope, location, and our two services. When <code>doLogin()</code> is alled, it picks up the values in <code>$scope.credentials</code>, which we will set in our template later. It then makes a POST request to our endpoint including those credentials. Our API backend should return the new token in the response, and the token is stored using the <code>Auth</code> service. Otherwise, it raises an error.</p>
<p>Check the test now passes before moving onto the logout functionality. Add this to <code>test/controllers.spec.js</code>:</p>
<pre><code class="lang-javascript">  describe(&#39;Logout Controller&#39;, function () {
    var scope;

    beforeEach(inject(function ($rootScope, $controller, Auth) {
      Auth.setUser(&#39;Blah&#39;);
      scope = $rootScope.$new();
      $controller(&#39;LogoutCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test session cleared
    it(&#39;should clear the session&#39;, function () {
      expect(localStorage.getItem(&#39;authHeader&#39;)).toEqual(null);
    });
  });
</code></pre>
<p>We want to ensure that when the user navigates to the route managed by the <code>LogoutCtrl</code> controller, the session is cleared, so we set up an existing session, call the controller, check it’s defined, and then check that local storage is empty.</p>
<p>Once you’ve verified that the test fails, amend the controllers as follows:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend.controllers&#39;, [
  &#39;mynewanimalfriend.services&#39;,
  &quot;ngMaterial&quot;
])

.controller(&#39;LoginCtrl&#39;, function ($scope, $location, Token, Auth) {
  $scope.doLogin = function () {
    var token = new Token($scope.credentials);
    token.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
})

.controller(&#39;LogoutCtrl&#39;, function ($scope, $location, Auth) {
  // Log user out
  Auth.logUserOut();

  // Redirect to login page
  $location.path(&#39;/login&#39;);
});
</code></pre>
<p>Our <code>LogoutCtrl</code> controller is very simple - it just logs the user out and redirects them back to the login form. Our final controller is for the home page:</p>
<pre><code class="lang-javascript">  describe(&#39;Home Controller&#39;, function () {
    var scope;

    beforeEach(inject(function ($rootScope, $controller) {
      scope = $rootScope.$new();
      $controller(&#39;HomeCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });
  });
</code></pre>
<p>For now our home controller does nothing except define the scope, so it’s easy to implement:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend.controllers&#39;, [
  &#39;mynewanimalfriend.services&#39;,
  &quot;ngMaterial&quot;
])

.controller(&#39;LoginCtrl&#39;, function ($scope, $location, Token, Auth) {
  $scope.doLogin = function () {
    var token = new Token($scope.credentials);
    token.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
})

.controller(&#39;LogoutCtrl&#39;, function ($scope, $location, Auth) {
  // Log user out
  Auth.logUserOut();

  // Redirect to login page
  $location.path(&#39;/login&#39;);
})

.controller(&#39;HomeCtrl&#39;, function ($scope) {
});
</code></pre>
<p>Verify that the tests pass, and our controllers are done for now. However, we still have some work to do to hook the various elements up. First, of all, our <code>main.js</code> unnecessarily loads our services - since we only use those services in our controllers, we don’t need them there. We also need to be able to keep users out of routes other than <code>login</code> when not logged in. Here’s what you <code>main.js</code> should look like:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);
require(&#39;./controllers&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;,
  &#39;mynewanimalfriend.controllers&#39;
])

.run([&#39;$rootScope&#39;, &#39;$location&#39;, &#39;Auth&#39;, function ($rootScope, $location, Auth) {
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event) {

    if (!Auth.isLoggedIn()) {
      if ($location.path() !== &#39;/login&#39;) {
        $location.path(&#39;/login&#39;);
      }
    }
  });
}])

.config([&#39;$httpProvider&#39;, function($httpProvider) {
  $httpProvider.interceptors.push(&#39;sessionInjector&#39;);
  $httpProvider.interceptors.push(&#39;authInterceptor&#39;);
}])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>Note that we set it up to intercept the HTTP request with the session injector and the auth interceptor. Next we need to create these in <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&quot;angular-resource&quot;);

angular.module(&#39;mynewanimalfriend.services&#39;, [&#39;ngResource&#39;])

.factory(&#39;Auth&#39;, function(){
  return{
    setUser : function (aUser) {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer &#39; + aUser);
    },
    isLoggedIn: function () {
      var user = localStorage.getItem(&#39;authHeader&#39;);
      return(user)? user : false;
    },
    logUserOut: function () {
      localStorage.removeItem(&#39;authHeader&#39;);
    }
  }
})

.factory(&#39;Token&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/authenticate/&#39;);
})

.factory(&#39;sessionInjector&#39;, function (Auth) {
  var sessionInjector = {
    request: function (config) {
      if (Auth.isLoggedIn()) {
        config.headers.Authorization = Auth.isLoggedIn();
      }
      return config;
    }
  };
  return sessionInjector;
})

.service(&#39;authInterceptor&#39;, function ($q, Auth, $location) {
  var service = this;

  service.responseError = function (response) {
    if (response.status == 400) {
      Auth.logUserOut();
      $location.path(&#39;/login&#39;);
    }
    return $q.reject(response);
  };
});
</code></pre>
<p>I’ll walk you through these. <code>sessionInjector</code> adds the authorization HTTP header to every request to the server if the user is logged in, so that it returns the right user’s details. <code>authInterceptor</code> catches any 400 errors, denoting that the user is not authenticated with a current JSON web token, and logs the user out. In this way we can handle the expiry of a user’s token.</p>
<p>Now the logic of our app is in place, but that’s no use without some content…</p>
<h2 id="angular-templating">Angular templating</h2>
<p>We have one very basic HTML template, but that’s just a boilerplate for inserting the rest of our content. For the rest of the HTML we’ll need to load templates dynamically, and we’ll use Angular Material to help us build a nice UI quickly. Run the following commands to create the files:</p>
<pre><code class="lang-bash">$ mkdir www/templates
$ touch www/templates/login.html
$ touch www/templates/home.html
</code></pre>
<p>We need to import the CSS for Angular Material. Add this to <code>sass/style.scss</code>:</p>
<pre><code class="lang-scss">// Angular Material
@import &quot;node_modules/angular-material/angular-material.scss&quot;;
</code></pre>
<p>With that done, we need to configure theming in <code>main.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);
require(&#39;./controllers&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;,
  &#39;mynewanimalfriend.controllers&#39;
])

.config(function ($mdThemingProvider) {
    $mdThemingProvider.theme(&#39;default&#39;)
      .primaryPalette(&#39;purple&#39;)
      .accentPalette(&#39;cyan&#39;);
})

.run([&#39;$rootScope&#39;, &#39;$location&#39;, &#39;Auth&#39;, function ($rootScope, $location, Auth) {
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event) {

    if (!Auth.isLoggedIn()) {
      if ($location.path() !== &#39;/login&#39;) {
        $location.path(&#39;/login&#39;);
      }
    }
  });
}])

.config([&#39;$httpProvider&#39;, function($httpProvider) {
  $httpProvider.interceptors.push(&#39;sessionInjector&#39;);
  $httpProvider.interceptors.push(&#39;authInterceptor&#39;);
}])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>You may want to look at the <a href="https://material.angularjs.org/latest/Theming/01_introduction">documentation</a> for Angular Material to choose your own theme options. Next, let’s create our login template at <code>www/templates/login.html</code>:</p>
<pre><code class="lang-html">&lt;md-content md-theme=&quot;default&quot; layout-gt-sm=&quot;row&quot; layout-padding&gt;
    &lt;div&gt;
        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Email&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.email&quot; type=&quot;email&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password&quot; type=&quot;password&quot;&gt;
        &lt;/md-input-container&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; ng-click=&quot;doLogin()&quot;&gt;Submit&lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-content&gt;
</code></pre>
<p>We’re using Angular Material’s input and button directives to make our inputs look a bit nicer. Note that the <code>ng-click</code> handler calls the <code>doLogin()</code> method of our controller, and that the <code>ng-model</code> attributes contain the <code>credentials</code> object that gets passed to the API. If you haven’t used Angular before, <code>ng-model</code> essentially lets you bind a variable to an element’s value so, for instance, when an input is changed, it can be easily accessed via the variable.</p>
<p>Next, we’ll implement a placeholder for our home page with a log out button. Save this as <code>www/templates/home.html</code>:</p>
<pre><code class="lang-html">&lt;md-toolbar&gt;
    &lt;div class=&quot;md-toolbar-tools&quot;&gt;
        &lt;md-button aria-label=&quot;Log out&quot; href=&quot;#logout&quot;&gt;
            Log out
        &lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-toolbar&gt;
</code></pre>
<p>That should be all we need to demonstrate logging in and out of our app. Let’s try it out. First run the Gulp task to show the app in the browser:</p>
<pre><code class="lang-bash">$ gulp
</code></pre>
<p>Then, in another shell session, switch to the directory with the backend and run the server for that:</p>
<pre><code class="lang-bash">$ php artisan serve
</code></pre>
<p>You should already have a user account set up and ready to use thanks to the seeder we wrote. The browser should show the login page by default, and if you fill in the login form and click the button you should see the home page. You should then be able to log out again.</p>
<p>Congratulations! We’ve got authentication working.</p>
<h2 id="switching-to-html5-routing">Switching to HTML5 routing</h2>
<p>You may note that the URLs use hashes - they are in the format <code>http://localhost:5000/#/login</code>. Wouldn’t it be better if we didn’t use the hash? Fortunately modern browsers support this via the HTML5 pushState API, and Angular has built-in support for this.</p>
<p>To enable it, we first need to declare a base URL in <code>www/index.html</code>. Amend it as follows:</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;
        &lt;title&gt;My New Animal Friend&lt;/title&gt;
        &lt;link href=&quot;/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
        &lt;base href=&quot;/&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div&gt;
        &lt;div ng-app=&quot;mynewanimalfriend&quot; ng-cloak&gt;
            &lt;div ng-view&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;/js/bundle.js&quot;&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p>Here we’ve added the <code>&lt;base href=&quot;/&quot;&gt;</code> tag to denote our base URL. Next we configure Angular to use HTML5 routing in <code>main.js</code>:</p>
<pre><code class="lang-javascript">.config(function($locationProvider) {
  $locationProvider.html5Mode(true);
})
</code></pre>
<p>And amend the URL in the home template:</p>
<pre><code class="lang-html">&lt;md-toolbar&gt;
    &lt;div class=&quot;md-toolbar-tools&quot;&gt;
        &lt;md-button aria-label=&quot;Log out&quot; href=&quot;/logout&quot;&gt;
            Log out
        &lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-toolbar&gt;
</code></pre>
<p>Now, we should be using HTML5 routing throughout.</p>
<p>With that done, we can finish for today. We’ve got our basic app skeleton and authentication system up and running, and we’ll be in a good place to continue developing the rest of the app next time. I’ve put the source code on <a href="https://github.com/matthewbdaly/mynewanimalfriend-app">Github</a>, and you can find this lesson’s work under the <code>lesson-2</code> tag.</p>
<p>Next time we’ll develop the app further, including implementing the pet search functionality.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Phonegap app with Laravel and Angular - Part 1]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/">
        </link>
        <updated>2016-09-11T18:33:41Z</updated>
        <summary type="html"><![CDATA[<p>A lot of my work over the last few years has been on Phonegap apps. Phonegap isn’t terribly hard to use, but the difference in context between that and a more conventional web app means that you have to move a lot of functionality to the client side, and unless you’ve used client-side Javascript frameworks before it can be a struggle.</p>
<p>In this series of tutorials I’ll show you how I might build a Phonegap app. The work involved will include:</p>
<ul>
<li>Building a REST API using Laravel to expose the data</li>
<li>Building an admin interface to manage the data</li>
<li>Building a Phonegap app using Angular.js</li>
<li>Testing and deploying it</li>
</ul>
<p>In the process we’ll cover issues like authentication, authorization, real-time notifications and working with REST APIs. Note that we won’t cover the app submission process - you can find plenty of resources on that. We will, however, be using Phonegap Build to build the app.</p>
<h2 id="the-brief">The brief</h2>
<p>Let’s say our new client is an animal shelter. The brief for the app is as follows:</p>
<blockquote>
<p>My New Animal Friend will be an app for finding a new pet. Once a user signs in, they’ll be able to choose what type of pet they’re looking for, then look through a list of pets available to adopt. They can reject them by swiping left or save them by swiping right. They can see more about the ones they swipe right on, and arrange to meet them, from within the app. Users can also message the staff to ask questions about a pet.</p>
</blockquote>
<p>Nice idea, but there’s a lot of work involved! Our very first task is to build the REST API, since everything else relies on that. Before starting, make sure you have the following installed:</p>
<ul>
<li>PHP (I’m using PHP 7, but 5.6 should be fine)</li>
<li>Composer</li>
<li>Git</li>
<li>A compatible relational database (I use PostgreSQL)</li>
<li>Redis</li>
<li>Your usual text editor</li>
<li>Node.js</li>
</ul>
<p>As long as you have this, you should be ready to go. Using <a href="https://laravel.com/docs/5.3/homestead">Homestead</a> is the simplest way to get started if you don’t have all this stuff already.</p>
<h2 id="starting-the-api">Starting the API</h2>
<p>To start building our REST API, run the following command from the shell:</p>
<pre><code class="lang-bash">$ composer create-project --prefer-dist laravel/laravel mynewanimalfriend-backend
</code></pre>
<p>We also have some other dependencies we need to install, so switch into the new directory and run the following command:</p>
<pre><code class="lang-bash">$ composer require barryvdh/laravel-cors tymon/jwt-auth predis/predis
</code></pre>
<p>Next, we need to add the new packages to the Laravel config. Open up <code>config/app.php</code> and add the following to the <code>providers</code> array:</p>
<pre><code class="lang-php">   Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class,                                                                                                                                              
   Barryvdh\Cors\ServiceProvider::class,   
</code></pre>
<p>And the following to the <code>aliases</code> array:</p>
<pre><code class="lang-php">   &#39;JWTAuth&#39; =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,
</code></pre>
<p>We also need to ensure that the CORS middleware is applied to all API routes. Open up <code>app/Http/Kernel.php</code> and under the <code>api</code> array in <code>protected $middlewareGroups</code> paste the following:</p>
<pre><code class="lang-php">   \Barryvdh\Cors\HandleCors::class,
</code></pre>
<p>Now that the packages are included, we can publish the files for them:</p>
<pre><code class="lang-bash">$ php artisan vendor:publish
</code></pre>
<p>Next, we need to set a key for our API authentication:</p>
<pre><code class="lang-bash">$ php artisan jwt:generate
</code></pre>
<p>And set a custom namespace:</p>
<pre><code class="lang-bash">$ php artisan app:name AnimalFriend
</code></pre>
<p>You’ll also want to set up the <code>.env</code> file with the configuration settings for your application. There’s one at <code>.env.example</code> by default that you can copy and customise. Then run the following command to generate the application key:</p>
<pre><code class="lang-bash">$ php artisan key:generate
</code></pre>
<p>I had to change the namespace for the user model in <code>config/jwt.php</code> as well:</p>
<pre><code class="lang-php">    &#39;user&#39; =&gt; &#39;AnimalFriend\User&#39;,
</code></pre>
<p>I also tend to amend the settings in <code>phpunit.xml</code> as follows so that it uses an in-memory SQLite database for tests:</p>
<pre><code class="lang-xml">        &lt;env name=&quot;APP_ENV&quot; value=&quot;testing&quot;/&gt;
        &lt;env name=&quot;SESSION_DRIVER&quot; value=&quot;array&quot;/&gt;
        &lt;env name=&quot;QUEUE_DRIVER&quot; value=&quot;sync&quot;/&gt;
        &lt;env name=&quot;CACHE_DRIVER&quot; value=&quot;redis&quot;/&gt;
        &lt;env name=&quot;DB_CONNECTION&quot; value=&quot;sqlite&quot;/&gt;
        &lt;env name=&quot;DB_DATABASE&quot; value=&quot;:memory:&quot;/&gt;
</code></pre>
<p>Also, delete <code>tests/ExampleTest.php</code> and amend <code>tests/TestCase.php</code> as follows in order to use database migrations in tests:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

abstract class TestCase extends Illuminate\Foundation\Testing\TestCase
{
    use DatabaseMigrations;

    /**
     * The base URL to use while testing the application.
     *
     * @var string
     */
    protected $baseUrl = &#39;http://localhost&#39;;

    /**
     * Creates the application.
     *
     * @return \Illuminate\Foundation\Application
     */
    public function createApplication()
    {
        $app = require __DIR__.&#39;/../bootstrap/app.php&#39;;

        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();

        return $app;
    }
}
</code></pre>
<p>With that in place, we can start work on our API proper.</p>
<h2 id="authenticating-our-api">Authenticating our API</h2>
<p>We’re going to start out with a very limited subset of our API. First, we’ll implement the authentication for our app, then we’ll add the facility to view a list of pets or an individual pet. Other functionality will come later. This will be sufficient to get the app working.</p>
<p>First, we need to create our user model. As we’ll be practicing TDD throughout, we write a test for the user model first. Save the following as <code>tests/UserModelTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use AnimalFriend\User;

class UserModelTest extends TestCase
{
    /**
     * Test creating a user
     *
     * @return void
     */
    public function testCreatingAUser()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Verify it works
        $saved = User::where(&#39;email&#39;, &#39;bob@example.com&#39;)-&gt;first();
        $this-&gt;assertEquals($saved-&gt;id, 1);
        $this-&gt;assertEquals($saved-&gt;name, &#39;bobsmith&#39;);
    }
}
</code></pre>
<p>If we run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

.                                                                   1 / 1 (100%)

Time: 169 ms, Memory: 12.00MB

OK (1 test, 3 assertions)
</code></pre>
<p>We already have a perfectly good <code>User</code> model and the appropriate migrations, so our test already passes.</p>
<p>Next, we need to implement the authentication system. Save this as <code>tests/AuthTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class AuthTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Test the auth
     *
     * @return void
     */
    public function testAuth()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; bcrypt(&#39;password&#39;)
        ]);

        // Create request
        $data = array(
            &#39;email&#39; =&gt; $user-&gt;email,
            &#39;password&#39; =&gt; &#39;password&#39;,
        );
        $response = $this-&gt;call(&#39;POST&#39;, &#39;api/authenticate&#39;, $data);
        $this-&gt;assertResponseStatus(200);
        $content = json_decode($response-&gt;getContent());
        $this-&gt;assertTrue(array_key_exists(&#39;token&#39;, $content));
    }

    /**
     * Test the auth when user does not exist
     *
     * @return void
     */
    public function testAuthFailure()
    {
        // Create data for request
        $data = array(
            &#39;email&#39; =&gt; &#39;user@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;,
        );
        $response = $this-&gt;call(&#39;POST&#39;, &#39;api/authenticate&#39;, $data);

        // Check the status code
        $this-&gt;assertResponseStatus(401);
    }
}
</code></pre>
<p>The first test creates a user and sends an authentication request, then confirms that it returns the JSON Web Token. The second checks that a user that doesn’t exist cannot log in.</p>
<p>Let’s run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

FF.                                                                 3 / 3 (100%)

Time: 328 ms, Memory: 14.00MB

There were 2 failures:

1) AuthTest::testAuth
Expected status code 200, got 404.
Failed asserting that 404 matches expected 200.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:29

2) AuthTest::testAuthFailure
Expected status code 401, got 404.
Failed asserting that 404 matches expected 401.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:49

FAILURES!
Tests: 3, Assertions: 5, Failures: 2.
</code></pre>
<p>With a failing test in place, we can implement login. First let’s create our controller at <code>app/Http/Controllers/AuthenticateController.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Http\Controllers\Controller;
use JWTAuth;
use Tymon\JWTAuth\Exceptions\JWTException;
use AnimalFriend\User;
use Hash;

class AuthenticateController extends Controller
{
    private $user;

    public function __construct(User $user) {
        $this-&gt;user = $user;
    }

    public function authenticate(Request $request)
    {
        // Get credentials
        $credentials = $request-&gt;only(&#39;email&#39;, &#39;password&#39;);

        // Get user
        $user = $this-&gt;user-&gt;where(&#39;email&#39;, $credentials[&#39;email&#39;])-&gt;first();

        try {
            // attempt to verify the credentials and create a token for the user
            if (! $token = JWTAuth::attempt($credentials)) {
                return response()-&gt;json([&#39;error&#39; =&gt; &#39;invalid_credentials&#39;], 401);
            }
        } catch (JWTException $e) {
            // something went wrong whilst attempting to encode the token
            return response()-&gt;json([&#39;error&#39; =&gt; &#39;could_not_create_token&#39;], 500);
        }

        // all good so return the token
        return response()-&gt;json(compact(&#39;token&#39;));
    }
}
</code></pre>
<p>And we need to set up the route in <code>routes/api.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Http\Request;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the &quot;api&quot; middleware group. Enjoy building your API!
|
*/

Route::post(&#39;authenticate&#39;, &#39;AuthenticateController@authenticate&#39;);
</code></pre>
<p>Note that because it’s an API route, it’s automatically prefixed with <code>api/</code> without us having to do anything.</p>
<p>Now if we run our tests, they should pass:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

...                                                                 3 / 3 (100%)

Time: 402 ms, Memory: 14.00MB

OK (3 tests, 6 assertions)
</code></pre>
<p>Now we can obtain a JSON Web Token to authenticate users with. To start with we’ll only support existing users, but later we’ll add a method to sign up. However, we need at least one user to test with, so we’ll create a seeder for that at <code>database/seeds/UserTableSeeder.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;
use Carbon\Carbon;

class UserTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Add user
        DB::table(&#39;users&#39;)-&gt;insert([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
            &#39;password&#39; =&gt; Hash::make(&quot;password&quot;)
        ]);
    }
}
</code></pre>
<p>You can run <code>php artisan make:seeder UserTableSeeder</code> to generate the file, or just paste it in. You also need to amend <code>database/seeds/DatabaseSeeder.php</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $this-&gt;call(UserTableSeeder::class);
    }
}
</code></pre>
<p>This ensures the seeder will actually be called. Then, run the following commands:</p>
<pre><code class="lang-bash">$ php artisan migrate
$ php artisan db:seed
</code></pre>
<p>That sets up our user in the database.</p>
<h2 id="adding-the-pets-endpoint">Adding the Pets endpoint</h2>
<p>Our next step is to add the pets model and endpoint. Our <code>Pet</code> model should have the following fields:</p>
<ul>
<li>ID</li>
<li>Timestamps (<code>created_at</code> and <code>updated_at</code>)</li>
<li>Name</li>
<li>Path to photo</li>
<li>Availability</li>
<li>Type (eg cat, dog)</li>
</ul>
<p>Let’s create a test for that model:</p>
<pre><code class="lang-php">&lt;?php

use AnimalFriend\Pet;

class PetModelTest extends TestCase
{
    /**
     * Test creating a pet
     *
     * @return void
     */
    public function testCreatingAPet()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Verify it works
        $saved = Pet::where(&#39;name&#39;, &#39;Freddie&#39;)-&gt;first();
        $this-&gt;assertEquals($saved-&gt;id, 1);
        $this-&gt;assertEquals($saved-&gt;name, &#39;Freddie&#39;);
        $this-&gt;assertEquals($saved-&gt;type, &#39;Cat&#39;);
        $this-&gt;assertEquals($saved-&gt;available, 1);
        $this-&gt;assertEquals($saved-&gt;picture, &#39;1.jpg&#39;);
    }
}
</code></pre>
<p>Save this as <code>tests/PetModelTest.php</code>. Then run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

..E.                                                                4 / 4 (100%)

Time: 414 ms, Memory: 16.00MB

There was 1 error:

1) PetModelTest::testCreatingAUser
InvalidArgumentException: Unable to locate factory with name [default] [AnimalFriend\Pet].

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:126
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:2280
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:139
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:106
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:84
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetModelTest.php:16

ERRORS!
Tests: 4, Assertions: 6, Errors: 1.
</code></pre>
<p>First we need to create a factory for creating a pet in <code>database/factories/ModelFactory.php</code>:</p>
<pre><code class="lang-php">$factory-&gt;define(AnimalFriend\Pet::class, function (Faker\Generator $faker) {
    return [
        &#39;name&#39; =&gt; $faker-&gt;firstNameMale,
        &#39;type&#39; =&gt; &#39;Cat&#39;,
        &#39;available&#39; =&gt; 1,
        &#39;picture&#39; =&gt; &#39;1.jpg&#39;
    ];
});
</code></pre>
<p>Then, we create the model:</p>
<pre><code class="lang-bash">$ php artisan make:model Pet
</code></pre>
<p>Next, we create a migration for the <code>Pet</code> model:</p>
<pre><code class="lang-bash">$ php artisan make:migration create_pets_table
Created Migration: 2016_09_11_145010_create_pets_table
</code></pre>
<p>And paste in the following code:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePetsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(&#39;pets&#39;, function (Blueprint $table) {
            $table-&gt;increments(&#39;id&#39;);
            $table-&gt;string(&#39;name&#39;);
            $table-&gt;string(&#39;type&#39;);
            $table-&gt;string(&#39;available&#39;);
            $table-&gt;string(&#39;picture&#39;)-&gt;nullable();
            $table-&gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop(&#39;pets&#39;);
    }
}
</code></pre>
<p>Time to run the tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

....                                                                4 / 4 (100%)

Time: 412 ms, Memory: 16.00MB

OK (4 tests, 12 assertions)
</code></pre>
<p>With that done, we can start work on implementing the endpoint. We need to check that unauthorised users cannot retrieve the data, and that authorised users can. First, let’s create <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class PetControllerTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Test fetching pets when unauthorised
     *
     * @return void
     */
    public function testFetchingPetsWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets&#39;);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pets when authorised
     *
     * @return void
     */
    public function testFetchingPets()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets&#39;, [], $headers)
            -&gt;seeJsonStructure([
                &#39;*&#39; =&gt; [
                    &#39;id&#39;,
                    &#39;name&#39;,
                    &#39;type&#39;,
                    &#39;available&#39;,
                    &#39;picture&#39;,
                    &#39;created_at&#39;,
                    &#39;updated_at&#39;
                ]
            ]);
        $this-&gt;assertResponseStatus(200);
    }
}
</code></pre>
<p>First, we create a pet, make an HTTP request to <code>/api/pets</code>, and check we are not authorised. Next, we do the same, but also create a user and a JSON Web Token, and pass the token through in the request. Then we verify the response data and that it was successful.</p>
<p>Let’s run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

..FF..                                                              6 / 6 (100%)

Time: 509 ms, Memory: 16.00MB

There were 2 failures:

1) PetControllerTest::testFetchingPetsWhenUnauthorised
Expected status code 400, got 404.
Failed asserting that 404 matches expected 400.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:25

2) PetControllerTest::testFetchingPets
Failed asserting that null is of type &quot;array&quot;.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:295
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:67

FAILURES!
Tests: 6, Assertions: 17, Failures: 2.
</code></pre>
<p>That looks correct, so we can start building our endpoint. We can generate a boilerplate for it as follows:</p>
<pre><code class="lang-bash">$ $ php artisan make:controller PetController --resource
</code></pre>
<p>Note the <code>--resource</code> flag - this tells Laravel to set it up to be a RESTful controller with certain predefined functions. Next, let’s amend the new file at <code>app\Http\Controllers/PetController.php</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Pet;

class PetController extends Controller
{
    private $pet;

    public function __construct(Pet $pet) {
        $this-&gt;pet = $pet;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Get all pets
        $pets = $this-&gt;pet-&gt;get();

        // Send response
        return response()-&gt;json($pets, 200);
    }
}
</code></pre>
<p>This implements an index route that shows all pets. Next, we hook up the route in <code>routes/api.php</code>:</p>
<pre><code class="lang-php">// Auth routes
Route::group([&#39;middleware&#39; =&gt; [&#39;jwt.auth&#39;]], function () {
    Route::resource(&#39;pets&#39;, &#39;PetController&#39;);
});
</code></pre>
<p>Note that we wrap this resource in the <code>jwt.auth</code> middleware to prevent access by unauthorised users. Implementing this as middleware makes it very easy to reuse. Also note that we can specify it as a resource, meaning we don’t have to explicitly hook up each route to a controller method.</p>
<p>Let’s run the tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

..EE..                                                              6 / 6 (100%)

Time: 511 ms, Memory: 16.00MB

There were 2 errors:

1) PetControllerTest::testFetchingPetsWhenUnauthorised
ReflectionException: Class jwt.auth does not exist

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:24

2) PetControllerTest::testFetchingPets
ReflectionException: Class jwt.auth does not exist

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:72
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:56

ERRORS!
Tests: 6, Assertions: 15, Errors: 2.
</code></pre>
<p>Looks like JWT isn’t configured correctly. We can fix that in <code>app/Http/Kernel.php</code> by adding it to <code>$routeMiddleware</code>:</p>
<pre><code class="lang-php">        &#39;jwt.auth&#39; =&gt; &#39;Tymon\JWTAuth\Middleware\GetUserFromToken&#39;,
        &#39;jwt.refresh&#39; =&gt; &#39;Tymon\JWTAuth\Middleware\RefreshToken&#39;,
</code></pre>
<p>And run the tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

......                                                              6 / 6 (100%)

Time: 514 ms, Memory: 16.00MB

OK (6 tests, 25 assertions)
</code></pre>
<p>Our final task for today on the API is building a route for fetching a single pet. Our tests need to handle three situations:</p>
<ul>
<li>An unauthorised request</li>
<li>A request for a pet that does not exist</li>
<li>A request for a pet that does exist</li>
</ul>
<p>Add these methods to <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="lang-php">    /**
     * Test fetching pet when unauthorised
     *
     * @return void
     */
    public function testFetchingPetWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Send request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pet which does not exist
     *
     * @return void
     */
    public function testFetchingPetDoesNotExist()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/1&#39;, [], $headers);
        $this-&gt;assertResponseStatus(404);
    }

    /**
     * Test fetching pet when authorised
     *
     * @return void
     */
    public function testFetchingPet()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id, [], $headers)
            -&gt;seeJsonStructure([
                &#39;id&#39;,
                &#39;name&#39;,
                &#39;type&#39;,
                &#39;available&#39;,
                &#39;picture&#39;,
                &#39;created_at&#39;,
                &#39;updated_at&#39;
            ]);
        $this-&gt;assertResponseStatus(200);
    }
</code></pre>
<p>Let’s check our tests fail:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

.....FE..                                                           9 / 9 (100%)

Time: 974 ms, Memory: 16.00MB

There was 1 error:

1) PetControllerTest::testFetchingPet
PHPUnit_Framework_Exception: Argument #2 (No Value) of PHPUnit_Framework_Assert::assertArrayHasKey() must be a array or ArrayAccess

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:304
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:145

--

There was 1 failure:

1) PetControllerTest::testFetchingPetDoesNotExist
Expected status code 404, got 400.
Failed asserting that 400 matches expected 404.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:112

ERRORS!
Tests: 9, Assertions: 31, Errors: 1, Failures: 1.
</code></pre>
<p>Now, we already have the <code>show()</code> method hooked up by default, so we just have to implement it in <code>app/Http/Controllers/PetController.php</code>:</p>
<pre><code class="lang-php">    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Get pet
        $pet = $this-&gt;pet-&gt;findOrFail($id);

        // Send response
        return response()-&gt;json($pet, 200);
    }
</code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

.........                                                           9 / 9 (100%)

Time: 693 ms, Memory: 16.00MB

OK (9 tests, 39 assertions)
</code></pre>
<p>Now we have all the endpoints we need to get started with the app. You can find the source code for this backend on <a href="https://github.com/matthewbdaly/mynewanimalfriend-backend">Github</a> - check out the <code>lesson-1</code> tag.</p>
<p>That seems like a good place to stop for now. We have our first pass at the back end. It’s not complete by any means, but it’s a good start, and is sufficient for us to get some basic functionality up and running in the app. In the next instalment we’ll start working with Phonegap to build the first pass at the app itself. Later instalments will see us working with both the app and backend to build it into a more useful whole.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating a personal dashboard with React and Webpack]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/08/15/creating-a-personal-dashboard-with-react-and-webpack/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/08/15/creating-a-personal-dashboard-with-react-and-webpack/">
        </link>
        <updated>2016-08-15T22:18:00Z</updated>
        <summary type="html"><![CDATA[<p>The Raspberry Pi is a great device for running simple web apps at home on a permanent basis, and you can pick up a small touchscreen for it quite cheaply. This makes it easy to build and host a small personal dashboard that pulls important data from various APIs or RSS feeds and displays it. You’ll often see dashboards like this on Raspberry Pi forums and subreddits. As I’m currently between jobs, and have some time to spare before my new job starts, I decided to start creating my own version of it. It was obvious that React.js is a good fit for this as it allows you to break up your user interface into multiple independent components and keep the functionality close to the UI. It also makes it easy to reuse widgets by passing different parameters through each time.</p>
<p>In this tutorial I’ll show you how to start building a simple personal dashboard using React and Webpack. You can then install Nginx on your Raspberry Pi and host it from there. In the process, you’ll be able to pick up a bit of knowledge about Webpack and ECMAScript 2015 (using Babel). Our initial implementation will have only two widgets, a clock and a feed, but those should show you enough of the basics that you should then be able to build other widgets you may have in mind.</p>
<h2 id="installing-our-dependencies">Installing our dependencies</h2>
<p>First, let’s create our <code>package.json</code>:</p>
<pre><code class="lang-bash">$ npm init -y
</code></pre>
<p>Then install the dependencies:</p>
<pre><code class="lang-bash">$ npm install --save-dev babel-cli babel-register babel-core babel-eslint babel-loader babel-preset-es2015 babel-preset-react chai css-loader eslint eslint-loader eslint-plugin-react file-loader istanbul@^1.0.0-alpha.2 jquery jsdom mocha moment node-sass react react-addons-pure-render-mixin react-addons-test-utils react-dom react-hot-loader request sass-loader style-loader url-loader webpack webpack-dev-server
</code></pre>
<p>Note that we need to install a specific version of Istanbul to get code coverage.</p>
<p>Next, we create our Webpack config. Save this as <code>webpack.config.js</code>:</p>
<pre><code class="lang-javascript">var webpack = require(&#39;webpack&#39;);  
module.exports = {  
    entry: [
      &#39;webpack/hot/only-dev-server&#39;,
      &quot;./js/app.js&quot;
    ],
    debug: true,
    devtool: &#39;source-map&#39;,
    output: {
        path: __dirname + &#39;/static&#39;,
        filename: &quot;bundle.js&quot;
    },
    module: {
        preLoaders: [
          {
            test: /(\.js$|\.jsx$)/, 
            exclude: /node_modules/, 
            loader: &quot;eslint-loader&quot;
          }
        ],
        loaders: [
            { test: /\.jsx?$/, loaders: [&#39;react-hot&#39;, &#39;babel&#39;], exclude: /node_modules/ },
            { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel-loader&#39;},
            { test: /\.woff2?$/, loader: &quot;url-loader?limit=25000&quot; },
            { test: /\.(eot|svg|ttf)?$/, loader: &quot;file-loader&quot; },
            { test: /\.scss$/, loader: &quot;style!css!sass&quot; }
        ]
    },
    eslint: {
      configFile: &#39;.eslintrc.yml&#39;
    },
    plugins: [
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoErrorsPlugin()
    ]
};
</code></pre>
<p>Note the various loaders we’re using. We use ESLint to lint our Javascript files for code quality, and the build will fail if they do not match the required standards. We’re also using loaders for CSS, Sass, Babel (so we can use ES2015 for our Javascript) and fonts. Also, note the hot module replacement plugin - this allows us to reload the application automatically. If you haven’t used Webpack before, this config should be sufficient to get you started, but I recommend reading the <a href="https://webpack.github.io/">documentation</a>.</p>
<p>We also need to configure ESLint how we want. Here is the configuration we will be using, which should be saved as <code>.eslintrc.yml</code>:</p>
<pre><code class="lang-yaml">rules:
  no-debugger:
    - 0
  no-console:
    - 0
  no-unused-vars:
    - 0
  indent:
    - 2
    - 2
  quotes:
    - 2
    - single
  linebreak-style:
    - 2
    - unix
  semi:
    - 2
    - always
env:
  es6: true
  browser: true
  node: true
extends: &#39;eslint:recommended&#39;
parserOptions:
  sourceType: module
  ecmaFeatures:
    jsx: true
    experimentalObjectRestSpread: true
    modules: true
plugins:
  - react
</code></pre>
<p>We also need a base HTML file. Save this as <code>index.html</code>:</p>
<pre><code class="lang-html">&lt;!doctype html&gt;  
&lt;html lang=&quot;en&quot;&gt;  
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Personal Dashboard&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;view&quot;&gt;&lt;/section&gt;
    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>We also need to set the commands for building and testing our app in <code>package.json</code>:</p>
<pre><code class="lang-json">  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js &#39;test/**/*.@(js|jsx)&#39;&quot;,
    &quot;test:watch&quot;: &quot;npm run test -- --watch&quot;,
    &quot;start&quot;: &quot;webpack-dev-server --progress --colors&quot;,
    &quot;build&quot;: &quot;webpack --progress --colors&quot;
  },
  &quot;babel&quot;: {
    &quot;presets&quot;: [
      &quot;es2015&quot;,
      &quot;react&quot;
    ]
  },
</code></pre>
<p>The <code>npm test</code> command will call Mocha to run the tests, but will also use Istanbul to generate test coverage. For the sake of brevity, our tests won’t be terribly comprehensive. The <code>npm start</code> command will run a development server, while <code>npm run build</code> will build our application.</p>
<p>We also need to create the <code>test/</code> folder and the <code>test/setup.js</code> file:</p>
<pre><code class="lang-javascript">import jsdom from &#39;jsdom&#39;;
import chai from &#39;chai&#39;;

const doc = jsdom.jsdom(&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;);
const win = doc.defaultView;

global.document = doc;
global.window = win;

Object.keys(window).forEach((key) =&gt; {
  if (!(key in global)) {
    global[key] = window[key];
  }
});
</code></pre>
<p>This sets up Chai and creates a dummy DOM for our tests. We also need to create the folder <code>js/</code> and the file <code>js/app.js</code>. You can leave that file empty for now.</p>
<p>If you now run <code>npm start</code> and navigate to <a href="http://localhost:8080/webpack-dev-server/">http://localhost:8080/webpack-dev-server/</a>, you can see the current state of the application.</p>
<h2 id="our-dashboard-component">Our dashboard component</h2>
<p>Our first React component will be a wrapper for all the other ones. Each of the rest of the components will be a self-contained widget that will populate itself without the need for a centralized data store like Redux. I will mention that Redux is a very useful library, and for larger React applications it makes a lot of sense to use it, but here we’re better off having each widget manage its own data internally, rather than have it be passed down from a single data store.</p>
<p>Save the following as <code>test/components/dashboard.js</code>:</p>
<pre><code class="lang-javascript">import TestUtils from &#39;react-addons-test-utils&#39;;
import React from &#39;react&#39;;
import {findDOMNode} from &#39;react-dom&#39;;
import Dashboard from &#39;../../js/components/dashboard&#39;;
import {expect} from &#39;chai&#39;;

const {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;

describe(&#39;Dashboard&#39;, () =&gt; {
  it(&#39;renders the dashboard&#39;, () =&gt; {
    const component = renderIntoDocument(
      &lt;Dashboard title=&quot;My Dashboard&quot; /&gt;
    );
    const title = findDOMNode(component.refs.title);
    expect(title).to.be.ok;
    expect(title.textContent).to.contain(&#39;My Dashboard&#39;);
  });
}
</code></pre>
<p>This tests that we can set the title of our dashboard component. Let’s run our tests:</p>
<pre><code class="lang-bash">$ npm test

&gt; personal-dashboard@1.0.0 test /home/matthew/Projects/personal-dashboard
&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js &#39;test/**/*.@(js|jsx)&#39;

No coverage information was collected, exit without writing coverage information
module.js:327
    throw err;
    ^

Error: Cannot find module &#39;../../js/components/dashboard&#39;
    at Function.Module._resolveFilename (module.js:325:15)
    at Function.Module._load (module.js:276:25)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at Object.&lt;anonymous&gt; (dashboard.js:4:1)
    at Module._compile (module.js:409:26)
    at loader (/home/matthew/Projects/personal-dashboard/node_modules/babel-register/lib/node.js:148:5)
    at Object.require.extensions.(anonymous function) [as .js] (/home/matthew/Projects/personal-dashboard/node_modules/babel-register/lib/node.js:158:7)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Module.require (module.js:353:17)
    at require (internal/module.js:12:17)
    at /home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:220:27
    at Array.forEach (native)
    at Mocha.loadFiles (/home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:217:14)
    at Mocha.run (/home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:485:10)
    at Object.&lt;anonymous&gt; (/home/matthew/Projects/personal-dashboard/node_modules/mocha/bin/_mocha:403:18)
    at Module._compile (module.js:409:26)
    at Object.Module._extensions..js (module.js:416:10)
    at Object.Module._extensions.(anonymous function) (/home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/hook.js:109:37)
    at Module.load (module.js:343:32)
    at Function.Module._load (module.js:300:12)
    at Function.Module.runMain (module.js:441:10)
    at runFn (/home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/command/common/run-with-cover.js:122:16)
    at /home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/command/common/run-with-cover.js:251:17
    at /home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/util/file-matcher.js:68:16
    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:52:16
    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:361:13
    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:52:16
    at done (/home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:246:17)
    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:44:16
    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:358:17
    at LOOP (fs.js:1530:14)
    at nextTickCallbackWith0Args (node.js:420:9)
    at process._tickCallback (node.js:349:13)
npm ERR! Test failed.  See above for more details.
</code></pre>
<p>Our dashboard file doesn’t exist. So let’s create it:</p>
<pre><code class="lang-bash">$ mkdir js/components
$ touch js/components/dashboard.js
</code></pre>
<p>And run our test again:</p>
<pre><code class="lang-bash">$ npm test

&gt; personal-dashboard@1.0.0 test /home/matthew/Projects/personal-dashboard
&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js &#39;test/**/*.@(js|jsx)&#39;



  Dashboard
Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).
    1) renders the dashboard


  0 passing (31ms)
  1 failing

  1) Dashboard renders the dashboard:
     Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
      at invariant (node_modules/fbjs/lib/invariant.js:38:15)
      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)
      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)
      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)
      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)
      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)
      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)
      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)
      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)
      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)
      at Context.&lt;anonymous&gt; (dashboard.js:11:23)



No coverage information was collected, exit without writing coverage information
npm ERR! Test failed.  See above for more details.
</code></pre>
<p>Now we have a failing test, we can create our component. Save this as <code>js/components/dashboard.js</code>:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;

export default React.createClass({
  render() {
    return (
      &lt;div className=&quot;dashboard&quot;&gt;
        &lt;h1 ref=&quot;title&quot;&gt;{this.props.title}&lt;/h1&gt;
        &lt;div className=&quot;wrapper&quot;&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="lang-bash">$ npm test

&gt; personal-dashboard@1.0.0 test /home/matthew/Projects/personal-dashboard
&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js &#39;test/**/*.@(js|jsx)&#39;



  Dashboard
    ✓ renders the dashboard


  1 passing (50ms)

No coverage information was collected, exit without writing coverage information
</code></pre>
<p>Our first component is in place. However, it isn’t getting loaded. We also need to start thinking about styling. Create the file <code>scss/style.scss</code>, but leave it blank for now. Then save this in <code>js/app.js</code>:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Dashboard from &#39;./components/dashboard&#39;;
import styles from &#39;../scss/style.scss&#39;;

ReactDOM.render(
  &lt;Dashboard title=&quot;My Dashboard&quot; /&gt;,
  document.getElementById(&#39;view&#39;)
);
</code></pre>
<p>Note that we’re importing CSS or Sass files in the same way as Javascript files. This is unique to Webpack, and while it takes a bit of getting used to, it has its advantages - if you import only the styles relating to each component, you can be sure there’s no orphaned CSS files. Here, we only have one CSS file anyway, so it’s a non-issue.</p>
<p>If you now run <code>npm start</code>, our dashboard gets loaded and the title is displayed. With our dashboard in place, we can now implement our first widget.</p>
<h2 id="creating-the-clock-widget">Creating the clock widget</h2>
<p>Our first widget will be a simple clock. This demonstrates changing the state of the widget on an interval. First let’s write a test - save this as <code>test/components/clockwidget.js</code>:</p>
<pre><code class="lang-javascript">import TestUtils from &#39;react-addons-test-utils&#39;;
import React from &#39;react&#39;;
import {findDOMNode} from &#39;react-dom&#39;;
import ClockWidget from &#39;../../js/components/clockwidget&#39;;
import {expect} from &#39;chai&#39;;

const {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;

describe(&#39;Clock Widget&#39;, () =&gt; {
  it(&#39;renders the clock widget&#39;, () =&gt; {
    const currentTime = 1465160300530;
    const component = renderIntoDocument(
      &lt;ClockWidget time={currentTime} /&gt;
    );
    const time = findDOMNode(component.refs.time);
    expect(time).to.be.ok;
    expect(time.textContent).to.contain(&#39;Sunday&#39;);
  });
});
</code></pre>
<p>And create an empty file at <code>js/components/clockwidget.js</code>. Then we run our tests again:</p>
<pre><code class="lang-bash">$ npm test

&gt; personal-dashboard@1.0.0 test /home/matthew/Projects/personal-dashboard
&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js &#39;test/**/*.@(js|jsx)&#39;



  Clock Widget
Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).
    1) renders the clock widget

  Dashboard
    ✓ renders the dashboard


  1 passing (46ms)
  1 failing

  1) Clock Widget renders the clock widget:
     Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
      at invariant (node_modules/fbjs/lib/invariant.js:38:15)
      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)
      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)
      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)
      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)
      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)
      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)
      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)
      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)
      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)
      at Context.&lt;anonymous&gt; (clockwidget.js:12:23)



No coverage information was collected, exit without writing coverage information
npm ERR! Test failed.  See above for more details.
</code></pre>
<p>With a failing test in place, we can create our component:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import moment from &#39;moment&#39;;

export default React.createClass({
  getInitialState() {
    return {
      time: this.props.time || moment()
    };
  },
  render() {
    const time = moment(this.state.time).format(&#39;dddd, Do MMMM YYYY, h:mm:ss a&#39;);
    return (
      &lt;div className=&quot;clockwidget widget&quot;&gt;
        &lt;div className=&quot;widget-content&quot;&gt;
          &lt;h2 ref=&quot;time&quot;&gt;{time}&lt;/h2&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>Note that the component accepts a property of <code>time</code>. The <code>getInitialState()</code> method then converts <code>this.props.time</code> into <code>this.state.time</code> so that it can be displayed on render. Note we also set a default of the current time using Moment.js.</p>
<p>We also need to update the dashboard component to load this new component:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ClockWidget from &#39;./clockwidget&#39;;

export default React.createClass({
  render() {
    return (
      &lt;div className=&quot;dashboard&quot;&gt;
        &lt;h1 ref=&quot;title&quot;&gt;{this.props.title}&lt;/h1&gt;
        &lt;div className=&quot;wrapper&quot;&gt;
          &lt;ClockWidget /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>Now, if you try running <code>npm start</code> and viewing the dashboard in the browser, you will see that it displays the current time and date, but it’s not being updated. You can force the page to reload every now and then, but we can do better than that. We can set an interval in which the time will refresh. As the smallest unit we show is seconds, this interval should be 1 second.</p>
<p>Amend the clock component as follows:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import moment from &#39;moment&#39;;

export default React.createClass({
  getInitialState() {
    return {
      time: this.props.time || moment()
    };
  },
  tick() {
    this.setState({
      time: moment()
    });
  },
  componentDidMount() {
    this.interval = setInterval(this.tick, 1000);
  },
  componentWillUnmount() {
    clearInterval(this.interval);
  },
  render() {
    const time = moment(this.state.time).format(&#39;dddd, Do MMMM YYYY, h:mm:ss a&#39;);
    return (
      &lt;div className=&quot;clockwidget widget&quot;&gt;
        &lt;div className=&quot;widget-content&quot;&gt;
          &lt;h2 ref=&quot;time&quot;&gt;{time}&lt;/h2&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>When our component has mounted, we set an interval of 1,000 milliseconds, and each time it elapses we call the <code>tick()</code> method. This method sets the state to the current time, and as a result the user interface is automatically re-rendered. On unmount, we clear the interval.</p>
<p>In this case we’re just calling a single function on a set interval. In principle, the same approach can be used to populate components in other ways, such as by making an AJAX request.</p>
<h2 id="creating-an-rss-widget">Creating an RSS widget</h2>
<p>Our next widget will be a simple RSS feed reader. We’ll fetch the content with jQuery and render it using React. We’ll also reload it regularly. First, let’s create our test:</p>
<pre><code class="lang-javascript">import TestUtils from &#39;react-addons-test-utils&#39;;
import React from &#39;react&#39;;
import {findDOMNode} from &#39;react-dom&#39;;
import FeedWidget from &#39;../../js/components/feedwidget&#39;;
import {expect} from &#39;chai&#39;;

const {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;

describe(&#39;Feed Widget&#39;, () =&gt; {
  it(&#39;renders the Feed widget&#39;, () =&gt; {
    const url = &quot;http://feeds.bbci.co.uk/news/rss.xml?edition=uk&quot;
    const component = renderIntoDocument(
      &lt;FeedWidget feed={url} size={5} delay={60} /&gt;
    );
    const feed = findDOMNode(component.refs.feed);
    expect(feed).to.be.ok;
    expect(feed.textContent).to.contain(url);
  });
});
</code></pre>
<p>Our feed widget will accept an external URL as an argument, and will then poll this URL regularly to populate the feed. It also allows us to specify the <code>size</code> attribute, which denotes the number of feed items, and the <code>delay</code> attribute, which denotes the number of seconds it should wait before fetching the data again.</p>
<p>We also need to amend the dashboard component to include this widget:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ClockWidget from &#39;./clockwidget&#39;;
import FeedWidget from &#39;./feedwidget&#39;;

export default React.createClass({
  render() {
    return (
      &lt;div className=&quot;dashboard&quot;&gt;
        &lt;h1 ref=&quot;title&quot;&gt;{this.props.title}&lt;/h1&gt;
        &lt;div className=&quot;wrapper&quot;&gt;
          &lt;ClockWidget /&gt;
          &lt;FeedWidget feed=&quot;http://feeds.bbci.co.uk/news/rss.xml?edition=uk&quot; size=&quot;5&quot; delay=&quot;60&quot; /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>If we then create <code>js/components/feedwidget.js</code> and run <code>npm test</code>:</p>
<pre><code class="lang-bash">$ npm test

&gt; personal-dashboard@1.0.0 test /home/matthew/Projects/personal-dashboard
&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js &#39;test/**/*.@(js|jsx)&#39;



  Clock Widget
    ✓ renders the clock widget (92ms)

  Dashboard
Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components). Check the render method of `dashboard`.
    1) renders the dashboard

  Feed Widget
Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).
    2) renders the Feed widget


  1 passing (286ms)
  2 failing

  1) Dashboard renders the dashboard:
     Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. Check the render method of `dashboard`.
      at invariant (node_modules/fbjs/lib/invariant.js:38:15)
      at instantiateReactComponent (node_modules/react/lib/instantiateReactComponent.js:86:134)
      at instantiateChild (node_modules/react/lib/ReactChildReconciler.js:43:28)
      at node_modules/react/lib/ReactChildReconciler.js:70:16
      at traverseAllChildrenImpl (node_modules/react/lib/traverseAllChildren.js:69:5)
      at traverseAllChildrenImpl (node_modules/react/lib/traverseAllChildren.js:85:23)
      at traverseAllChildren (node_modules/react/lib/traverseAllChildren.js:164:10)
      at Object.ReactChildReconciler.instantiateChildren (node_modules/react/lib/ReactChildReconciler.js:69:7)
      at ReactDOMComponent.ReactMultiChild.Mixin._reconcilerInstantiateChildren (node_modules/react/lib/ReactMultiChild.js:194:41)
      at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (node_modules/react/lib/ReactMultiChild.js:231:27)
      at ReactDOMComponent.Mixin._createInitialChildren (node_modules/react/lib/ReactDOMComponent.js:715:32)
      at ReactDOMComponent.Mixin.mountComponent (node_modules/react/lib/ReactDOMComponent.js:531:12)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (node_modules/react/lib/ReactMultiChild.js:242:44)
      at ReactDOMComponent.Mixin._createInitialChildren (node_modules/react/lib/ReactDOMComponent.js:715:32)
      at ReactDOMComponent.Mixin.mountComponent (node_modules/react/lib/ReactDOMComponent.js:531:12)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:397:34)
      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:397:34)
      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)
      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)
      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)
      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)
      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)
      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)
      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)
      at Context.&lt;anonymous&gt; (dashboard.js:11:23)

  2) Feed Widget renders the Feed widget:
     Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
      at invariant (node_modules/fbjs/lib/invariant.js:38:15)
      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)
      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)
      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)
      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)
      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)
      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)
      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)
      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)
      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)
      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)
      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)
      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)
      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)
      at Context.&lt;anonymous&gt; (feedwidget.js:12:23)




=============================== Coverage summary ===============================
Statements   : 83.33% ( 10/12 )
Branches     : 50% ( 1/2 )
Functions    : 66.67% ( 4/6 )
Lines        : 83.33% ( 10/12 )
================================================================================
npm ERR! Test failed.  See above for more details.
</code></pre>
<p>Our test fails, so we can start work on the widget proper. Here it is:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import jQuery from &#39;jquery&#39;;
window.jQuery = jQuery;

const FeedItem = React.createClass({
  render() {
    return (
      &lt;a href={this.props.link} target=&quot;_blank&quot;&gt;
        &lt;li className=&quot;feeditem&quot;&gt;{this.props.title}&lt;/li&gt;
      &lt;/a&gt;
    );
  }
});

export default React.createClass({
  getInitialState() {
    return {
      feed: [],
      size: this.props.size || 5
    };
  },
  componentDidMount() {
    this.getFeed();
    this.interval = setInterval(this.getFeed, (this.props.delay * 1000));
  },
  componentWillUnmount() {
    clearInterval(this.interval);
  },
  getFeed() {
    let that = this;
    jQuery.ajax({
      url: this.props.feed,
      success: function (response) {
        let xml = jQuery(response);
        let feed = [];
        xml.find(&#39;item&#39;).each(function () {
          let item = {};
          item.title = jQuery(this).find(&#39;title&#39;).text();
          item.link = jQuery(this).find(&#39;guid&#39;).text();
          feed.push(item);
        });
        that.setState({
          feed: feed.slice(0,that.state.size)
        });
      }
    });
  },
  render() {
    let feedItems = this.state.feed.map(function (item, index) {
      return (
        &lt;FeedItem title={item.title} link={item.link} key={item.link}&gt;&lt;/FeedItem&gt;
      );
    });
    return (
      &lt;div className=&quot;feedwidget widget&quot;&gt;
        &lt;div className=&quot;widget-content&quot;&gt;
          &lt;h2 ref=&quot;feed&quot;&gt; Fetched from {this.props.feed}&lt;/h2&gt;
          &lt;ul&gt;
            {feedItems}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>This is by far the most complex component, so a little explanation is called for. We include jQuery as a dependency at the top of the file. Then we create a component for rendering an individual feed item, called <code>FeedItem</code>. This is very simple, consisting of an anchor tag wrapped around a list item. Note the use of the <code>const</code> keyword - in ES6 this denotes a constant.</p>
<p>Next, we move onto the feed widget proper. We set the initial state of the feed to be an empty array. Then, we define a <code>componentDidMount()</code> method that calls <code>getFeed()</code> and sets up an interval to call it again, based on the <code>delay</code> property. The <code>getFeed()</code> method fetches the URL in question and sets <code>this.state.feed</code> to an array of the most recent entries in the feed, with the size denoted by the <code>size</code> property passed through. We also clear that interval when the component is about to be umounted.</p>
<p>Note that you may have problems with the <code>Access-Control-Allow-Origin</code> HTTP header. It’s possible to disable this in your web browser, so if you want to run this as a dashboard you’ll probably need to do so. On Chrome there’s a useful <a href="https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiw9Mm4r8TOAhVNOMAKHUicCF4QFggcMAA&amp;url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fallow-control-allow-origi%2Fnlfbmbojpeacfghkpbjhddihlkkiljbi%3Fhl%3Den&amp;usg=AFQjCNHSUFqc6ylxfxfbWzmmFJ6L5QUvyg&amp;sig2=fJaf_HKgY8XDsd-JeY_PXg&amp;bvm=bv.129422649,d.d24">plugin</a> that allows you to disable this when needed.</p>
<p>Because our <code>FeedWidget</code> has been created in a generic manner, we can then include multiple feed widgets easily, as in this example:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ClockWidget from &#39;./clockwidget&#39;;
import FeedWidget from &#39;./feedwidget&#39;;

export default React.createClass({
  render() {
    return (
      &lt;div className=&quot;dashboard&quot;&gt;
        &lt;h1 ref=&quot;title&quot;&gt;{this.props.title}&lt;/h1&gt;
        &lt;div className=&quot;wrapper&quot;&gt;
          &lt;ClockWidget /&gt;
          &lt;FeedWidget feed=&quot;http://feeds.bbci.co.uk/news/rss.xml?edition=uk&quot; size=&quot;5&quot; delay=&quot;60&quot; /&gt;
          &lt;FeedWidget feed=&quot;https://www.sitepoint.com/feed/&quot; size=&quot;10&quot; delay=&quot;120&quot; /&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});
</code></pre>
<p>We also need to style our widgets. Save this as <code>scss/_colours.scss</code>:</p>
<pre><code class="lang-scss">$bgColour: #151515;
$txtColour: #cfcfcf;
$clockBg: #fa8c00;
$clockHoverBg: #0099ff;
$clockTxt: #fff;
$feedBg: #0099ff;
$feedTxt: #fff;
$feedHoverBg: #fa8c00;
</code></pre>
<p>And this as <code>scss/style.scss</code>:</p>
<pre><code class="lang-scss">@import &#39;colours&#39;;

html, body {
    background-color: $bgColour;
    color: $txtColour;
    font-family: Arial, Helvetica, sans-serif;
}

div.dashboard {
    padding: 10px;
}

div.wrapper {
    -moz-column-count: 4;
    -webkit-column-count: 4;
    column-count: 4;
    -moz-column-gap: 1em;
    -webkit-column-gap: 1em;
    column-gap: 1em;
}

div.widget {
    display: inline-block;
    margin: 0 0 1em;
    width: 100%;
    min-height: 100px;
    margin: 5px;
    opacity: 0.8;
    transition: opacity 1s;

    &amp;:hover {
        opacity: 1;
    }

    h2, h4 {
        padding: 20px;
    }

    div.widget-content {
        width: 100%;
    }
}

div.clockwidget {
    background-color: $clockBg;
    color: $clockTxt;
}

div.feedwidget {
    background-color: $feedBg;
    color: $feedTxt;

    h2 {
        word-wrap: break-word;
    }

    ul {
        margin-left: 0;
        padding-left: 20px;

        a {
            text-decoration: none;
            padding: 5px;

            li {
                list-style-type: none;
                font-weight: bold;
                color: $feedTxt;
            }
        }
    }
}
</code></pre>
<p>The end result should look something like this:</p>
<p><img src="/static/images/dashboard.png" alt="The personal dashboard in action"></p>
<p>With that done, feel free to add whatever other feeds you want to include.</p>
<h2 id="deploying-our-dashboard">Deploying our dashboard</h2>
<p>The final step is deploying our dashboard to our Raspberry Pi or other device. Run the following command to generate the Javascript:</p>
<pre><code class="lang-bash">$ npm run build
</code></pre>
<p>This will create <code>static/bundle.js</code>. You can then copy that file over to your web server with <code>index.html</code> and place both files in the web root. I recommend using Nginx if you’re using a Raspberry Pi as it’s faster and simpler for static content. If you’re likely to make a lot of changes you might want to create a command in the <code>scripts</code> section of your <code>package.json</code> to deploy the files more easily.</p>
<p>These basic widgets should be enough to get you started. You should be able to use the feed widget with virtually any RSS feed, and you should be able to use a similar approach to poll third-party APIs, although you might need to authenticate in some way (if you do, you won’t want to expose your authentication details, so ensure that nobody from outside the network can view your application). I’ll leave it to you to see what kind of interesting widgets you come up with for your own dashboard, but some ideas to get you started include:</p>
<ul>
<li>Public transport schedules/Traffic issues</li>
<li>Weather reports</li>
<li>Shopping lists/Todo lists, with HTML5 local storage used to persist them</li>
<li>Galleries of recent photos on social networks</li>
<li>Status of servers on cloud hosting providers</li>
</ul>
<p>With a little thought, you can probably come up with a few more than that! I’ve created a <a href="https://github.com/matthewbdaly/personal-dashboard">Github repository with the source code</a> so you can check your own implementation against it.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My static site generator post on Sitepoint]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/">
        </link>
        <updated>2015-05-03T18:55:30Z</updated>
        <summary type="html"><![CDATA[<p>I wrote an article for Sitepoint recently about creating a static site generator as a Grunt plugin, similar to the one for this site. You can find it <a href="http://www.sitepoint.com/building-static-site-generator-grunt-plugin/">here</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I added search to my site with Lunr.js]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/">
        </link>
        <updated>2015-04-18T14:05:41Z</updated>
        <summary type="html"><![CDATA[<p>As I mentioned a while back, I recently switched the search on my site from Google’s site-specific search to <a href="http://lunrjs.com/">Lunr.js</a>. Since my site is built with a static site generator, I can’t implement search using database queries, and I was keen to have an integrated search method that would be fast and not require server-side scripting, and Lunr.js seemed to fit the bill.</p>
<p>The first task in implementing it was to generate the index. As I wrote the Grunt task that generates the blog, I amended that task to generate an index at the same time as I generated the posts. I installed Lunr.js with the following command:</p>
<pre><code class="lang-bash">npm install lunr --save
</code></pre>
<p>I then imported it in the task, and set up the field names:</p>
<pre><code class="lang-javascript">    var lunr = require(&#39;lunr&#39;);

    searchIndex = lunr(function () {
        this.field(&#39;title&#39;, { boost: 10 });
        this.field(&#39;body&#39;);
        this.ref(&#39;href&#39;);
    });
</code></pre>
<p>This defined fields for the title, body, and hyperlink, and set the hyperlink as the reference. The variable <code>searchIndex</code> represents the Lunr index.</p>
<p>Next, I looped through the posts, and passed the appropriate details to be added to the index:</p>
<pre><code class="lang-javascript">    for (post in post_items) {
        var doc = {
            &#39;title&#39;: post_items[post].meta.title,
            &#39;body&#39;: post_items[post].post.rawcontent,
            &#39;href&#39;: post_items[post].path
        };
        store[doc.href] = {
            &#39;title&#39;: doc.title
        };
        searchIndex.add(doc);
    }
</code></pre>
<p>At this point, <code>post_items</code> represents an array of objects, with each object representing a blog post. Note that the <code>body</code> field is set to the value of the item’s attribute <code>post.rawcontent</code>, which represents the raw Markdown rather than the compiled HTML.</p>
<p>I then store the title in the <code>store</code> object, so that it can be accessed using the <code>href</code> field as a key.</p>
<p>I then do the same thing when generating the pages:</p>
<pre><code class="lang-javascript">    // Add them to the index
    var doc = {
        &#39;title&#39;: data.meta.title,
        &#39;body&#39;: data.post.rawcontent,
        &#39;href&#39;: permalink + &#39;/&#39;
    };
    store[doc.href] = {
        &#39;title&#39;: data.meta.title
    };
    searchIndex.add(doc);
</code></pre>
<p>Note that this is already inside the loop that generates the pages, so I don’t include that.</p>
<p>We then write the index to a file:</p>
<pre><code class="lang-javascript">    // Write index
    grunt.file.write(options.www.dest + &#39;/lunr.json&#39;, JSON.stringify({
        index: searchIndex.toJSON(),
        store: store
    }));
</code></pre>
<p>That takes care of generating our index, but we need to implement some client-side code to handle the search. We need to include Lunr.js on the client side as well, (I recommend using Bower to do so), alongside jQuery. If you include both, the following code should do the trick:</p>
<pre><code class="lang-javascript">$(document).ready(function () {
    &#39;use strict&#39;;

    // Set up search
    var index, store;
    $.getJSON(&#39;/lunr.json&#39;, function (response) {

        // Create index
        index = lunr.Index.load(response.index);

        // Create store
        store = response.store;

        // Handle search
        $(&#39;input#search&#39;).on(&#39;keyup&#39;, function () {
            // Get query
            var query = $(this).val();

            // Search for it
            var result = index.search(query);

            // Output it
            var resultdiv = $(&#39;ul.searchresults&#39;);
            if (result.length === 0) {
                // Hide results
                resultdiv.hide();
            } else {
                // Show results
                resultdiv.empty();
                for (var item in result) {
                    var ref = result[item].ref;
                    var searchitem = &#39;&lt;li&gt;&lt;a href=&quot;&#39; + ref + &#39;&quot;&gt;&#39; + store[ref].title + &#39;&lt;/a&gt;&lt;/li&gt;&#39;;
                    resultdiv.append(searchitem);
                }
                resultdiv.show();
            }
        });
    });
}); 
</code></pre>
<p>This should be easy to understand. On load, we fetch and parse the <code>lunr.json</code> file from the server, and load the index. We then set up an event handler for the <code>keyup</code> event on an input with the ID of <code>search</code>. We get the value of the input, and query our index, and we loop through our results and display them.</p>
<p>I was pleased with how straightforward it was to implement search with Lunr.js, and it works well. It’s also a lot faster than any server-side solution since the index is generated during the build process, and is loaded with the rest of the site, so the only factor in the speed of the response is how quick your browser executes JavaScript. You could probably also use it with a Node.js application by generating the index dynamically, although you’d probably want to cache it to some extent.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switching to my own static site generator]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/">
        </link>
        <updated>2015-02-15T18:11:22Z</updated>
        <summary type="html"><![CDATA[<p>As you may have seen if you’re visiting the site, I’ve finally switched over from Octopress to the static site generator I’ve been working on for the last few months. Apologies if you’re seeing lots of old posts in your RSS reader - there must have been an inconsistency between the RSS feed for this and that for Octopress.</p>
<p>I actually still really like Octopress, however I’m not and have never been a big fan of Ruby. Python and JavaScript are my two main go-to languages (although I do a lot of work professionally with PHP as well), so I wanted a solution in one of those languages, but I wanted something that was very similar to Octopress in every other way. I also wanted the facility to easily concatenate and minify static files as part of my deployment process to make the whole thing as lean as possible, so it made sense to build it as a Grunt plugin and create a Yeoman generator for building the boilerplate for the blog. Also, it’s always easier to work with your own code, and so using templates I wrote myself should make it quicker and easier for me to customise the blog how I want.</p>
<p>While deploying it did throw up a few errors that I’ve had to fix, it’s gone fairly smoothly and I’m pretty happy with it, although I will no doubt spend some time tweaking it over the next few weeks. It’s built with GitHub Pages in mind, but the fact that it’s built using Grunt should make it straightforward to switch to a different deployment method - during development I’ve actually used <code>grunt-rsync</code> to deploy to my Raspberry Pi and <code>grunt-bitbucket-pages</code> to deploy to Bitbucket in order to test it and both work absolutely fine. There are also Grunt plugins for deploying via FTP around, so if you want to check it out, then as long as you have at least some familiarity with Grunt you should be able to deploy it however you wish. The generator is meant to be only a starting point for your own site, so by all means check it out, tinker with the styling and templates, and make it your own. I will be very happy indeed if I see someone else using it in the wild.</p>
<p>Static site generators are generally somewhat harder to use than a CMS like WordPress, but they have many advantages:</p>
<ul>
<li>Lighter - you can quite easily host a static site with just Nginx on a Raspberry Pi</li>
<li>Faster - with no database or actual dynamic content on the server, just flat HTML, your site will be far quicker to load than a WordPress blog</li>
<li>Cheaper to host</li>
<li>Easy to deploy - if your workflow is very command-line based like mine is, it’s very quick and easy to get blogging</li>
</ul>
<p>If you can get away with using a static site generator rather than a database-driven blogging system, then it’s well worth doing so.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My first Grunt plugin]]></title>
        <id>https://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</id>
        <link href="https://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/">
        </link>
        <updated>2014-12-28T17:04:41Z</updated>
        <summary type="html"><![CDATA[<p>A while back, I mentioned that I’d written a Yeoman generator for creating a flat HTML blog, called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>. For this, I’d used the first Grunt plugin I could find for the purpose, which was <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a>. This worked, but I wasn’t really very happy with it.</p>
<p>The ideal Grunt plugin I had in mind was as follows:</p>
<ul>
<li>Used Handlebars for templating</li>
<li>Generated posts from Markdown files</li>
<li>Saved files in named folders with a single <code>index.html</code> file in each one (like Octopress does) so that no file extension is visible on a page</li>
<li>Generated index pages, rather than just showing the latest post as the first page</li>
</ul>
<p>Unfortunately, <code>grunt-markdown-blog</code> only fulfilled the second criteria, so it was never going to be something I stuck with long-term. However, I couldn’t find anything else that would do the trick, so it looked like my only option was to write a suitable plugin myself.</p>
<p>I started a new Git repository a while back, but didn’t make much progress. Then, on Christmas Eve, I suddenly got the urge to start working on this again, and in a matter of a few hours I’d gotten a working Grunt plugin that ticked all of these boxes. I had to delay getting it integrated into the generator due to Christmas day, and then an unfortunate bout of flu, but I’ve now published it as <a href="https://github.com/matthewbdaly/grunt-blogbuilder">grunt-blogbuilder</a> and amended the Yeoman generator to use it instead.</p>
<p>I’m really pleased with the outcome, and while I’m still not yet ready to migrate over to it from Octopress, it’s a massive step forward, and building a Grunt plugin has been an interesting experience.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing generator-simple-static-blog]]></title>
        <id>https://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</id>
        <link href="https://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/">
        </link>
        <updated>2014-10-05T18:56:46Z</updated>
        <summary type="html"><![CDATA[<p>I’m a big fan of static site generators. I ditched WordPress for Octopress over two years ago because it was free to host on GitHub Pages and much faster, had much better syntax highlighting, and I liked being able to write posts in Vim, and I’ve never looked back since.</p>
<p>That said, Octopress is written in Ruby, a language I’ve never been that keen on. Ideally I’d prefer to use Python or JavaScript, but none of the solutions I’ve found have been to my liking. Recently I’ve been using Grunt and Yeoman to some extent, and I’ve wondered about the idea of creating a Yeoman generator to build a static blogging engine. After discovering <code>grunt-markdown-blog</code>, I took the plunge and have built a simple blog generator called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>.</p>
<p>I’ve published it to NPM, so feel free to check it out. It includes code highlighting with the Zenburn colour scheme by default (although highlight.js includes many other themes, so just switch to another one if you want), and it should be easy to edit the templates. I’ve also included the ability to deploy automatically to GitHub Pages using Grunt.</p>
<p>I don’t anticipate moving over to this from Octopress for the foreseeable future, but it’s been an interesting project for the weekend.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My first Yeoman generator]]></title>
        <id>https://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/</id>
        <link href="https://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/">
        </link>
        <updated>2014-01-25T11:38:40Z</updated>
        <summary type="html"><![CDATA[<p>At work I use the <a href="http://www.getskeleton.com/">Skeleton boilerplate</a> a lot - my boss, who handles most of the design work, likes it and generally uses it for his designs. I’ve also been using <a href="http://gruntjs.com/">Grunt</a> a lot lately, so it was inevitable that I’d probably start to look for a <a href="http://yeoman.io/">Yeoman</a> generator for working with it.</p>
<p>There was an existing Yeoman generator for Skeleton, but it didn’t really do what I wanted. I wanted something that:</p>
<ul>
<li>Included jQuery and Modernizr</li>
<li>Automatically concatenates and minifies all the JavaScript and CSS</li>
<li>Will automatically rebuild on changes</li>
<li>Includes LiveReload and a development server</li>
<li>Includes automatic deployment via FTP</li>
</ul>
<p>After looking through the documentation for Yeoman, it was actually quick and easy to throw together my own generator and put it up. It’s available <a href="https://npmjs.org/package/generator-skellington">here</a>, and the GitHub repository is <a href="https://github.com/matthewbdaly/generator-skellington">here</a>.</p>
<p>Future plans for it include:</p>
<ul>
<li>Adding auto-prefixing for CSS</li>
<li>Removing redundant CSS rules automatically</li>
<li>Possibly, alternate deployment methods</li>
</ul>
<p>Frustratingly, NPM seems to be playing up at present - it’s not picking up the README file, and the Yeoman site isn’t pulling it in. Any idea why, anyone?</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[First steps with Node.js]]></title>
        <id>https://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/</id>
        <link href="https://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/">
        </link>
        <updated>2013-07-28T18:20:00Z</updated>
        <summary type="html"><![CDATA[<p>The idea of building an entire web app using nothing but JavaScript has always appealed to me. Despite its undoubted flaws, JavaScript is a powerful language, and chopping and changing between several different programming languages is never great. So I’ve always wanted to check out Node.js.</p>
<p>Lately I’ve been tinkering with Backbone.js a lot. As a web and mobile app developer, I’ve seen the benefit of server-side MVC frameworks firsthand, and I’ve also seen how bad a PhoneGap app can get without this kind of structure, so I’ve been very eager for a while to get my head around a JavaScript framework. The first one I was able to really grok was Knockout.js, thanks to its wonderful tutorial, but Backbone.js seemed to have better mindshare, and support for routing, so I knuckled down and used it for a large personal project that is still under wraps, but I hope to make available once complete. Using Backbone has made my client-side code far more organised, and I plan to use it a lot in future.</p>
<p>I’ve also wanted to get my head around a couple of the NoSQL databases. While the relational model is very often applicable, there are plenty of use cases where it isn’t the best choice, especially for simple data, and MongoDB seemed to be an interesting alternative. So, I decided to have a tinker around with Node.js and Backbone today, and wound up building <a href="https://github.com/matthewbdaly/rabbitrabbitrabbit">a real-time guestbook application</a>. Let me know what you think, but please be gentle - this is my first ever Node.js or MongoDB application.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[My first jQuery plugin]]></title>
        <id>https://matthewdaly.co.uk/blog/2013/04/21/my-first-jquery-plugin/</id>
        <link href="https://matthewdaly.co.uk/blog/2013/04/21/my-first-jquery-plugin/">
        </link>
        <updated>2013-04-21T21:06:00Z</updated>
        <summary type="html"><![CDATA[<p>In my day job, I recently finished <a href="https://www.pagepooch.com/">PagePooch</a>, a tool for monitoring web pages for changes in content or prices. It’s a project that I’m immensely proud of, because it was my first big and largely solo project as a developer.</p>
<p>During the development of this, I initially created the user interface with jQuery Mobile, but later on added a desktop interface as well. During development of the desktop interface, I needed to recreate the functionality of the filter available for listviews in jQuery Mobile, and wound up creating a plugin for jQuery to do so.</p>
<p>I recently got permission to open-source this, as I figured the functionality was trivial enough that we couldn’t reasonably sell it, but by making it freely available, we’d maybe get some goodwill, and if we were really lucky, a few bugfixes and/or improvements.</p>
<p>It’s <a href="http://plugins.jquery.com/listfilter/">now available</a> via the jQuery plugin registry. Please let me know what you think, and feel free to fork it and hack on it as you see fit.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Falling back to local copies of jQuery and jQuery Mobile]]></title>
        <id>https://matthewdaly.co.uk/blog/2012/08/13/falling-back-to-local-copies-of-jquery-and-jquery-mobile/</id>
        <link href="https://matthewdaly.co.uk/blog/2012/08/13/falling-back-to-local-copies-of-jquery-and-jquery-mobile/">
        </link>
        <updated>2012-08-13T18:54:00Z</updated>
        <summary type="html"><![CDATA[<p>I use jQuery Mobile a lot at work, and it’s brilliant. For quickly knocking together a high-quality user interface that works well on mobile devices, it’s unbeatable.</p>
<p>Like many web developers, I favour using a CDN-hosted version of both jQuery and jQuery Mobile, because it makes it more likely that the user won’t have to download the appropriate files as their web browser has already cached them. However, by doing this you run the risk of your site being negatively affected if the CDN provider goes down for any length of time. So, I think it’s a good idea to have a fallback for both jQuery and jQuery Mobile.</p>
<p>I spent a while looking and finally managed to come up with a solution that works well, and borrows heavily from <a href="http://timjames.me/jquery-and-jquery-ui-fallbacks">a similar solution for jQuery UI by Tim James</a>. First of all, load the stylesheets and JavaScript files as usual:</p>
<pre><code class="lang-html">&lt;link rel=&quot;stylesheet&quot; href=&quot;http://code.jquery.com/mobile/1.1.1/jquery.mobile.structure-1.1.1.min.css&quot; /&gt;
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Below this, place the following inside another set of script tags:</p>
<pre><code class="lang-javascript">if (typeof jQuery == &#39;undefined&#39;)
{
    document.write(unescape(&quot;%3Cscript src=&#39;http://path-to-jquery.min.js&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;));
}
</code></pre>
<p> If jQuery is not defined, this will write another set of script tags that will load the local copy of jQuery. Now, inside a second set of script tags, place the following code:</p>
<pre><code class="lang-javascript">if(typeof $.mobile == &#39;undefined&#39;)
{
    document.write(unescape(&quot;%3Cscript src=&#39;http://path-to-jquery-mobile.min.js&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;));
}

$(function() {
    if($(&#39;.ui-helper-hidden:first&#39;).is(&#39;:visible&#39;) === true){
        $(&#39;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://path-to-jquery-mobile-structure.min.css&quot; /&gt;&#39;).appendTo(&#39;head&#39;);
    }
});
</code></pre>
<p>This won’t work if it’s placed in the same set of script tags as the code above, because it requires that jQuery be working already. The first part works similarly to the jQuery fallback - if jQuery Mobile is not defined, it writes a new script tag. The second relies on an element in the DOM with a class of ui-helper-hidden, which jQuery Mobile would hide by default if it were loaded. If it is visible, the jQuery Mobile structure CSS file has not been loaded and so a link to the local copy of the stylesheet is created.  Of course, this means you have to create this element, so add the following code to the very top of the body, directly under the opening body tag:</p>
<pre><code class="lang-handlebars">&lt;div class=&#39;ui-helper-hidden&#39;&gt;&lt;/div&gt;
</code></pre>
<p>If you download copies of the appropriate files and set the paths to them correctly, you should now be able to enjoy all the advantages of using a CDN for hosting jQuery and jQuery Mobile while also having the security of knowing that if the CDN goes down, your application will still work fine. Exactly the same approach will work with jQuery UI as well.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Moving on to Perl]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/06/23/moving-on-to-perl/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/06/23/moving-on-to-perl/">
        </link>
        <updated>2010-06-23T12:41:29Z</updated>
        <summary type="html"><![CDATA[<p>I’m glad to report that today I passed my CIW JavaScript Fundamentals exam with 98%! I was a bit concerned about this as some of the questions on the practice exam were downright wrong (as in the supposedly correct answers were in fact wrong), but thankfully this turned out not to be the case for the actual exam.</p>
<p>Next step is learning Perl. I’m particularly interested to learn more about Perl because it’s something you can get a lot of use out of - it can be used for regular expressions, general Unix scripting and web development, and I’m interested to see how it compares to Python.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[PassCrunch]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/05/03/passcrunch/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/05/03/passcrunch/">
        </link>
        <updated>2010-05-03T17:23:39Z</updated>
        <summary type="html"><![CDATA[<p>As an exercise to teach myself the basics of regular expressions in JavaScript I decided to implement a small function I called passCrunch to check how secure a password is. I implemented it based on the following principles:</p>
<ul>
<li>First of all, check for a list of well-known easy to break passwords to foil a dictionary attack, and reject it if it’s there.</li>
</ul>
<ul>
<li>Then check that it’s at least 8 characters, and reject it if it’s not.</li>
</ul>
<ul>
<li>Then implement a counter to measure how secure it is by various checks.</li>
</ul>
<ul>
<li>Then add to the rating if it’s more than 12 characters.</li>
</ul>
<ul>
<li>Add to the rating if it contains lowercase letters.</li>
</ul>
<ul>
<li>Add to the rating if it contains uppercase letters.</li>
</ul>
<ul>
<li>Add to the rating if it contains numbers.</li>
</ul>
<ul>
<li>Add to the rating if it contains nonalphanumeric characters.</li>
</ul>
<ul>
<li>Finally, convert the result to a percentage score and return it as an integer.</li>
</ul>
<p>The finished article’s available <a href="http://dl.dropbox.com/u/5031/passcrunch.zip">here</a> as a .zip file if you’d like to use it, or just take a look at the code. Be warned, it’s quite long due to the fact that the list of insecure passwords I used had in excess of 3,000 entries in it! It includes a very simple HTML form which will allow you to submit a function and will return a score for it via an alert() dialogue. Feel free to use it if you wish!</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning JavaScript]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/05/03/learning-javascript/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/05/03/learning-javascript/">
        </link>
        <updated>2010-05-03T16:29:30Z</updated>
        <summary type="html"><![CDATA[<p>Having recently completed the Database Design Methodology part of my course, I’ve now moved onto the next part, which is JavaScript Fundamentals. It’s quite an interesting topic since unlike HTML and CSS, JavaScript is a proper programming language (OK, technically it’s a scripting language, but it’s not merely a markup language like HTML), so I’m quite enjoying it.</p>
<p>However, I’m a little disappointed with the quality of the training materials for the course (CIW JavaScript Fundamentals). It was published in 2003, and recommends the use of Windows ME or Windows 2000, and Internet Explorer 5.5 or later, or Netscape Navigator 4.0 or later. Now, IE5.5 was released in July 2000, making it a few months shy of a decade old, a staggering length of time for the web. Netscape Navigator is even older, dating back to June 1997! Of those two browsers, IE5.5 now has a miniscule market share, and Netscape Navigator isn’t actively developed at all anymore (although Mozilla Firefox is built off the same code base).</p>
<p>Given that in the last few years Internet Explorer has been rapidly losing market share, and developers are doing things with JavaScript that we couldn’t dream of five years ago, you’d hope the course would cover the more interesting and powerful things we can do with JavaScript today, such as AJAX, Greasemonkey scripts or third-party libraries such as jQuery. Instead, I’m stuck with form validation (OK, fair enough, need to learn that), manipulating frames (seriously, frames? When was the last time you even saw a framed website? They’re ugly and a pain to use) and pop-up windows.</p>
<p>Personally I’m more than willing to take up the slack myself by studying independently, but I’m sure there are plenty of people who wouldn’t do so until they reach the workplace. Admittedly, the fundamentals of the language haven’t changed, but there’s plenty of stuff that’s of very little use today that I’ve had to learn when I could be learning something more useful.</p>
<p>So surely these texts are long overdue for a refresh? I would hope that a newer release would cover at least some of the following:</p>
<ul>
<li><p>At least one third-party JavaScript library, such as script.aculo.us or jQuery.</p>
</li>
<li><p>Writing Greasemonkey scripts (which is a very good way of learning more about JavaScript).</p>
</li>
<li><p>Creating a simple AJAX application.</p>
</li>
<li><p>Using a JavaScript debugger such as Firebug.</p>
</li>
</ul>
<p>I really don’t think there’s any excuse for the training materials being that outdated when some of their other CIW training materials are much more current.</p>
]]></summary>
    </entry>
</feed>
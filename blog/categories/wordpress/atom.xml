<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>wordpress | Matthew Daly&apos;s Blog</title>
    <updated>2019-10-27T22:22:37Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/wordpress/"/>
    <subtitle>wordpress | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2019</rights>
    <entry>
        <title type="html"><![CDATA[Storing Wordpress configuration in environment variables]]></title>
        <id>https://matthewdaly.co.uk/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/</id>
        <link href="https://matthewdaly.co.uk/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/">
        </link>
        <updated>2019-09-22T18:00:34Z</updated>
        <summary type="html"><![CDATA[<p>Wordpress configuration can be a serious pain in the proverbial. Hard-coding configuration details in a PHP file is not a terribly safe way of storing the details for your database, as if the server is misconfigured they can be exposed. In addition, it can be a chore to copy and populate the <code>wp-config.php</code> file to a new deploy.</p>
<p>A fundamental principle of <a href="https://12factor.net/">The Twelve-Factor App</a> is that config should be stored in the environment. While Wordpress does predate this, there’s no reason why we can’t abide by this. Storing Wordpress configuration in environment variables rather than the <code>wp-config.php</code> file has the following advantages:</p>
<ul>
<li>It’s more secure since the config is not stored in a file in the web root, but in the web server config</li>
<li>It makes managing the <code>wp-config.php</code> file less of a chore - it can be safely committed to version control, and you won’t need to change it to match your local configuration, running the risk of accidentally committing and pushing to production with broken config</li>
<li>Deployment to new servers is simpler because there’s no need to update the <code>wp-config.php</code></li>
<li>The risk of neglecting to change the database details and accidentally messing up the production database when working locally is virtually eliminated</li>
</ul>
<p>I’ve seen solutions for this that use DotEnv, but you don’t actually need to install that to be able to use environment variables with Wordpress. In fact, in some way it’s better if you don’t as too many developers use <code>.env</code> files in production. PHP natively has the ability to get data from environment variables using the <code>getenv()</code> function, so it’s easier to use that than to pull in a third-party library.</p>
<p>Here’s an abbreviated example of a <code>wp-config.php</code> file that’s been updated to pull the settings from environment variables:</p>
<pre><code class="lang-php">&lt;?php
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( &#39;DB_NAME&#39;, getenv(&#39;DB_NAME&#39;) );

/** MySQL database username */
define( &#39;DB_USER&#39;, getenv(&#39;DB_USER&#39;) );

/** MySQL database password */
define( &#39;DB_PASSWORD&#39;, getenv(&#39;DB_PASSWORD&#39;) );

/** MySQL hostname */
define( &#39;DB_HOST&#39;, getenv(&#39;DB_HOST&#39;) );

/** Database Charset to use in creating database tables. */
define( &#39;DB_CHARSET&#39;, &#39;utf8&#39; );

/** The Database Collate type. Don&#39;t change this if in doubt. */
define( &#39;DB_COLLATE&#39;, &#39;&#39; );

define( &#39;AUTH_KEY&#39;,         getenv(&#39;AUTH_KEY&#39;) );
define( &#39;SECURE_AUTH_KEY&#39;,  getenv(&#39;SECURE_AUTH_KEY&#39;) );
define( &#39;LOGGED_IN_KEY&#39;,    getenv(&#39;LOGGED_IN_KEY&#39;) );
define( &#39;NONCE_KEY&#39;,        getenv(&#39;NONCE_KEY&#39;) );
define( &#39;AUTH_SALT&#39;,        getenv(&#39;AUTH_SALT&#39;) );
define( &#39;SECURE_AUTH_SALT&#39;, getenv(&#39;SECURE_AUTH_SALT&#39;) );
define( &#39;LOGGED_IN_SALT&#39;,   getenv(&#39;LOGGED_IN_SALT&#39;) );
define( &#39;NONCE_SALT&#39;,       getenv(&#39;NONCE_SALT&#39;) );

$table_prefix = &#39;wp_&#39;;

define( &#39;WP_DEBUG&#39;, getenv(&#39;WP_DEBUG&#39;) );

/* That&#39;s all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( &#39;ABSPATH&#39; ) ) {
    define( &#39;ABSPATH&#39;, dirname( __FILE__ ) . &#39;/&#39; );
}

/** Sets up WordPress vars and included files. */
require_once( ABSPATH . &#39;wp-settings.php&#39; );
</code></pre>
<p>If you’re using Lando for local development, you will need to specify a file to include that contains the environment variables you wish to set, as in this example:</p>
<pre><code class="lang-yaml">name: wordpress
recipe: wordpress
config:
  webroot: .
env_file:
  - .env
</code></pre>
<p>This filename can be any arbitrarily chosen name. Then, you define the values for those variables in the same way you normally would in a <code>.env</code> file. Here’s an abbreviated example that excludes the crypto settings (though those should be placed here too):</p>
<pre><code class="lang-env">DB_NAME=wordpress
DB_USER=wordpress
DB_PASSWORD=wordpress
DB_HOST=database
WP_DEBUG=true
...
</code></pre>
<p>This will work fine during local development, but in production, or if you’re using something like Vagrant for local development, you’ll want to set the environment variables in the server configuration. For Apache, this is best set in the Virtualhost configuration, although you should be able to set it in an <code>.htaccess</code> file if all else fails. You need to use the <code>SetEnv</code> directive, as in this example:</p>
<pre><code class="lang-apache">SetEnv DB_NAME wordpress
SetEnv DB_USER wordpress
SetEnv DB_PASSWORD wordpress
SetEnv DB_HOST database
SetEnv WP_DEBUG true
</code></pre>
<p>For Nginx, assuming you’re using FastCGI, you need to set it in the server configuration for that site using the <code>fastcgi_param</code> directive, as shown below:</p>
<pre><code class="lang-nginx">fastcgi_param DB_NAME wordpress;
fastcgi_param DB_USER wordpress;
fastcgi_param DB_PASSWORD wordpress;
fastcgi_param DB_HOST database;
fastcgi_param WP_DEBUG true;
</code></pre>
<p>Since Wordpress doesn’t ship with any kind of command-line task runner, this should be sufficient for most installs. However, if you’re using WP CLI, that will break it as it won’t have access to environment variables set by Apache or Nginx, so you’ll also need to set them for the user that runs WP CLI by adding them to their Bash config in the usual way.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Making Wordpress less shit]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/04/12/making-wordpress-less-shit/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/04/12/making-wordpress-less-shit/">
        </link>
        <updated>2018-04-12T22:57:05Z</updated>
        <summary type="html"><![CDATA[<p>I’m not going to sugarcoat it. As a developer, I think Wordpress is shit, and I’m not alone in that opinion. Its code base dates from a time before many of the developments of the last few years that have hugely improved PHP as a language, as well as the surrounding ecosystem such as Composer and PSR-FIG, and it’s likely it couldn’t adopt many of those without making backward-incompatible changes that would affect its own ecosystem of plugins and themes. It actively forces you to write code that is far less elegant and efficient than what you might write with a proper framework such as Laravel, and the quality of many of the plugins and themes around is dire.</p>
<p>Unfortunately, it’s also difficult to avoid. Over a quarter of all websites run Wordpress, and most developers will have to work with it at some point in their careers. However, there are ways that you can improve your experience when working with Wordpress somewhat. In this post I’m going to share some methods you can use to make Wordpress less painful to use.</p>
<p>This isn’t a post about the obvious things like “Use the most recent version of PHP you can”, “Use SSL”, “Install this plugin”, “Use Vagrant/Lando” etc - I’m assuming you already know stuff like that for bog standard Wordpress development. Nor is it about actually developing Wordpress plugins or themes. Instead, this post is about bringing your Wordpress development workflow more into line with how you develop with MVC frameworks like Laravel, so that you have a better experience working with and maintaining Wordpress sites. We can’t solve the fundamental issues with Wordpress, but we can take some steps to make it easier to work with.</p>
<h2 id="use-bedrock">Use Bedrock</h2>
<p><a href="https://roots.io/bedrock/">Bedrock</a> is still Wordpress, but reorganized so that:</p>
<ul>
<li>The Wordpress core, plugins and themes can be managed with Composer for easier updates</li>
<li>The configuration can be done with a <code>.env</code> file that can be kept out of version control, rather than putting it in <code>wp-config.php</code></li>
<li>The web root is isolated to limit access to the files</li>
</ul>
<p>In short, it optimizes Wordpress for how modern developers work. Arguably that’s at the expense of site owners, since it makes it harder for non-developers to manage the site, however for any Wordpress site that’s sufficiently complex to need development work done that’s a trade-off worth making. I’ve been involved in projects where Wordpress got used alongside an MVC framework for some custom functionality, and in my experience it caused a world of problems when updating plugins and themes because version control would get out of sync, so moving that to use Composer to manage them instead would have been a huge win.</p>
<p>Using Bedrock means that if you have a parent theme you use all the time, or custom plugins of your own, you can install them using Composer by adding the Git repositories to your <code>composer.json</code>, making it easier to re-use functionality you’ve already developed. It also makes recovery easier in the event of the site being compromised, because the files outside the vendor directory will be in version control, and you can delete the vendor directory and re-run <code>composer install</code> to replace the rest. By comparison, with a regular Wordpress install, if it’s compromised you can’t always be certain you’ve got all of the files that have been changed. Also, keeping Wordpress up to date becomes a simple matter of running <code>composer update</code> regularly, verifying it hasn’t broken anything, and then deploying it to production.</p>
<p>Bedrock uses <a href="https://wpackagist.org/">WPackagist</a>, which regularly scans the Wordpress Subversion repository for plugins and themes, so at least for plugins and themes published on the Wordpress site, it’s easy to install them. Paid plugins may be more difficult - I’d be inclined to put those in a private Git repository and install them from there, although I’d be interested to know if anyone else uses another method for that.</p>
<h2 id="if-you-can-t-use-bedrock-use-wp-cli">If you can’t use Bedrock, use WP CLI</h2>
<p>If for any reason you can’t use Bedrock for a site, then have a look at <a href="https://wp-cli.org/">WP CLI</a>. On the server, you can use it to install and manage both plugins and themes, as well as the Wordpress core.</p>
<p>It’s arguably even more useful locally, as it can be used to generate scaffolding for plugins, themes (including child themes based on an existing theme), and components such as custom post types or taxonomies. In short, if you do any non-trivial amount of development with Wordpress you’ll probably find a use for it. Even if you can use Bedrock, you’re likely to find WP CLI handy for the scaffolding.</p>
<h2 id="upgrade-the-password-encryption">Upgrade the password encryption</h2>
<p>I said this wouldn’t be about using a particular plugin, but this one is too important. Wordpress’s password hashing still relies on MD5, which is <em>far</em> too weak to be considered safe. Unfortunately, Wordpress still supports PHP versions as old as 5.2, and until they drop it they can’t really switch to something more secure.</p>
<p><a href="https://roots.io/plugins/bcrypt-password/">wp-password-bcrypt</a> overrides the password functionality of Wordpress to use Bcrypt, which is what modern PHP applications use. As a result, the hashes are considerably stronger. Given that Wordpress is a common target for hackers, it’s prudent to ensure your website is as secure as you can possibly make it.</p>
<p>If you use Bedrock, it uses this plugin by default, so it’s already taken care of for you.</p>
<h2 id="use-a-proper-templating-system">Use a proper templating system</h2>
<p>PHP is a weird hybrid of a programming language and a templating system. As such, it’s all too easy to wind up with too much logic in your view layer, so it’s a good idea to use a proper templating system if you can. Unfortunately, Wordpress doesn’t support that out of the box.</p>
<p>However, there are some third-party solutions for this. <a href="https://roots.io/sage/">Sage</a> uses Laravel’s Blade templating system (and also comes with Webpack preconfigured), while <a href="https://www.upstatement.com/timber/">Timber</a> lets you use Twig.</p>
<h2 id="use-the-wordpress-rest-api-for-ajax-where-you-can">Use the Wordpress REST API for AJAX where you can</h2>
<p>Version 4.7 of Wordpress introduced the <a href="https://v2.wp-api.org/">Wordpress REST API</a>, allowing the data to be exposed via RESTful endpoints. As a result, it should now be possible to build more complex and powerful user interfaces for that data. For instance, if you were using Wordpress to build a site for listing items for sale, you could create a single-page web app for the front end using React.js and Redux, and use the API to submit it, then show the submitted items.</p>
<p>I’m not a fan of the idea the Wordpress developers seem to have of trying to make it some kind of all-singing, all-dancing universal platform for the web, and the REST API seems to be part of that idea, but it does make it a lot easier than it was in the past to do something a bit out of the ordinary with Wordpress. In some cases it might be worth using Wordpress as the backend for a <a href="https://en.wikipedia.org/wiki/Headless_CMS">headless CMS</a>, and the REST API makes that a practical approach. For simpler applications that just need to make a few AJAX calls, using the REST API is generally going to be more elegant and practical than any other approach to AJAX with Wordpress. It’s never going to perform as well or be as elegant as a custom-built REST API, but it’s definitely a step forward compared to the hoops you used to have to jump through to handle AJAX requests in Wordpress.</p>
<h2 id="summary">Summary</h2>
<p>Wordpress is, and will remain for the foreseeable future, a pain in the backside to develop for compared to something like Laravel, and I remain completely mystified by the number of people who seem to think it’s the greatest thing since sliced bread. However, it is possible to make things better if you know how - it’s just that some of this stuff seems to be relatively obscure. In particular, discovering Bedrock is potentially game-changing because it makes it so much easier to keep the site under version control.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[When you should not use Wordpress]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/08/22/when-you-should-not-use-wordpress/">
        </link>
        <updated>2015-08-22T18:32:34Z</updated>
        <summary type="html"><![CDATA[<p>I must admit, I’ve had a rather bad experience with WordPress recently. The site in question was an e-commerce site, built with WordPress and WooCommerce. In development, we originally put the site on shared hosting, but after a while the hosting company told us off because it was using too much database space, so we moved to a VPS earlier than we normally would. With the benefit of hindsight, we probably should have seen that as the first warning sign.</p>
<p>Then, once the site was up and running on the VPS, it got slower and slower, and eventually the server was killing MySQL off because it was using too many resources. I decided to install a benchmarking plugin and investigate why it was so slow. On loading the home page, it became obvious why the site was so slow - there were in excess of 300 queries on the home page. Looking elsewhere, some other pages were even worse, with one making over 1,000 queries!</p>
<p>At this point, I was practically hyperventilating. If I had written a web app that made that many queries on one page from scratch, I’d be seriously considering whether I was cut out for this industry. With an off-the-shelf CMS, you do have to accept some degree of bloat as a trade-off for quicker development time, but these numbers beggar belief.</p>
<p>I was able to mitigate this to some extent. First, I cut down the number of products shown on individual pages and audited the installed plugins, removing ones we could do without. This still left a lot more queries than I liked.</p>
<p>The next step was to enable caching. I installed Memcached and Varnish (incidentally, if you haven’t used Varnish before, you should check it out - it can make a huge difference for slow sites). I then installed and configured W3 Total Cache to work with them. This didn’t solve the fundamental problem of the initial page loads being too database-intensive, but it did mean that the result was cached for some time afterwards, making things easier on subsequent users.</p>
<p>This still wasn’t enough, however. The admin was still very slow, and often crashed. I actually wound up having to write a shell script that would check to see if MySQL was running and restart it if it wasn’t, and set up a cron job to run it every minute, just to ensure I wasn’t having to restart it myself. The issue was only really dealt with once we upped the specs on the VPS from 1GB RAM and 1 core to 3GB RAM and 2 cores, which should really have been overkill for something like WordPress.</p>
<p>As it turned out, the issue wasn’t exactly helped by the fact that someone had been making an unusually persistent attempt to brute-force <code>wp-login.php</code>. I was able to mitigate this by password-protecting it in the <code>.htaccess</code> file and adding some custom rules to fail2ban. But the fundamental problem remained that the resources used by WordPress to load a single page were grossly excessive.</p>
<p>Since then, we’ve continued to have some difficulties with it. There are some rather arcane criteria for calculating the shipping costs, and implementing them has been a real uphill struggle. We’ve also had to deal with breakages in the theme when updating WooCommerce, and other painful issues. It feels at times like the site will never be “done done”.</p>
<p>Now, I’ve had some issues with WordPress before, but this was by far the nastiest I’d ever seen, and it made me think very hard about when we should and should not consider WordPress as a solution. In hindsight, it would have been much easier to use Laravel to build the site from scratch - it would have made for a much leaner, more efficient site, updating the templates would have been a breeze, and implementing additional functionality would have been straightforward.</p>
<p>NB: I’m trying hard to make sure this is NOT one of those “WordPress sucks” blog posts. I’ll admit that I agree with many of the points from a lot of those, and I abandoned WordPress for my own site a long time ago in favour of a static site generator, but there are times when it is appropriate to use it. What I’m trying to do here is to help others avoid making the mistakes we did recently by giving some advice on when you should and should not use WordPress. Of course, your mileage may vary.</p>
<h2 id="why-was-wordpress-inappropriate-here-">Why was WordPress inappropriate here?</h2>
<p>With the benefit of hindsight, I can say that WordPress was definitely not the right solution in this case, and I will be advising against using it in similar circumstances. But why was it inappropriate?</p>
<ul>
<li><strong>Less flexible than rolling a custom solution</strong> - While the ecosystem of plugins and themes make it possible to use WordPress for a lot of use cases outside the core functionality of the platform, those plugins and themes aren’t infinitely flexible. If you want to do something one way and the plugin you’re using doesn’t support that, you’re out of luck unless you can fork the plugin or write a new one.</li>
<li><strong>Dependence on third party plugins</strong> - While we were working on the site, WooCommerce made some changes that broke the theme we were using. We were using a child theme, but updating the parent theme alone didn’t fix it - we had to then apply some of the changes to the child theme as well, which was extremely fiddly. As a result, we’re now very wary about updating plugins and themes. Yet we don’t dare put it off too long, because in my experience attempts to break into WordPress are common, and if you fail to install an upgrade that fixes a vulnerability in good time, you can easily find yourself getting a phone call about a site having been hacked (as I did in December last year).</li>
<li><strong>Poor performance</strong> - This is a big one, and I have therefore broken it down further:<ul>
<li><strong>Loading styling from the database</strong> - Many of the high end, customisable themes have large numbers of configuration options that can be used to style the site. The downside of these is that it creates additional queries to the database to fetch that data. Unless you have some form of caching in place, that data is loaded for every single request to the front end, generating a significant number of additional queries. You can mitigate this by rolling your own custom WordPress theme for the site, however.</li>
<li><strong>Too many queries</strong> - My experience has been that as a general rule of thumb, it’s much quicker to make a smaller number of more complex queries to a database than to make a larger number of simple queries. If you build a custom web app, you will always know exactly what data you want to retrieve on a particular page and through careful use of joins, can retrieve exactly the data you need with as few queries as possible. Being a generic solution, WordPress doesn’t know exactly what data you need on any one page, and so may fetch the data using an excessive number of queries. It may also fetch data you don’t actually need.</li>
<li><strong>Suboptimal database layout</strong> - The database schema for WordPress was originally created with a blog in mind, and may not always be optimal for your particular use case.</li>
<li><strong>Caching is not a silver bullet</strong> - You can do a lot to improve performance by installing Memcached and Varnish, and configuring a caching plugin to work with them. However, this doesn’t solve the problem of the excessive number of queries, it only mitigates the effects somewhat. Not everything can be cached, and the expensive queries will still have to be run at some point. Caching only increases the time between the queries. Also, configuring Varnish in particular can be something of a black art, and it’s easy to miss something and find out some functionality or other hasn’t been working.</li>
</ul>
</li>
</ul>
<p>WordPress has a lot of technical limitations and deficiencies from a programmer’s point of view. For all that, it works, it’s easy to set up, and there’s a wide variety of plugins and themes available, so it’s often an appropriate choice. While the performance is poorer than I would like, the harsh truth is that often it doesn’t matter - if your site isn’t serving a huge amount of page requests, a few extra queries don’t actually make all that much difference (within reason, of course). My concern is that use of WordPress when it’s entirely inappropriate is widespread.</p>
<h2 id="is-wordpress-being-overused-">Is WordPress being overused?</h2>
<p><img src="/static/images/wordpress-dane-cook.jpg" alt="Archer - WordPress? The Dane Cook of content management systems?"></p>
<p>I suspect I’m running the risk of being branded a hipster for saying this (“Now it’s popular, you hate WordPress…”), but the fact that WordPress is widespread and popular does not mean that it’s the best solution for your project. Nor does the fact that it’s technically possible to use it for your project.</p>
<p>A few years ago, I built a now-defunct site and mobile app for a client that monitored web pages, or product prices on web pages, for changes, and notified the user when a change occurred. It was built using CodeIgniter 2, and had an integrated blog. At one point, the client was unhappy because it wasn’t built with WordPress, believing that this was the reason why few people were signing up. To use WordPress for this project would have involved building the additional functionality, including the API for the mobile app, as a plugin, which would have slowed down development considerably - in my experience it’s generally much harder to build something as a WordPress plugin than using an MVC framework due to the lack of separation of concerns, which makes the code base more confusing.</p>
<p>This is a good example of the alarming trend I’ve noticed in the last few years whereby a large number of people seem to be under the mistaken impression that WordPress is some kind of all-singing, all-dancing general purpose solution for building websites. I suspect that the reason for this may be that WordPress is commonplace enough that people outside of the web industry have often heard of it, and therefore they often ask for it since it’s what they’ve heard of, not knowing whether or not it’s actually appropriate for their needs. What isn’t always apparent to non-developers is that it’s often considerably easier for a developer to implement the core functionality of WordPress using a modern MVC framework than it is for them to implement the other functionality using WordPress, and as the functionality is being built with your exact use case in mind, the user interface is often more straightforward than the WordPress admin. Also, the WordPress privilege system can make it difficult for you to limit the user to just the functionality you want them to have, resulting in a situation where either you give the users a potentially dangerous level of access, or force them to contact you to make certain changes, making more work for you.</p>
<p>I’ve heard plenty of people say things like “WordPress is a framework” and “A competent developer can build anything with WordPress”. These claims are utter hogwash. A competent developer is smart enough to recognise that WordPress is not a one-size fits all solution and it’s not always appropriate to use it - you can easily spend more time trying to get it to do something off the beaten track than it would take to build that functionality from scratch. I think the way that Automattic are trying to promote WordPress as an application framework is a really bad idea - trying to use it for this is much more cumbersome than using a modern PHP framework like Laravel.</p>
<p>Even if you ignore the technical deficiencies of WordPress, it is too opinionated to be a good solution for use as a framework, and as such you’ll spend a lot of time trying to work around the existing implementations of existing functionality when they don’t quite meet your requirements.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For all its flaws, WordPress is very useful. It’s generally a good choice for blogs, brochure-style sites, and small e-commerce solutions where the client is not too fussy about the details of how it works. For virtually every other situation, I plan on looking elsewhere in future.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dumping WordPress for Octopress]]></title>
        <id>https://matthewdaly.co.uk/blog/2012/05/31/dumping-wordpress-for-octopress/</id>
        <link href="https://matthewdaly.co.uk/blog/2012/05/31/dumping-wordpress-for-octopress/">
        </link>
        <updated>2012-05-31T20:25:00Z</updated>
        <summary type="html"><![CDATA[<p>Lately I’ve gotten more and more fed up with WordPress as a blogging platform. It’s certainly a great content management system, and for non-technical bloggers it’s absolutely perfect, but I’ve been increasingly finding myself hitting barriers that make it harder than it should be to get stuff done. It’s just not the best platform for blogging about web development.</p>
<p>Take my recent series of Django tutorials, for example. You wouldn’t believe the amount of time I spent trying to format some of the code properly in TinyMCE for those. Furthermore, the end result, even though the theme was a custom one I’d built myself that was somewhat optimised for showing off code, wasn’t exactly great.</p>
<p>In my opinion, Markdown is a far better option for writing blog posts in than using a rich text editor like TinyMCE. You normally have a pretty good idea what the end results will look like, and it’s generally well-formatted HTML. Also, it means I can easily write my blog posts in Vim.</p>
<p>Octopress was therefore an obvious choice. It’s absolutely brilliant for sharing code - compared to WordPress, code samples look <em>stunning</em>. Also, because it generates static HTML, it loads an awful lot faster than WordPress does, and the default theme is extremely nice. So that’s what I’ve gone for.</p>
<p>The only issue is that my web host are a bit funny about offering SSH access, so I’ve resorted to FTP-ing the files across, which isn’t ideal. Still, it’s not that big an issue, and I’ll have to see how it goes with Octopress. I do have a low-end VPS I could point this domain name at instead and run it from there if necessary, so I can always resort to that if this is too cumbersome.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[New theme]]></title>
        <id>https://matthewdaly.co.uk/blog/2012/02/28/new-theme/</id>
        <link href="https://matthewdaly.co.uk/blog/2012/02/28/new-theme/">
        </link>
        <updated>2012-02-28T18:25:30Z</updated>
        <summary type="html"><![CDATA[<p>For a long time now, I’ve kept meaning to write my own WordPress theme from scratch for this site, but just haven’t been able to find the time to do so. Now, I’ve finally found the time to do so, and here it is!</p>
<p>Please let me know what you think, but be gentle (this is my first solo WordPress theme, and also the only one I’ve built completely from scratch), and if you find any issues with it please let me know. Don’t expect it to look great in IE6 or IE7 however - I’ve given it a very cursory review in those browsers, and that’s all. It’s still perfectly readable, but it uses a fair amount of CSS3 so it’s inevitably not going to look as pretty in those browsers.</p>
<p>The code is <a href="https://github.com/matthewbdaly/Steel-Age">on GitHub</a> if you want to take a look.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[New hosting]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/05/10/new-hosting/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/05/10/new-hosting/">
        </link>
        <updated>2010-05-09T23:52:53Z</updated>
        <summary type="html"><![CDATA[<p>I’ve now gone and switched to paid hosting, and have dumped the old static site in favour of a Wordpress-powered blog on my own domain. I’ve found Wordpress to be an extremely flexible and powerful solution, far superior to Blogger, and I’m really excited about the possibilities of a self-hosted blog, so I’m really looking forward to establishing myself here! At some point I intend to create a custom theme of my own, but for now this one will do fine!</p>
<p>As I mentioned previously, I’ve changed the emphasis of the blog towards web development. I’ve also now made a number of other improvements - comments are now powered by Disqus, to facilitate easier sharing of posts and making it easier for people to reply to me via blog posts of their own.</p>
<p>Enjoy!</p>
]]></summary>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>socket.io | Matthew Daly&apos;s Blog</title>
    <updated>2018-02-25T13:24:59Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/socket-io/"/>
    <subtitle>socket.io | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Broadcasting events with Laravel and Socket.io]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/">
        </link>
        <updated>2016-05-14T20:00:00Z</updated>
        <summary type="html"><![CDATA[<p>PHP frameworks like Laravel aren’t really set up to handle real-time events properly, so if you want to build a real-time app, you’re generally better off with another platform, such as Node.js. However, if that only forms a small part of your application, you may still prefer to work with PHP. Fortunately it’s fairly straightforward to hand off the real-time aspects of your application to a dedicated microservice written using Node.js and still use Laravel to handle the rest of the functionality.</p>
<p>Here I’ll show you how I built a Laravel app that uses a separate Node.js script to handle sending real-time updates to the user.</p>
<h2 id="events-in-laravel">Events in Laravel</h2>
<p>In this case, I was building a REST API to serve as the back end for a Phonegap app that allowed users to message each other. The API includes an endpoint that allows users to create and fetch messages. Now, in theory, we could just repeatedly poll the endpoint for new messages, but that would be inefficient. What we needed was a way to notify users of new messages in real time, which seemed like the perfect opportunity to use Socket.io.</p>
<p>Laravel comes with a simple, but robust system that allows you to broadcast events to a Redis server. Another service can then listen for these events and carry out jobs on them, and there is no reason why this service has to be written in PHP. This makes it easy to decouple your application into smaller parts. In essence the functionality we wanted was as follows:</p>
<ul>
<li>Receive message</li>
<li>Push message to Redis</li>
<li>Have a separate service pick up message on Redis</li>
<li>Push message to clients</li>
</ul>
<p>First off, we need to define an event in our Laravel app. You can create a boilerplate with the following Artisan command:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan make:event NewMessage</code></pre>
<p>This will create the file <code>app/Events/NewMessage.php</code>. You can then customise this as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">Event</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Message</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">ShouldBroadcast</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldBroadcast</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> $message;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     * Create a new event instance.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Message $message)</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Get message</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;message = $message;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     * Get the channels the event should be broadcast on.</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     * <span class="hljs-doctag">@return</span> array</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">broadcastOn</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> [<span class="hljs-string">'room_'</span>.<span class="hljs-keyword">$this</span>-&gt;message-&gt;room_id];</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}</td></table></code></pre>
<p>This particular event is a class that accepts a single argument, which is an instance of the <code>Message</code> model. This model includes an attribute of <code>room_id</code> that is used to determine which room the message is posted to - note that this is returned in the <code>broadcastOn()</code> method.</p>
<p>When we want to trigger our new event, we can do so as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">NewMessage</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Event::fire(<span class="hljs-keyword">new</span> NewMessage($message));</td></table></code></pre>
<p>Here, <code>$message</code> is the saved Eloquent object containing the message. Note the use of <code>SerializesModels</code> - this means that the Eloquent model is serialized into JSON when broadcasting the event.</p>
<p>We also need to make sure Redis is set as our broadcast driver. Ensure the Composer package <code>predis/predis</code> is installed, and set <code>BROADCAST_DRIVER=redis</code> in your <code>.env</code> file. Also, please note that I found that setting <code>QUEUE_DRIVER=redis</code> in <code>.env</code> as well broke the broadcasting system, so it looks like you can’t use Redis as both a queue and a broadcasting system unless you set up multiple connections.</p>
<p>Next, we need another server-side script to handle processing the received events and pushing the messages out. In my case, this was complicated by the fact that we were using HTTPS, courtesy of Let’s Encrypt. I installed the required dependencies for the Node.js script as follows:</p>
<pre><code class="hljs lang-bash singleline">$ npm install socket.io socket.io-client ioredis --save-dev</code></pre>
<p>Here’s an example Node.js script for processing the events:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> pkey = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/privkey.pem'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> pcert = fs.readFileSync(<span class="hljs-string">'/etc/letsencrypt/live/example.com/fullchain.pem'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> options = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-attr">key</span>: pkey,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="hljs-attr">cert</span>: pcert</td><tr><td class="linenos" data-pseudo-content="8"></td><td>};</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">'https'</span>).createServer(options);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)(app);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ioredis'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> redis = <span class="hljs-keyword">new</span> Redis();</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>app.listen(<span class="hljs-number">9000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Server is running!'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handler</span>(<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    res.setHeader(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    res.writeHead(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    res.end(<span class="hljs-string">''</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>}</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>io.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>redis.psubscribe(<span class="hljs-string">'*'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, count</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>});</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>redis.on(<span class="hljs-string">'pmessage'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">subscribed, channel, message</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    message = <span class="hljs-built_in">JSON</span>.parse(message);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Channel is '</span> + channel + <span class="hljs-string">' and message is '</span> + message);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    io.emit(channel, message.data);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>});</td></table></code></pre>
<p>Note we use the <code>https</code> module instead of the <code>http</code> one, and we pass the key and certificate as options to the server. This server runs on port 9000, but feel free to move it to any arbitrary port you wish. In production, you’d normally use something like Supervisor or systemd to run a script like this as a service.</p>
<p>Next, we need a client-side script to connect to the Socket.io instance and handle any incoming messages. Here’s a very basic example that just dumps them to the browser console:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.location.protocol + <span class="hljs-string">'//'</span> + <span class="hljs-built_in">window</span>.location.hostname;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> socket = io(url, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-string">'secure'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-string">'reconnect'</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-string">'reconnection delay'</span>: <span class="hljs-number">500</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-string">'max reconnection attempts'</span>: <span class="hljs-number">10</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>});</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> chosenEvent = <span class="hljs-string">'room_'</span> + room.id;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>socket.on(chosenEvent, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-built_in">console</span>.log(data);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>});</td></table></code></pre>
<p>Finally, we need to configure our web server. I’m using Nginx with PHP-FPM and PHP 7, and this is how I configured it:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">upstream</span> websocket {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9000</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">listen</span>         <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">server_name</span> example.com;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/fullchain.pem;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">add_header</span> X-Frame-Options SAMEORIGIN;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">add_header</span> X-Content-Type-Options nosniff;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">add_header</span> X-XSS-Protection <span class="hljs-string">"1; mode=block"</span>;</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">gzip_proxied</span> any;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-attribute">gzip_types</span> text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml-rss text/javascript text/js application/json;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-attribute">fastcgi_index</span> index.php;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.well-known</span> {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-attribute">allow</span> all;</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-attribute">location</span> /socket.io {</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">"upgrade"</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-attribute">proxy_pass</span> https://websocket;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>}</td></table></code></pre>
<p>Any requests to <code>/socket.io</code> are proxied to port 9000, where our chat handling script is listening. Note that we allow the HTTPS connection to be upgraded to a WebSocket one.</p>
<p>Once that’s done, you just need to restart your PHP application and Nginx, and start running your chat script, and everything should be working fine. If it isn’t, the command <code>redis-cli monitor</code> is invaluable in verifying that the event is being published correctly.</p>
<h2 id="summary">Summary</h2>
<p>Getting this all working together did take quite a bit of trial and error, but that was mostly a matter of configuration. Actually implementing this is pretty straightforward, and it’s an easy way to add some basic real-time functionality to an existing Laravel application.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a real-time Twitter stream with Node.js, React.js and Redis]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/">
        </link>
        <updated>2015-09-28T19:00:55Z</updated>
        <summary type="html"><![CDATA[<p>In the last year or so, React.js has taken the world of web development by storm. A major reason for this is that it makes it possible to build <strong>isomorphic web applications</strong> - web apps where the same code can run on the client and the server. Using React.js, you can create a template that will be executed on the server when the page first loads, and then the same template can be used to re-render the content when it’s updated, whether that’s via AJAX, WebSockets or another method entirely.</p>
<p>In this tutorial, I’ll show you how to build a simple Twitter streaming app using Node.js. I’m actually <a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">not the only person to have built this to demonstrate React.js</a>, but this is my own particular take on this idea, since it’s such an obvious use case for React.</p>
<h2 id="what-is-react-js-">What is React.js?</h2>
<p>A lot of people get rather confused over this issue. It’s not correct to compare React.js with frameworks like Angular.js or Backbone.js. It’s often described as being just the V in MVC - it represents only the view layer. If you’re familiar with Backbone.js, I think it’s reasonable to compare it to Backbone’s views, albeit with it’s own templating syntax. It does not provide the following functionality like Angular and Backbone do:</p>
<ul>
<li>Support for models</li>
<li>Any kind of helpers for AJAX requests</li>
<li>Routing</li>
</ul>
<p>If you want any of this functionality, you need to look elsewhere. There are other libraries around that offer this kind of functionality, so if you want to use React as part of some kind of MVC structure, you can do so - they’re just not a part of the library itself.</p>
<p>React.js uses a so-called “virtual DOM” - rather than re-rendering the view from scratch when the state changes, it instead retains a virtual representation of the DOM in memory, updates that, then figures out what changes are required to update the existing DOM and applies them. This means it only needs to change what actually changes, making it faster than other client-side templating systems. Combined with the ability to render on the server side, React allows you to build high-performance apps that combine the initial speed and SEO advantages of conventional web apps with the responsiveness of single-page web apps.</p>
<p>To create components with React, it’s common to use an XML-like syntax called JSX. It’s not mandatory, but I highly recommend you do so as it’s much more intuitive than creating elements with Javascript.</p>
<h2 id="getting-started">Getting started</h2>
<p>You’ll need a Twitter account, and you’ll need to <a href="https://apps.twitter.com/">create a new Twitter app</a> and obtain the security credentials to let you access the Twitter Streaming API. You’ll also need to have Node.js installed (ideally using <code>nvm</code>) - at this time, however, you can’t use Node 4.0 because of issues with Redis. You will also need to install Redis and hiredis - if you’ve worked through my previous Redis tutorials you’ll have these already.</p>
<p>We’ll be using Gulp.js as our build system, and Bower to install some client-side packages, so they need to be installed globally:</p>
<pre><code class="hljs lang-bash singleline">$ npm install -g gulp bower</code></pre>
<p>We’ll also be using Compass to help with our stylesheets:</p>
<pre><code class="hljs lang-bash singleline">$ sudo gem install compass</code></pre>
<p>With that all done, let’s start work on our app. First, run the following command to create your <code>package.json</code>:</p>
<pre><code class="hljs lang-bash singleline">$ npm init</code></pre>
<p>I’m assuming you’re well-acquainted enough with Node.js to know what this does, and can answer the questions without difficulty. I won’t cover writing tests in this tutorial as, but set your test command to <code>gulp test</code> and you should be fine.</p>
<p>Next, we need to install our dependencies:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm install --save babel compression express hbs hiredis lodash morgan react redis socket.io socket.io-client twitter</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ npm install --save-dev browserify chai gulp gulp-compass gulp-coveralls gulp-istanbul gulp-jshint gulp-mocha gulp-uglify jshint-stylish reactify request vinyl-buffer vinyl-source-stream</td></table></code></pre>
<h2 id="planning-our-app">Planning our app</h2>
<p>Now, it’s worth taking a few minutes to plan the architecture of our app. We want to have the app listen to the Twitter Streaming API and filter for messages with any arbitrary string in them - in this case we’ll be searching for “javascript”, but you can set it to anything you like. That means that that part needs to be listening all the time, not just when someone is using the app. Also, it doesn’t fit neatly into the usual request-response cycle - if several people visit the site at once, we could end up with multiple connections to fetch the same data, which is really not efficient, and could cause problems with duplicate tweets showing up.</p>
<p>Instead, we’ll have a separate <code>worker.js</code> file which runs constantly. This will listen for any matching messages on Twitter. When one appears, rather than returning it itself, it will publish it to a Redis channel, as well as persisting it. Then, the web app, which will be the <code>index.js</code> file, will be subscribed to the same channel, and will receive the tweet and push it to all current users using Socket.io.</p>
<p>This is a good example of a message queue, and it’s a common pattern. It allows you to create dedicated sections of your app for different tasks, and means that they will generally be more robust. In this case, if the worker goes down, users will still be able to see some tweets, and if the server goes down, the tweets will still be persisted to Redis. In theory, this would also allow you to scale your app more easily by allowing movement of different tasks to different servers, and several app servers could interface with a single worker process. The only downside I can think of is that on a platform like Heroku you’d need to have a separate dyno for the worker process - however, with Heroku’s pricing model changing recently, since this needs to be listening all the time it won’t be suitable for the free tier anyway.</p>
<p>First let’s create our <code>gulpfile.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> jshint = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-jshint'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> source = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-source-stream'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> buffer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-buffer'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> reactify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'reactify'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> mocha = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-mocha'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> istanbul = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-istanbul'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> coveralls = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-coveralls'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> compass = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-compass'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-uglify'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> paths = {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attr">scripts</span>: [<span class="hljs-string">'components/*.jsx'</span>],</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attr">styles</span>: [<span class="hljs-string">'src/sass/*.scss'</span>]</td><tr><td class="linenos" data-pseudo-content="16"></td><td>};</td><tr><td class="linenos" data-pseudo-content="17"></td><td>gulp.task(<span class="hljs-string">'lint'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-keyword">return</span> gulp.src([</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      <span class="hljs-string">'index.js'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      <span class="hljs-string">'components/*.js'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>      ])</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    .pipe(jshint())</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    .pipe(jshint.reporter(<span class="hljs-string">'jshint-stylish'</span>));</td><tr><td class="linenos" data-pseudo-content="24"></td><td>});</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>gulp.task(<span class="hljs-string">'compass'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  gulp.src(<span class="hljs-string">'src/sass/*.scss'</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    .pipe(compass({</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      <span class="hljs-attr">css</span>: <span class="hljs-string">'static/css'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="hljs-attr">sass</span>: <span class="hljs-string">'src/sass'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }))</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'static/css'</span>));</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});;</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>gulp.task(<span class="hljs-string">'test'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  gulp.src(<span class="hljs-string">'index.js'</span>)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    .pipe(istanbul())</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    .pipe(istanbul.hookRequire())</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    .on(<span class="hljs-string">'finish'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      gulp.src(<span class="hljs-string">'test/test.js'</span>, {<span class="hljs-attr">read</span>: <span class="hljs-literal">false</span>})</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        .pipe(mocha({ <span class="hljs-attr">reporter</span>: <span class="hljs-string">'spec'</span> }))</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        .pipe(istanbul.writeReports({</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          <span class="hljs-attr">reporters</span>: [</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'lcovonly'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            <span class="hljs-string">'cobertura'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>            <span class="hljs-string">'html'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>          ]</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        }))</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        .pipe(istanbul.enforceThresholds({ <span class="hljs-attr">thresholds</span>: { <span class="hljs-attr">global</span>: <span class="hljs-number">90</span> } }))</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        .once(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="51"></td><td>          process.exit(<span class="hljs-number">0</span>);</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        })</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        .once(<span class="hljs-string">'end'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="54"></td><td>          process.exit(<span class="hljs-number">0</span>);</td><tr><td class="linenos" data-pseudo-content="55"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="57"></td><td>});</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>gulp.task(<span class="hljs-string">'coveralls'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="60"></td><td>  gulp.src(<span class="hljs-string">'coverage/lcov.info'</span>)</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    .pipe(coveralls());</td><tr><td class="linenos" data-pseudo-content="62"></td><td>});</td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>gulp.task(<span class="hljs-string">'react'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="65"></td><td>  <span class="hljs-keyword">return</span> browserify({ <span class="hljs-attr">entries</span>: [<span class="hljs-string">'components/index.jsx'</span>], <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span> })</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    .transform(reactify)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    .bundle()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>    .pipe(source(<span class="hljs-string">'bundle.js'</span>))</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    .pipe(buffer())</td><tr><td class="linenos" data-pseudo-content="70"></td><td>    .pipe(uglify())</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'static/jsx/'</span>));</td><tr><td class="linenos" data-pseudo-content="72"></td><td>});</td><tr><td class="linenos" data-pseudo-content="73"></td><td></td><tr><td class="linenos" data-pseudo-content="74"></td><td>gulp.task(<span class="hljs-string">'default'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="75"></td><td>  gulp.watch(paths.scripts, [<span class="hljs-string">'react'</span>]);</td><tr><td class="linenos" data-pseudo-content="76"></td><td>  gulp.watch(paths.styles, [<span class="hljs-string">'compass'</span>]);</td><tr><td class="linenos" data-pseudo-content="77"></td><td>});</td></table></code></pre>
<p>I’ve added tasks for the tests and JSHint if you choose to implement them, but the only ones I’ve actually used are the <code>compass</code> and <code>react</code> tasks. The <code>compass</code> task compiles our Sass files into CSS, while the <code>react</code> task uses Browserify to take our React components and various modules installed using NPM and build them for use in the browser, as well as minifying them. Note that we installed React and lodash with NPM? We’re going to be able to use them in the browser and on the server, thanks to Browserify.</p>
<p>Next, let’s create our <code>worker.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> Twitter = <span class="hljs-built_in">require</span>(<span class="hljs-string">'twitter'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-comment">// Set up Twitter client</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> Twitter({</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-attr">consumer_key</span>: process.env.TWITTER_CONSUMER_KEY,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-attr">consumer_secret</span>: process.env.TWITTER_CONSUMER_SECRET,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-attr">access_token_key</span>: process.env.TWITTER_ACCESS_TOKEN_KEY,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-attr">access_token_secret</span>: process.env.TWITTER_ACCESS_TOKEN_SECRET</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-keyword">var</span> redis;</td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>}</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>client.stream(<span class="hljs-string">'statuses/filter'</span>, {<span class="hljs-attr">track</span>: <span class="hljs-string">'javascript'</span>, <span class="hljs-attr">lang</span>: <span class="hljs-string">'en'</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">stream</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  stream.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">tweet</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-comment">// Log it to console</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-built_in">console</span>.log(tweet);</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">// Publish it</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    redis.publish(<span class="hljs-string">'tweets'</span>, <span class="hljs-built_in">JSON</span>.stringify(tweet));</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// Persist it to a Redis list</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    redis.rpush(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-built_in">JSON</span>.stringify(tweet));</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>  <span class="hljs-comment">// Handle errors</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>  stream.on(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-built_in">console</span>.log(error);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="39"></td><td>});</td></table></code></pre>
<p>Most of this file should be fairly straightforward. We set up our connection to Twitter (you’ll need to set the various environment variables listed here using the appropriate method for your operating system), and a connection to Redis.</p>
<p>We then stream the Twitter statuses that match our filter. When we receive a tweet, we log it to the console (feel free to comment this out in production if desired), publish it to a Redis channel called <code>tweets</code>, and push it to the end of a Redis list called <code>stream:tweets</code>. When an error occurs, we output it to the console.</p>
<p>Let’s use Bootstrap to style the app. Create the following <code>.bowerrc</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"directory"</span>: <span class="hljs-string">"static/bower_components"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td></table></code></pre>
<p>Then run <code>bower init</code> to create your <code>bower.json</code> file, and install Bootstrap with <code>bower install --save sass-bootstrap</code>.</p>
<p>With that done, create the file <code>src/sass/style.scss</code> and enter the following:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"compass/css3/user-interface"</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"compass/css3"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"../../static/bower_components/sass-bootstrap/lib/bootstrap.scss"</span>;</td></table></code></pre>
<p>This includes some dependencies from Compass, as well as Bootstrap. We won’t be using any of the Javascript features of Bootstrap, so we don’t need to worry too much about that.</p>
<p>Next, we need to create our view files. As React will be used to render the main part of the page, these will be very basic, with just the header, footer, and a section where the content can be rendered. First, create <code>views/index.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-variable">{{&gt; header }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-12"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'view'</span>&gt;</span></span><span class="hljs-template-variable">{{{ markup }}</span><span class="xml">}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"initial-state"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/json"</span>&gt;</span><span class="undefined"></span></span><span class="hljs-template-variable">{{{state}}</span><span class="xml"><span class="undefined">}</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span><span class="hljs-template-variable">{{&gt; footer }}</span><span class="xml"></span></td></table></code></pre>
<p>As promised, this a very basic layout. Note the <code>markup</code> variable, which is where the markup generated by React will be inserted when rendered on the server, and the <code>state</code> variable, which will contain the JSON representation of the data used to generate that markup. By passing that data through, you can ensure that the instance of React on the client has access to the same raw data as was passed through to the view on the server side, so that when the data needs to be re-rendered, it can be done so correctly.</p>
<p>We’ll also define partials for the header and footer. The header should be in <code>views/partials/header.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"no-js"</span>&gt;</span> <span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tweet Stream<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">""</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-comment">&lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">&lt;!--[if lt IE 7]&gt;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        &lt;![endif]--&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-inverse navbar-static-top"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"navigation"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container-fluid"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-toggle"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"collapse"</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon-bar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span>Tweet Stream<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"collapse navbar-collapse navbar-right"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"header-nav"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span></td></table></code></pre>
<p>The footer should be in <code>views/partials/footer.hbs</code>:</p>
<pre><code class="hljs lang-handlebars"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/jsx/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Note that we load the Javascript file <code>/jsx/bundle.js</code> - this is the output from the command <code>gulp react</code>.</p>
<h2 id="creating-the-back-end">Creating the back end</h2>
<p>The next step is to implement the back end of the website. Add the following code as <code>index.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel/register'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> app = express();</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">var</span> base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">'morgan'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-keyword">var</span> Tweets = React.createFactory(<span class="hljs-built_in">require</span>(<span class="hljs-string">'./components/tweets.jsx'</span>));</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-keyword">var</span> redis, subscribe;</td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td><span class="hljs-comment">// Set up logging</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>app.use(morgan(<span class="hljs-string">'combined'</span>));</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td><span class="hljs-comment">// Compress responses</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>app.use(compression());</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td><span class="hljs-comment">// Render main view</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="49"></td><td>  <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>  redis.lrange(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, tweets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>      <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="54"></td><td>      <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>      <span class="hljs-keyword">var</span> tweet_list = [];</td><tr><td class="linenos" data-pseudo-content="56"></td><td>      tweets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tweet, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        tweet_list.push(<span class="hljs-built_in">JSON</span>.parse(tweet));</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>      <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>      <span class="hljs-keyword">var</span> markup = React.renderToString(Tweets({ <span class="hljs-attr">data</span>: tweet_list.reverse() }));</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      res.render(<span class="hljs-string">'index'</span>, {</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-attr">markup</span>: markup,</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-attr">state</span>: <span class="hljs-built_in">JSON</span>.stringify(tweet_list)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="67"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="68"></td><td>});</td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="73"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td><span class="hljs-comment">// Handle connections</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="77"></td><td>  <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>  subscribe.subscribe(<span class="hljs-string">'tweets'</span>);</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>  <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>  <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="83"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="84"></td><td>  subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="85"></td><td></td><tr><td class="linenos" data-pseudo-content="86"></td><td>  <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>  socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>    subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="89"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="90"></td><td>});</td></table></code></pre>
<p>Let’s go through this bit by bit:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">/*jslint node: true */</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel/register'</span>);</td></table></code></pre>
<p>Here we’re using Babel, which is a library that allows you to use new features in Javascript even if the interpreter doesn’t support it. It also includes support for JSX, allowing us to require JSX files in the same way we would require Javascript files.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Get dependencies</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> app = express();</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">'compression'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> port = process.env.PORT || <span class="hljs-number">5000</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> base_url = process.env.BASE_URL || <span class="hljs-string">'http://localhost:5000'</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">var</span> hbs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">'morgan'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">var</span> Tweets = React.createFactory(<span class="hljs-built_in">require</span>(<span class="hljs-string">'./components/tweets.jsx'</span>));</td></table></code></pre>
<p>Here we include our dependencies. Most of this will be familiar if you’ve used Express before, but we also use React to create a factory for a React component called <code>Tweets</code>.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Set up connection to Redis</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> redis, subscribe;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">if</span> (process.env.REDIS_URL) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient(process.env.REDIS_URL);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>} <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  subscribe = <span class="hljs-built_in">require</span>(<span class="hljs-string">'redis'</span>).createClient();</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-comment">// Set up templating</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>app.set(<span class="hljs-string">'views'</span>, __dirname + <span class="hljs-string">'/views'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>app.set(<span class="hljs-string">'view engine'</span>, <span class="hljs-string">"hbs"</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>app.engine(<span class="hljs-string">'hbs'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'hbs'</span>).__express);</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment">// Register partials</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>hbs.registerPartials(__dirname + <span class="hljs-string">'/views/partials'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-comment">// Set up logging</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>app.use(morgan(<span class="hljs-string">'combined'</span>));</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-comment">// Compress responses</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>app.use(compression());</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-comment">// Set URL</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>app.set(<span class="hljs-string">'base_url'</span>, base_url);</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-comment">// Serve static files</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>app.use(express.static(__dirname + <span class="hljs-string">'/static'</span>));</td></table></code></pre>
<p>This section sets up the various dependencies of our app. We set up two connections to Redis - one for handling subscriptions, the other for reading from Redis in order to populate the view.</p>
<p>We also set up our views, logging, compression of the HTTP response, a base URL, and serving static files.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Render main view</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  redis.lrange(<span class="hljs-string">'stream:tweets'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, tweets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">if</span> (err) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="hljs-built_in">console</span>.log(err);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-comment">// Get tweets</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>      <span class="hljs-keyword">var</span> tweet_list = [];</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      tweets.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tweet, i</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        tweet_list.push(<span class="hljs-built_in">JSON</span>.parse(tweet));</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-comment">// Render page</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">var</span> markup = React.renderToString(Tweets({ <span class="hljs-attr">data</span>: tweet_list.reverse() }));</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      res.render(<span class="hljs-string">'index'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-attr">markup</span>: markup,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-attr">state</span>: <span class="hljs-built_in">JSON</span>.stringify(tweet_list)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>});</td></table></code></pre>
<p>Our app only has a single view. When the root is loaded, we first of all fetch all of the tweets stored in the <code>stream:tweets</code> list. We then convert them into an array of objects.</p>
<p>Next, we render the <code>Tweets</code> component to a string, passing through our list of tweets, and store the resulting markup. We then pass through this markup and the string representation of the list of tweets to the template.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Listen</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}).listen(app.listen(port));</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Listening on port "</span> + port);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Handle connections</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>io.sockets.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">socket</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-comment">// Subscribe to the Redis channel</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  subscribe.subscribe(<span class="hljs-string">'tweets'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-comment">// Handle receiving messages</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-keyword">var</span> callback = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    socket.emit(<span class="hljs-string">'message'</span>, data);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  subscribe.on(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-comment">// Handle disconnect</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  socket.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    subscribe.removeListener(<span class="hljs-string">'message'</span>, callback);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>});</td></table></code></pre>
<p>Finally, we set up Socket.io. On a connection, we subscribe to the Redis channel <code>tweets</code>. When we receive a tweet from Redis, we emit that tweet so that it can be rendered on the client side. We also handle disconnections by removing our Redis subscription.</p>
<h2 id="creating-our-react-components">Creating our React components</h2>
<p>Now it’s time to create our first React component. We’ll create a folder called <code>components</code> to hold all of our component files. Our first file is <code>components/index.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> Tweets = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweets.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> initialState = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'initial-state'</span>).innerHTML);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>React.render(</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Tweets</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{initialState}</span> /&gt;</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  document.getElementById('view')</td><tr><td class="linenos" data-pseudo-content="9"></td><td>);</span></td></table></code></pre>
<p>First of all, we include React and the same <code>Tweets</code> component we require on the server side (note that we need to specify the <code>.jsx</code> extension). Then we fetch the initial state from the script tag we created earlier. Finally we render the <code>Tweets</code> components, passing through the initial state, and specify that it should be inserted into the element with an id of <code>view</code>. Note that we store the initial state in <code>data</code> - inside the component, this can be accessed as <code>this.props.data</code>.</p>
<p>This particular component is only ever used on the client side - when we render on the server side, we don’t need any of this functionality since we insert the markup into the <code>view</code> element anyway, and we don’t need to specify the initial data in the same way.</p>
<p>Next, we define the <code>Tweets</code> component in <code>components/tweets.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetlist.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> Tweets = React.createClass({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="hljs-attr">componentDidMount</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">// Get reference to this item</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-keyword">var</span> tweets = that.props.data;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      tweets.push(<span class="hljs-built_in">JSON</span>.parse(data));</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      tweets = _.sortBy(tweets, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> item.created_at;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      }).reverse();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      that.setProps({<span class="hljs-attr">data</span>: tweets});</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  <span class="hljs-attr">getInitialState</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">return</span> {<span class="hljs-attr">data</span>: <span class="hljs-keyword">this</span>.props.data};</td><tr><td class="linenos" data-pseudo-content="27"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tweets<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">TweetList</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{this.props.data}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>});</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>module.exports = Tweets;</span></td></table></code></pre>
<p>Let’s work our way through each section in turn:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetlist.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>);</td></table></code></pre>
<p>Here we include React and the Socket.io client, as well as Lodash and our TweetList component. With React.js, it’s recommend that you break up each individual part of your interface into a single component - here <code>Tweets</code> is a wrapper for the tweets that includes a heading. <code>TweetList</code> will be a list of tweets, and <code>TweetItem</code> will be an individual tweet.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> Tweets = React.createClass({</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-attr">componentDidMount</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// Get reference to this item</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment">// Set up the connection</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">var</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.href);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">// Handle incoming messages</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-comment">// Insert the message</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-keyword">var</span> tweets = that.props.data;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      tweets.push(<span class="hljs-built_in">JSON</span>.parse(data));</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      tweets = _.sortBy(tweets, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> item.created_at;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      }).reverse();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      that.setProps({<span class="hljs-attr">data</span>: tweets});</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  },</td></table></code></pre>
<p>Note the use of the <code>componentDidMount</code> method - this fires when a component has been rendered on the client side for the first time. You can therefore use it to set up events. Here, we’re setting up a callback so that when a new tweet is received, we get the existing tweets (stored in <code>this.props.data</code>, although we copy <code>this</code> to <code>that</code> so it works inside the callback), push the tweet to this list, sort it by the time created, and set <code>this.props.data</code> to the new value. This will result in the tweets being re-rendered.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  getInitialState: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> {<span class="hljs-attr">data</span>: <span class="hljs-keyword">this</span>.props.data};</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  },</td></table></code></pre>
<p>Here we set the initial state of the component - it sets the value of <code>this.state</code> to the object passed through. In this case, we pass through an object with the attribute <code>data</code> defined as the value of <code>this.props.data</code>, meaning that <code>this.state.data</code> is the same as <code>this.props.data</code>.</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tweets<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">TweetList</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{this.props.data}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>});</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>module.exports = Tweets;</span></td></table></code></pre>
<p>Here we define our <code>render</code> function. This can be thought of as our template. Note that we include <code>TweetList</code> inside our template and pass through the data. Afterwards, we export <code>Tweets</code> so it can be used elsewhere.</p>
<p>Next, let’s create <code>components/tweetlist.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> TweetItem = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./tweetitem.jsx'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> TweetList = React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">var</span> tweetNodes = <span class="hljs-keyword">this</span>.props.data.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TweetItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{index}</span> <span class="hljs-attr">text</span>=<span class="hljs-string">{item.text}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TweetItem</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      );</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"tweets list-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        {tweetNodes}</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    )</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-built_in">module</span>.exports = TweetList;</td></table></code></pre>
<p>This component is much simpler - it only has a <code>render</code> method. First, we get our individual tweets and for each one define a <code>TweetItem</code> component. Then we create an unordered list and insert the tweet items into it. We then export it as <code>TweetList</code>.</p>
<p>Our final component is the <code>TweetItem</code> component. Create the following file at <code>components/tweetitem.jsx</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> React = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> TweetItem = React.createClass({</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"list-group-item"</span>&gt;</span>{this.props.text}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>});</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-built_in">module</span>.exports = TweetItem;</td></table></code></pre>
<p>This component is quite simple. It’s just a single list item with the text set to the value of the tweet’s <code>text</code> attribute.</p>
<p>That should be all of our components done. Time to compile our Sass and run Browserify:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ gulp compass</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ gulp react</td></table></code></pre>
<p>Now, if you make sure you have set the appropriate environment variables, and then run <code>node worker.js</code> in one terminal, and <code>node index.js</code> in another, and visit <a href="http://localhost:5000/">http://localhost:5000/</a>, you should see your Twitter stream in all its glory! You can also try it with Javascript disabled, or in a text-mode browser such as Lynx, to demonstrate that it still renders the page without having to do anything on the client side - you’re only missing the constant updates.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>I hope this gives you some idea of how you can easily use React.js on both the client and server side to make web apps that are fast and search-engine friendly while also being easy to update dynamically. You can find the source code on <a href="https://github.com/matthewbdaly/twitter-stream">GitHub</a>.</p>
<p>Hopefully I’ll be able to publish some later tutorials that build on this to show you how to build more substantial web apps with React.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[First steps with Node.js]]></title>
        <id>https://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/</id>
        <link href="https://matthewdaly.co.uk/blog/2013/07/28/first-steps-with-node-dot-js/">
        </link>
        <updated>2013-07-28T18:20:00Z</updated>
        <summary type="html"><![CDATA[<p>The idea of building an entire web app using nothing but JavaScript has always appealed to me. Despite its undoubted flaws, JavaScript is a powerful language, and chopping and changing between several different programming languages is never great. So I’ve always wanted to check out Node.js.</p>
<p>Lately I’ve been tinkering with Backbone.js a lot. As a web and mobile app developer, I’ve seen the benefit of server-side MVC frameworks firsthand, and I’ve also seen how bad a PhoneGap app can get without this kind of structure, so I’ve been very eager for a while to get my head around a JavaScript framework. The first one I was able to really grok was Knockout.js, thanks to its wonderful tutorial, but Backbone.js seemed to have better mindshare, and support for routing, so I knuckled down and used it for a large personal project that is still under wraps, but I hope to make available once complete. Using Backbone has made my client-side code far more organised, and I plan to use it a lot in future.</p>
<p>I’ve also wanted to get my head around a couple of the NoSQL databases. While the relational model is very often applicable, there are plenty of use cases where it isn’t the best choice, especially for simple data, and MongoDB seemed to be an interesting alternative. So, I decided to have a tinker around with Node.js and Backbone today, and wound up building <a href="https://github.com/matthewbdaly/rabbitrabbitrabbit">a real-time guestbook application</a>. Let me know what you think, but please be gentle - this is my first ever Node.js or MongoDB application.</p>
]]></summary>
    </entry>
</feed>
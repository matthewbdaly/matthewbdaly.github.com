<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>git | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/git/</link>
        <description>git | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sat, 25 Jan 2020 22:30:08 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2020</copyright>
        <item>
            <title><![CDATA[Powering up git bisect with the run command]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/06/19/powering-up-git-bisect-with-the-run-command/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/06/19/powering-up-git-bisect-with-the-run-command/</guid>
            <pubDate>Wed, 19 Jun 2019 21:00:27 GMT</pubDate>
            <description><![CDATA[<p>The <code>bisect</code> command in Git can be very useful when trying to catch any regressions. If you know that a bug was not present at some point in the past, and now is, you can often use <code>bisect</code> to track it down quickly and easily.</p>
<p>The basic functionality is fairly simple. You start the process by tracking down a known “good” commit in the past, and a known “bad” commmit, which will usually be the head of the branch. Then, you start bisecting:</p>
<pre><code class="lang-bash">$ git bisect start
</code></pre>
<p>You then specify your bad commit:</p>
<pre><code class="lang-bash">$ git bisect bad HEAD
</code></pre>
<p>And your good commit</p>
<pre><code class="lang-bash">$ git bisect good fe0616f0cd523455a0e5bc536c09bfb1d8fd0c3f
</code></pre>
<p>And it will then step through the commits in between. Note that not every commit is loaded - it instead picks a commit between those you entered, and from there quickly narrows down the range. For each commit, you test it and mark it as good or bad with <code>git bisect good</code> or <code>git bisect bad</code> as appropriate. Once it’s tracked down the commit that introduced the problem, it will tell you what that commit was, making any remaining debugging much easier. There are situations that are more difficult to handle, such as when database migrations have been created and run in the intervening period, but for many cases <code>bisect</code> can be a very valuable tool.</p>
<p>However, it can still be a chore to step through those commits manually. Fortunately, in situations where you can produce some sort of script to determine if the issue is present or not, there’s an easy way to automate it with the <code>bisect run</code> command.</p>
<p>One of the personal projects I have on the go right now is a micro-CMS intended primarily for brochure-style sites. It includes an AJAX search that uses Fuse.js on the front end, the index for which is generated by a console task built on top of the Symfony Console component. Recently I noticed that although the unit tests still passed, the console task to generate the index no longer worked as expected due to an issue with Flysystem. Since it threw an error in the console, that could be used as input to <code>git bisect</code>. I was therefore able to automate the process of finding the bug by running this command:</p>
<pre><code class="lang-bash">$ git bisect run php console index:generate
</code></pre>
<p>This was pretty rare in that it was an ideal situation - the problem was the console command throwing an explicit error, which was perfect as input to <code>bisect run</code>. A more likely scenario in many cases is that if you want to automate catching the error, you’ll need to create an automated test to reproduce that error, and run that test with <code>git bisect run</code>. Given that TDD already recommends writing a test to reproduce a bug before fixing it, it’s prudent to write the test first, then use it to run the bisect command, before fixing the bug and committing both the fix and the new test, so as to not only minimise the manual work required, but also ensure it won’t crop up again.</p>
<p>Certain classes of issues are more difficult to automate in this way - for example, visual regressions in CSS. If you’re using a library like React or Vue, snapshot testing may be a good way to automate the bisect process for HTML rendered by components, or you could try the approach I’ve mentioned before for snapshot testing PHP applications. For legacy applications that can’t create and tear down a database for testing purposes due to gaps in the migration history, it can also be tricky and time-consuming to ensure consistency between runs. However, if you can do it, automating the bisect command makes it much quicker, and leaves you with a test you can retain to ensure that bug never returns again.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Counting Commits in Git]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/09/05/counting-commits-in-git/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/09/05/counting-commits-in-git/</guid>
            <pubDate>Tue, 04 Sep 2012 23:13:00 GMT</pubDate>
            <description><![CDATA[<p>The other day I got to wondering about how I could quickly and easily count how many commits I was making to a specific Git repository every day.</p>
<p>Now, with the default log output, Git shows the date and time at the top of each entry. So in order to determine how many commits have been made to a given repository, all you need to do is determine today’s date, and see how many times that date appears in the log.</p>
<p>So, first task is to get the log. Then, we need to get today’s date, format it appropriately, and use grep to filter for just the lines containing that date. So, we use the date command to fetch the date, then pipe it into awk, which we use to format it the same way as Git does. We then use grep to filter out the lines that have the resulting date. Finally, we use wc to count the number of lines returned by grep.</p>
<p>Here’s what I came up with:</p>
<pre><code class="lang-bash">git log | grep &quot;`date | awk &#39;{print $1, $2, $3}&#39;`&quot; | wc -l
</code></pre>
<p>I’m not that great with tools like awk, so I’m quite proud of managing to do this. It’s quite handy to have around.</p>
]]></description>
        </item>
    </channel>
</rss>
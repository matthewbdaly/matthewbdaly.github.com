<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>performance | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/performance/</link>
        <description>performance | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Mon, 30 Dec 2019 21:13:36 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[How much difference does adding an index to a database table make?]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/03/04/how-much-difference-does-adding-an-index-to-a-database-table-make/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/03/04/how-much-difference-does-adding-an-index-to-a-database-table-make/</guid>
            <pubDate>Mon, 04 Mar 2019 21:26:18 GMT</pubDate>
            <description><![CDATA[<p>For the last few weeks, I’ve been kept busy at work building out a new homepage for the legacy intranet system I maintain. The new homepage is built virtually from scratch with React, and has a completely new set of queries. In addition, I’ve also rebuilt the UI for the navigation to use React too. This has allowed me to bypass a lot of the worst code in the whole code base with the intent to get rid of it once the new home page is live - something I’m very pleased about!</p>
<p>As part of this, I built some new functionality to show items added in the last seven days. This section of the home page can be sorted by several parameters, including popularity. I also added the facility to expand that to 31 days via an AJAX request. However, the AJAX request was painfully slow, often taking 20-30 seconds. Also, the home page was quite slow to load in the first place, and examining the query time in Clockwork indicated that the culprit was the query for the new items.</p>
<p>Further examination of the query behind the new items (both on initial page load and the 31 day AJAX request) indicated that the problem was a join. Last year, one of my first tasks had been to add the facility to record a track for any media item when it was visited. This was accomplished using a polymorphic relationship. While Zend 1 doesn’t have the kind of out-of-the-box support for polymorphic relationships that Laravel has, it’s possible to fake it so I created a <code>tracks</code> table whose columns included <code>trackable_id</code> for the primary key of the tracked object, <code>trackable_type</code> for its class, and <code>user_id</code> for the ID of the user who visited it. Now, I was using that same table to determine the number of times each item had been viewed by joining it on each of the media items, which was the first time it was being read for anything other than a report generated in the admin, and performance was dog slow.</p>
<p>Once I’d established that removing that join from the query removed the performance issue, then it became apparent I was going to need to add an index to the <code>tracks</code> table. The table had got fairly large (low hundreds of thousands), so it had a lot to sort through. As the join used the <code>trackable_id</code> field to join onto the items added, that seemed like a good candidate, so I added the index there.</p>
<p>The results were dramatic, to put it mildly. The initial page load time dropped from 4.44s to 1.29s - around a third of the previous amount. For the AJAX request to fetch the last 31 day’s new items, the results were even more impressive - the loading time dropped from 22.44s to 1.61s. Overall, figuring out which part of the query was causing the poor performance and resolving it took about ten minutes, and resulted in a staggering improvement.</p>
<p>If you don’t have a particularly strong theoretical background with relational databases, knowledge of indices can fall by the wayside somewhat. However, as you can see from this example, if you have a particularly slow query, then adding an index can make a staggering difference, so it’s really worth taking the time to understand a bit more about indices and when they can be useful.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Why the speed of your MVC framework is usually a red herring]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/01/28/why-the-speed-of-your-mvc-framework-is-usually-a-red-herring/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/01/28/why-the-speed-of-your-mvc-framework-is-usually-a-red-herring/</guid>
            <pubDate>Sun, 28 Jan 2018 20:20:03 GMT</pubDate>
            <description><![CDATA[<p>Skim through any programming-related forum and you’ll often find statements along the lines of the following:</p>
<ul>
<li>“I chose Lumen for my website because the benchmarks show it’s faster than Laravel”</li>
<li>“I’m using raw queries because they’re faster than using an ORM”</li>
<li>“I wrote the site in pure PHP to avoid the overhead of a framework”</li>
</ul>
<p>Making my web apps performant is something I care deeply about. Yet every time I see something like this I cringe. Why? Because statements like these are full of wild misconceptions about the real performance bottlenecks in modern web applications. I don’t blame framework vendors for publishing benchmarks of their applications, since the performance of web apps <em>is</em> a big issue, but they are often misleading even when they’re correct, and it’s all too easy for inexperienced developers to think that performance is a matter of picking the fastest framework, rather than following a methodology of identifying and dealing with performance bottlenecks.</p>
<p>In this post I’ll explain why the performance of the framework, while not a non-issue, should come way down the list of factors involved in choosing a framework (or not to use one at all), behind functionality and developer productivity, and how many other factors not related to the choice of framework are involved.</p>
<h2 id="benchmarks-don-t-include-real-world-optimisations">Benchmarks don’t include real-world optimisations</h2>
<p>When benchmarking a number of frameworks together, you’ll typically be testing some fairly basic behaviour such as rendering a view, and maybe making a database query. It’s rare for them to also include things such as caching queries or sending the correct HTTP caching headers.</p>
<p>Also, it’s quite common for the party creating the benchmark to have their own preference they’re more familiar with, in which case they’ll have a better idea of how to optimise that one. If they don’t know how to optimise all of them to the same extent, the end results is going to be biased. For example, in the case of Laravel, running <code>php artisan optimize</code> can significantly improve application performance by caching large chunks of the application.</p>
<p>In addition, the configuration for the web server is quite likely to be suboptimal compared to a production server. For instance, they may not have the opcode cache installed, or Nginx may not set the right headers on static assets. Under these circumstances the benchmarks are very likely to be misleading. Ultimately, if you chose to completely rewrite an entire application from scratch in a new framework to claw back a few milliseconds, how do you know you’ll actually see that translate into better performance in production for your particular use case?</p>
<p>And if you’re even <em>considering</em> running a supposedly performance-critical application on shared hosting, you should hang your head in shame…</p>
<h2 id="your-from-scratch-implementation-of-functionality-is-probably-slower-than-an-existing-one">Your from-scratch implementation of functionality is probably slower than an existing one</h2>
<p>If you’re building some functionality from scratch instead of using an off-the-shelf library on the basis of performance, just stop. Existing libraries have usually had a great deal of attention already, should have working test suites, and depending on how active the developer community around them is, they may well have found and resolved the most egregious performance bottlenecks. Yours, on the other hand, will be new, untested, and could easily have serious bottlenecks if you haven’t profiled it extensively. It’s therefore very, very unlikely that you’ll be able to produce something more performant than the existing solutions, unless those existing solutions are old, barely maintained ones.</p>
<p>The <em>only</em> time this might be worthwhile is if all the existing implementations have boatloads of functionality, and you only need a small portion of that functionality. Even then, you should consider if it’s worth your while for a tiny speed boost. Or if you want to write a new library for it, go ahead - just don’t kid yourself about it being for the sake of performance.</p>
<h2 id="smaller-frameworks-are-faster-because-they-do-less">Smaller frameworks are faster because they do less</h2>
<p>Microframeworks such as Lumen <em>are</em> generally faster (at least in the artificial world of benchmarks), but that’s because they leave out functionality that’s not necessary for their targeted use case. Lumen is aimed at building microservices, and it leaves out things like templating, file handling, and other functionality not focused solely on building microservices. That means it’s less useful for other use cases. Any code that gets added to the application will make it marginally slower just by virtue of being there.</p>
<p>Under these circumstances it’s blindingly obvious that the framework that has to do less setup (eg instantiate fewer services, perform less operations on the request and response), is nearly always going to respond faster, regardless of suitability for more complex work.</p>
<p>If you start building a site with Lumen, but then discover that you need some functionality that Laravel has and Lumen doesn’t, you have two choices:</p>
<ul>
<li>Switch to Laravel</li>
<li>Add that functionality to your application (either through additional packages or rolling it yourself)</li>
</ul>
<p>I’ve often had plans to use Lumen for a project in the past, but then discovered that it would benefit from some of Laravel’s functionality. Under those circumstances I’ve switched straight over to Laravel - my time is too valuable to my employer to waste reimplementing functionality Laravel already has, and that functionality will inevitably have some overhead. Put it this way - I do a lot of Phonegap work, so building APIs is a big part of what I do, but I’ve only ever finished one project using Lumen (a push notification microservice). Every other time, sooner or later I’ve run into a situation where the additional functionality of Laravel would be useful and switched over.</p>
<p>There are occasions when a lighter framework like Lumen makes sense, but only when I simply don’t need the additional functionality of Laravel. It just doesn’t make sense to go for Lumen and then start adding functionality Laravel already has - any new implementation isn’t likely to be as solid, well-tested and performant as Laravel’s implementation.</p>
<h2 id="framework-performance-is-often-less-relevant-if-you-re-using-varnish">Framework performance is often less relevant if you’re using Varnish</h2>
<p>In my experience, if you have a site or API that is under heavy load, then if it’s possible to use Varnish with it, that will have a far more significant effect on performance than switching between PHP frameworks.</p>
<p>Because Varnish sits in front of your web server, when you’re serving cached content, anything after Varnish is completely irrelevant to the performance- it won’t hit the backend again until the cached content has expired. Varnish is effectively a key-value store, and is written in C, so it’s far more performant than just about any backend in any framework you could possibly write. And it’s configurable enough that with sufficient experience it can usually be helpful for most applications.</p>
<p>Varnish isn’t appropriate for every use case, and it doesn’t help with uncached requests (except by reducing the load on the application) but where high performance is necessary it can be a very big help indeed. The speed boost from having Varnish in front of your site and properly configured dwarfs any boost of a few milliseconds from switching PHP framework.</p>
<p>There are other HTTP caching servers available too - for instance, it’s possible to use Nginx as a web cache, and Cloudflare is a hosted service that offers similar performance benefits. Regardless, the same applies - if you can handle a request using the caching server rather than the application behind it, the performance will be immensely better, without having to change your application code.</p>
<h2 id="orm-vs-raw-queries-is-a-drop-in-the-ocean">ORM vs raw queries is a drop in the ocean</h2>
<p>There will always be <em>some</em> overhead from using any ORM. However, this is nearly always so minor as to be a non-issue.</p>
<p>For example, while there might be some slight performance increase from writing raw SQL instead of using an ORM, it’s generally dwarfed by the cost of making the query in the first place. You can get a far, far bigger improvement in performance by efficiently caching the responses than by rewriting ORM queries in raw SQL.</p>
<p>An ORM does make certain types of slow inefficient queries more likely, as well as making “hidden” queries (such as in Laravel when it fetches the user from the session), but that’s something that can be resolved by using a profiler like Clockwork to identify the slow or unnecessary queries and refactoring them. Most ORM’s have tools to handle things like the N+1 problem - for instance, Eloquent has the <code>with()</code> method to eager-load related tables, which is generally a lot more convenient than explicitly writing a query to do the eager-loading for you.</p>
<p>Using an ORM also comes with significant benefits to developers:</p>
<ul>
<li>It’s generally easier to express relations between tables</li>
<li>It helps avoid the mental context switch between PHP and SQL</li>
<li>It does a lot of the work of sanitizing data for you</li>
<li>It helps make your application portable between different databases (eg so you can run your tests using an in-memory SQLite database but use MySQL in production)</li>
<li>Where you have logic that can’t be expressed using the ORM, it’s generally easy to drop down to writing raw SQL for that part</li>
</ul>
<p>In my experience, querying the database is almost always the single biggest bottleneck (the only other thing that can be as bad is if you’re making requests to a slow third-party API), and any overhead from the ORM is a drop in the ocean in comparison. If you have a slow query in a web application, then rewriting it as a raw query is probably the very last thing you should consider doing, after:</p>
<ul>
<li>Refactoring the query or queries to be more efficient/remove unnecessary queries</li>
<li>Making sure the appropriate indices are set on your database</li>
<li>Caching the responses</li>
</ul>
<p>Caching in particular is quite hard to do - it’s difficult to come up with a reliable and reusable strategy for caching responses without serving stale content, but once you can do so, it makes a huge difference to application performance.</p>
<p>Writing all your queries as raw queries is a micro-optimisation - it’s a lot of work for not that much payback, and it’s hardly ever worth the bother. Even if you have a single, utterly horrendous query or set of queries that has a huge overhead, there are better ways to deal with it - under those circumstances I’d be inclined to create a stored procedure in a migration and call that rather than making the query directly.</p>
<h2 id="summary">Summary</h2>
<p>So to sum it up, if someone tells you you should use framework X because it’s faster than framework Y, they might be <em>somewhat</em> right, but that misses the point completely. Benchmarks are so artificial as to be almost useless for determining how your production code will perform. Any half-decent framework will give you the tools you need to optimise performance, and your use of those tools will have a far, far more signficant effect on the response time of your application than picking between different frameworks. I’ve never found a single MVC framework whose core is slow enough that I can’t make it fast enough with the capabilities provided.</p>
<p>Also, considering that these days server hardware is dirt cheap (at time of writing US$5 gets you a Digital Ocean droplet with 1GB of RAM for a month), whereas developers are far, far more expensive, it’s more cost effective to optimise for the <em>developer’s time</em>, not server time, so it makes sense to pick a framework that makes <em>you</em> productive, not one that makes the <em>application</em> productive. That’s no excuse for slow, shitty applications, but when all else fails, spinning up additional servers is a far more cost-effective solution than spending days on end rewriting your entire application in a different framework that benchmarks show might perform better by a few milliseconds.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[A quick and easy Varnish primer]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/09/19/a-quick-and-easy-varnish-primer/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/09/19/a-quick-and-easy-varnish-primer/</guid>
            <pubDate>Sat, 19 Sep 2015 18:42:17 GMT</pubDate>
            <description><![CDATA[<p>As I <a href="/blog/2015/08/22/when-you-should-not-use-wordpress/">mentioned in an earlier post</a>, I recently had the occasion to use Varnish to improve the performance of a website that otherwise would have been unreliable and unusably slow due to WordPress making an excessive number of queries. The difference it made was nothing short of staggering, and I’m not exaggerating when I say it saved the day. I now use Ansible for provisioning new WordPress sites, and Varnish is now a standard part of my WordPress site setup playbook.</p>
<p>However, Varnish can be quite fiddly to configure, and it was something of a baptism of fire for me to learn how to configure it appropriately for this use case. I did make a few mistakes that caused problems down the line, so I thought I’d share the details of how I got it working for that particular site.</p>
<h2 id="what-is-varnish-">What is Varnish?</h2>
<p>From <a href="https://www.varnish-cache.org/about">the website</a>:</p>
<blockquote>
<p>Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents. Varnish Cache is really, really fast. It typically speeds up delivery with a factor of 300 - 1000x, depending on your architecture.</p>
</blockquote>
<p>In other words, you run it on the usual HTTP or HTTPS port, move your usual web server to a different port, and configure it, and it will cache web pages so they can be served more quickly to subsequent visitors.</p>
<p>Be warned - Varnish is not something where you can generally stick with the default settings. The default behaviour does make a lot of sense, but in practice almost no-one will be able to get away with leaving the configuration unchanged.</p>
<h2 id="installing-varnish">Installing Varnish</h2>
<p>If you’re using Debian or a derivative such as Ubuntu, Varnish is available via <code>apt-get</code>:</p>
<pre><code class="lang-bash">$ sudo apt-get install varnish
</code></pre>
<p>You may also want to install the documentation:</p>
<pre><code class="lang-bash">$ sudo apt-get install varnish-doc
</code></pre>
<p>If you’re using Apache I’d also recommend installing <code>libapache2-mod-rpaf</code> and enabling it with <code>sudo a2enmod rpaf</code> - without this, Apache will log all incoming requests as coming from the same server.</p>
<p>I’m assuming you already have a normal web server installed. I’ll assume you’re using Apache, but it shouldn’t be hard to adapt these instructions to work with Nginx. I’m also assuming that the site you want to use Varnish for is a WordPress site with WooCommerce and W3 Total Cache installed. However, this is only for example purposes. If you want to use Varnish for a different web app, you’ll need to plan your caching strategy around that web app yourself.</p>
<p>Please also note that this is using Varnish 4.0, which is the version available with Debian Jessie. If you’re using an older operating system, you may have Varnish 3.0 in the repositories - be warned, the configuration language changed in Varnish 4.0, so the examples here will not work with older versions of Varnish.</p>
<p>By default, Varnish runs on port 6081, which is fine for testing it out, but once you want to go live it’s not what you want. When it’s time to go live, you’ll need to open up <code>/etc/default/varnish</code> and edit the value of <code>DAEMON_OPTS</code> to something like this:</p>
<pre><code class="lang-bash">DAEMON_OPTS=&quot;-a :80 \
             -T localhost:6082 \
             -f /etc/varnish/default.vcl \
             -S /etc/varnish/secret \
             -s malloc,256m&quot;
</code></pre>
<p>Note that the <code>-a</code> flag represents the port Varnish is running on.</p>
<p>If you’re using an operating system that uses <code>systemd</code>, such as Debian Jessie, this alone won’t be sufficient. Create a new file at <code>/etc/systemd/system/varnish.service</code> and enter the following:</p>
<pre><code class="lang-bash">[Unit]
Description=Varnish HTTP accelerator

[Service]
Type=forking
LimitNOFILE=131072
LimitMEMLOCK=82000
ExecStartPre=/usr/sbin/varnishd -C -f /etc/varnish/default.vcl
ExecStart=/usr/sbin/varnishd -a :80 -T localhost:6082 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s malloc,256m
ExecReload=/usr/share/varnish/reload-vcl

[Install]
WantedBy=multi-user.target
</code></pre>
<p>Next, we need to move our web server to a different port. We’ll use port 8080. Replace the contents of <code>/etc/apache2/ports.conf</code> with this:</p>
<pre><code class="lang-apache"># If you just change the port or add more ports here, you will likely also
# have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default
# This is also true if you have upgraded from before 2.2.9-3 (i.e. from
# Debian etch). See /usr/share/doc/apache2.2-common/NEWS.Debian.gz and
# README.Debian.gz

NameVirtualHost *:8080
Listen 8080

&lt;IfModule mod_ssl.c&gt;
    # If you add NameVirtualHost *:443 here, you will also have to change
    # the VirtualHost statement in /etc/apache2/sites-available/default-ssl
    # to &lt;VirtualHost *:443&gt;
    # Server Name Indication for SSL named virtual hosts is currently not
    # supported by MSIE on Windows XP.
    Listen 443
&lt;/IfModule&gt;

&lt;IfModule mod_gnutls.c&gt;
    Listen 443
&lt;/IfModule&gt;
</code></pre>
<p>You’ll also need to change the ports for the individual site files under <code>/etc/apache2/sites-available</code>, as in this example:</p>
<pre><code class="lang-apache">&lt;VirtualHost *:8080&gt;
    ServerAdmin webmaster@localhost

    DocumentRoot /var/www
    &lt;Directory /&gt;
        Options FollowSymLinks
        AllowOverride All
    &lt;/Directory&gt;
    &lt;Directory /var/www/&gt;
        Options FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        allow from all
    &lt;/Directory&gt;

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    &lt;Directory &quot;/usr/lib/cgi-bin&quot;&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</code></pre>
<h2 id="writing-our-vcl-file">Writing our VCL file</h2>
<p>Next, we come to our Varnish configuration proper, which resides at <code>/etc/varnish/default.vcl</code>. The <code>vcl</code> stands for Varnish Configuration Language, and it has a syntax somewhat reminiscent of C.</p>
<p>The default behaviour for Varnish is as follows:</p>
<ul>
<li>It does not cache requests that contain cookie or authorization headers</li>
<li>It does not cache requests which the backend HTTP server indicates should not be cached</li>
<li>It will only cache GET and HEAD requests</li>
</ul>
<p>This behaviour is unlikely to meet your needs. We’ll therefore work through the Varnish config file I wrote for this WordPress site in the hope that it will teach you enough to adapt it to your own needs.</p>
<pre><code class="lang-bash">vcl 4.0;

backend default {
    .host = &quot;127.0.0.1&quot;;
    .port = &quot;8080&quot;;
}

acl purge {
    &quot;127.0.0.1&quot;;
    &quot;localhost&quot;;
}

sub vcl_recv {

    # Never cache PUT, PATCH, DELETE or POST requests
    if (req.method == &quot;PUT&quot; || req.method == &quot;PATCH&quot; || req.method == &quot;DELETE&quot; || req.method == &quot;POST&quot;) {
        return (pass);
    }

    # Never cache cart, account, checkout or addons
    if (req.url ~ &quot;^/(cart|my-account|checkout|addons)&quot;) {
        return (pass);
    }

    # Never cache adding to cart
    if ( req.url ~ &quot;\?add-to-cart=&quot; ) {
        return (pass);
    }

    # Never cache admin or login
    if ( req.url ~ &quot;^/wp-(admin|login|cron)&quot; ) {
        return (pass);
    }

    # Never cache WooCommerce API
    if ( req.url ~ &quot;wc-api&quot; ) {
        return (pass);
    }

    # Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*&quot;, &quot;&quot;);
    # Remove a &quot;;&quot; prefix, if present.
    set req.http.Cookie = regsub(req.http.Cookie, &quot;^;\s*&quot;, &quot;&quot;);

    # Remove the wp-settings-1 cookie
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;wp-settings-1=[^;]+(; )?&quot;, &quot;&quot;);

    # Remove the wp-settings-time-1 cookie
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;wp-settings-time-1=[^;]+(; )?&quot;
            , &quot;&quot;);

    # Remove the wp test cookie
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;wordpress_test_cookie=[^;]+(; )?&quot;, &quot;&quot;);

    # Static content unique to the theme can be cached (so no user uploaded images)
    # The reason I don&#39;t take the wp-content/uploads is because of cache size on bigger blogs
    # that would fill up with all those files getting pushed into cache
    if (req.url ~ &quot;wp-content/themes/&quot; &amp;&amp; req.url ~ &quot;\.(css|js|png|gif|jp(e)?g)&quot;) {
        unset req.http.cookie;
    }

    # Even if no cookies are present, I don&#39;t want my &quot;uploads&quot; to be cached due to their potential size
    if (req.url ~ &quot;/wp-content/uploads/&quot;) {
        return (pass);
    }

    # any pages with captchas need to be excluded
    if (req.url ~ &quot;^/contact/&quot;)
    {
        return(pass);
    }

    # Check the cookies for wordpress-specific items
    if (req.http.Cookie ~ &quot;wordpress_&quot; || req.http.Cookie ~ &quot;comment_&quot;) {
        # A wordpress specific cookie has been set
        return (pass);
    }

    # allow PURGE from localhost
    if (req.method == &quot;PURGE&quot;) {
        if (!client.ip ~ purge) {
            return(synth(405, &quot;Not allowed.&quot;));
        }
        return (purge);
    }

    # Force lookup if the request is a no-cache request from the client
    if (req.http.Cache-Control ~ &quot;no-cache&quot;) {
        return (pass);
    }

    # Try a cache-lookup
    return (hash);
}

sub vcl_backend_response {
    set beresp.grace = 5m;
}
</code></pre>
<p>Let’s take a closer look at the first part of the config:</p>
<pre><code class="lang-bash">vcl 4.0;

backend default {
    .host = &quot;127.0.0.1&quot;;
    .port = &quot;8080&quot;;
}
</code></pre>
<p>Here we define that we’re using version 4.0 of VCL, and that the host to use as a back end is port 8080 on the same server. If your normal HTTP server is running on a different port, you will need to set it here. Also, note that you can use a different host as the backend.</p>
<pre><code class="lang-bash">acl purge {
    &quot;127.0.0.1&quot;;
    &quot;localhost&quot;;
}
</code></pre>
<p>We also set which hosts can trigger a purge of the cache, namely <code>localhost</code> and <code>127.0.0.1</code>. The web app hosted on the server can then make an HTTP <code>PURGE</code> request to a given path, which will clear that path from the cache. In our case, W3 Total Cache supports this - if it’s a custom web app, you’ll need to implement this functionality yourself to clear the cache when new content is added.</p>
<p>Next, we start the <code>vcl_recv</code> subroutine. This is where we define our rules for deciding whether or not to serve content from the cache. Let’s look at our first rule:</p>
<pre><code class="lang-bash">sub vcl_recv {

    # Never cache PUT, PATCH, DELETE or POST requests
    if (req.method == &quot;PUT&quot; || req.method == &quot;PATCH&quot; || req.method == &quot;DELETE&quot; || req.method == &quot;POST&quot;) {
        return (pass);
    }
</code></pre>
<p>Here, we declare that we should never cache any <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> or <code>POST</code> requests, on the basis that these change the state of the application. This ensures that things like contact forms will work as expected.</p>
<p>Note that we’re getting the value of <code>req.method</code> to determine the HTTP verb used. The <code>req</code> object has many other properties we’ll see being used.</p>
<pre><code class="lang-bash">    # Never cache cart, account, checkout or addons
    if (req.url ~ &quot;^/(cart|my-account|checkout|addons)&quot;) {
        return (pass);
    }

    # Never cache adding to cart
    if ( req.url ~ &quot;\?add-to-cart=&quot; ) {
        return (pass);
    }

    # Never cache admin or login
    if ( req.url ~ &quot;^/wp-(admin|login|cron)&quot; ) {
        return (pass);
    }

    # Never cache WooCommerce API
    if ( req.url ~ &quot;wc-api&quot; ) {
        return (pass);
    }
</code></pre>
<p>Next, we define a series of regular expressions, and if the URL (represented by <code>req.url</code>) matches that regex, then the request is passed straight through to Apache without Varnish getting involved. In this case, we never want to cache the following sections:</p>
<ul>
<li>The shopping cart, checkout, addons page or account page</li>
<li>The Add to cart button</li>
<li>The WordPress admin and login screen, and cron requests</li>
<li>The WooCommerce API</li>
</ul>
<p>You’ll need to consider which parts of your site must always serve the latest content and which don’t need everything to be fully up to date. Typically admin areas any anything interactive must not be cached, while the front page is usually fine.</p>
<pre><code class="lang-bash">    # Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*&quot;, &quot;&quot;);
    # Remove a &quot;;&quot; prefix, if present.
    set req.http.Cookie = regsub(req.http.Cookie, &quot;^;\s*&quot;, &quot;&quot;);

    # Remove the wp-settings-1 cookie
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;wp-settings-1=[^;]+(; )?&quot;, &quot;&quot;);

    # Remove the wp-settings-time-1 cookie
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;wp-settings-time-1=[^;]+(; )?&quot;
            , &quot;&quot;);

    # Remove the wp test cookie
    set req.http.Cookie = regsuball(req.http.Cookie, &quot;wordpress_test_cookie=[^;]+(; )?&quot;, &quot;&quot;);

</code></pre>
<p>Cookies, even ones set on the client side such as those for Google Analytics, can prevent content from being cached. To prevent this, you need to configure Varnish to discard these cookies before passing them on to Apache. In this case, we want to exclude Google Analytics and various WordPress cookies.</p>
<pre><code class="lang-bash">    # Static content unique to the theme can be cached (so no user uploaded images)
    if (req.url ~ &quot;wp-content/themes/&quot; &amp;&amp; req.url ~ &quot;\.(css|js|png|gif|jp(e)?g)&quot;) {
        unset req.http.cookie;
    }
</code></pre>
<p>Here we allow static content that’s part of the site theme to be cached since that doesn’t change often, so we unset the cookies for that request.</p>
<pre><code class="lang-bash">    # Even if no cookies are present, I don&#39;t want my &quot;uploads&quot; to be cached due to their potential size
    if (req.url ~ &quot;/wp-content/uploads/&quot;) {
        return (pass);
    }
</code></pre>
<p>Here we prevent any user-uploaded content from being cached, since that can change often.</p>
<pre><code class="lang-bash">    # any pages with captchas need to be excluded
    if (req.url ~ &quot;^/contact/&quot;)
    {
        return(pass);
    }
</code></pre>
<p>Captchas must obviously never be cached since that will break them. In this case, we assume that the contact form has a captcha, so it gets excluded from the cache.</p>
<pre><code class="lang-bash">    # Check the cookies for wordpress-specific items
    if (req.http.Cookie ~ &quot;wordpress_&quot; || req.http.Cookie ~ &quot;comment_&quot;) {
        # A wordpress specific cookie has been set
        return (pass);
    }
</code></pre>
<p>Here we check for remaining WordPress-specific cookies. These would indicate that a user is signed in, in which case we may want to serve them all the latest content rather than displaying content from the cache.</p>
<pre><code class="lang-bash">    # allow PURGE from localhost
    if (req.method == &quot;PURGE&quot;) {
        if (!client.ip ~ purge) {
            return(synth(405, &quot;Not allowed.&quot;));
        }
        return (purge);
    }
</code></pre>
<p>Remember where we allowed the local server to clear the cache? This section actually carries out the purge when it receives a request from an authorised client.</p>
<pre><code class="lang-bash">    # Force lookup if the request is a no-cache request from the client
    if (req.http.Cache-Control ~ &quot;no-cache&quot;) {
        return (pass);
    }
</code></pre>
<p>Here we check to see if the <code>Cache-Control</code> HTTP header is set to <code>no-cache</code>. If so, we pass it straight through to Apache.</p>
<pre><code class="lang-bash">    # Try a cache-lookup
    return (hash);
}
</code></pre>
<p>This is the last rule under <code>vcl_recv</code>, because it only reaches this point if the request has got past all the other rules. It tries to fetch the page from the cache. If the page is not in the cache, it passes it on to Apache and will cache the response.</p>
<pre><code class="lang-bash">sub vcl_backend_response {
    set beresp.grace = 5m;
}
</code></pre>
<p>This is where we set how long responses are cached for. Here we’ve set it to 5 minutes.</p>
<p>With that done, we should be ready to restart Varnish and Apache. If you are using an operating system with <code>systemd</code>, then the following commands should restart Apache and Varnish:</p>
<pre><code class="lang-bash">$ sudo systemctl reload apache2.service
$ sudo systemctl reload varnish.service
</code></pre>
<p>For those not yet using <code>systemd</code>, try this instead:</p>
<pre><code class="lang-bash">$ sudo service apache2 restart
$ sudo service varnish restart
</code></pre>
<p>If you then visit your site and inspect the HTTP headers using your browser’s dev tools, you’ll notice the new HTTP header <code>X-Varnish</code> in the response. This tells you that Varnish is up and running. If you make sure you’re logged out, you should hopefully see that if you load a page, and then load it again, the second response is noticeably quicker.</p>
<p>Installing and configuring Varnish is a relatively quick and easy way of helping your website scale to be able to serve many more users, and if the site becomes popular all of a sudden, it can make a huge difference as to whether the site can stand up to the load or not. If you need more information on how to configure Varnish for your own needs, I recommend consulting the excellent <a href="https://www.varnish-cache.org/docs/4.0/">documentation</a>.</p>
]]></description>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>mariadb | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/mariadb/</link>
        <description>mariadb | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Mon, 30 Dec 2019 21:13:37 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[Full-text search with MariaDB]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/05/13/full-text-search-with-mariadb/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/05/13/full-text-search-with-mariadb/</guid>
            <pubDate>Sun, 13 May 2018 13:55:42 GMT</pubDate>
            <description><![CDATA[<p>Recently I had the occasion to check out MariaDB’s implementation of full-text search. As it’s a relatively recent arrival in MySQL and MariaDB, it doesn’t seem to get all that much attention. In this post I’ll show you how to use it, with a few Laravel-specific pointers. We’ll be using the default <code>User</code> model in a new Laravel installation, which has columns for <code>name</code> and <code>email</code>.</p>
<p>Our first task is to create the fulltext index, which is necessary to perform the query. Run the following command:</p>
<pre><code class="lang-sql">ALTER TABLE users ADD FULLTEXT (name, email);
</code></pre>
<p>As you can see, we can specify multiple columns in our table to index.</p>
<p>If you’re using Laravel, you’ll want to create the following migration for this:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class AddFulltextIndexForUsers extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::statement(&#39;ALTER TABLE users ADD FULLTEXT(name, email)&#39;);
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::statement(&#39;ALTER TABLE users DROP INDEX IF EXISTS name&#39;);
    }
}
</code></pre>
<p>Note that the index is named after the first field passed to it, so when we drop it we refer to it as <code>name</code>. Then, to actually query the index, you should run a command something like this:</p>
<pre><code class="lang-sql">SELECT * FROM users WHERE MATCH(name, email) AGAINST (&#39;jeff&#39; IN NATURAL LANGUAGE MODE);
</code></pre>
<p>Note that <code>NATURAL LANGUAGE MODE</code> is actually the default, so you can leave it off if you wish. We also have to specify the columns to match against.</p>
<p>If you’re using Laravel, you may want to create a reusable local scope for it:</p>
<pre><code class="lang-php">    public function scopeSearch($query, $search)
    {
        if (!$search) {
            return $query;
        }
        return $query-&gt;whereRaw(&#39;MATCH(name, email) AGAINST (?)&#39;, [$search]);
    }
</code></pre>
<p>Then you can call it as follows:</p>
<pre><code class="lang-php">User::search(&#39;jeff&#39;)-&gt;get();
</code></pre>
<p>I personally have noticed that the query using the <code>MATCH</code> keywords seems to be far more performant, with the response time being between five and ten times less than a similar command using <code>LIKE</code>, however this observation isn’t very scientific (plus, we are talking about queries that still run in a fraction of a second). However, if you’re doing a particularly expensive query that currently uses a <code>LIKE</code> statement, it’s possible you may get better results by switching to a <code>MATCH</code> statement. Full-text search probably isn’t all that useful in this context - it’s only once we’re talking about longer text, such as blog posts, that some of the advantages like support for stopwords comes into play.</p>
<p>From what I’ve seen this implementation of full-text search is a lot simpler than in PostgreSQL, which has ups and downs. On the one hand, it’s a lot easier to implement, but conversely it’s less useful - there’s no obvious way to perform a full-text search against joined tables. However, it does seem to be superior to using a <code>LIKE</code> statement, so it’s probably a good fit for smaller sites where something like Elasticsearch would be overkill.</p>
]]></description>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>geodjango | Matthew Daly&apos;s Blog</title>
    <updated>2018-02-11T20:51:39Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/geodjango/"/>
    <subtitle>geodjango | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Building a location aware web app with GeoDjango]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/03/26/building-a-location-aware-web-app-with-geodjango/">
        </link>
        <updated>2016-03-26T21:30:29Z</updated>
        <summary type="html"><![CDATA[<p>PostgreSQL has excellent support for geographical data thanks to the PostGIS extension, and Django allows you to take full advantage of it thanks to GeoDjango. In this tutorial, I’ll show you how to use GeoDjango to build a web app that allows users to search for gigs and events near them.</p>
<h2 id="requirements">Requirements</h2>
<p>I’ve made the jump to Python 3, and if you haven’t done so yet, I highly recommend it - it’s not hard, and there’s very few modules left that haven’t been ported across. As such, this tutorial assumes you’re using Python 3. You’ll also need to have Git, PostgreSQL and PostGIS installed - I’ll leave the details of doing so up to you as it varies by platform, but you can generally do so easily with a package manager on most Linux distros. On Mac OS X I recommend using Homebrew. If you’re on Windows I think your best bet is probably to use a Vagrant VM.</p>
<p>We’ll be using Django 1.9 - if by the time you read this a newer version of Django is out, it’s quite possible that some things may have changed and you’ll need to work around any problems caused. Generally search engines are the best place to look for this, and I’ll endeavour to keep the resulting Github repository as up to date as I can, so try those if you get stuck.</p>
<h2 id="getting-started">Getting started</h2>
<p>First of all, let’s create our database. Make sure you’re running as a user that has the required privileges to create users and databases for PostgreSQL and run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ createdb gigfinder</code></pre>
<p>This creates the database. Next, we create the user:</p>
<pre><code class="hljs lang-bash singleline">$ createuser <span class="hljs-_">-s</span> giguser -P</code></pre>
<p>You’ll be prompted to enter a password for the new user. Next, we want to use the <code>psql</code> command-line client to interact with our new database:</p>
<pre><code class="hljs lang-bash singleline">$ psql gigfinder</code></pre>
<p>This connects to the database. Run these commands to set up access to the database and install the PostGIS extension:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE gigfinder TO giguser;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># CREATE EXTENSION postgis;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>With our database set up, it’s time to start work on our project. Let’s create our virtualenv in a new folder:</p>
<pre><code class="hljs lang-bash singleline">$ pyvenv venv</code></pre>
<p>Then activate it:</p>
<pre><code class="hljs lang-bash singleline">$ <span class="hljs-built_in">source</span> venv/bin/activate</code></pre>
<p>Then we install Django, along with a few other production dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ pip install django-toolbelt</code></pre>
<p>And record our dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze &gt; requirements.txt</code></pre>
<p>Next, we create our application skeleton:</p>
<pre><code class="hljs lang-bash singleline">$ django-admin.py startproject gigfinder .</code></pre>
<p>We’ll also create a <code>.gitignore</code> file:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>venv/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>.DS_Store</td><tr><td class="linenos" data-pseudo-content="3"></td><td>*.swp</td><tr><td class="linenos" data-pseudo-content="4"></td><td>node_modules/</td><tr><td class="linenos" data-pseudo-content="5"></td><td>*.pyc</td></table></code></pre>
<p>Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git init</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git add .gitignore requirements.txt manage.py gigfinder</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ git commit -m <span class="hljs-string">'Initial commit'</span></td></table></code></pre>
<p>Next, let’s create our first app, which we will call <code>gigs</code>:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py startapp gigs</code></pre>
<p>We need to add our new app to the <code>INSTALLED_APPS</code> setting. While we’re there we’ll also add GIS support and set up the database connection. First, add the required apps to <code>INSTALLED_APPS</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>]</td></table></code></pre>
<p>Next, configure the database:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>         <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.contrib.gis.db.backends.postgis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>         <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'gigfinder'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>         <span class="hljs-string">'USER'</span>: <span class="hljs-string">'giguser'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>         <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Let’s run the migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: sessions, contenttypes, admin, auth</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  Applying admin.0002_logentry_remove_auto_add... OK</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Applying contenttypes.0002_remove_content_type_name... OK</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0007_alter_validators_add_error_messages... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying sessions.0001_initial... OK</td></table></code></pre>
<p>And create our superuser account:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py createsuperuser</code></pre>
<p>Now, we’ll commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Created gigs app'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master e72a846] Created gigs app</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 8 files changed, 24 insertions(+), 3 deletions(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/__init__.py</td><tr><td class="linenos" data-pseudo-content="6"></td><td> create mode 100644 gigs/admin.py</td><tr><td class="linenos" data-pseudo-content="7"></td><td> create mode 100644 gigs/apps.py</td><tr><td class="linenos" data-pseudo-content="8"></td><td> create mode 100644 gigs/migrations/__init__.py</td><tr><td class="linenos" data-pseudo-content="9"></td><td> create mode 100644 gigs/models.py</td><tr><td class="linenos" data-pseudo-content="10"></td><td> create mode 100644 gigs/tests.py</td><tr><td class="linenos" data-pseudo-content="11"></td><td> create mode 100644 gigs/views.py</td></table></code></pre>
<h2 id="our-first-model">Our first model</h2>
<p>At this point, it’s worth thinking about the models we plan for our app to have. First we’ll have a <code>Venue</code> model that contains details of an individual venue, which will include a name and a geographical location. We’ll also have an <code>Event</code> model that will represent an individual gig or event at a venue, and will include a name, date/time and a venue as a foreign key.</p>
<p>Before we start writing our first model, we need to write a test for it, but we also need to be able to create objects easily in our tests. We also want to be able to easily examine our objects, so we’ll install iPDB and Factory Boy:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ pip install ipdb factory-boy</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ pip freeze &gt; requirements.txt</td></table></code></pre>
<p>Next, we write a test for the <code>Venue</code> model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Note that we randomly generate our location - this is done as suggested in <a href="http://stackoverflow.com/questions/32828890/using-factory-boy-with-geodjango-pointfields">this Stack Overflow post</a>.</p>
<p>Now, running our tests brings up an expected error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Venue'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Let’s create our <code>Venue</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>For now, we’re just creating a simple dummy model. Note that we import <code>models</code> from <code>django.contrib.gis.db</code> instead of the usual place - this gives us access to the additional geographical fields.</p>
<p>If we run our tests again we get an error:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_venue"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_venue"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_venue"</span> ORDER BY <span class="hljs-string">"gigs_ve...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_venue<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_venue<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_venue<span class="hljs-string">" ORDER BY "</span>gigs_ve...</td></table></code></pre>
<p>Let’s update our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td></table></code></pre>
<p>Then create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0001_initial.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Venue</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: gigs, sessions, contenttypes, auth, admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0001_initial... OK</td></table></code></pre>
<p>Then if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.362s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They should pass. Note that Django may complain about needing to delete the test database before running the tests, but this should not cause any problems. Let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add requirements.txt gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Venue model in place'</span></td></table></code></pre>
<p>With our venue done, let’s turn to our <code>Event</code> model. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td></table></code></pre>
<p>Then we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to import <span class="hljs-built_in">test</span> module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 428, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line 369, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 2, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    from gigs.models import Venue, Event</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot import name <span class="hljs-string">'Event'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.001s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>As expected, this fails, so create an empty <code>Event</code> model in <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests now will raise an error due to the table not existing:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py"</span>, line 64, <span class="hljs-keyword">in</span> execute</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-built_in">return</span> self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>psycopg2.ProgrammingError: relation <span class="hljs-string">"gigs_event"</span> does not exist</td><tr><td class="linenos" data-pseudo-content="7"></td><td>LINE 1: SELECT <span class="hljs-string">"gigs_event"</span>.<span class="hljs-string">"id"</span> FROM <span class="hljs-string">"gigs_event"</span> ORDER BY <span class="hljs-string">"gigs_ev...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                                      ^</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>The above exception was the direct cause of the following exception:</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File "</span>manage.py<span class="hljs-string">", line 10, in &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    execute_from_command_line(sys.argv)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 353, in execute_from_command_line</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    utility.execute()</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/__init__.py<span class="hljs-string">", line 345, in execute</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    self.fetch_command(subcommand).run_from_argv(self.argv)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 30, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    super(Command, self).run_from_argv(argv)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 348, in run_from_argv</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    self.execute(*args, **cmd_options)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 74, in execute</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    super(Command, self).execute(*args, **options)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/base.py<span class="hljs-string">", line 399, in execute</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    output = self.handle(*args, **options)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/management/commands/test.py<span class="hljs-string">", line 90, in handle</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    failures = test_runner.run_tests(test_labels)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 532, in run_tests</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    old_config = self.setup_databases()</td><tr><td class="linenos" data-pseudo-content="32"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 482, in setup_databases</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    self.parallel, **kwargs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/<span class="hljs-built_in">test</span>/runner.py<span class="hljs-string">", line 726, in setup_databases</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    serialize=connection.settings_dict.get("</span>TEST<span class="hljs-string">", {}).get("</span>SERIALIZE<span class="hljs-string">", True),</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 78, in create_test_db</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    self.connection._test_serialized_contents = self.serialize_db_to_string()</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 122, in serialize_db_to_string</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    serializers.serialize("</span>json<span class="hljs-string">", get_objects(), indent=None, stream=out)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/__init__.py<span class="hljs-string">", line 129, in serialize</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    s.serialize(queryset, **options)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/serializers/base.py<span class="hljs-string">", line 79, in serialize</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    for count, obj in enumerate(queryset, start=1):</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/base/creation.py<span class="hljs-string">", line 118, in get_objects</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    for obj in queryset.iterator():</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/query.py<span class="hljs-string">", line 52, in __iter__</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    results = compiler.execute_sql()</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/models/sql/compiler.py<span class="hljs-string">", line 848, in execute_sql</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/utils.py<span class="hljs-string">", line 95, in __exit__</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    six.reraise(dj_exc_type, dj_exc_value, traceback)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/utils/six.py<span class="hljs-string">", line 685, in reraise</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    raise value.with_traceback(tb)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>  File "</span>/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/db/backends/utils.py<span class="hljs-string">", line 64, in execute</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    return self.cursor.execute(sql, params)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>django.db.utils.ProgrammingError: relation "</span>gigs_event<span class="hljs-string">" does not exist</td><tr><td class="linenos" data-pseudo-content="59"></td><td>LINE 1: SELECT "</span>gigs_event<span class="hljs-string">"."</span>id<span class="hljs-string">" FROM "</span>gigs_event<span class="hljs-string">" ORDER BY "</span>gigs_ev...</td></table></code></pre>
<p>So let’s populate our model:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    venue = models.ForeignKey(Venue)</td></table></code></pre>
<p>And create our migration:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">'gigs'</span>:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  0002_event.py:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    - Create model Event</td></table></code></pre>
<p>And run it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Apply all migrations: auth, admin, sessions, contenttypes, gigs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Applying gigs.0002_event... OK</td></table></code></pre>
<p>And run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.033s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Again, you may be prompted to delete the test database, but this should not be an issue.</p>
<p>With this done, let’s commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added Event model'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 47ba686] Added Event model</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 67 insertions(+), 1 deletion(-)</td><tr><td class="linenos" data-pseudo-content="5"></td><td> create mode 100644 gigs/migrations/0002_event.py</td></table></code></pre>
<h2 id="setting-up-the-admin">Setting up the admin</h2>
<p>For an application like this, you’d expect the curators of the site to maintain the gigs and venues stored in the database, and that’s an obvious use case for the Django admin. So let’s set our models up to be available in the admin. Open up <code>gigs/admin.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(Venue)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Now, if you start up the dev server as usual with <code>python manage.py runserver</code> and visit <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a>, you can see that our <code>Event</code> and <code>Venue</code> models are now available. However, the string representations of them are pretty useless. Let’s fix that. First, we amend our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="72"></td><td></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td></table></code></pre>
<p>Next, we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>FF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_create_event (gigs.tests.EventTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 74, <span class="hljs-keyword">in</span> test_create_event</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: <span class="hljs-string">'Event object'</span> != <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>- Event object</td><tr><td class="linenos" data-pseudo-content="12"></td><td>+ Queens of the Stone Age - Wembley Arena</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="16"></td><td>FAIL: test_create_venue (gigs.tests.VenueTest)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 52, <span class="hljs-keyword">in</span> test_create_venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>AssertionError: <span class="hljs-string">'Venue object'</span> != <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>- Venue object</td><tr><td class="linenos" data-pseudo-content="23"></td><td>+ Wembley Arena</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.059s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (failures=2)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>They fail as expected. So let’s update <code>gigs/models.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Venue</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Model for a venue</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    location = models.PointField()</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> self.name</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    Model for an event</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    datetime = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    venue = models.ForeignKey(Venue)</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-string">"%s - %s"</span> % (self.name, self.venue.name)</td></table></code></pre>
<p>For the venue, we just use the name. For the event, we use the event name and the venue name.</p>
<p>Now, we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 2 tests <span class="hljs-keyword">in</span> 0.048s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Added models to admin'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>[master 65d051f] Added models to admin</td><tr><td class="linenos" data-pseudo-content="4"></td><td> 3 files changed, 15 insertions(+), 1 deletion(-)</td></table></code></pre>
<p>Our models are now in place, so you may want to log into the admin and create a few venues and events so you can see it in action. Note that the location field for the <code>Venue</code> model creates a map widget that allows you to select a geographical location. It is a bit basic, however, so let’s make it better. Let’s install <code>django-floppyforms</code>:</p>
<pre><code class="hljs lang-bash singleline">$ pip install django-floppyforms</code></pre>
<p>And add it to our requirements:</p>
<pre><code class="hljs lang-bash singleline">$ pip freeze -r requirements.txt</code></pre>
<p>Then add it to <code>INSTALLED_APPS</code> in <code>gigfinder/setttings.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.gis'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'gigs'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'floppyforms'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>]</td></table></code></pre>
<p>Now we create a custom point widget for our admin, a custom form for the venues, and a custom venue admin:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> ModelForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> floppyforms.gis <span class="hljs-keyword">import</span> PointWidget, BaseGMapWidget</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPointWidget</span><span class="hljs-params">(PointWidget, BaseGMapWidget)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Media</span>:</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        js = (<span class="hljs-string">'/static/floppyforms/js/MapWidget.js'</span>,)</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdminForm</span><span class="hljs-params">(ModelForm)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        fields = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'location'</span>]</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        widgets = {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'location'</span>: CustomPointWidget()</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueAdmin</span><span class="hljs-params">(admin.ModelAdmin)</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    form = VenueAdminForm</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>admin.site.register(Venue, VenueAdmin)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>admin.site.register(Event)</td></table></code></pre>
<p>Note in particular that we define the media for our widget so we can include some required Javascript. If you run the dev server again, you should see that the map widget in the admin is now provided by Google Maps, making it much easier to identify the correct location of the venue.</p>
<p>Time to commit our changes:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigfinder/ gigs/ requirements.txt</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Customised location widget'</span></td></table></code></pre>
<p>With our admin ready, it’s time to move on to the user-facing part of the web app.</p>
<h2 id="creating-our-views">Creating our views</h2>
<p>We will keep the front end for this app as simple as possible for the purposes of this tutorial, but of course you should feel free to expand upon this as you see fit. What we’ll do is create a form that uses HTML5 geolocation to get the user’s current geographical coordinates. It will then return events in the next week, ordered by how close the venue is. Please note that there are plans afoot in some browsers to prevent HTML5 geolocation from working unless content is server over HTTPS, so that may complicate things.</p>
<p>How do we query the database to get this data? It’s not too difficult, as shown in this example:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py shell</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Python 3.5.1 (default, Mar 25 2016, 00:17:15)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Type <span class="hljs-string">"copyright"</span>, <span class="hljs-string">"credits"</span> or <span class="hljs-string">"license"</span> <span class="hljs-keyword">for</span> more information.</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>IPython 4.1.2 -- An enhanced Interactive Python.</td><tr><td class="linenos" data-pseudo-content="6"></td><td>?         -&gt; Introduction and overview of IPython<span class="hljs-string">'s features.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>%quickref -&gt; Quick reference.</td><tr><td class="linenos" data-pseudo-content="8"></td><td>help      -&gt; Python'</span>s own <span class="hljs-built_in">help</span> system.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>object?   -&gt; Details about <span class="hljs-string">'object'</span>, use <span class="hljs-string">'object??'</span> <span class="hljs-keyword">for</span> extra details.</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>In [1]: from gigs.models import *</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>In [2]: from django.contrib.gis.geos import Point</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>In [3]: from django.contrib.gis.db.models.functions import Distance</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>In [4]: location = Point(52.3749159, 1.1067473, srid=4326)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>In [5]: Venue.objects.all().annotate(distance=Distance(<span class="hljs-string">'location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Out[5]: [&lt;Venue: Diss Corn Hall&gt;, &lt;Venue: Waterfront Norwich&gt;, &lt;Venue: UEA Norwich&gt;, &lt;Venue: Wembley Arena&gt;]</td></table></code></pre>
<p>I’ve set up a number of venues using the admin, one round the corner, two in Norwich, and one in London. I then imported the models, the <code>Point</code> class, and the <code>Distance</code> function, and created a <code>Point</code> object. Note that the <code>Point</code> is passed three fields - the first and second are the latitude and longitude, respectively, while the <code>srid</code> field takes a value of <code>4326</code>. This field represents the <a href="https://en.wikipedia.org/wiki/SRID">Spatial Reference System Identifier</a> used for this query - we’ve gone for <a href="https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84">WGS 84</a>, which is a common choice and is referred to with the SRID 4326.</p>
<p>Now, we want the user to be able to submit the form and get the 5 nearest events in the next week. We can get the date for this time next week as follows:</p>
<pre><code class="hljs lang-python singleline">In [<span class="hljs-number">6</span>]: next_week = timezone.now() + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</code></pre>
<p>Then we can get the events we want, sorted by distance, like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">7</span>]: Event.objects.filter(datetime__gte=timezone.now()).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">7</span>]: [&lt;Event: Primal Scream - UEA Norwich&gt;, &lt;Event: Queens of the Stone Age - Wembley Arena&gt;]</td></table></code></pre>
<p>With that in mind, let’s write the test for our view. The view should contain a single form that accepts a user’s geographical coordinates - for convenience we’ll autocomplete this with HTML5 geolocation. On submit, the user should see a list of the five closest events in the next week.</p>
<p>First, let’s test the GET request. Amend <code>gigs/tests.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> TestCase</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Venue, Event</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> factory.fuzzy <span class="hljs-keyword">import</span> BaseFuzzyAttribute</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> factory.django, random</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.test <span class="hljs-keyword">import</span> RequestFactory</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.core.urlresolvers <span class="hljs-keyword">import</span> reverse</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FuzzyPoint</span><span class="hljs-params">(BaseFuzzyAttribute)</span>:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> Point(random.uniform(<span class="hljs-number">-180.0</span>, <span class="hljs-number">180.0</span>),</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                     random.uniform(<span class="hljs-number">-90.0</span>, <span class="hljs-number">90.0</span>))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-comment"># Factories for tests</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        model = Venue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'location'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    name = <span class="hljs-string">'Wembley Arena'</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    location = FuzzyPoint()</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventFactory</span><span class="hljs-params">(factory.django.DjangoModelFactory)</span>:</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        model = Event</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        django_get_or_create = (</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'venue'</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'datetime'</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        )</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    name = <span class="hljs-string">'Queens of the Stone Age'</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    datetime = timezone.now()</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VenueTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_venue</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        all_venues = Venue.objects.all()</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        self.assertEqual(len(all_venues), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        only_venue = all_venues[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        self.assertEqual(only_venue, venue)</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        self.assertEqual(only_venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        self.assertEqual(only_venue.__str__(), <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td></td><tr><td class="linenos" data-pseudo-content="58"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_create_event</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-comment"># Create the venue</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        venue = VenueFactory()</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-comment"># Create the event</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        event = EventFactory(venue=venue)</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment"># Check we can find it</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        all_events = Event.objects.all()</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        self.assertEqual(len(all_events), <span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        only_event = all_events[<span class="hljs-number">0</span>]</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        self.assertEqual(only_event, event)</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment"># Check attributes</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        self.assertEqual(only_event.name, <span class="hljs-string">'Queens of the Stone Age'</span>)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        self.assertEqual(only_event.venue.name, <span class="hljs-string">'Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment"># Check string representation</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        self.assertEqual(only_event.__str__(), <span class="hljs-string">'Queens of the Stone Age - Wembley Arena'</span>)</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupViewTest</span><span class="hljs-params">(TestCase)</span>:</span></td><tr><td class="linenos" data-pseudo-content="81"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="82"></td><td>    Test lookup view</td><tr><td class="linenos" data-pseudo-content="83"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        self.factory = RequestFactory()</td><tr><td class="linenos" data-pseudo-content="86"></td><td></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_get</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="88"></td><td>        request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="89"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="90"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="91"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py test gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>E</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: gigs.tests (unittest.loader._FailedTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>ImportError: Failed to <span class="hljs-keyword">import</span> test module: gigs.tests</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">428</span>, <span class="hljs-keyword">in</span> _find_test_path</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    module = self._get_module_from_name(name)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  File <span class="hljs-string">"/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/loader.py"</span>, line <span class="hljs-number">369</span>, <span class="hljs-keyword">in</span> _get_module_from_name</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    __import__(name)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="15"></td><td>ImportError: cannot <span class="hljs-keyword">import</span> name <span class="hljs-string">'LookupView'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.000</span>s</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>FAILED (errors=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Destroying test database <span class="hljs-keyword">for</span> alias <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Our first issue is that we can’t import the view in the test. Let’s fix that by amending <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">pass</span></td></table></code></pre>
<p>Running the tests again results in the following:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 88, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    request = self.factory.get(reverse(<span class="hljs-string">'lookup'</span>))</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 600, <span class="hljs-keyword">in</span> reverse</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> force_text(iri_to_uri(resolver._reverse_with_prefix(view, prefix, *args, **kwargs)))</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/core/urlresolvers.py"</span>, line 508, <span class="hljs-keyword">in</span> _reverse_with_prefix</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    (lookup_view_s, args, kwargs, len(patterns), patterns))</td><tr><td class="linenos" data-pseudo-content="14"></td><td>django.core.urlresolvers.NoReverseMatch: Reverse <span class="hljs-keyword">for</span> <span class="hljs-string">'lookup'</span> with arguments <span class="hljs-string">'()'</span> and keyword arguments <span class="hljs-string">'{}'</span> not found. 0 pattern(s) tried: []</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.154s</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can’t resolve the URL for our new view, so we need to add it to our URLconf. First of all, save this as <code>gigs/urls.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> gigs.views <span class="hljs-keyword">import</span> LookupView</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-comment"># Lookup</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    url(<span class="hljs-string">r''</span>, LookupView.as_view(), name=<span class="hljs-string">'lookup'</span>),</td><tr><td class="linenos" data-pseudo-content="7"></td><td>]</td></table></code></pre>
<p>Then amend <code>gigfinder/urls.py</code> as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>urlpatterns = [</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment"># Gig URLs</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    url(<span class="hljs-string">r''</span>, include(<span class="hljs-string">'gigs.urls'</span>)),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>]</td></table></code></pre>
<p>Then run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 90, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.417s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We get a 405 response because the view does not accept GET requests. Let’s resolve that:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.base <span class="hljs-keyword">import</span> View</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(View)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td></table></code></pre>
<p>If we run our tests now:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>.E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_get (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 89, <span class="hljs-keyword">in</span> test_get</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 6, <span class="hljs-keyword">in</span> get</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookup.html</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 0.409s</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We see that the template is not defined. Save the following as <code>gigs/templates/gigs/includes/base.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Gig finder<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Gig Finder<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-2.2.2.min.js"</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha256-36cp2Co+/62rEAAYHLmRCPIych47CvdM+uTBJwSzWjI="</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>And the following as <code>gigs/templates/gigs/lookup.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"latitude"</span>&gt;</span>Latitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_latitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"latitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"longitude"</span>&gt;</span>Longitude:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_longitude"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"longitude"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        navigator.geolocation.getCurrentPosition(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">var</span> lat = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_latitude'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-keyword">var</span> lon = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'id_longitude'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            lat.value = position.coords.latitude;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            lon.value = position.coords.longitude;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Note the JavaScript to populate the latitude and longitude. Now, if we run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>...</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 3 tests <span class="hljs-keyword">in</span> 1.814s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>Success! We now render our form as expected. Time to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs gigfinder</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Implemented GET handler'</span></td></table></code></pre>
<h2 id="handling-post-requests">Handling POST requests</h2>
<p>Now we need to be able to handle POST requests and return the appropriate results. First, let’s write a test for it in our existing <code>LookupViewTest</code> class:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_post</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-comment"># Create venues to return</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        v1 = VenueFactory(name=<span class="hljs-string">'Venue1'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        v2 = VenueFactory(name=<span class="hljs-string">'Venue2'</span>)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        v3 = VenueFactory(name=<span class="hljs-string">'Venue3'</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        v4 = VenueFactory(name=<span class="hljs-string">'Venue4'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        v5 = VenueFactory(name=<span class="hljs-string">'Venue5'</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        v6 = VenueFactory(name=<span class="hljs-string">'Venue6'</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        v7 = VenueFactory(name=<span class="hljs-string">'Venue7'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        v8 = VenueFactory(name=<span class="hljs-string">'Venue8'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        v9 = VenueFactory(name=<span class="hljs-string">'Venue9'</span>)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        v10 = VenueFactory(name=<span class="hljs-string">'Venue10'</span>)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment"># Create events to return</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        e1 = EventFactory(name=<span class="hljs-string">'Event1'</span>, venue=v1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        e2 = EventFactory(name=<span class="hljs-string">'Event2'</span>, venue=v2)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        e3 = EventFactory(name=<span class="hljs-string">'Event3'</span>, venue=v3)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        e4 = EventFactory(name=<span class="hljs-string">'Event4'</span>, venue=v4)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        e5 = EventFactory(name=<span class="hljs-string">'Event5'</span>, venue=v5)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        e6 = EventFactory(name=<span class="hljs-string">'Event6'</span>, venue=v6)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        e7 = EventFactory(name=<span class="hljs-string">'Event7'</span>, venue=v7)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        e8 = EventFactory(name=<span class="hljs-string">'Event8'</span>, venue=v8)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        e9 = EventFactory(name=<span class="hljs-string">'Event9'</span>, venue=v9)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        e10 = EventFactory(name=<span class="hljs-string">'Event10'</span>, venue=v10)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Set parameters</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        lat = <span class="hljs-number">52.3749159</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        lon = <span class="hljs-number">1.1067473</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Put together request</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        data = {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'latitude'</span>: lat,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'longitude'</span>: lon</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        request = self.factory.post(reverse(<span class="hljs-string">'lookup'</span>), data)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        self.assertTemplateUsed(<span class="hljs-string">'gigs/lookupresults.html'</span>)</td></table></code></pre>
<p>If we now run this test:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..F.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>FAIL: test_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 117, <span class="hljs-keyword">in</span> test_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    self.assertEqual(response.status_code, 200)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>AssertionError: 405 != 200</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 1.281s</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>FAILED (failures=1)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>We can see that it fails because the POST method is not supported. Now we can start work on implementing it. First, let’s create a form in <code>gigs/forms.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> Form, FloatField</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupForm</span><span class="hljs-params">(Form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    latitude = FloatField()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    longitude = FloatField()</td></table></code></pre>
<p>Next, edit <code>gigs/views.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            })</td></table></code></pre>
<p>Note that we’re switching from a <code>View</code> to a <code>FormView</code> so that it can more easily handle our form. We could render the form using this as well, but as it’s a simple form I decided it wasn’t worth the bother. Also, note that the longitude goes first - this caught me out as I expected the latitude to be the first argument.</p>
<p>Now, if we run our tests, they should complain about our missing template:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>..E.</td><tr><td class="linenos" data-pseudo-content="4"></td><td>======================================================================</td><tr><td class="linenos" data-pseudo-content="5"></td><td>ERROR: test_post (gigs.tests.LookupViewTest)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Traceback (most recent call last):</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/tests.py"</span>, line 116, <span class="hljs-keyword">in</span> test_post</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    response = LookupView.as_view()(request)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 68, <span class="hljs-keyword">in</span> view</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-built_in">return</span> self.dispatch(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/base.py"</span>, line 88, <span class="hljs-keyword">in</span> dispatch</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-built_in">return</span> handler(request, *args, **kwargs)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/views/generic/edit.py"</span>, line 222, <span class="hljs-keyword">in</span> post</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-built_in">return</span> self.form_valid(form)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/gigs/views.py"</span>, line 31, <span class="hljs-keyword">in</span> form_valid</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/shortcuts.py"</span>, line 39, <span class="hljs-keyword">in</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    content = loader.render_to_string(template_name, context, using=using)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 96, <span class="hljs-keyword">in</span> render_to_string</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    template = get_template(template_name, using=using)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  File <span class="hljs-string">"/Users/matthewdaly/Projects/gigfinder/venv/lib/python3.5/site-packages/django/template/loader.py"</span>, line 43, <span class="hljs-keyword">in</span> get_template</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    raise TemplateDoesNotExist(template_name, chain=chain)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>django.template.exceptions.TemplateDoesNotExist: gigs/lookupresults.html</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="27"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.506s</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>FAILED (errors=1)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>So let’s create <code>gigs/templates/gigs/lookupresults.html</code>:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">extends</span></span> "gigs/includes/base.html" %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">block</span></span> content %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> event <span class="hljs-keyword">in</span> events %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">{{ event.name }}</span><span class="xml"> - </span><span class="hljs-template-variable">{{ event.venue.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %}</span><span class="xml"></span></td></table></code></pre>
<p>Now, if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py <span class="hljs-built_in">test</span> gigs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Creating <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>....</td><tr><td class="linenos" data-pseudo-content="4"></td><td>----------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Ran 4 tests <span class="hljs-keyword">in</span> 0.728s</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Destroying <span class="hljs-built_in">test</span> database <span class="hljs-keyword">for</span> <span class="hljs-built_in">alias</span> <span class="hljs-string">'default'</span>...</td></table></code></pre>
<p>However, if we try actually submitting the form by hand, we get the error <code>CSRF token missing or incorrect</code>. Edit <code>views.py</code> as follows to resolve this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.views.generic.edit <span class="hljs-keyword">import</span> FormView</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> gigs.forms <span class="hljs-keyword">import</span> LookupForm</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> gigs.models <span class="hljs-keyword">import</span> Event</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.geos <span class="hljs-keyword">import</span> Point</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">from</span> django.contrib.gis.db.models.functions <span class="hljs-keyword">import</span> Distance</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> RequestContext</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LookupView</span><span class="hljs-params">(FormView)</span>:</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    form_class = LookupForm</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookup.html'</span>, RequestContext(request))</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">form_valid</span><span class="hljs-params">(self, form)</span>:</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment"># Get data</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        latitude = form.cleaned_data[<span class="hljs-string">'latitude'</span>]</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        longitude = form.cleaned_data[<span class="hljs-string">'longitude'</span>]</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Get today's date</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        now = timezone.now()</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Get next week's date</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        next_week = now + timezone.timedelta(weeks=<span class="hljs-number">1</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Get Point</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        location = Point(longitude, latitude, srid=<span class="hljs-number">4326</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Look up events</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        events = Event.objects.filter(datetime__gte=now).filter(datetime__lte=next_week).annotate(distance=Distance(<span class="hljs-string">'venue__location'</span>, location)).order_by(<span class="hljs-string">'distance'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-comment"># Render the template</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'gigs/lookupresults.html'</span>, {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-string">'events'</span>: events</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            })</td></table></code></pre>
<p>Here we’re adding the request context so that the CSRF token is available.</p>
<p>If you run the dev server, add a few events and venues via the admin, and submit a search, you’ll see that you’re returning events closest to you first.</p>
<p>Now that we can submit searches, we’re ready to commit:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ git add gigs/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ git commit -m <span class="hljs-string">'Can now retrieve search results'</span></td></table></code></pre>
<p>And we’re done! Of course, you may want to expand on this by plotting each gig venue on a map, or something like that, in which case there’s plenty of methods of doing so - you can retrieve the latitude and longitude in the template and use Google Maps to display them. I’ll leave doing so as an exercise for the reader.</p>
<p>I can’t say that working with GeoDjango isn’t a bit of a struggle at times, but being able to make spatial queries in this fashion is very useful. With more and more people carrying smartphones, you’re more likely than ever to be asked to build applications that return data based on someone’s geographical location, and GeoDjango is a great way to do this with a Django application. You can find the source on <a href="https://github.com/matthewbdaly/gigfinder">Github</a>.</p>
]]></summary>
    </entry>
</feed>
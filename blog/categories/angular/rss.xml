<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>angular | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/angular/</link>
        <description>angular | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 27 Oct 2019 21:21:07 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[Building a Phonegap App with Laravel and Angular - Part 4]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/</guid>
            <pubDate>Sun, 13 Nov 2016 16:15:00 GMT</pubDate>
            <description><![CDATA[<p>In this instalment we’ll return to the back end. What we’ve done so far is typical of the kind of proof of concept we might do for a client early on, before going back and implementing the full set of features later on. Now we’ll go back and start to improve on that rather quick-and-dirty API by making sure we follow a few best practices.</p>
<p>For those of you who want to follow the Laravel Phonegap tutorials, I’ve created a dedicated category <a href="/blog/categories/laravel-phonegap-tutorial/">here</a> for those tutorials. This category include RSS and Atom feeds, so if you only want to read those posts, you can do so. I’ve also done the same for the <a href="/blog/categories/django-blog-tutorial/">Django tutorials</a>.</p>
<h2 id="the-repository-pattern">The Repository pattern</h2>
<p>One of the issues we currently have with our API is that we’re passing our Eloquent models into our controllers. This may not seem like a huge issue, but it means that our controllers are tightly coupled to the Eloquent ORM, so if we wanted to switch to another ORM, or to a completely different database such as MongoDB, we’d have to amend our controllers. That’s not good.</p>
<p>However, using the <a href="http://designpatternsphp.readthedocs.io/en/latest/More/Repository/README.html">Repository pattern</a> we can first of all define an interface for our repository, and then create a repository class that implements that interface. That way we can interact with the repository class in our controllers, rather than using Eloquent models directly. Then, if we want to switch databases, we merely amend the repository class to change the implementation of those methods, without having to touch our controllers. Also, it makes it much easier to test our controllers in isolation, because we can easily mock our repository class using Mockery and hard-code the response, so our tests won’t touch the database and will therefore run more quickly. We won’t touch on that this time, but it’s a very significant advantage.</p>
<p>If you haven’t used interfaces before in PHP, they aren’t that hard. They merely specify what methods an object implementing that method must have and what arguments they must accept, but do not specify the details of the implementation. This makes it easy to determine if a class implements an interface correctly, because it will throw an exception if it doesn’t.</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories\Interfaces;

interface PetRepositoryInterface {
    public function all();

    public function findOrFail($id);

    public function create($input);
}
</code></pre>
<p>That’s all there is to it. We define it using the <code>interface</code> keyword and we specify the methods it must implement. Save this file at <code>app/Repositories/Interfaces/PetRepositoryInterface.php</code>.</p>
<p>Next, we implement the repository class:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories;

use AnimalFriend\Pet;
use AnimalFriend\Repositories\Interfaces\PetRepositoryInterface;

class EloquentPetRepository implements PetRepositoryInterface {

    private $pet;

    public function __construct(Pet $pet)
    {
        $this-&gt;pet = $pet;
    }

    public function all()
    {
        return $this-&gt;pet-&gt;all();
    }

    public function findOrFail($id)
    {
        return $this-&gt;pet-&gt;findOrFail($id);
    }

    public function create($input)
    {
        return $this-&gt;pet-&gt;create($input);
    }
}
</code></pre>
<p>Save this to <code>app/Repositories/EloquentPetRepository.php</code>. Note how the methods closely mirror the underlying Eloquent methods, but they don’t need to - you could change the underlying implementation of each method, but the repository would still work in exactly the same way.</p>
<p>To make this work, we need to make a few changes elsewhere. In <code>composer.json</code>, we need to add the new <code>Repositories</code> folder to our classmap:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;classmap&quot;: [
            &quot;database&quot;,
            &quot;app/Repositories&quot;
        ],
        &quot;psr-4&quot;: {
            &quot;AnimalFriend\\&quot;: &quot;app/&quot;
        }
    },
</code></pre>
<p>And in <code>app/Providers/AppServiceProvider.php</code>, we need to bind our new files:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this-&gt;app-&gt;bind(
            &#39;AnimalFriend\Repositories\Interfaces\PetRepositoryInterface&#39;,
            &#39;AnimalFriend\Repositories\EloquentPetRepository&#39;
        );
    }
}
</code></pre>
<p>With that done, we can now update <code>app/Http/Controllers/PetController.php</code> to use the repository:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Repositories\Interfaces\PetRepositoryInterface as Pet;

class PetController extends Controller
{
    private $pet;

    public function __construct(Pet $pet) {
        $this-&gt;pet = $pet;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Get all pets
        $pets = $this-&gt;pet-&gt;all();

        // Send response
        return response()-&gt;json($pets, 200);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Get pet
        $pet = $this-&gt;pet-&gt;findOrFail($id);

        // Send response
        return response()-&gt;json($pet, 200);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>Our repository is now injected automatically into the controller. To make this work we need to run the following command:</p>
<pre><code class="lang-bash">$ composer dump-autoload
</code></pre>
<p>Running our tests should confirm that everything is still working:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.
............                                                      12 / 12 (100%)

Time: 897 ms, Memory: 18.00MB

OK (12 tests, 46 assertions)
</code></pre>
<p>Let’s do the same for the User model. First we implement our interface in <code>app/Repositories/Interfaces/UserRepositoryInterface.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories\Interfaces;

interface UserRepositoryInterface {
    public function all();

    public function findOrFail($id);

    public function create($input);
}
</code></pre>
<p>Next we create our repository at <code>app/Repositories/EloquentUserRepository.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Repositories;

use AnimalFriend\User;
use AnimalFriend\Repositories\Interfaces\UserRepositoryInterface;
use JWTAuth;
use Hash;

class EloquentUserRepository implements UserRepositoryInterface {

    private $user;

    public function __construct(User $user)
    {
        $this-&gt;user = $user;
    }

    public function all()
    {
        return $this-&gt;user-&gt;all();
    }

    public function findOrFail($id)
    {
        return $this-&gt;user-&gt;findOrFail($id);
    }

    public function create($input)
    {
        $user = new $this-&gt;user;
        $user-&gt;email = $input[&#39;email&#39;];
        $user-&gt;name = $input[&#39;name&#39;];
        $user-&gt;password = Hash::make($input[&#39;password&#39;]);
        $user-&gt;save();

        // Create token
        return JWTAuth::fromUser($user);
    }
}
</code></pre>
<p>Note how we’ve moved much of the logic for creating a user into the <code>create()</code> method, and we return the token, not the user model. This makes sense as right now we only ever want to get a token back when we create a user. Later that may change, but there’s nothing stopping us adding a new method to implement that behaviour alongside this.</p>
<p>Then we update <code>app/Http/Controllers/UserController.php</code> to use our repository:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Repositories\Interfaces\UserRepositoryInterface as User;
use JWTAuth;
use Hash;

class UserController extends Controller
{
    private $user;

    public function __construct(User $user) {
        $this-&gt;user = $user;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // Validate request
        $valid = $this-&gt;validate($request, [
            &#39;email&#39; =&gt; &#39;required|email|unique:users,email&#39;,
            &#39;name&#39; =&gt; &#39;required|string&#39;,
            &#39;password&#39; =&gt; &#39;required|confirmed&#39;
        ]);

        // Create token
        $token = $this-&gt;user-&gt;create($request-&gt;only(
            &#39;email&#39;,
            &#39;name&#39;,
            &#39;password&#39;
        ));

        // Send response
        return response()-&gt;json([&#39;token&#39; =&gt; $token], 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>And add a new binding in <code>app/Providers/AppServiceProvider.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        $this-&gt;app-&gt;bind(
            &#39;AnimalFriend\Repositories\Interfaces\PetRepositoryInterface&#39;,
            &#39;AnimalFriend\Repositories\EloquentPetRepository&#39;
        );
        $this-&gt;app-&gt;bind(
            &#39;AnimalFriend\Repositories\Interfaces\UserRepositoryInterface&#39;,
            &#39;AnimalFriend\Repositories\EloquentUserRepository&#39;
        );
    }
}
</code></pre>
<p>Note that we bind the two sets separately - this allows Laravel to figure out which one maps to which.</p>
<p>Let’s run our tests to make sure nothing is broken:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 956 ms, Memory: 18.00MB

OK (12 tests, 46 assertions)
</code></pre>
<p>Now that we’ve got our repositories in place, we’re no longer tightly coupled to Eloquent, and have a more flexible implementation which is easier to test.</p>
<h2 id="separating-our-models-from-our-json-with-fractal">Separating our models from our JSON with Fractal</h2>
<p>Another problem with our API is that our representation of our data is tightly coupled to our underlying implementation of our models. We therefore can’t change our models without potentially changing the data returned by the API. We need to separate our representation of our data from our actual model so that we can more easily specify the exact data we want to return, regardless of the underlying database structure.</p>
<p>Enter <a href="http://fractal.thephpleague.com/">Fractal</a>. From the website:</p>
<blockquote>
<p>Fractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc.</p>
</blockquote>
<p>In other words, Fractal lets you specify the format your data will take in one place so that it’s easier to return that data in a desired format. We’ll use Fractal to specify how we want our API responses to be formatted.</p>
<p>Install Fractal with the following command:</p>
<pre><code class="lang-php">$ composer require league/fractal
</code></pre>
<p>Then amend the classmap in <code>composer.json</code>:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;classmap&quot;: [
            &quot;database&quot;,
            &quot;app/Repositories&quot;,
            &quot;app/Transformers&quot;
        ],
        &quot;psr-4&quot;: {
            &quot;AnimalFriend\\&quot;: &quot;app/&quot;
        }
    },
</code></pre>
<p>Then create the folder <code>app/Transformers</code> and run <code>composer dump-autoload</code>. We’re now ready to write our first transformer. Save this as <code>app/Transformers/PetTransformer.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Transformers;

use AnimalFriend\Pet;
use League\Fractal;

class PetTransformer extends Fractal\TransformerAbstract
{
    public function transform(Pet $pet)
    {
        return [
            &#39;id&#39;            =&gt; (int) $pet-&gt;id,
            &#39;name&#39;          =&gt; (string) $pet-&gt;name,
            &#39;type&#39;          =&gt; (string) $pet-&gt;type,
            &#39;available&#39;     =&gt; (bool) $pet-&gt;available,
            &#39;picture&#39;       =&gt; (string) $pet-&gt;picture
        ];
    }
}
</code></pre>
<p>The <code>transform</code> method specifies how we want to represent our objects with our API. We can return only those attributes we want to expose, and amend the structure as we see fit. We could easily represemt relations in whatever manner we see fit, whereas before we needed to amend our queries to return the data in the right format, which would potentially be cumbersome.</p>
<p>Now let’s amend <code>PetController.php</code> to use this:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Repositories\Interfaces\PetRepositoryInterface as Pet;
use AnimalFriend\Transformers\PetTransformer;
use League\Fractal;
use League\Fractal\Manager;

class PetController extends Controller
{
    private $pet, $fractal;

    public function __construct(Pet $pet, Manager $fractal) {
        $this-&gt;pet = $pet;
        $this-&gt;fractal = $fractal;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Get all pets
        $pets = $this-&gt;pet-&gt;all();

        // Format it
        $resource = new Fractal\Resource\Collection($pets, new PetTransformer);
        $data = $this-&gt;fractal-&gt;createData($resource)-&gt;toArray();

        // Send response
        return response()-&gt;json($data, 200);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Get pet
        $pet = $this-&gt;pet-&gt;findOrFail($id);

        // Format it
        $resource = new Fractal\Resource\Item($pet, new PetTransformer);
        $data = $this-&gt;fractal-&gt;createData($resource)-&gt;toArray();

        // Send response
        return response()-&gt;json($data, 200);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>Note that by default, Fractal places our data inside a dedicated <code>data</code> namespace. This is good because it leaves a place for us to put metadata such as pagination links, but it does mean our controller test has been broken. Let’s fix it:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class PetControllerTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Test fetching pets when unauthorised
     *
     * @return void
     */
    public function testFetchingPetsWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets&#39;);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pets when authorised
     *
     * @return void
     */
    public function testFetchingPets()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets&#39;, [], $headers)
            -&gt;seeJsonStructure([
                &#39;data&#39; =&gt; [
                    &#39;*&#39; =&gt; [
                        &#39;id&#39;,
                        &#39;name&#39;,
                        &#39;type&#39;,
                        &#39;available&#39;,
                        &#39;picture&#39;
                    ]
                ]
            ]);
        $this-&gt;assertResponseStatus(200);
    }

    /**
     * Test fetching pet when unauthorised
     *
     * @return void
     */
    public function testFetchingPetWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Send request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pet which does not exist
     *
     * @return void
     */
    public function testFetchingPetDoesNotExist()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/1&#39;, [], $headers);
        $this-&gt;assertResponseStatus(404);
    }

    /**
     * Test fetching pet when authorised
     *
     * @return void
     */
    public function testFetchingPet()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id, [], $headers)
            -&gt;seeJsonStructure([
                &#39;data&#39; =&gt; [
                    &#39;id&#39;,
                    &#39;name&#39;,
                    &#39;type&#39;,
                    &#39;available&#39;,
                    &#39;picture&#39;
                ]
            ]);
        $this-&gt;assertResponseStatus(200);
    }
}
</code></pre>
<p>We’re also going to amend our test settings to use the array backend for the cache, as this does not require any external dependencies, but still allows us to tag our cache keys (I’ll cover that in a future instalment). Change the cache settings in <code>phpunit.xml</code> as follows:</p>
<pre><code class="lang-xml">        &lt;env name=&quot;CACHE_DRIVER&quot; value=&quot;array&quot;/&gt;
</code></pre>
<p>Let’s run our tests to make sure everything’s fine:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 859 ms, Memory: 18.00MB

OK (12 tests, 44 assertions)
</code></pre>
<p>At present our <code>User</code> controller doesn’t actually return anything, and the auth only ever returns the token, so it’s not worth while adding a transformer now.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That ends this lesson. We haven’t added any functionality, but we have improved the design of our API, and we’re now ready to develop it further. As usual, the backend repository has been tagged as <code>lesson-4</code>.</p>
<p>Next time we’ll start adding the additional functionality we need to our API.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 3]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</guid>
            <pubDate>Sun, 16 Oct 2016 17:10:13 GMT</pubDate>
            <description><![CDATA[<p>Apologies for how long it’s taken for this post to appear. I’ve got a lot on my plate at present as I recently started a new job, so I haven’t been able to devote as much time to this series as I’d like.</p>
<p>In this instalment we’ll begin extending our app beyond the basic authentication we’ve already implemented. We’ll start by adding the means to sign up, before adding the list of pets.</p>
<h2 id="adding-a-signup-method-to-our-backend">Adding a signup method to our backend</h2>
<p>We’ll create a controller for our users in the Laravel backend. First we’ll create our tests:</p>
<pre><code class="lang-bash">$ php artisan make:test UserControllerTest
</code></pre>
<p>We’ll create three tests. The first will check to see that an invalid request raises the correct status code (422). The second will check that a valid request returns the correct status code (201) and creates the user. The third will check that trying to create a duplicate user raises an error. Here they are - they should be saved in the new <code>tests/UserControllerTest.php</code> file:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class UserControllerTest extends TestCase
{
    /**
     * Test creating a user - invalid
     *
     * @return void
     */
    public function testPostingInvalidUser()
    {
        // Create a request
        $data = array(
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;
        );
        $this-&gt;json(&#39;POST&#39;, &#39;/api/users&#39;, $data);
        $this-&gt;assertResponseStatus(422);
    }

    /**
     * Test creating a user
     *
     * @return void
     */
    public function testPostingUser()
    {
        // Create a request
        $data = array(
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;,
            &#39;password_confirmation&#39; =&gt; &#39;password&#39;
        );
        $this-&gt;json(&#39;POST&#39;, &#39;/api/users&#39;, $data);
        $this-&gt;assertResponseStatus(201);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Check user exists
        $saved = User::first();
        $this-&gt;assertEquals($saved-&gt;email, &#39;bob@example.com&#39;);
        $this-&gt;assertEquals($saved-&gt;name, &#39;Bob Smith&#39;);
    }

    /**
     * Test creating a duplicate user
     *
     * @return void
     */
    public function testPostingDuplicateUser()
    {
        // Create user
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create a request
        $data = array(
            &#39;name&#39; =&gt; &#39;Bob Smith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;,
            &#39;password_confirmation&#39; =&gt; &#39;password&#39;
        );
        $this-&gt;json(&#39;POST&#39;, &#39;/api/users&#39;, $data);
        $this-&gt;assertResponseStatus(422);
    }
}
</code></pre>
<p>Note the use of <code>$this-&gt;json()</code> to make the request. This method is ideal for testing a REST API.</p>
<p>Running our tests should confirm that they fail:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

........FFF.                                                      12 / 12 (100%)

Time: 827 ms, Memory: 18.00MB

There were 3 failures:

1) UserControllerTest::testPostingInvalidUser
Expected status code 422, got 404.
Failed asserting that 404 matches expected 422.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:21

2) UserControllerTest::testPostingUser
Expected status code 201, got 404.
Failed asserting that 404 matches expected 201.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:39

3) UserControllerTest::testPostingDuplicateUser
Expected status code 422, got 404.
Failed asserting that 404 matches expected 422.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:71

FAILURES!
Tests: 12, Assertions: 43, Failures: 3.
</code></pre>
<p>Next, we create our new controller:</p>
<pre><code class="lang-bash">$ php artisan make:controller UserController --resource
</code></pre>
<p>Let’s populate it:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\User;
use JWTAuth;
use Hash;

class UserController extends Controller
{
    private $user;

    public function __construct(User $user) {
        $this-&gt;user = $user;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // Validate request
        $valid = $this-&gt;validate($request, [
            &#39;email&#39; =&gt; &#39;required|email|unique:users,email&#39;,
            &#39;name&#39; =&gt; &#39;required|string&#39;,
            &#39;password&#39; =&gt; &#39;required|confirmed&#39;,
        ]);

        // Create user
        $user = new $this-&gt;user;
        $user-&gt;email = $request-&gt;input(&#39;email&#39;);
        $user-&gt;name = $request-&gt;input(&#39;name&#39;);
        $user-&gt;password = Hash::make($request-&gt;input(&#39;password&#39;));
        $user-&gt;save();

        // Create token
        $token = JWTAuth::fromUser($user);

        // Send response
        return response()-&gt;json([&#39;token&#39; =&gt; $token], 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
</code></pre>
<p>For now we’ll leave the other methods blank, but we’ll be using them later so we won’t get rid of them. At the top, note we load not only the <code>User</code> model, but also the <code>JWTAuth</code> and <code>Hash</code> facades. We use <code>JWTAuth::fromUser()</code> to return a JSON web token for the given user model.</p>
<p>In the <code>store()</code> method we first of all use <a href="https://laravel.com/docs/5.3/validation">Laravel’s validation support</a> to validate our input. We specify that the user must provide a unique email address, a username, and a password, which must be confirmed. Note that we don’t need to specify an action if the request is invalid, as Laravel will do that for us. Also, note that the <code>confirmed</code> rule means that the <code>password</code> field must be accompanied by a matching <code>password_confirmation</code> field.</p>
<p>Next, we create the user. Note that we hash the password before storing it, which is a best practice (storing passwords in plain text is a REALLY bad idea!). Then we create the token for the new user and return it. From then on, the user can use that token to authenticate their requests.</p>
<p>We also need to add this route in <code>routes/api.php</code>:</p>
<pre><code class="lang-php">Route::resource(&#39;users&#39;, &#39;UserController&#39;);
</code></pre>
<p>Let’s check the test passes:</p>
<pre><code class="lang-php">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

............                                                      12 / 12 (100%)

Time: 905 ms, Memory: 20.00MB

OK (12 tests, 46 assertions)
</code></pre>
<h2 id="building-the-registration-in-the-app">Building the registration in the app</h2>
<p>With registration in place on the server side, we can move back to the app. We need to create another route for the registration form. Add this to <code>test/routes.spec.js</code>:</p>
<pre><code class="lang-javascript">  it(&#39;should map register route to register controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/register&#39;].controller).toBe(&#39;RegisterCtrl&#39;);
      expect($route.routes[&#39;/register&#39;].templateUrl).toEqual(&#39;templates/register.html&#39;);
    });
  });
</code></pre>
<p>Running the tests should confirm that this fails. So next you should add this to the route provider section of <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">  .when(&#39;/register&#39;, {
    templateUrl: &#39;templates/register.html&#39;,
    controller: &#39;RegisterCtrl&#39;
  })
</code></pre>
<p>We also need to allow the register path to be accessed when not logged in:</p>
<pre><code class="lang-javascript">.run([&#39;$rootScope&#39;, &#39;$location&#39;, &#39;Auth&#39;, function ($rootScope, $location, Auth) {
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event) {

    if (!Auth.isLoggedIn()) {
      if ($location.path() !== &#39;/login&#39; &amp;&amp; $location.path() !== &#39;/register&#39;) {
        $location.path(&#39;/login&#39;);
      }
    }
  });
}])
</code></pre>
<p>Our next step is to create a service representing the <code>User</code> endpoint. Here’s the test for it:</p>
<pre><code class="lang-javascript">  describe(&#39;User service&#39;, function () {
    var mockBackend, User;

    beforeEach(inject(function (_User_, _$httpBackend_) {
      User = _User_;
      mockBackend = _$httpBackend_;
    }));

    it(&#39;can create a new user&#39;, function () {
      mockBackend.expectPOST(&#39;http://localhost:8000/api/users&#39;, &#39;{&quot;email&quot;:&quot;bob@example.com&quot;,&quot;name&quot;:&quot;bobsmith&quot;,&quot;password&quot;:&quot;password&quot;,&quot;password_confirmation&quot;:&quot;password&quot;}&#39;).respond({token: &#39;mytoken&#39;});
      var user = new User({
        email: &#39;bob@example.com&#39;,
        name: &#39;bobsmith&#39;,
        password: &#39;password&#39;,
        password_confirmation: &#39;password&#39;
      });
      user.$save(function (response) {
        expect(response).toEqualData({token: &#39;mytoken&#39;});
      });
      mockBackend.flush();
    });
  });
</code></pre>
<p>We’re only interested in using this model to create new users at this point, so this is the full scope of this test for now. Make sure the test fails, then we’re ready to create the new service in <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">.factory(&#39;User&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/users/:id&#39;, null, {
    &#39;update&#39;: { method: &#39;PATCH&#39; }
  });
})
</code></pre>
<p>Note that <code>angular-resource</code> does not support the <code>PUT</code> or <code>PATCH</code> methods by default, but as shown here it’s easy to implement it ourselves. That should be sufficient to make our test pass.</p>
<p>Next, we need to create the controller for registration. Here’s the test for it:</p>
<pre><code class="lang-javascript">  describe(&#39;Register Controller&#39;, function () {
    var mockBackend, scope;

    beforeEach(inject(function ($rootScope, $controller, _$httpBackend_) {
      mockBackend = _$httpBackend_;
      scope = $rootScope.$new();
      $controller(&#39;RegisterCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test doRegister is defined
    it(&#39;should define the register method&#39;, function () {
      expect(scope.doRegister).toBeDefined();
    });

    // Test doRegister works
    it(&#39;should allow the user to register&#39;, function () {
      // Mock the backend
      mockBackend.expectPOST(&#39;http://localhost:8000/api/users&#39;, &#39;{&quot;email&quot;:&quot;user@example.com&quot;,&quot;name&quot;:&quot;bobsmith&quot;,&quot;password&quot;:&quot;password&quot;,&quot;password_confirmation&quot;:&quot;password&quot;}&#39;).respond({token: 123});

      // Define login data
      scope.credentials = {
        email: &#39;user@example.com&#39;,
        name: &quot;bobsmith&quot;,
        password: &#39;password&#39;,
        password_confirmation: &#39;password&#39;
      };

      //  Submit the request
      scope.doRegister();

      // Flush the backend
      mockBackend.flush();

      // Check login complete
      expect(localStorage.getItem(&#39;authHeader&#39;)).toEqual(&#39;Bearer 123&#39;);
    });
  });
</code></pre>
<p>Make sure the test fails before proceeding. Our <code>RegisterCtrl</code> is very similar to the login controller:</p>
<pre><code class="lang-javascript">.controller(&#39;RegisterCtrl&#39;, function ($scope, $location, User, Auth) {
  $scope.doRegister = function () {
    var user = new User($scope.credentials);
    user.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
})
</code></pre>
<p>Check the tests pass,and we’re ready to move on to creating our HTML template. Save this as <code>www/templates/register.html</code>:</p>
<pre><code class="lang-html">&lt;md-content md-theme=&quot;default&quot; layout-gt-sm=&quot;row&quot; layout-padding&gt;
    &lt;div&gt;
        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Email&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.email&quot; type=&quot;email&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Username&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.name&quot; type=&quot;text&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password&quot; type=&quot;password&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Confirm Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password_confirmation&quot; type=&quot;password&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-button class=&quot;md-raised md-primary&quot; ng-click=&quot;doRegister()&quot;&gt;Submit&lt;/md-button&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; href=&quot;/login&quot;&gt;Log in&lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-content&gt;
</code></pre>
<p>It’s very similar to our login template. Speaking of which, we need to add a link to this route there:</p>
<pre><code class="lang-html">&lt;md-content md-theme=&quot;default&quot; layout-gt-sm=&quot;row&quot; layout-padding&gt;
    &lt;div&gt;
        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Email&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.email&quot; type=&quot;email&quot; /&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password&quot; type=&quot;password&quot; /&gt;
        &lt;/md-input-container&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; ng-click=&quot;doLogin()&quot;&gt;Submit&lt;/md-button&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; href=&quot;register&quot;&gt;Register&lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-content&gt;
</code></pre>
<p>With that done, you should now be able to run the Gulp server for the app with <code>gulp</code> and the Laravel backend with <code>php artisan serve</code> and create a new user account.</p>
<h2 id="adding-pets-to-the-home-page">Adding pets to the home page</h2>
<p>Our final task for this lesson is to display a list of pets on the home page. Later we’ll refine that functionality, but for now we’ll just get a list of all current pets and display them. First we need to write a test for our <code>Pet</code> service:</p>
<pre><code class="lang-javascript">  describe(&#39;Pet service&#39;, function () {
    var mockBackend, Pet;

    beforeEach(inject(function (_Pet_, _$httpBackend_) {
      Pet = _Pet_;
      mockBackend = _$httpBackend_;
    }));

    it(&#39;can fetch pets&#39;, function () {
      mockBackend.expectGET(&#39;http://localhost:8000/api/pets&#39;).respond([{id:1,name:&quot;Freddie&quot;,type:&quot;Cat&quot;}]);
      expect(Pet).toBeDefined();
      var pets = Pet.query();
      mockBackend.flush();
      expect(pets).toEqualData([{id: 1,name:&quot;Freddie&quot;,type:&quot;Cat&quot;}]);
    });
  });
</code></pre>
<p>Once you know that fails, it’s time to implement the service:</p>
<pre><code class="lang-javascript">.factory(&#39;Pet&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/pets/:id&#39;, null, {
    &#39;update&#39;: { method: &#39;PATCH&#39; }
  });
})
</code></pre>
<p>Next, we want to add the pets to the scope of the home controller. Amend the test for it as follows:</p>
<pre><code class="lang-javascript">  describe(&#39;Home Controller&#39;, function () {
    var pets, scope;

    beforeEach(inject(function ($rootScope, $controller, Pet) {
      pets = Pet;
      scope = $rootScope.$new();
      $controller(&#39;HomeCtrl&#39;, {
        $scope: scope,
        pets: [{id:1},{id:2}]
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test pets
    it(&#39;should define the pets&#39;, function () {
      expect(scope.pets).toEqualData([{id: 1}, {id: 2}]);
    });
  });
</code></pre>
<p>We check to see if the scope contains the <code>pets</code> variable. Once you have a failing test, amend the home controller as follows:</p>
<pre><code class="lang-javascript">.controller(&#39;HomeCtrl&#39;, function ($scope, Pet, pets) {
  $scope.pets = pets;
});
</code></pre>
<p>We could fetch the via AJAX inside the controller, but there’s a better way. We’ll create a loader for the pet data and have it resolve that before the page is displayed. To do so, first we need to add the loader service to <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">.factory(&#39;PetsLoader&#39;, [&#39;Pet&#39;, &#39;$q&#39;, function (Pet, $q) {
  return function () {
    var delay = $q.defer();
    Pet.query(function (response) {
      delay.resolve(response);
    }, function () {
      delay.reject(&#39;Unable to fetch pets&#39;);
    });
    return delay.promise;
  };
}])
</code></pre>
<p>Then we set that route up to resolve it in <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;,
    resolve: {
      pets: [&#39;PetsLoader&#39;, function (PetsLoader) {
        return PetsLoader();
      }]
    }
  })
</code></pre>
<p>Now, when we load that route, it will first of all fetch those pets and populate <code>$scope.pets</code> with them.</p>
<p>Now, we need to have some pets in the database, so we’ll make a seeder for it. Head back to the backend and run this command:</p>
<pre><code class="lang-bash">$ php artisan make:seeder PetTableSeeder
</code></pre>
<p>Then amend the file at <code>database/seeds/PetTableSeeder.php</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;
use Carbon\Carbon;

class PetTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Add Pets
        DB::table(&#39;pets&#39;)-&gt;insert([[
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
            &#39;available&#39; =&gt; 1,
            &#39;picture&#39;   =&gt; &#39;https://placekitten.com/300/300&#39;,
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
        ], [
            &#39;name&#39; =&gt; &#39;Sophie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
            &#39;available&#39; =&gt; 1,
            &#39;picture&#39;   =&gt; &#39;https://placekitten.com/300/300&#39;,
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
        ]]);
    }
}
</code></pre>
<p>And we need to update <code>database/seeds/DatabaseSeeder.php</code> to call our seeder:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $this-&gt;call(UserTableSeeder::class);
        $this-&gt;call(PetTableSeeder::class);
    }
}
</code></pre>
<p>For now we’ll use placeholder images, but at a later point our backend will be set up to use images uploaded from the admin. Then we need to refresh our migrations and apply the seeders:</p>
<pre><code class="lang-bash">$ php artisan migrate:refresh
$ php artisan db:seed
</code></pre>
<p>Now we just need to amend our home template to show the pets and we’re done for today:</p>
<pre><code class="lang-html">&lt;md-toolbar&gt;
    &lt;div class=&quot;md-toolbar-tools&quot;&gt;
        &lt;md-button aria-label=&quot;Log out&quot; href=&quot;/logout&quot;&gt;
            Log out
        &lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-toolbar&gt;

&lt;div layout=&quot;column&quot; flex=&quot;grow&quot; layout-align=&quot;center stretch&quot;&gt;
    &lt;md-card md-theme=&quot;default&quot; ng-repeat=&quot;pet in pets&quot;&gt;
        &lt;md-card-title&gt;
            &lt;md-card-title-text&gt;
                &lt;span class=&quot;md-headline&quot;&gt;{{ pet.name }}&lt;/span&gt;
                &lt;span class=&quot;md-subhead&quot;&gt;{{ pet.type }}&lt;/span&gt;
            &lt;/md-card-title-text&gt;
        &lt;/md-card-title&gt;
        &lt;md-card-content&gt;
            &lt;img class=&quot;md-card-image md-media-lg&quot; ng-src=&quot;{{ pet.picture }}&quot;&gt;&lt;/img&gt;
        &lt;/md-card-content&gt;
    &lt;/md-card&gt;
&lt;/div&gt;
</code></pre>
<p>Now we can see our pets in the app.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That’s enough for today - the fact that we can log in and out, register, and view the home page is sufficient as a proof of concept for a client. As usual, the results are on Github, tagged <code>lesson-3</code>. </p>
<p>Next time, we’ll concentrate exclusively on the back end. We’ll build upon what we already have using Laravel to create a full REST API for our app. In a later instalment, we’ll move on to build our admin interface for the staff, before switching back to finish off the app. I hope you’ll join me then.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 2]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</guid>
            <pubDate>Sun, 18 Sep 2016 22:18:06 GMT</pubDate>
            <description><![CDATA[<p>In this lesson, the initial scope of the app will be extremely simple. We will implement functionality that:</p>
<ul>
<li>Allows users to log in and out</li>
<li>Displays the home page</li>
</ul>
<p>That’s fairly simple, and easily achievable within a fairly short timeframe. We’ll also write automated tests for our app. By the end of this lesson, we’ll have built a first pass for our app using Angular.js.</p>
<p>NOTE: As at time of writing, Angular 2 has just come out. I’m using Angular 1 here, and the two are not compatible, so make sure you’re using Angular 1.</p>
<h2 id="creating-our-app">Creating our app</h2>
<p>Start by creating a new folder, separate from the backend, for the app. Then, in there, run the following command:</p>
<pre><code class="lang-bash">$ npm init -y
</code></pre>
<p>Then let’s install our dependencies:</p>
<pre><code class="lang-bash">$ npm install --save-dev gulp karma karma-browserify karma-phantomjs-launcher browserify angular angular-route angular-mocks angular-animate angular-messages angular-sanitize angular-material angular-resource vinyl-buffer vinyl-source-stream gulp-sass karma-coverage karma-jasmine jasmine-core gulp-webserver
</code></pre>
<p>We’re going to use <a href="https://material.angularjs.org/latest/">Angular Material</a> for our user interface as it includes support out of the box for swiping left and right. You’ll notice it mentioned as one of the dependencies above.</p>
<p>We’ll also use Karma for running our tests. Save the following as <code>karma.conf.js</code>:</p>
<pre><code class="lang-javascript">module.exports = function(config) {
    config.set({
        basePath: &#39;&#39;,
        frameworks: [&#39;browserify&#39;, &#39;jasmine&#39;],
        files: [
            &#39;node_modules/angular/angular.min.js&#39;,
            &#39;node_modules/angular-mocks/angular-mocks.js&#39;,
            &#39;node_modules/angular-material/angular-material-mocks.js&#39;,
            &#39;js/*.js&#39;,
            &#39;test/*.js&#39;
        ],
        exclude: [
        ],
        preprocessors: {
            &#39;js/*.js&#39;: [&#39;browserify&#39;, &#39;coverage&#39;],
            &#39;tests/js&#39;: [&#39;browserify&#39;]
        },
        browserify: {
          debug: true
        },
        reporters: [&#39;progress&#39;, &#39;coverage&#39;],
        port: 9876,
        colors: true,
        logLevel: config.LOG_DEBUG,
        autoWatch: true,
        browsers: [&#39;PhantomJS&#39;],
        singleRun: true,
        coverageReporter: {
          dir : &#39;coverage/&#39;,
          reporters: [
            { type: &#39;html&#39;, subdir: &#39;report-html&#39; },
            { type: &#39;cobertura&#39;, subdir: &#39;report-cobertura&#39; }
          ]
        }
    });
};
</code></pre>
<p>This is our Karma configuration. Karma can run the same test in multiple browsers. Here we’re going to use PhantomJS, but it’s trivial to amend the <code>browsers</code> section to add more. You just need to make sure you install the appropriate launchers for those browsers.</p>
<p>We’ll use Gulp to build the app. Here’s the <code>gulpfile.js</code>:</p>
<pre><code class="lang-javascript">var gulp = require(&#39;gulp&#39;);
var source = require(&#39;vinyl-source-stream&#39;);
var buffer = require(&#39;vinyl-buffer&#39;);
var browserify = require(&#39;browserify&#39;);
var sass = require(&#39;gulp-sass&#39;);
var server = require(&#39;gulp-webserver&#39;);

var paths = {
  scripts: [&#39;js/*.js&#39;],
  styles: [&#39;sass/*.scss&#39;]
};

gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;sass/style.scss&#39;)
   .pipe(sass().on(&#39;error&#39;, sass.logError))
   .pipe(gulp.dest(&#39;www/css&#39;));
});;

gulp.task(&#39;js&#39;, function () {
  return browserify({ entries: [&#39;js/main.js&#39;], debug: true })
    .bundle()
    .pipe(source(&#39;bundle.js&#39;))
    .pipe(buffer())
    .pipe(gulp.dest(&#39;www/js/&#39;));
});

gulp.task(&#39;server&#39;, function () {
  gulp.src(&#39;www/&#39;)
    .pipe(server({
      livereload: true,
      open: true,
      port: 5000
    }));
});


gulp.task(&#39;watch&#39;, function () {
  gulp.watch(paths.scripts, [&#39;js&#39;]);
  gulp.watch(paths.styles, [&#39;sass&#39;]);
});

gulp.task(&#39;default&#39;, [&#39;sass&#39;,&#39;js&#39;,&#39;server&#39;, &#39;watch&#39;]);
</code></pre>
<p>Note that we’re going to be using Browserify to handle our dependencies. If you haven’t used it before, it lets you use the <code>require()</code> syntax from Node.js to include other JavaScript files, including ones available via NPM such as jQuery or Angular, allowing you to compile them all into a single file.</p>
<p>We should be able to test and run the app using NPM, so add these scripts to <code>package.json</code>:</p>
<pre><code class="lang-javascript">  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;karma start&quot;,
    &quot;run&quot;: &quot;gulp&quot;
  },
</code></pre>
<p>We also need an HTML file. Save this as <code>www/index.html</code>:</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;
        &lt;title&gt;My New Animal Friend&lt;/title&gt;
        &lt;link href=&quot;/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div&gt;
        &lt;div ng-app=&quot;mynewanimalfriend&quot; ng-cloak&gt;
            &lt;div ng-view&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;/js/bundle.js&quot;&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p>Note the use of the Angular directives. <code>ng-app</code> denotes the name of the app namespace, <code>ng-cloak</code> hides the application until it’s fully loaded, and <code>ng-view</code> denotes the area containing our content.</p>
<p>You should also create the files <code>js/main.js</code>, <code>sass/style.scss</code>, and the <code>test</code> folder.</p>
<h2 id="creating-our-first-routes">Creating our first routes</h2>
<p>Our first task is to create the routes we need. Our default route will be <code>/</code>, representing the home page. However, users will need to be logged in to see this. Otherwise, they should be redirected to the login route, which will be <code>/login</code>, appropriately enough. We’ll also have a <code>/logout</code> route, which should be self-explanatory.</p>
<p>Before we implement these routes, we need to write a test for them. We’ll start with our login route, and we’ll test that for this route, the controller will be <code>LoginCtrl</code> and the template will be <code>templates/login.html</code>. The significance of these will become apparent later. Save this as <code>test/routes.spec.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Routes&#39;, function () {

  beforeEach(angular.mock.module(&#39;mynewanimalfriend&#39;));
  it(&#39;should map login route to login controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/login&#39;].controller).toBe(&#39;LoginCtrl&#39;);
      expect($route.routes[&#39;/login&#39;].templateUrl).toEqual(&#39;templates/login.html&#39;);
    });
  });
});
</code></pre>
<p>Note the <code>beforeEach()</code> hook. This is used to set up the application.</p>
<p>We can run this test with <code>npm test</code> as that calls Karma directly. Note that we’re using Jasmine to write our tests.</p>
<pre><code class="lang-bash">$ npm test

&gt; mynewanimalfriend-app@1.0.0 test /home/matthew/Projects/mynewanimalfriend-app
&gt; karma start

12 09 2016 22:22:34.168:DEBUG [config]: autoWatch set to false, because of singleRun
12 09 2016 22:22:34.172:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules
12 09 2016 22:22:34.176:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.
12 09 2016 22:22:34.314:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.
12 09 2016 22:22:34.484:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.
12 09 2016 22:22:34.485:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.
12 09 2016 22:22:34.535:DEBUG [framework.browserify]: created browserify bundle: /tmp/f8c46bd8d72c5b8578e64552192273be.browserify
12 09 2016 22:22:34.553:DEBUG [framework.browserify]: add bundle to config.files at position 3
12 09 2016 22:22:34.559:DEBUG [web-server]: Instantiating middleware
12 09 2016 22:22:34.569:DEBUG [reporter]: Trying to load reporter: coverage
12 09 2016 22:22:34.570:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)
12 09 2016 22:22:34.571:DEBUG [reporter]: Couldn&#39;t load color-version.
12 09 2016 22:22:34.596:DEBUG [framework.browserify]: updating js/main.js in bundle
12 09 2016 22:22:34.597:DEBUG [framework.browserify]: building bundle
12 09 2016 22:22:35.302:DEBUG [framework.browserify]: bundling
12 09 2016 22:22:35.328:DEBUG [preprocessor.coverage]: Processing &quot;/home/matthew/Projects/mynewanimalfriend-app/js/main.js&quot;.
12 09 2016 22:22:35.345:INFO [framework.browserify]: bundle built
12 09 2016 22:22:35.352:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/
12 09 2016 22:22:35.352:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency
12 09 2016 22:22:35.361:INFO [launcher]: Starting browser PhantomJS
12 09 2016 22:22:35.361:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-17657666
12 09 2016 22:22:35.364:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-17657666/capture.js
12 09 2016 22:22:35.466:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html
12 09 2016 22:22:35.478:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js
12 09 2016 22:22:35.541:DEBUG [karma]: A browser has connected on socket /#dQYjOD4F_HJwPXiYAAAA
12 09 2016 22:22:35.564:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=dQYjOD4F_HJwPXiYAAAA
12 09 2016 22:22:35.629:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#dQYjOD4F_HJwPXiYAAAA with id 17657666
12 09 2016 22:22:35.630:DEBUG [launcher]: PhantomJS (id 17657666) captured in 0.277 secs
12 09 2016 22:22:35.642:DEBUG [phantomjs.launcher]: 

12 09 2016 22:22:35.643:DEBUG [middleware:karma]: custom files null null
12 09 2016 22:22:35.644:DEBUG [middleware:karma]: Serving static request /context.html
12 09 2016 22:22:35.646:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html
12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /
12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:22:35.652:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /
12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /
12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /
12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /
12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /
12 09 2016 22:22:35.657:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:22:35.657:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:22:35.660:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js
12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Requesting /absolute/tmp/f8c46bd8d72c5b8578e64552192273be.browserify?8ffde4eef27d38e92cc62da4e8dd0ffa5a3a4a4c /
12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Fetching /tmp/f8c46bd8d72c5b8578e64552192273be.browserify
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /
12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
12 09 2016 22:22:35.663:DEBUG [web-server]: serving (cached): /tmp/f8c46bd8d72c5b8578e64552192273be.browserify
12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
PhantomJS 2.1.1 (Linux 0.0.0) Routes should map login route to login controller FAILED
        Error: [$injector:modulerr] http://errors.angularjs.org/1.5.8/$injector/modulerr?p0=mynewanimalfriend&amp;p1=%5B%24injector%3Anomod%5D%20http%3A%2F%2Ferrors.angularjs.org%2F1.5.8%2F%24injector%2Fnomod%3Fp0%3Dmynewanimalfriend%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A25%3A111%0Ab%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A143%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A489%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A473%0Aq%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A7%3A359%0Ag%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A320%0Acb%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A43%3A337%0AworkFn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3074%3A60%0Ainject%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3054%3A46%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Ftest%2Froutes.spec.js%3F92b15bb7c24bc6ead636994fb1c737b91727d887%3A5%3A11%0AattemptSync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1942%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1930%3A20%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A367%3A28%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2568%3A44%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2553%3A31%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2415%3A25%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A772%3A24%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fkarma-jasmine%2Flib%2Fadapter.js%3F7975a273517f1eb29d7bd018790fd4c7b9a485d5%3A320%3A23%0Aloaded%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.js%3A151%3A17%0Aglobal%20code%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.html%3A50%3A28 in node_modules/angular/angular.min.js (line 40)
        node_modules/angular/angular.min.js:40:260
        q@node_modules/angular/angular.min.js:7:359
        g@node_modules/angular/angular.min.js:39:320
        cb@node_modules/angular/angular.min.js:43:337
        workFn@node_modules/angular-mocks/angular-mocks.js:3074:60
        inject@node_modules/angular-mocks/angular-mocks.js:3054:46
        test/routes.spec.js:5:11
        loaded@http://localhost:9876/context.js:151:17
PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 (1 FAILED) ERROR (0.044 secs / 0.006 secs)
12 09 2016 22:22:35.778:DEBUG [karma]: Run complete, exiting.
12 09 2016 22:22:35.778:DEBUG [launcher]: Disconnecting all browsers
12 09 2016 22:22:35.778:DEBUG [framework.browserify]: cleaning up
12 09 2016 22:22:35.782:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html
12 09 2016 22:22:35.876:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura
12 09 2016 22:22:35.880:DEBUG [launcher]: Process PhantomJS exited with code 0
12 09 2016 22:22:35.881:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-17657666
12 09 2016 22:22:35.884:DEBUG [launcher]: Finished all browsers
npm ERR! Test failed.  See above for more details.
</code></pre>
<p>Now that we have a failing test, we can set about making it pass. Save this at <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  });
});
</code></pre>
<p>As mentioned earlier, because we’re using Browserify, we can use the <code>require()</code> syntax to import our dependencies. Note we also give our module a name and specify the dependencies. Finally, note that we use <code>$routeProvider</code> to set up our first route, and we map the template URL and controller to match our test.</p>
<p>Let’s run the test again:</p>
<pre><code class="lang-bash">$ npm test

&gt; mynewanimalfriend-app@1.0.0 test /home/matthew/Projects/mynewanimalfriend-app
&gt; karma start

12 09 2016 22:35:51.231:DEBUG [config]: autoWatch set to false, because of singleRun
12 09 2016 22:35:51.235:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules
12 09 2016 22:35:51.237:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.
12 09 2016 22:35:51.354:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.
12 09 2016 22:35:51.496:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.
12 09 2016 22:35:51.497:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.
12 09 2016 22:35:51.547:DEBUG [framework.browserify]: created browserify bundle: /tmp/02002698e6d413a542186462d3a0a6ce.browserify
12 09 2016 22:35:51.559:DEBUG [framework.browserify]: add bundle to config.files at position 3
12 09 2016 22:35:51.564:DEBUG [web-server]: Instantiating middleware
12 09 2016 22:35:51.581:DEBUG [reporter]: Trying to load reporter: coverage
12 09 2016 22:35:51.582:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)
12 09 2016 22:35:51.582:DEBUG [reporter]: Couldn&#39;t load color-version.
12 09 2016 22:35:51.602:DEBUG [framework.browserify]: updating js/main.js in bundle
12 09 2016 22:35:51.603:DEBUG [framework.browserify]: building bundle
12 09 2016 22:35:52.306:DEBUG [framework.browserify]: bundling
12 09 2016 22:35:54.095:DEBUG [preprocessor.coverage]: Processing &quot;/home/matthew/Projects/mynewanimalfriend-app/js/main.js&quot;.
12 09 2016 22:35:54.170:INFO [framework.browserify]: bundle built
12 09 2016 22:35:54.189:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/
12 09 2016 22:35:54.189:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency
12 09 2016 22:35:54.197:INFO [launcher]: Starting browser PhantomJS
12 09 2016 22:35:54.198:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-91342786
12 09 2016 22:35:54.201:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-91342786/capture.js
12 09 2016 22:35:54.300:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html
12 09 2016 22:35:54.308:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js
12 09 2016 22:35:54.366:DEBUG [karma]: A browser has connected on socket /#FpcuZAJUT-u6Dl4sAAAA
12 09 2016 22:35:54.386:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=FpcuZAJUT-u6Dl4sAAAA
12 09 2016 22:35:54.442:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#FpcuZAJUT-u6Dl4sAAAA with id 91342786
12 09 2016 22:35:54.442:DEBUG [launcher]: PhantomJS (id 91342786) captured in 0.253 secs
12 09 2016 22:35:54.447:DEBUG [phantomjs.launcher]: 

12 09 2016 22:35:54.448:DEBUG [middleware:karma]: custom files null null
12 09 2016 22:35:54.448:DEBUG [middleware:karma]: Serving static request /context.html
12 09 2016 22:35:54.449:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html
12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /
12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:35:54.452:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js
12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /
12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /
12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /
12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js
12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js
12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js
12 09 2016 22:35:54.456:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js
12 09 2016 22:35:54.457:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js
12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /absolute/tmp/02002698e6d413a542186462d3a0a6ce.browserify?f4c82dc0618d979f84c89967ea1c412e646a5fe5 /
12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Fetching /tmp/02002698e6d413a542186462d3a0a6ce.browserify
12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /
12 09 2016 22:35:54.459:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:35:54.460:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /
12 09 2016 22:35:54.461:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
12 09 2016 22:35:54.461:DEBUG [web-server]: serving (cached): /tmp/02002698e6d413a542186462d3a0a6ce.browserify
12 09 2016 22:35:54.496:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js
12 09 2016 22:35:54.497:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js
12 09 2016 22:35:54.497:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js
12 09 2016 22:35:54.582:DEBUG [phantomjs.launcher]: WARNING: Tried to load angular more than once.

PhantomJS 2.1.1 (Linux 0.0.0) LOG: &#39;WARNING: Tried to load angular more than once.&#39;

PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.358 secs)
12 09 2016 22:35:55.003:DEBUG [karma]: Run complete, exiting.
12 09 2016 22:35:55.003:DEBUG [launcher]: Disconnecting all browsers
12 09 2016 22:35:55.003:DEBUG [framework.browserify]: cleaning up
12 09 2016 22:35:55.006:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html
12 09 2016 22:35:55.078:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura
12 09 2016 22:35:55.082:DEBUG [launcher]: Process PhantomJS exited with code 0
12 09 2016 22:35:55.082:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-91342786
12 09 2016 22:35:55.085:DEBUG [launcher]: Finished all browsers
</code></pre>
<p>Our first test has passed. Let’s add tests for the other routes:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Routes&#39;, function () {

  beforeEach(angular.mock.module(&#39;mynewanimalfriend&#39;));
  it(&#39;should map default route to home controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/&#39;].controller).toBe(&#39;HomeCtrl&#39;);
      expect($route.routes[&#39;/&#39;].templateUrl).toEqual(&#39;templates/home.html&#39;);
    });
  });

  it(&#39;should map login route to login controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/login&#39;].controller).toBe(&#39;LoginCtrl&#39;);
      expect($route.routes[&#39;/login&#39;].templateUrl).toEqual(&#39;templates/login.html&#39;);
    });
  });

  it(&#39;should map logout route to logout controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[&#39;/logout&#39;].controller).toBe(&#39;LogoutCtrl&#39;);
      expect($route.routes[&#39;/logout&#39;].templateUrl).toEqual(&#39;templates/login.html&#39;);
    });
  });
});
</code></pre>
<p>Note that the logout route uses the login template. This is because all it will do is redirect the user to the login form.</p>
<p>For the sake of brevity I won’t display the test output, but two of these tests should now fail. We can easily set up the new routes in <code>js/main.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  });
});
</code></pre>
<p>That’s looking good so far. But what if someone navigates to a URL that doesn’t exist? Our router should handle that. Add this to the test:</p>
<pre><code class="lang-javascript">  it(&#39;should redirect other or empty routes to the home controller&#39;, function () {
    inject(function ($route) {
      expect($route.routes[null].redirectTo).toEqual(&#39;/&#39;)
    });
  });
</code></pre>
<p>Once again, the test should fail. Fixing it is fairly straightforward - we’ll use the <code>otherwise()</code> method to define a fallback route:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>Now our routes are in place, we need to implement the three controllers we will need. However, as two of these controllers deal with authentication, we’ll first create some services to handle that, and they’ll need to be tested. Save this as <code>test/services.spec.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Services&#39;, function () {

  beforeEach(function(){
    jasmine.addMatchers({
      toEqualData: function(util, customEqualityTesters) {
        return {
          compare: function(actual, expected) {
            return {
              pass: angular.equals(actual, expected)
            };
          }
        };
      }
    });
  });

  beforeEach(angular.mock.module(&#39;mynewanimalfriend.services&#39;));

  describe(&#39;Token service&#39;, function () {
    var mockBackend, Token;

    beforeEach(inject(function (_Token_, _$httpBackend_) {
      Token = _Token_;
      mockBackend = _$httpBackend_;
    }));

    it(&#39;can create a new token&#39;, function () {
      mockBackend.expectPOST(&#39;http://localhost:8000/api/authenticate&#39;, &#39;{&quot;email&quot;:&quot;bob@example.com&quot;,&quot;password&quot;:&quot;password&quot;}&#39;).respond({token: &#39;mytoken&#39;});
      var token = new Token({
        email: &#39;bob@example.com&#39;,
        password: &#39;password&#39;
      });
      token.$save(function (response) {
        expect(response).toEqualData({token: &#39;mytoken&#39;});
      });
      mockBackend.flush();
    });
  });
});
</code></pre>
<p>In this test we use the <code>$httpBackend</code> facility from <code>ngMock</code> to mock out our API endpoints. We already have a REST API capable of generating a token, and we set this test up to behave similarly. We specify that it should expect to receive a certain POST request, and should respond with the token <code>mytoken</code>. Run the test to make sure it fails, then save this as <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&quot;angular-resource&quot;);

angular.module(&#39;mynewanimalfriend.services&#39;, [&#39;ngResource&#39;])

.factory(&#39;Token&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/authenticate/&#39;);
});
</code></pre>
<p>A little explanation is called for. In Angular, the <code>$resource</code> dependency represents an HTTP resource. By default it supports making HTTP requests to the denoted endpoint via GET, POST and DELETE, and it’s trivial to add support for PUT or PATCH methods. Using <code>$resource</code>, you can easily interface with a RESTful web service, and it’s one of my favourite things about Angular.</p>
<p>We also need to load <code>services.js</code> in our <code>main.js</code> file:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;,
  &#39;mynewanimalfriend.services&#39;
])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>Now, running the tests should show that they pass.</p>
<p>With that in place, we will also create an authentication service that lets the app determine if the user is logged in. Add this to <code>test/services.spec.js</code>:</p>
<pre><code class="lang-javascript">  describe(&#39;Auth service&#39;, function () {
    var Auth;

    beforeEach(inject(function (_Auth_) {
      Auth = _Auth_;
    }));

    it(&#39;can set user&#39;, function () {
      Auth.setUser(&#39;mytoken&#39;);
      var token = localStorage.getItem(&#39;authHeader&#39;);
      expect(token).toEqual(&#39;Bearer mytoken&#39;);
    });

    it(&#39;can return login status&#39;, function () {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer mytoken&#39;);
      expect(Auth.isLoggedIn()).toBeTruthy();
    });

    it(&#39;can log the user out&#39;, function () {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer mytoken&#39;);
      Auth.logUserOut();
      expect(Auth.isLoggedIn()).toBeFalsy();
      expect(localStorage.getItem(&#39;authHeader&#39;)).toBeFalsy();
    });
  });
</code></pre>
<p>This service is expected to do three things:</p>
<ul>
<li>Set the current user’s details in local storage</li>
<li>Return whether the user is logged in</li>
<li>Log the user out</li>
</ul>
<p>Make sure the test fails, then amend <code>js/services.js</code> as follows:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&quot;angular-resource&quot;);

angular.module(&#39;mynewanimalfriend.services&#39;, [&#39;ngResource&#39;])

.factory(&#39;Auth&#39;, function(){
  return{
    setUser : function (aUser) {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer &#39; + aUser);
    },
    isLoggedIn: function () {
      var user = localStorage.getItem(&#39;authHeader&#39;);
      return(user)? user : false;
    },
    logUserOut: function () {
      localStorage.removeItem(&#39;authHeader&#39;);
    }
  }
})

.factory(&#39;Token&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/authenticate/&#39;);
});
</code></pre>
<p>When the user is set, we store the authentication details we need in local storage. We can then use that to determine if they are logged in. When they log out, we simply clear local storage,</p>
<p>That should be enough to make these tests pass. Now we can move on to our controllers. We’ll do the login controller first. Save this as <code>test/controllers.spec.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

describe(&#39;Controllers&#39;, function () {

  beforeEach(function(){
    jasmine.addMatchers({
      toEqualData: function(util, customEqualityTesters) {
        return {
          compare: function(actual, expected) {
            return {
              pass: angular.equals(actual, expected)
            };
          }
        };
      }
    });
  });

  beforeEach(angular.mock.module(&#39;mynewanimalfriend.controllers&#39;));

  describe(&#39;Login Controller&#39;, function () {
    var mockBackend, scope;

    beforeEach(inject(function ($rootScope, $controller, _$httpBackend_) {
      mockBackend = _$httpBackend_;
      scope = $rootScope.$new();
      $controller(&#39;LoginCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test doLogin is defined
    it(&#39;should define the login method&#39;, function () {
      expect(scope.doLogin).toBeDefined();
    });

    // Test doLogin works
    it(&#39;should allow the user to log in&#39;, function () {
      // Mock the backend
      mockBackend.expectPOST(&#39;http://localhost:8000/api/authenticate&#39;, &#39;{&quot;email&quot;:&quot;user@example.com&quot;,&quot;password&quot;:&quot;password&quot;}&#39;).respond({token: 123});

      // Define login data
      scope.credentials = {
        email: &#39;user@example.com&#39;,
        password: &#39;password&#39;
      };

      //  Submit the request
      scope.doLogin();

      // Flush the backend
      mockBackend.flush();

      // Check login complete
      expect(localStorage.getItem(&#39;authHeader&#39;)).toEqual(&#39;Bearer 123&#39;);
    });
  });
});
</code></pre>
<p>We check that the scope and the <code>doLogin()</code> method are defined. We then mock the backend’s <code>/api/authenticate</code> route to respond with a dummy token when our credentials are provided. Then, we set the credentials in the variable <code>$scope.credentials</code>, call <code>doLogin()</code>, flush the backend, and check the authentication header has been set.</p>
<p>Once you’ve verified these tests fail, we can start making them pass. Save this as <code>js/controllers.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend.controllers&#39;, [
  &#39;mynewanimalfriend.services&#39;,
  &quot;ngMaterial&quot;
])

.controller(&#39;LoginCtrl&#39;, function ($scope, $location, Token, Auth) {
  $scope.doLogin = function () {
    var token = new Token($scope.credentials);
    token.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
});
</code></pre>
<p>The <code>LoginCtrl</code> controller accepts the scope, location, and our two services. When <code>doLogin()</code> is alled, it picks up the values in <code>$scope.credentials</code>, which we will set in our template later. It then makes a POST request to our endpoint including those credentials. Our API backend should return the new token in the response, and the token is stored using the <code>Auth</code> service. Otherwise, it raises an error.</p>
<p>Check the test now passes before moving onto the logout functionality. Add this to <code>test/controllers.spec.js</code>:</p>
<pre><code class="lang-javascript">  describe(&#39;Logout Controller&#39;, function () {
    var scope;

    beforeEach(inject(function ($rootScope, $controller, Auth) {
      Auth.setUser(&#39;Blah&#39;);
      scope = $rootScope.$new();
      $controller(&#39;LogoutCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });

    // Test session cleared
    it(&#39;should clear the session&#39;, function () {
      expect(localStorage.getItem(&#39;authHeader&#39;)).toEqual(null);
    });
  });
</code></pre>
<p>We want to ensure that when the user navigates to the route managed by the <code>LogoutCtrl</code> controller, the session is cleared, so we set up an existing session, call the controller, check it’s defined, and then check that local storage is empty.</p>
<p>Once you’ve verified that the test fails, amend the controllers as follows:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend.controllers&#39;, [
  &#39;mynewanimalfriend.services&#39;,
  &quot;ngMaterial&quot;
])

.controller(&#39;LoginCtrl&#39;, function ($scope, $location, Token, Auth) {
  $scope.doLogin = function () {
    var token = new Token($scope.credentials);
    token.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
})

.controller(&#39;LogoutCtrl&#39;, function ($scope, $location, Auth) {
  // Log user out
  Auth.logUserOut();

  // Redirect to login page
  $location.path(&#39;/login&#39;);
});
</code></pre>
<p>Our <code>LogoutCtrl</code> controller is very simple - it just logs the user out and redirects them back to the login form. Our final controller is for the home page:</p>
<pre><code class="lang-javascript">  describe(&#39;Home Controller&#39;, function () {
    var scope;

    beforeEach(inject(function ($rootScope, $controller) {
      scope = $rootScope.$new();
      $controller(&#39;HomeCtrl&#39;, {
        $scope: scope
      });
    }));

    // Test controller scope is defined
    it(&#39;should define the scope&#39;, function () {
      expect(scope).toBeDefined();
    });
  });
</code></pre>
<p>For now our home controller does nothing except define the scope, so it’s easy to implement:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;./services&#39;);

angular.module(&#39;mynewanimalfriend.controllers&#39;, [
  &#39;mynewanimalfriend.services&#39;,
  &quot;ngMaterial&quot;
])

.controller(&#39;LoginCtrl&#39;, function ($scope, $location, Token, Auth) {
  $scope.doLogin = function () {
    var token = new Token($scope.credentials);
    token.$save(function (response) {
      if (response.token) {
        // Set up auth service
        Auth.setUser(response.token);

        // Redirect
        $location.path(&#39;/&#39;);
      }
    }, function (err) {
        alert(&#39;Unable to log in - please check your details are correct&#39;);
    });
  };
})

.controller(&#39;LogoutCtrl&#39;, function ($scope, $location, Auth) {
  // Log user out
  Auth.logUserOut();

  // Redirect to login page
  $location.path(&#39;/login&#39;);
})

.controller(&#39;HomeCtrl&#39;, function ($scope) {
});
</code></pre>
<p>Verify that the tests pass, and our controllers are done for now. However, we still have some work to do to hook the various elements up. First, of all, our <code>main.js</code> unnecessarily loads our services - since we only use those services in our controllers, we don’t need them there. We also need to be able to keep users out of routes other than <code>login</code> when not logged in. Here’s what you <code>main.js</code> should look like:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);
require(&#39;./controllers&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;,
  &#39;mynewanimalfriend.controllers&#39;
])

.run([&#39;$rootScope&#39;, &#39;$location&#39;, &#39;Auth&#39;, function ($rootScope, $location, Auth) {
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event) {

    if (!Auth.isLoggedIn()) {
      if ($location.path() !== &#39;/login&#39;) {
        $location.path(&#39;/login&#39;);
      }
    }
  });
}])

.config([&#39;$httpProvider&#39;, function($httpProvider) {
  $httpProvider.interceptors.push(&#39;sessionInjector&#39;);
  $httpProvider.interceptors.push(&#39;authInterceptor&#39;);
}])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>Note that we set it up to intercept the HTTP request with the session injector and the auth interceptor. Next we need to create these in <code>js/services.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&quot;angular-resource&quot;);

angular.module(&#39;mynewanimalfriend.services&#39;, [&#39;ngResource&#39;])

.factory(&#39;Auth&#39;, function(){
  return{
    setUser : function (aUser) {
      localStorage.setItem(&#39;authHeader&#39;, &#39;Bearer &#39; + aUser);
    },
    isLoggedIn: function () {
      var user = localStorage.getItem(&#39;authHeader&#39;);
      return(user)? user : false;
    },
    logUserOut: function () {
      localStorage.removeItem(&#39;authHeader&#39;);
    }
  }
})

.factory(&#39;Token&#39;, function ($resource) {
  return $resource(&#39;http://localhost:8000/api/authenticate/&#39;);
})

.factory(&#39;sessionInjector&#39;, function (Auth) {
  var sessionInjector = {
    request: function (config) {
      if (Auth.isLoggedIn()) {
        config.headers.Authorization = Auth.isLoggedIn();
      }
      return config;
    }
  };
  return sessionInjector;
})

.service(&#39;authInterceptor&#39;, function ($q, Auth, $location) {
  var service = this;

  service.responseError = function (response) {
    if (response.status == 400) {
      Auth.logUserOut();
      $location.path(&#39;/login&#39;);
    }
    return $q.reject(response);
  };
});
</code></pre>
<p>I’ll walk you through these. <code>sessionInjector</code> adds the authorization HTTP header to every request to the server if the user is logged in, so that it returns the right user’s details. <code>authInterceptor</code> catches any 400 errors, denoting that the user is not authenticated with a current JSON web token, and logs the user out. In this way we can handle the expiry of a user’s token.</p>
<p>Now the logic of our app is in place, but that’s no use without some content…</p>
<h2 id="angular-templating">Angular templating</h2>
<p>We have one very basic HTML template, but that’s just a boilerplate for inserting the rest of our content. For the rest of the HTML we’ll need to load templates dynamically, and we’ll use Angular Material to help us build a nice UI quickly. Run the following commands to create the files:</p>
<pre><code class="lang-bash">$ mkdir www/templates
$ touch www/templates/login.html
$ touch www/templates/home.html
</code></pre>
<p>We need to import the CSS for Angular Material. Add this to <code>sass/style.scss</code>:</p>
<pre><code class="lang-scss">// Angular Material
@import &quot;node_modules/angular-material/angular-material.scss&quot;;
</code></pre>
<p>With that done, we need to configure theming in <code>main.js</code>:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

require(&#39;angular&#39;);
require(&#39;angular-route&#39;);
require(&#39;angular-animate&#39;);
require(&#39;angular-material&#39;);
require(&#39;./controllers&#39;);

angular.module(&#39;mynewanimalfriend&#39;, [
  &#39;ngRoute&#39;,
  &#39;ngAnimate&#39;,
  &#39;ngMaterial&#39;,
  &#39;mynewanimalfriend.controllers&#39;
])

.config(function ($mdThemingProvider) {
    $mdThemingProvider.theme(&#39;default&#39;)
      .primaryPalette(&#39;purple&#39;)
      .accentPalette(&#39;cyan&#39;);
})

.run([&#39;$rootScope&#39;, &#39;$location&#39;, &#39;Auth&#39;, function ($rootScope, $location, Auth) {
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event) {

    if (!Auth.isLoggedIn()) {
      if ($location.path() !== &#39;/login&#39;) {
        $location.path(&#39;/login&#39;);
      }
    }
  });
}])

.config([&#39;$httpProvider&#39;, function($httpProvider) {
  $httpProvider.interceptors.push(&#39;sessionInjector&#39;);
  $httpProvider.interceptors.push(&#39;authInterceptor&#39;);
}])

.config(function ($routeProvider) {
  $routeProvider
  .when(&#39;/login&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LoginCtrl&#39;
  })
  .when(&#39;/&#39;, {
    templateUrl: &#39;templates/home.html&#39;,
    controller: &#39;HomeCtrl&#39;
  })
  .when(&#39;/logout&#39;, {
    templateUrl: &#39;templates/login.html&#39;,
    controller: &#39;LogoutCtrl&#39;
  })
  .otherwise({
    redirectTo: &#39;/&#39;
  });
});
</code></pre>
<p>You may want to look at the <a href="https://material.angularjs.org/latest/Theming/01_introduction">documentation</a> for Angular Material to choose your own theme options. Next, let’s create our login template at <code>www/templates/login.html</code>:</p>
<pre><code class="lang-html">&lt;md-content md-theme=&quot;default&quot; layout-gt-sm=&quot;row&quot; layout-padding&gt;
    &lt;div&gt;
        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Email&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.email&quot; type=&quot;email&quot;&gt;
        &lt;/md-input-container&gt;

        &lt;md-input-container class=&quot;md-block&quot;&gt;
            &lt;label&gt;Password&lt;/label&gt;
            &lt;input ng-model=&quot;credentials.password&quot; type=&quot;password&quot;&gt;
        &lt;/md-input-container&gt;
        &lt;md-button class=&quot;md-raised md-primary&quot; ng-click=&quot;doLogin()&quot;&gt;Submit&lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-content&gt;
</code></pre>
<p>We’re using Angular Material’s input and button directives to make our inputs look a bit nicer. Note that the <code>ng-click</code> handler calls the <code>doLogin()</code> method of our controller, and that the <code>ng-model</code> attributes contain the <code>credentials</code> object that gets passed to the API. If you haven’t used Angular before, <code>ng-model</code> essentially lets you bind a variable to an element’s value so, for instance, when an input is changed, it can be easily accessed via the variable.</p>
<p>Next, we’ll implement a placeholder for our home page with a log out button. Save this as <code>www/templates/home.html</code>:</p>
<pre><code class="lang-html">&lt;md-toolbar&gt;
    &lt;div class=&quot;md-toolbar-tools&quot;&gt;
        &lt;md-button aria-label=&quot;Log out&quot; href=&quot;#logout&quot;&gt;
            Log out
        &lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-toolbar&gt;
</code></pre>
<p>That should be all we need to demonstrate logging in and out of our app. Let’s try it out. First run the Gulp task to show the app in the browser:</p>
<pre><code class="lang-bash">$ gulp
</code></pre>
<p>Then, in another shell session, switch to the directory with the backend and run the server for that:</p>
<pre><code class="lang-bash">$ php artisan serve
</code></pre>
<p>You should already have a user account set up and ready to use thanks to the seeder we wrote. The browser should show the login page by default, and if you fill in the login form and click the button you should see the home page. You should then be able to log out again.</p>
<p>Congratulations! We’ve got authentication working.</p>
<h2 id="switching-to-html5-routing">Switching to HTML5 routing</h2>
<p>You may note that the URLs use hashes - they are in the format <code>http://localhost:5000/#/login</code>. Wouldn’t it be better if we didn’t use the hash? Fortunately modern browsers support this via the HTML5 pushState API, and Angular has built-in support for this.</p>
<p>To enable it, we first need to declare a base URL in <code>www/index.html</code>. Amend it as follows:</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=0&quot;&gt;
        &lt;title&gt;My New Animal Friend&lt;/title&gt;
        &lt;link href=&quot;/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
        &lt;base href=&quot;/&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div&gt;
        &lt;div ng-app=&quot;mynewanimalfriend&quot; ng-cloak&gt;
            &lt;div ng-view&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot; src=&quot;/js/bundle.js&quot;&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>
<p>Here we’ve added the <code>&lt;base href=&quot;/&quot;&gt;</code> tag to denote our base URL. Next we configure Angular to use HTML5 routing in <code>main.js</code>:</p>
<pre><code class="lang-javascript">.config(function($locationProvider) {
  $locationProvider.html5Mode(true);
})
</code></pre>
<p>And amend the URL in the home template:</p>
<pre><code class="lang-html">&lt;md-toolbar&gt;
    &lt;div class=&quot;md-toolbar-tools&quot;&gt;
        &lt;md-button aria-label=&quot;Log out&quot; href=&quot;/logout&quot;&gt;
            Log out
        &lt;/md-button&gt;
    &lt;/div&gt;
&lt;/md-toolbar&gt;
</code></pre>
<p>Now, we should be using HTML5 routing throughout.</p>
<p>With that done, we can finish for today. We’ve got our basic app skeleton and authentication system up and running, and we’ll be in a good place to continue developing the rest of the app next time. I’ve put the source code on <a href="https://github.com/matthewbdaly/mynewanimalfriend-app">Github</a>, and you can find this lesson’s work under the <code>lesson-2</code> tag.</p>
<p>Next time we’ll develop the app further, including implementing the pet search functionality.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 1]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</guid>
            <pubDate>Sun, 11 Sep 2016 18:33:41 GMT</pubDate>
            <description><![CDATA[<p>A lot of my work over the last few years has been on Phonegap apps. Phonegap isn’t terribly hard to use, but the difference in context between that and a more conventional web app means that you have to move a lot of functionality to the client side, and unless you’ve used client-side Javascript frameworks before it can be a struggle.</p>
<p>In this series of tutorials I’ll show you how I might build a Phonegap app. The work involved will include:</p>
<ul>
<li>Building a REST API using Laravel to expose the data</li>
<li>Building an admin interface to manage the data</li>
<li>Building a Phonegap app using Angular.js</li>
<li>Testing and deploying it</li>
</ul>
<p>In the process we’ll cover issues like authentication, authorization, real-time notifications and working with REST APIs. Note that we won’t cover the app submission process - you can find plenty of resources on that. We will, however, be using Phonegap Build to build the app.</p>
<h2 id="the-brief">The brief</h2>
<p>Let’s say our new client is an animal shelter. The brief for the app is as follows:</p>
<blockquote>
<p>My New Animal Friend will be an app for finding a new pet. Once a user signs in, they’ll be able to choose what type of pet they’re looking for, then look through a list of pets available to adopt. They can reject them by swiping left or save them by swiping right. They can see more about the ones they swipe right on, and arrange to meet them, from within the app. Users can also message the staff to ask questions about a pet.</p>
</blockquote>
<p>Nice idea, but there’s a lot of work involved! Our very first task is to build the REST API, since everything else relies on that. Before starting, make sure you have the following installed:</p>
<ul>
<li>PHP (I’m using PHP 7, but 5.6 should be fine)</li>
<li>Composer</li>
<li>Git</li>
<li>A compatible relational database (I use PostgreSQL)</li>
<li>Redis</li>
<li>Your usual text editor</li>
<li>Node.js</li>
</ul>
<p>As long as you have this, you should be ready to go. Using <a href="https://laravel.com/docs/5.3/homestead">Homestead</a> is the simplest way to get started if you don’t have all this stuff already.</p>
<h2 id="starting-the-api">Starting the API</h2>
<p>To start building our REST API, run the following command from the shell:</p>
<pre><code class="lang-bash">$ composer create-project --prefer-dist laravel/laravel mynewanimalfriend-backend
</code></pre>
<p>We also have some other dependencies we need to install, so switch into the new directory and run the following command:</p>
<pre><code class="lang-bash">$ composer require barryvdh/laravel-cors tymon/jwt-auth predis/predis
</code></pre>
<p>Next, we need to add the new packages to the Laravel config. Open up <code>config/app.php</code> and add the following to the <code>providers</code> array:</p>
<pre><code class="lang-php">   Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class,                                                                                                                                              
   Barryvdh\Cors\ServiceProvider::class,   
</code></pre>
<p>And the following to the <code>aliases</code> array:</p>
<pre><code class="lang-php">   &#39;JWTAuth&#39; =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,
</code></pre>
<p>We also need to ensure that the CORS middleware is applied to all API routes. Open up <code>app/Http/Kernel.php</code> and under the <code>api</code> array in <code>protected $middlewareGroups</code> paste the following:</p>
<pre><code class="lang-php">   \Barryvdh\Cors\HandleCors::class,
</code></pre>
<p>Now that the packages are included, we can publish the files for them:</p>
<pre><code class="lang-bash">$ php artisan vendor:publish
</code></pre>
<p>Next, we need to set a key for our API authentication:</p>
<pre><code class="lang-bash">$ php artisan jwt:generate
</code></pre>
<p>And set a custom namespace:</p>
<pre><code class="lang-bash">$ php artisan app:name AnimalFriend
</code></pre>
<p>You’ll also want to set up the <code>.env</code> file with the configuration settings for your application. There’s one at <code>.env.example</code> by default that you can copy and customise. Then run the following command to generate the application key:</p>
<pre><code class="lang-bash">$ php artisan key:generate
</code></pre>
<p>I had to change the namespace for the user model in <code>config/jwt.php</code> as well:</p>
<pre><code class="lang-php">    &#39;user&#39; =&gt; &#39;AnimalFriend\User&#39;,
</code></pre>
<p>I also tend to amend the settings in <code>phpunit.xml</code> as follows so that it uses an in-memory SQLite database for tests:</p>
<pre><code class="lang-xml">        &lt;env name=&quot;APP_ENV&quot; value=&quot;testing&quot;/&gt;
        &lt;env name=&quot;SESSION_DRIVER&quot; value=&quot;array&quot;/&gt;
        &lt;env name=&quot;QUEUE_DRIVER&quot; value=&quot;sync&quot;/&gt;
        &lt;env name=&quot;CACHE_DRIVER&quot; value=&quot;redis&quot;/&gt;
        &lt;env name=&quot;DB_CONNECTION&quot; value=&quot;sqlite&quot;/&gt;
        &lt;env name=&quot;DB_DATABASE&quot; value=&quot;:memory:&quot;/&gt;
</code></pre>
<p>Also, delete <code>tests/ExampleTest.php</code> and amend <code>tests/TestCase.php</code> as follows in order to use database migrations in tests:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

abstract class TestCase extends Illuminate\Foundation\Testing\TestCase
{
    use DatabaseMigrations;

    /**
     * The base URL to use while testing the application.
     *
     * @var string
     */
    protected $baseUrl = &#39;http://localhost&#39;;

    /**
     * Creates the application.
     *
     * @return \Illuminate\Foundation\Application
     */
    public function createApplication()
    {
        $app = require __DIR__.&#39;/../bootstrap/app.php&#39;;

        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();

        return $app;
    }
}
</code></pre>
<p>With that in place, we can start work on our API proper.</p>
<h2 id="authenticating-our-api">Authenticating our API</h2>
<p>We’re going to start out with a very limited subset of our API. First, we’ll implement the authentication for our app, then we’ll add the facility to view a list of pets or an individual pet. Other functionality will come later. This will be sufficient to get the app working.</p>
<p>First, we need to create our user model. As we’ll be practicing TDD throughout, we write a test for the user model first. Save the following as <code>tests/UserModelTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use AnimalFriend\User;

class UserModelTest extends TestCase
{
    /**
     * Test creating a user
     *
     * @return void
     */
    public function testCreatingAUser()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Verify it works
        $saved = User::where(&#39;email&#39;, &#39;bob@example.com&#39;)-&gt;first();
        $this-&gt;assertEquals($saved-&gt;id, 1);
        $this-&gt;assertEquals($saved-&gt;name, &#39;bobsmith&#39;);
    }
}
</code></pre>
<p>If we run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

.                                                                   1 / 1 (100%)

Time: 169 ms, Memory: 12.00MB

OK (1 test, 3 assertions)
</code></pre>
<p>We already have a perfectly good <code>User</code> model and the appropriate migrations, so our test already passes.</p>
<p>Next, we need to implement the authentication system. Save this as <code>tests/AuthTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class AuthTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Test the auth
     *
     * @return void
     */
    public function testAuth()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;password&#39; =&gt; bcrypt(&#39;password&#39;)
        ]);

        // Create request
        $data = array(
            &#39;email&#39; =&gt; $user-&gt;email,
            &#39;password&#39; =&gt; &#39;password&#39;,
        );
        $response = $this-&gt;call(&#39;POST&#39;, &#39;api/authenticate&#39;, $data);
        $this-&gt;assertResponseStatus(200);
        $content = json_decode($response-&gt;getContent());
        $this-&gt;assertTrue(array_key_exists(&#39;token&#39;, $content));
    }

    /**
     * Test the auth when user does not exist
     *
     * @return void
     */
    public function testAuthFailure()
    {
        // Create data for request
        $data = array(
            &#39;email&#39; =&gt; &#39;user@example.com&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;,
        );
        $response = $this-&gt;call(&#39;POST&#39;, &#39;api/authenticate&#39;, $data);

        // Check the status code
        $this-&gt;assertResponseStatus(401);
    }
}
</code></pre>
<p>The first test creates a user and sends an authentication request, then confirms that it returns the JSON Web Token. The second checks that a user that doesn’t exist cannot log in.</p>
<p>Let’s run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

FF.                                                                 3 / 3 (100%)

Time: 328 ms, Memory: 14.00MB

There were 2 failures:

1) AuthTest::testAuth
Expected status code 200, got 404.
Failed asserting that 404 matches expected 200.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:29

2) AuthTest::testAuthFailure
Expected status code 401, got 404.
Failed asserting that 404 matches expected 401.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:49

FAILURES!
Tests: 3, Assertions: 5, Failures: 2.
</code></pre>
<p>With a failing test in place, we can implement login. First let’s create our controller at <code>app/Http/Controllers/AuthenticateController.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Http\Controllers\Controller;
use JWTAuth;
use Tymon\JWTAuth\Exceptions\JWTException;
use AnimalFriend\User;
use Hash;

class AuthenticateController extends Controller
{
    private $user;

    public function __construct(User $user) {
        $this-&gt;user = $user;
    }

    public function authenticate(Request $request)
    {
        // Get credentials
        $credentials = $request-&gt;only(&#39;email&#39;, &#39;password&#39;);

        // Get user
        $user = $this-&gt;user-&gt;where(&#39;email&#39;, $credentials[&#39;email&#39;])-&gt;first();

        try {
            // attempt to verify the credentials and create a token for the user
            if (! $token = JWTAuth::attempt($credentials)) {
                return response()-&gt;json([&#39;error&#39; =&gt; &#39;invalid_credentials&#39;], 401);
            }
        } catch (JWTException $e) {
            // something went wrong whilst attempting to encode the token
            return response()-&gt;json([&#39;error&#39; =&gt; &#39;could_not_create_token&#39;], 500);
        }

        // all good so return the token
        return response()-&gt;json(compact(&#39;token&#39;));
    }
}
</code></pre>
<p>And we need to set up the route in <code>routes/api.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Http\Request;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the &quot;api&quot; middleware group. Enjoy building your API!
|
*/

Route::post(&#39;authenticate&#39;, &#39;AuthenticateController@authenticate&#39;);
</code></pre>
<p>Note that because it’s an API route, it’s automatically prefixed with <code>api/</code> without us having to do anything.</p>
<p>Now if we run our tests, they should pass:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

...                                                                 3 / 3 (100%)

Time: 402 ms, Memory: 14.00MB

OK (3 tests, 6 assertions)
</code></pre>
<p>Now we can obtain a JSON Web Token to authenticate users with. To start with we’ll only support existing users, but later we’ll add a method to sign up. However, we need at least one user to test with, so we’ll create a seeder for that at <code>database/seeds/UserTableSeeder.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;
use Carbon\Carbon;

class UserTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Add user
        DB::table(&#39;users&#39;)-&gt;insert([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
            &#39;password&#39; =&gt; Hash::make(&quot;password&quot;)
        ]);
    }
}
</code></pre>
<p>You can run <code>php artisan make:seeder UserTableSeeder</code> to generate the file, or just paste it in. You also need to amend <code>database/seeds/DatabaseSeeder.php</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $this-&gt;call(UserTableSeeder::class);
    }
}
</code></pre>
<p>This ensures the seeder will actually be called. Then, run the following commands:</p>
<pre><code class="lang-bash">$ php artisan migrate
$ php artisan db:seed
</code></pre>
<p>That sets up our user in the database.</p>
<h2 id="adding-the-pets-endpoint">Adding the Pets endpoint</h2>
<p>Our next step is to add the pets model and endpoint. Our <code>Pet</code> model should have the following fields:</p>
<ul>
<li>ID</li>
<li>Timestamps (<code>created_at</code> and <code>updated_at</code>)</li>
<li>Name</li>
<li>Path to photo</li>
<li>Availability</li>
<li>Type (eg cat, dog)</li>
</ul>
<p>Let’s create a test for that model:</p>
<pre><code class="lang-php">&lt;?php

use AnimalFriend\Pet;

class PetModelTest extends TestCase
{
    /**
     * Test creating a pet
     *
     * @return void
     */
    public function testCreatingAPet()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Verify it works
        $saved = Pet::where(&#39;name&#39;, &#39;Freddie&#39;)-&gt;first();
        $this-&gt;assertEquals($saved-&gt;id, 1);
        $this-&gt;assertEquals($saved-&gt;name, &#39;Freddie&#39;);
        $this-&gt;assertEquals($saved-&gt;type, &#39;Cat&#39;);
        $this-&gt;assertEquals($saved-&gt;available, 1);
        $this-&gt;assertEquals($saved-&gt;picture, &#39;1.jpg&#39;);
    }
}
</code></pre>
<p>Save this as <code>tests/PetModelTest.php</code>. Then run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

..E.                                                                4 / 4 (100%)

Time: 414 ms, Memory: 16.00MB

There was 1 error:

1) PetModelTest::testCreatingAUser
InvalidArgumentException: Unable to locate factory with name [default] [AnimalFriend\Pet].

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:126
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:2280
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:139
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:106
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:84
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetModelTest.php:16

ERRORS!
Tests: 4, Assertions: 6, Errors: 1.
</code></pre>
<p>First we need to create a factory for creating a pet in <code>database/factories/ModelFactory.php</code>:</p>
<pre><code class="lang-php">$factory-&gt;define(AnimalFriend\Pet::class, function (Faker\Generator $faker) {
    return [
        &#39;name&#39; =&gt; $faker-&gt;firstNameMale,
        &#39;type&#39; =&gt; &#39;Cat&#39;,
        &#39;available&#39; =&gt; 1,
        &#39;picture&#39; =&gt; &#39;1.jpg&#39;
    ];
});
</code></pre>
<p>Then, we create the model:</p>
<pre><code class="lang-bash">$ php artisan make:model Pet
</code></pre>
<p>Next, we create a migration for the <code>Pet</code> model:</p>
<pre><code class="lang-bash">$ php artisan make:migration create_pets_table
Created Migration: 2016_09_11_145010_create_pets_table
</code></pre>
<p>And paste in the following code:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePetsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(&#39;pets&#39;, function (Blueprint $table) {
            $table-&gt;increments(&#39;id&#39;);
            $table-&gt;string(&#39;name&#39;);
            $table-&gt;string(&#39;type&#39;);
            $table-&gt;string(&#39;available&#39;);
            $table-&gt;string(&#39;picture&#39;)-&gt;nullable();
            $table-&gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop(&#39;pets&#39;);
    }
}
</code></pre>
<p>Time to run the tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

....                                                                4 / 4 (100%)

Time: 412 ms, Memory: 16.00MB

OK (4 tests, 12 assertions)
</code></pre>
<p>With that done, we can start work on implementing the endpoint. We need to check that unauthorised users cannot retrieve the data, and that authorised users can. First, let’s create <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Foundation\Testing\DatabaseMigrations;

class PetControllerTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Test fetching pets when unauthorised
     *
     * @return void
     */
    public function testFetchingPetsWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets&#39;);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pets when authorised
     *
     * @return void
     */
    public function testFetchingPets()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets&#39;, [], $headers)
            -&gt;seeJsonStructure([
                &#39;*&#39; =&gt; [
                    &#39;id&#39;,
                    &#39;name&#39;,
                    &#39;type&#39;,
                    &#39;available&#39;,
                    &#39;picture&#39;,
                    &#39;created_at&#39;,
                    &#39;updated_at&#39;
                ]
            ]);
        $this-&gt;assertResponseStatus(200);
    }
}
</code></pre>
<p>First, we create a pet, make an HTTP request to <code>/api/pets</code>, and check we are not authorised. Next, we do the same, but also create a user and a JSON Web Token, and pass the token through in the request. Then we verify the response data and that it was successful.</p>
<p>Let’s run the tests:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

..FF..                                                              6 / 6 (100%)

Time: 509 ms, Memory: 16.00MB

There were 2 failures:

1) PetControllerTest::testFetchingPetsWhenUnauthorised
Expected status code 400, got 404.
Failed asserting that 404 matches expected 400.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:25

2) PetControllerTest::testFetchingPets
Failed asserting that null is of type &quot;array&quot;.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:295
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:67

FAILURES!
Tests: 6, Assertions: 17, Failures: 2.
</code></pre>
<p>That looks correct, so we can start building our endpoint. We can generate a boilerplate for it as follows:</p>
<pre><code class="lang-bash">$ $ php artisan make:controller PetController --resource
</code></pre>
<p>Note the <code>--resource</code> flag - this tells Laravel to set it up to be a RESTful controller with certain predefined functions. Next, let’s amend the new file at <code>app\Http\Controllers/PetController.php</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace AnimalFriend\Http\Controllers;

use Illuminate\Http\Request;

use AnimalFriend\Http\Requests;
use AnimalFriend\Pet;

class PetController extends Controller
{
    private $pet;

    public function __construct(Pet $pet) {
        $this-&gt;pet = $pet;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Get all pets
        $pets = $this-&gt;pet-&gt;get();

        // Send response
        return response()-&gt;json($pets, 200);
    }
}
</code></pre>
<p>This implements an index route that shows all pets. Next, we hook up the route in <code>routes/api.php</code>:</p>
<pre><code class="lang-php">// Auth routes
Route::group([&#39;middleware&#39; =&gt; [&#39;jwt.auth&#39;]], function () {
    Route::resource(&#39;pets&#39;, &#39;PetController&#39;);
});
</code></pre>
<p>Note that we wrap this resource in the <code>jwt.auth</code> middleware to prevent access by unauthorised users. Implementing this as middleware makes it very easy to reuse. Also note that we can specify it as a resource, meaning we don’t have to explicitly hook up each route to a controller method.</p>
<p>Let’s run the tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

..EE..                                                              6 / 6 (100%)

Time: 511 ms, Memory: 16.00MB

There were 2 errors:

1) PetControllerTest::testFetchingPetsWhenUnauthorised
ReflectionException: Class jwt.auth does not exist

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:24

2) PetControllerTest::testFetchingPets
ReflectionException: Class jwt.auth does not exist

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517
/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:72
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:56

ERRORS!
Tests: 6, Assertions: 15, Errors: 2.
</code></pre>
<p>Looks like JWT isn’t configured correctly. We can fix that in <code>app/Http/Kernel.php</code> by adding it to <code>$routeMiddleware</code>:</p>
<pre><code class="lang-php">        &#39;jwt.auth&#39; =&gt; &#39;Tymon\JWTAuth\Middleware\GetUserFromToken&#39;,
        &#39;jwt.refresh&#39; =&gt; &#39;Tymon\JWTAuth\Middleware\RefreshToken&#39;,
</code></pre>
<p>And run the tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

......                                                              6 / 6 (100%)

Time: 514 ms, Memory: 16.00MB

OK (6 tests, 25 assertions)
</code></pre>
<p>Our final task for today on the API is building a route for fetching a single pet. Our tests need to handle three situations:</p>
<ul>
<li>An unauthorised request</li>
<li>A request for a pet that does not exist</li>
<li>A request for a pet that does exist</li>
</ul>
<p>Add these methods to <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="lang-php">    /**
     * Test fetching pet when unauthorised
     *
     * @return void
     */
    public function testFetchingPetWhenUnauthorised()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Send request
        $response = $this-&gt;call(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id);
        $this-&gt;assertResponseStatus(400);
    }

    /**
     * Test fetching pet which does not exist
     *
     * @return void
     */
    public function testFetchingPetDoesNotExist()
    {
        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/1&#39;, [], $headers);
        $this-&gt;assertResponseStatus(404);
    }

    /**
     * Test fetching pet when authorised
     *
     * @return void
     */
    public function testFetchingPet()
    {
        // Create a Pet
        $pet = factory(AnimalFriend\Pet::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;Freddie&#39;,
            &#39;type&#39; =&gt; &#39;Cat&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;pets&#39;, [&#39;type&#39; =&gt; &#39;Cat&#39;]);

        // Create a User
        $user = factory(AnimalFriend\User::class)-&gt;create([
            &#39;name&#39; =&gt; &#39;bobsmith&#39;,
            &#39;email&#39; =&gt; &#39;bob@example.com&#39;,
        ]);
        $this-&gt;seeInDatabase(&#39;users&#39;, [&#39;email&#39; =&gt; &#39;bob@example.com&#39;]);

        // Create request
        $token = JWTAuth::fromUser($user);
        $headers = array(
            &#39;Authorization&#39; =&gt; &#39;Bearer &#39;.$token
        );

        // Send it
        $this-&gt;json(&#39;GET&#39;, &#39;/api/pets/&#39;.$pet-&gt;id, [], $headers)
            -&gt;seeJsonStructure([
                &#39;id&#39;,
                &#39;name&#39;,
                &#39;type&#39;,
                &#39;available&#39;,
                &#39;picture&#39;,
                &#39;created_at&#39;,
                &#39;updated_at&#39;
            ]);
        $this-&gt;assertResponseStatus(200);
    }
</code></pre>
<p>Let’s check our tests fail:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

.....FE..                                                           9 / 9 (100%)

Time: 974 ms, Memory: 16.00MB

There was 1 error:

1) PetControllerTest::testFetchingPet
PHPUnit_Framework_Exception: Argument #2 (No Value) of PHPUnit_Framework_Assert::assertArrayHasKey() must be a array or ArrayAccess

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:304
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:145

--

There was 1 failure:

1) PetControllerTest::testFetchingPetDoesNotExist
Expected status code 404, got 400.
Failed asserting that 400 matches expected 404.

/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648
/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:112

ERRORS!
Tests: 9, Assertions: 31, Errors: 1, Failures: 1.
</code></pre>
<p>Now, we already have the <code>show()</code> method hooked up by default, so we just have to implement it in <code>app/Http/Controllers/PetController.php</code>:</p>
<pre><code class="lang-php">    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Get pet
        $pet = $this-&gt;pet-&gt;findOrFail($id);

        // Send response
        return response()-&gt;json($pet, 200);
    }
</code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpunit 
PHPUnit 5.5.4 by Sebastian Bergmann and contributors.

.........                                                           9 / 9 (100%)

Time: 693 ms, Memory: 16.00MB

OK (9 tests, 39 assertions)
</code></pre>
<p>Now we have all the endpoints we need to get started with the app. You can find the source code for this backend on <a href="https://github.com/matthewbdaly/mynewanimalfriend-backend">Github</a> - check out the <code>lesson-1</code> tag.</p>
<p>That seems like a good place to stop for now. We have our first pass at the back end. It’s not complete by any means, but it’s a good start, and is sufficient for us to get some basic functionality up and running in the app. In the next instalment we’ll start working with Phonegap to build the first pass at the app itself. Later instalments will see us working with both the app and backend to build it into a more useful whole.</p>
]]></description>
        </item>
    </channel>
</rss>
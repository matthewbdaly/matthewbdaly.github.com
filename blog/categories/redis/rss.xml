<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>redis | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/redis/</link>
        <description>redis | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 27 Oct 2019 21:55:01 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[Using phpiredis with Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/10/20/using-phpiredis-with-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/10/20/using-phpiredis-with-laravel/</guid>
            <pubDate>Fri, 20 Oct 2017 21:55:26 GMT</pubDate>
            <description><![CDATA[<p>Laravel has support out of the box for using Redis. However, by default it uses a Redis client written in PHP, which will always be a little slower than one written in C. If you’re making heavy use of Redis, it may be worth using the <a href="https://github.com/nrk/phpiredis">phpiredis</a> extension to squeeze a little more performance out of it.</p>
<p>I’m using PHP 7.0 on Ubuntu Zesty and I installed the dependencies with the following command:</p>
<pre><code class="lang-bash">$ sudo apt-get install libhiredis-dev php-redis php7.0-dev
</code></pre>
<p>Then I installed phpiredis as follows:</p>
<pre><code class="lang-bash">git clone https://github.com/nrk/phpiredis.git &amp;&amp; \
       cd phpiredis &amp;&amp; \
       phpize &amp;&amp; \
       ./configure --enable-phpiredis &amp;&amp; \
       make &amp;&amp; \
       sudo make install
</code></pre>
<p>Finally, I configured Redis to use phpiredis in the <code>redis</code> section of <code>config/database.php</code> for a Laravel app:</p>
<pre><code class="lang-php">    &#39;redis&#39; =&gt; [

        &#39;cluster&#39; =&gt; false,

        &#39;default&#39; =&gt; [
            &#39;host&#39;     =&gt; env(&#39;REDIS_HOST&#39;, &#39;localhost&#39;),
            &#39;password&#39; =&gt; env(&#39;REDIS_PASSWORD&#39;, null),
            &#39;port&#39;     =&gt; env(&#39;REDIS_PORT&#39;, 6379),
            &#39;database&#39; =&gt; 0,
            &#39;options&#39; =&gt; [
                &#39;connections&#39; =&gt; [
                    &#39;tcp&#39; =&gt; &#39;Predis\Connection\PhpiredisStreamConnection&#39;, // PHP streams
                    &#39;unix&#39; =&gt; &#39;Predis\Connection\PhpiredisSocketConnection&#39;, // ext-socket
                ],
            ]
        ],
    ],
</code></pre>
<p>Now, I’m going to be honest - in a casual comparison I couldn’t see much difference in terms of speed. I would probably only bother with setting this up on a site where high Redis performance was absolutely necessary. If you just want a quicker cache response it might make more sense to put Varnish in front of the site instead. However, in cases where Redis gets used heavily, it’s probably worth doing.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Broadcasting events with Laravel and Socket.io]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/05/14/broadcasting-events-with-laravel-and-socket-dot-io/</guid>
            <pubDate>Sat, 14 May 2016 20:00:00 GMT</pubDate>
            <description><![CDATA[<p>PHP frameworks like Laravel aren’t really set up to handle real-time events properly, so if you want to build a real-time app, you’re generally better off with another platform, such as Node.js. However, if that only forms a small part of your application, you may still prefer to work with PHP. Fortunately it’s fairly straightforward to hand off the real-time aspects of your application to a dedicated microservice written using Node.js and still use Laravel to handle the rest of the functionality.</p>
<p>Here I’ll show you how I built a Laravel app that uses a separate Node.js script to handle sending real-time updates to the user.</p>
<h2 id="events-in-laravel">Events in Laravel</h2>
<p>In this case, I was building a REST API to serve as the back end for a Phonegap app that allowed users to message each other. The API includes an endpoint that allows users to create and fetch messages. Now, in theory, we could just repeatedly poll the endpoint for new messages, but that would be inefficient. What we needed was a way to notify users of new messages in real time, which seemed like the perfect opportunity to use Socket.io.</p>
<p>Laravel comes with a simple, but robust system that allows you to broadcast events to a Redis server. Another service can then listen for these events and carry out jobs on them, and there is no reason why this service has to be written in PHP. This makes it easy to decouple your application into smaller parts. In essence the functionality we wanted was as follows:</p>
<ul>
<li>Receive message</li>
<li>Push message to Redis</li>
<li>Have a separate service pick up message on Redis</li>
<li>Push message to clients</li>
</ul>
<p>First off, we need to define an event in our Laravel app. You can create a boilerplate with the following Artisan command:</p>
<pre><code class="lang-bash">$ php artisan make:event NewMessage
</code></pre>
<p>This will create the file <code>app/Events/NewMessage.php</code>. You can then customise this as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Events;

use App\Events\Event;
use App\Message;
use Illuminate\Queue\SerializesModels;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;

class NewMessage extends Event implements ShouldBroadcast
{
    use SerializesModels;

    public $message;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(Message $message)
    {
        // Get message
        $this-&gt;message = $message;
    }

    /**
     * Get the channels the event should be broadcast on.
     *
     * @return array
     */
    public function broadcastOn()
    {
        return [&#39;room_&#39;.$this-&gt;message-&gt;room_id];
    }
}
</code></pre>
<p>This particular event is a class that accepts a single argument, which is an instance of the <code>Message</code> model. This model includes an attribute of <code>room_id</code> that is used to determine which room the message is posted to - note that this is returned in the <code>broadcastOn()</code> method.</p>
<p>When we want to trigger our new event, we can do so as follows:</p>
<pre><code class="lang-php">use App\Events\NewMessage;
Event::fire(new NewMessage($message));
</code></pre>
<p>Here, <code>$message</code> is the saved Eloquent object containing the message. Note the use of <code>SerializesModels</code> - this means that the Eloquent model is serialized into JSON when broadcasting the event.</p>
<p>We also need to make sure Redis is set as our broadcast driver. Ensure the Composer package <code>predis/predis</code> is installed, and set <code>BROADCAST_DRIVER=redis</code> in your <code>.env</code> file. Also, please note that I found that setting <code>QUEUE_DRIVER=redis</code> in <code>.env</code> as well broke the broadcasting system, so it looks like you can’t use Redis as both a queue and a broadcasting system unless you set up multiple connections.</p>
<p>Next, we need another server-side script to handle processing the received events and pushing the messages out. In my case, this was complicated by the fact that we were using HTTPS, courtesy of Let’s Encrypt. I installed the required dependencies for the Node.js script as follows:</p>
<pre><code class="lang-bash">$ npm install socket.io socket.io-client ioredis --save-dev
</code></pre>
<p>Here’s an example Node.js script for processing the events:</p>
<pre><code class="lang-javascript">var fs = require(&#39;fs&#39;);
var pkey = fs.readFileSync(&#39;/etc/letsencrypt/live/example.com/privkey.pem&#39;);
var pcert = fs.readFileSync(&#39;/etc/letsencrypt/live/example.com/fullchain.pem&#39;)

var options = {
  key: pkey,
  cert: pcert
};

var app = require(&#39;https&#39;).createServer(options);
var io = require(&#39;socket.io&#39;)(app);

var Redis = require(&#39;ioredis&#39;);
var redis = new Redis();

app.listen(9000, function() {
    console.log(&#39;Server is running!&#39;);
});

function handler(req, res) {
    res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);
    res.writeHead(200);
    res.end(&#39;&#39;);
}

io.on(&#39;connection&#39;, function(socket) {
    //
});

redis.psubscribe(&#39;*&#39;, function(err, count) {
    //
});

redis.on(&#39;pmessage&#39;, function(subscribed, channel, message) {
    message = JSON.parse(message);
    console.log(&#39;Channel is &#39; + channel + &#39; and message is &#39; + message);
    io.emit(channel, message.data);
});
</code></pre>
<p>Note we use the <code>https</code> module instead of the <code>http</code> one, and we pass the key and certificate as options to the server. This server runs on port 9000, but feel free to move it to any arbitrary port you wish. In production, you’d normally use something like Supervisor or systemd to run a script like this as a service.</p>
<p>Next, we need a client-side script to connect to the Socket.io instance and handle any incoming messages. Here’s a very basic example that just dumps them to the browser console:</p>
<pre><code class="lang-javascript">var url = window.location.protocol + &#39;//&#39; + window.location.hostname;
var socket = io(url, {
  &#39;secure&#39;: true,
  &#39;reconnect&#39;: true,
  &#39;reconnection delay&#39;: 500,
  &#39;max reconnection attempts&#39;: 10
});
var chosenEvent = &#39;room_&#39; + room.id;
socket.on(chosenEvent, function (data) {
  console.log(data);
});
</code></pre>
<p>Finally, we need to configure our web server. I’m using Nginx with PHP-FPM and PHP 7, and this is how I configured it:</p>
<pre><code class="lang-nginx">upstream websocket {
    server 127.0.0.1:9000;
}

server {
    listen         80;
    server_name example.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name example.com;
    ssl on;
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers &#39;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&#39;;
    client_max_body_size 50M;
    server_tokens off;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection &quot;1; mode=block&quot;;

    root /var/www/public;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip on;
        gzip_proxied any;
        gzip_types text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml-rss text/javascript text/js application/json;
        expires 1y;
        charset utf-8;
    }

    location ~ \.php$ {
        try_files $uri /index.php =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /.well-known {
        root /var/www/public;
        allow all;
    }

    location /socket.io {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;upgrade&quot;;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_pass https://websocket;
    }
}
</code></pre>
<p>Any requests to <code>/socket.io</code> are proxied to port 9000, where our chat handling script is listening. Note that we allow the HTTPS connection to be upgraded to a WebSocket one.</p>
<p>Once that’s done, you just need to restart your PHP application and Nginx, and start running your chat script, and everything should be working fine. If it isn’t, the command <code>redis-cli monitor</code> is invaluable in verifying that the event is being published correctly.</p>
<h2 id="summary">Summary</h2>
<p>Getting this all working together did take quite a bit of trial and error, but that was mostly a matter of configuration. Actually implementing this is pretty straightforward, and it’s an easy way to add some basic real-time functionality to an existing Laravel application.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a real-time Twitter stream with Node.js, React.js and Redis]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/09/28/building-a-real-time-twitter-stream-with-node-dot-js-react-dot-js-and-redis/</guid>
            <pubDate>Mon, 28 Sep 2015 19:00:55 GMT</pubDate>
            <description><![CDATA[<p>In the last year or so, React.js has taken the world of web development by storm. A major reason for this is that it makes it possible to build <strong>isomorphic web applications</strong> - web apps where the same code can run on the client and the server. Using React.js, you can create a template that will be executed on the server when the page first loads, and then the same template can be used to re-render the content when it’s updated, whether that’s via AJAX, WebSockets or another method entirely.</p>
<p>In this tutorial, I’ll show you how to build a simple Twitter streaming app using Node.js. I’m actually <a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">not the only person to have built this to demonstrate React.js</a>, but this is my own particular take on this idea, since it’s such an obvious use case for React.</p>
<h2 id="what-is-react-js-">What is React.js?</h2>
<p>A lot of people get rather confused over this issue. It’s not correct to compare React.js with frameworks like Angular.js or Backbone.js. It’s often described as being just the V in MVC - it represents only the view layer. If you’re familiar with Backbone.js, I think it’s reasonable to compare it to Backbone’s views, albeit with it’s own templating syntax. It does not provide the following functionality like Angular and Backbone do:</p>
<ul>
<li>Support for models</li>
<li>Any kind of helpers for AJAX requests</li>
<li>Routing</li>
</ul>
<p>If you want any of this functionality, you need to look elsewhere. There are other libraries around that offer this kind of functionality, so if you want to use React as part of some kind of MVC structure, you can do so - they’re just not a part of the library itself.</p>
<p>React.js uses a so-called “virtual DOM” - rather than re-rendering the view from scratch when the state changes, it instead retains a virtual representation of the DOM in memory, updates that, then figures out what changes are required to update the existing DOM and applies them. This means it only needs to change what actually changes, making it faster than other client-side templating systems. Combined with the ability to render on the server side, React allows you to build high-performance apps that combine the initial speed and SEO advantages of conventional web apps with the responsiveness of single-page web apps.</p>
<p>To create components with React, it’s common to use an XML-like syntax called JSX. It’s not mandatory, but I highly recommend you do so as it’s much more intuitive than creating elements with Javascript.</p>
<h2 id="getting-started">Getting started</h2>
<p>You’ll need a Twitter account, and you’ll need to <a href="https://apps.twitter.com/">create a new Twitter app</a> and obtain the security credentials to let you access the Twitter Streaming API. You’ll also need to have Node.js installed (ideally using <code>nvm</code>) - at this time, however, you can’t use Node 4.0 because of issues with Redis. You will also need to install Redis and hiredis - if you’ve worked through my previous Redis tutorials you’ll have these already.</p>
<p>We’ll be using Gulp.js as our build system, and Bower to install some client-side packages, so they need to be installed globally:</p>
<pre><code class="lang-bash">$ npm install -g gulp bower
</code></pre>
<p>We’ll also be using Compass to help with our stylesheets:</p>
<pre><code class="lang-bash">$ sudo gem install compass
</code></pre>
<p>With that all done, let’s start work on our app. First, run the following command to create your <code>package.json</code>:</p>
<pre><code class="lang-bash">$ npm init
</code></pre>
<p>I’m assuming you’re well-acquainted enough with Node.js to know what this does, and can answer the questions without difficulty. I won’t cover writing tests in this tutorial as, but set your test command to <code>gulp test</code> and you should be fine.</p>
<p>Next, we need to install our dependencies:</p>
<pre><code class="lang-bash">$ npm install --save babel compression express hbs hiredis lodash morgan react redis socket.io socket.io-client twitter
$ npm install --save-dev browserify chai gulp gulp-compass gulp-coveralls gulp-istanbul gulp-jshint gulp-mocha gulp-uglify jshint-stylish reactify request vinyl-buffer vinyl-source-stream
</code></pre>
<h2 id="planning-our-app">Planning our app</h2>
<p>Now, it’s worth taking a few minutes to plan the architecture of our app. We want to have the app listen to the Twitter Streaming API and filter for messages with any arbitrary string in them - in this case we’ll be searching for “javascript”, but you can set it to anything you like. That means that that part needs to be listening all the time, not just when someone is using the app. Also, it doesn’t fit neatly into the usual request-response cycle - if several people visit the site at once, we could end up with multiple connections to fetch the same data, which is really not efficient, and could cause problems with duplicate tweets showing up.</p>
<p>Instead, we’ll have a separate <code>worker.js</code> file which runs constantly. This will listen for any matching messages on Twitter. When one appears, rather than returning it itself, it will publish it to a Redis channel, as well as persisting it. Then, the web app, which will be the <code>index.js</code> file, will be subscribed to the same channel, and will receive the tweet and push it to all current users using Socket.io.</p>
<p>This is a good example of a message queue, and it’s a common pattern. It allows you to create dedicated sections of your app for different tasks, and means that they will generally be more robust. In this case, if the worker goes down, users will still be able to see some tweets, and if the server goes down, the tweets will still be persisted to Redis. In theory, this would also allow you to scale your app more easily by allowing movement of different tasks to different servers, and several app servers could interface with a single worker process. The only downside I can think of is that on a platform like Heroku you’d need to have a separate dyno for the worker process - however, with Heroku’s pricing model changing recently, since this needs to be listening all the time it won’t be suitable for the free tier anyway.</p>
<p>First let’s create our <code>gulpfile.js</code>:</p>
<pre><code class="lang-javascript">var gulp = require(&#39;gulp&#39;);
var jshint = require(&#39;gulp-jshint&#39;);
var source = require(&#39;vinyl-source-stream&#39;);
var buffer = require(&#39;vinyl-buffer&#39;);
var browserify = require(&#39;browserify&#39;);
var reactify = require(&#39;reactify&#39;);
var mocha = require(&#39;gulp-mocha&#39;);
var istanbul = require(&#39;gulp-istanbul&#39;);
var coveralls = require(&#39;gulp-coveralls&#39;);
var compass = require(&#39;gulp-compass&#39;);
var uglify = require(&#39;gulp-uglify&#39;);

var paths = {
    scripts: [&#39;components/*.jsx&#39;],
    styles: [&#39;src/sass/*.scss&#39;]
};
gulp.task(&#39;lint&#39;, function () {
  return gulp.src([
      &#39;index.js&#39;,
      &#39;components/*.js&#39;
      ])
    .pipe(jshint())
    .pipe(jshint.reporter(&#39;jshint-stylish&#39;));
});

gulp.task(&#39;compass&#39;, function() {
  gulp.src(&#39;src/sass/*.scss&#39;)
    .pipe(compass({
      css: &#39;static/css&#39;,
      sass: &#39;src/sass&#39;
    }))
    .pipe(gulp.dest(&#39;static/css&#39;));
});;

gulp.task(&#39;test&#39;, function () {
  gulp.src(&#39;index.js&#39;)
    .pipe(istanbul())
    .pipe(istanbul.hookRequire())
    .on(&#39;finish&#39;, function () {
      gulp.src(&#39;test/test.js&#39;, {read: false})
        .pipe(mocha({ reporter: &#39;spec&#39; }))
        .pipe(istanbul.writeReports({
          reporters: [
            &#39;lcovonly&#39;,
            &#39;cobertura&#39;,
            &#39;html&#39;
          ]
        }))
        .pipe(istanbul.enforceThresholds({ thresholds: { global: 90 } }))
        .once(&#39;error&#39;, function () {
          process.exit(0);
        })
        .once(&#39;end&#39;, function () {
          process.exit(0);
        });
    });
});

gulp.task(&#39;coveralls&#39;, function () {
  gulp.src(&#39;coverage/lcov.info&#39;)
    .pipe(coveralls());
});

gulp.task(&#39;react&#39;, function () {
  return browserify({ entries: [&#39;components/index.jsx&#39;], debug: true })
    .transform(reactify)
    .bundle()
    .pipe(source(&#39;bundle.js&#39;))
    .pipe(buffer())
    .pipe(uglify())
    .pipe(gulp.dest(&#39;static/jsx/&#39;));
});

gulp.task(&#39;default&#39;, function () {
  gulp.watch(paths.scripts, [&#39;react&#39;]);
  gulp.watch(paths.styles, [&#39;compass&#39;]);
});
</code></pre>
<p>I’ve added tasks for the tests and JSHint if you choose to implement them, but the only ones I’ve actually used are the <code>compass</code> and <code>react</code> tasks. The <code>compass</code> task compiles our Sass files into CSS, while the <code>react</code> task uses Browserify to take our React components and various modules installed using NPM and build them for use in the browser, as well as minifying them. Note that we installed React and lodash with NPM? We’re going to be able to use them in the browser and on the server, thanks to Browserify.</p>
<p>Next, let’s create our <code>worker.js</code> file:</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

// Get dependencies
var Twitter = require(&#39;twitter&#39;);

// Set up Twitter client
var client = new Twitter({
  consumer_key: process.env.TWITTER_CONSUMER_KEY,
  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,
  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,
  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET
});

// Set up connection to Redis
var redis;
if (process.env.REDIS_URL) {
  redis = require(&#39;redis&#39;).createClient(process.env.REDIS_URL);
} else {
  redis = require(&#39;redis&#39;).createClient();
}

client.stream(&#39;statuses/filter&#39;, {track: &#39;javascript&#39;, lang: &#39;en&#39;}, function(stream) {
  stream.on(&#39;data&#39;, function(tweet) {
    // Log it to console
    console.log(tweet);

    // Publish it
    redis.publish(&#39;tweets&#39;, JSON.stringify(tweet));

    // Persist it to a Redis list
    redis.rpush(&#39;stream:tweets&#39;, JSON.stringify(tweet));
  });

  // Handle errors
  stream.on(&#39;error&#39;, function (error) {
    console.log(error);
  });
});
</code></pre>
<p>Most of this file should be fairly straightforward. We set up our connection to Twitter (you’ll need to set the various environment variables listed here using the appropriate method for your operating system), and a connection to Redis.</p>
<p>We then stream the Twitter statuses that match our filter. When we receive a tweet, we log it to the console (feel free to comment this out in production if desired), publish it to a Redis channel called <code>tweets</code>, and push it to the end of a Redis list called <code>stream:tweets</code>. When an error occurs, we output it to the console.</p>
<p>Let’s use Bootstrap to style the app. Create the following <code>.bowerrc</code> file:</p>
<pre><code class="lang-bash">{
    &quot;directory&quot;: &quot;static/bower_components&quot;
}
</code></pre>
<p>Then run <code>bower init</code> to create your <code>bower.json</code> file, and install Bootstrap with <code>bower install --save sass-bootstrap</code>.</p>
<p>With that done, create the file <code>src/sass/style.scss</code> and enter the following:</p>
<pre><code class="lang-scss">@import &quot;compass/css3/user-interface&quot;;
@import &quot;compass/css3&quot;;
@import &quot;../../static/bower_components/sass-bootstrap/lib/bootstrap.scss&quot;;
</code></pre>
<p>This includes some dependencies from Compass, as well as Bootstrap. We won’t be using any of the Javascript features of Bootstrap, so we don’t need to worry too much about that.</p>
<p>Next, we need to create our view files. As React will be used to render the main part of the page, these will be very basic, with just the header, footer, and a section where the content can be rendered. First, create <code>views/index.hbs</code>:</p>
<pre><code class="lang-handlebars">{{&gt; header }}
        &lt;div class=&quot;container&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-md-12&quot;&gt;
                    &lt;div id=&#39;view&#39;&gt;{{{ markup }}}&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;script id=&quot;initial-state&quot; type=&quot;application/json&quot;&gt;{{{state}}}&lt;/script&gt;
{{&gt; footer }}
</code></pre>
<p>As promised, this a very basic layout. Note the <code>markup</code> variable, which is where the markup generated by React will be inserted when rendered on the server, and the <code>state</code> variable, which will contain the JSON representation of the data used to generate that markup. By passing that data through, you can ensure that the instance of React on the client has access to the same raw data as was passed through to the view on the server side, so that when the data needs to be re-rendered, it can be done so correctly.</p>
<p>We’ll also define partials for the header and footer. The header should be in <code>views/partials/header.hbs</code>:</p>
<pre><code class="lang-handlebars">&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;title&gt;Tweet Stream&lt;/title&gt;
        &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;

        &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/style.css&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--[if lt IE 7]&gt;
            &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;
        &lt;nav class=&quot;navbar navbar-inverse navbar-static-top&quot; role=&quot;navigation&quot;&gt;
            &lt;div class=&quot;container-fluid&quot;&gt;
                &lt;div class=&quot;navbar-header&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#header-nav&quot;&gt;
                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                    &lt;/button&gt;
                    &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;Tweet Stream&lt;/a&gt;
                    &lt;div class=&quot;collapse navbar-collapse navbar-right&quot; id=&quot;header-nav&quot;&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/nav&gt;
</code></pre>
<p>The footer should be in <code>views/partials/footer.hbs</code>:</p>
<pre><code class="lang-handlebars">        &lt;script src=&quot;/jsx/bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Note that we load the Javascript file <code>/jsx/bundle.js</code> - this is the output from the command <code>gulp react</code>.</p>
<h2 id="creating-the-back-end">Creating the back end</h2>
<p>The next step is to implement the back end of the website. Add the following code as <code>index.js</code>:</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

require(&#39;babel/register&#39;);

// Get dependencies
var express = require(&#39;express&#39;);
var app = express();
var compression = require(&#39;compression&#39;);
var port = process.env.PORT || 5000;
var base_url = process.env.BASE_URL || &#39;http://localhost:5000&#39;;
var hbs = require(&#39;hbs&#39;);
var morgan = require(&#39;morgan&#39;);
var React = require(&#39;react&#39;);
var Tweets = React.createFactory(require(&#39;./components/tweets.jsx&#39;));

// Set up connection to Redis
var redis, subscribe;
if (process.env.REDIS_URL) {
  redis = require(&#39;redis&#39;).createClient(process.env.REDIS_URL);
  subscribe = require(&#39;redis&#39;).createClient(process.env.REDIS_URL);
} else {
  redis = require(&#39;redis&#39;).createClient();
  subscribe = require(&#39;redis&#39;).createClient();
}

// Set up templating
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.set(&#39;view engine&#39;, &quot;hbs&quot;);
app.engine(&#39;hbs&#39;, require(&#39;hbs&#39;).__express);

// Register partials
hbs.registerPartials(__dirname + &#39;/views/partials&#39;);

// Set up logging
app.use(morgan(&#39;combined&#39;));

// Compress responses
app.use(compression());

// Set URL
app.set(&#39;base_url&#39;, base_url);

// Serve static files
app.use(express.static(__dirname + &#39;/static&#39;));

// Render main view
app.get(&#39;/&#39;, function (req, res) {
  // Get tweets
  redis.lrange(&#39;stream:tweets&#39;, 0, -1, function (err, tweets) {
    if (err) {
      console.log(err);
    } else {
      // Get tweets
      var tweet_list = [];
      tweets.forEach(function (tweet, i) {
        tweet_list.push(JSON.parse(tweet));
      });

      // Render page
      var markup = React.renderToString(Tweets({ data: tweet_list.reverse() }));
      res.render(&#39;index&#39;, {
        markup: markup,
        state: JSON.stringify(tweet_list)
      });
    }
  });
});

// Listen
var io = require(&#39;socket.io&#39;)({
}).listen(app.listen(port));
console.log(&quot;Listening on port &quot; + port);

// Handle connections
io.sockets.on(&#39;connection&#39;, function (socket) {
  // Subscribe to the Redis channel
  subscribe.subscribe(&#39;tweets&#39;);

  // Handle receiving messages
  var callback = function (channel, data) {
    socket.emit(&#39;message&#39;, data);
  };
  subscribe.on(&#39;message&#39;, callback);

  // Handle disconnect
  socket.on(&#39;disconnect&#39;, function () {
    subscribe.removeListener(&#39;message&#39;, callback);
  });
});
</code></pre>
<p>Let’s go through this bit by bit:</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

require(&#39;babel/register&#39;);
</code></pre>
<p>Here we’re using Babel, which is a library that allows you to use new features in Javascript even if the interpreter doesn’t support it. It also includes support for JSX, allowing us to require JSX files in the same way we would require Javascript files.</p>
<pre><code class="lang-javascript">// Get dependencies
var express = require(&#39;express&#39;);
var app = express();
var compression = require(&#39;compression&#39;);
var port = process.env.PORT || 5000;
var base_url = process.env.BASE_URL || &#39;http://localhost:5000&#39;;
var hbs = require(&#39;hbs&#39;);
var morgan = require(&#39;morgan&#39;);
var React = require(&#39;react&#39;);
var Tweets = React.createFactory(require(&#39;./components/tweets.jsx&#39;));
</code></pre>
<p>Here we include our dependencies. Most of this will be familiar if you’ve used Express before, but we also use React to create a factory for a React component called <code>Tweets</code>.</p>
<pre><code class="lang-javascript">// Set up connection to Redis
var redis, subscribe;
if (process.env.REDIS_URL) {
  redis = require(&#39;redis&#39;).createClient(process.env.REDIS_URL);
  subscribe = require(&#39;redis&#39;).createClient(process.env.REDIS_URL);
} else {
  redis = require(&#39;redis&#39;).createClient();
  subscribe = require(&#39;redis&#39;).createClient();
}

// Set up templating
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.set(&#39;view engine&#39;, &quot;hbs&quot;);
app.engine(&#39;hbs&#39;, require(&#39;hbs&#39;).__express);

// Register partials
hbs.registerPartials(__dirname + &#39;/views/partials&#39;);

// Set up logging
app.use(morgan(&#39;combined&#39;));

// Compress responses
app.use(compression());

// Set URL
app.set(&#39;base_url&#39;, base_url);

// Serve static files
app.use(express.static(__dirname + &#39;/static&#39;));
</code></pre>
<p>This section sets up the various dependencies of our app. We set up two connections to Redis - one for handling subscriptions, the other for reading from Redis in order to populate the view.</p>
<p>We also set up our views, logging, compression of the HTTP response, a base URL, and serving static files.</p>
<pre><code class="lang-javascript">// Render main view
app.get(&#39;/&#39;, function (req, res) {
  // Get tweets
  redis.lrange(&#39;stream:tweets&#39;, 0, -1, function (err, tweets) {
    if (err) {
      console.log(err);
    } else {
      // Get tweets
      var tweet_list = [];
      tweets.forEach(function (tweet, i) {
        tweet_list.push(JSON.parse(tweet));
      });

      // Render page
      var markup = React.renderToString(Tweets({ data: tweet_list.reverse() }));
      res.render(&#39;index&#39;, {
        markup: markup,
        state: JSON.stringify(tweet_list)
      });
    }
  });
});
</code></pre>
<p>Our app only has a single view. When the root is loaded, we first of all fetch all of the tweets stored in the <code>stream:tweets</code> list. We then convert them into an array of objects.</p>
<p>Next, we render the <code>Tweets</code> component to a string, passing through our list of tweets, and store the resulting markup. We then pass through this markup and the string representation of the list of tweets to the template.</p>
<pre><code class="lang-javascript">// Listen
var io = require(&#39;socket.io&#39;)({
}).listen(app.listen(port));
console.log(&quot;Listening on port &quot; + port);

// Handle connections
io.sockets.on(&#39;connection&#39;, function (socket) {
  // Subscribe to the Redis channel
  subscribe.subscribe(&#39;tweets&#39;);

  // Handle receiving messages
  var callback = function (channel, data) {
    socket.emit(&#39;message&#39;, data);
  };
  subscribe.on(&#39;message&#39;, callback);

  // Handle disconnect
  socket.on(&#39;disconnect&#39;, function () {
    subscribe.removeListener(&#39;message&#39;, callback);
  });
});
</code></pre>
<p>Finally, we set up Socket.io. On a connection, we subscribe to the Redis channel <code>tweets</code>. When we receive a tweet from Redis, we emit that tweet so that it can be rendered on the client side. We also handle disconnections by removing our Redis subscription.</p>
<h2 id="creating-our-react-components">Creating our React components</h2>
<p>Now it’s time to create our first React component. We’ll create a folder called <code>components</code> to hold all of our component files. Our first file is <code>components/index.jsx</code>:</p>
<pre><code class="lang-javascript">var React = require(&#39;react&#39;);
var Tweets = require(&#39;./tweets.jsx&#39;);

var initialState = JSON.parse(document.getElementById(&#39;initial-state&#39;).innerHTML);

React.render(
  &lt;Tweets data={initialState} /&gt;,
  document.getElementById(&#39;view&#39;)
);
</code></pre>
<p>First of all, we include React and the same <code>Tweets</code> component we require on the server side (note that we need to specify the <code>.jsx</code> extension). Then we fetch the initial state from the script tag we created earlier. Finally we render the <code>Tweets</code> components, passing through the initial state, and specify that it should be inserted into the element with an id of <code>view</code>. Note that we store the initial state in <code>data</code> - inside the component, this can be accessed as <code>this.props.data</code>.</p>
<p>This particular component is only ever used on the client side - when we render on the server side, we don’t need any of this functionality since we insert the markup into the <code>view</code> element anyway, and we don’t need to specify the initial data in the same way.</p>
<p>Next, we define the <code>Tweets</code> component in <code>components/tweets.jsx</code>:</p>
<pre><code class="lang-javascript">var React = require(&#39;react&#39;);
var io = require(&#39;socket.io-client&#39;);
var TweetList = require(&#39;./tweetlist.jsx&#39;);
var _ = require(&#39;lodash&#39;);

var Tweets = React.createClass({
  componentDidMount: function () {
    // Get reference to this item
    var that = this;

    // Set up the connection
    var socket = io.connect(window.location.href);

    // Handle incoming messages
    socket.on(&#39;message&#39;, function (data) {
      // Insert the message
      var tweets = that.props.data;
      tweets.push(JSON.parse(data));
      tweets = _.sortBy(tweets, function (item) {
        return item.created_at;
      }).reverse();
      that.setProps({data: tweets});
    });
  },
  getInitialState: function () {
    return {data: this.props.data};
  },
  render: function () {
    return (
      &lt;div&gt;
        &lt;h1&gt;Tweets&lt;/h1&gt;
        &lt;TweetList data={this.props.data} /&gt;
      &lt;/div&gt;
    )
  }
});

module.exports = Tweets;
</code></pre>
<p>Let’s work our way through each section in turn:</p>
<pre><code class="lang-javascript">var React = require(&#39;react&#39;);
var io = require(&#39;socket.io-client&#39;);
var TweetList = require(&#39;./tweetlist.jsx&#39;);
var _ = require(&#39;lodash&#39;);
</code></pre>
<p>Here we include React and the Socket.io client, as well as Lodash and our TweetList component. With React.js, it’s recommend that you break up each individual part of your interface into a single component - here <code>Tweets</code> is a wrapper for the tweets that includes a heading. <code>TweetList</code> will be a list of tweets, and <code>TweetItem</code> will be an individual tweet.</p>
<pre><code class="lang-javascript">var Tweets = React.createClass({
  componentDidMount: function () {
    // Get reference to this item
    var that = this;

    // Set up the connection
    var socket = io.connect(window.location.href);

    // Handle incoming messages
    socket.on(&#39;message&#39;, function (data) {
      // Insert the message
      var tweets = that.props.data;
      tweets.push(JSON.parse(data));
      tweets = _.sortBy(tweets, function (item) {
        return item.created_at;
      }).reverse();
      that.setProps({data: tweets});
    });
  },

</code></pre>
<p>Note the use of the <code>componentDidMount</code> method - this fires when a component has been rendered on the client side for the first time. You can therefore use it to set up events. Here, we’re setting up a callback so that when a new tweet is received, we get the existing tweets (stored in <code>this.props.data</code>, although we copy <code>this</code> to <code>that</code> so it works inside the callback), push the tweet to this list, sort it by the time created, and set <code>this.props.data</code> to the new value. This will result in the tweets being re-rendered.</p>
<pre><code class="lang-javascript">  getInitialState: function () {
    return {data: this.props.data};
  },
</code></pre>
<p>Here we set the initial state of the component - it sets the value of <code>this.state</code> to the object passed through. In this case, we pass through an object with the attribute <code>data</code> defined as the value of <code>this.props.data</code>, meaning that <code>this.state.data</code> is the same as <code>this.props.data</code>.</p>
<pre><code class="lang-javascript">  render: function () {
    return (
      &lt;div&gt;
        &lt;h1&gt;Tweets&lt;/h1&gt;
        &lt;TweetList data={this.props.data} /&gt;
      &lt;/div&gt;
    )
  }
});

module.exports = Tweets;
</code></pre>
<p>Here we define our <code>render</code> function. This can be thought of as our template. Note that we include <code>TweetList</code> inside our template and pass through the data. Afterwards, we export <code>Tweets</code> so it can be used elsewhere.</p>
<p>Next, let’s create <code>components/tweetlist.jsx</code>:</p>
<pre><code class="lang-javascript">var React = require(&#39;react&#39;);
var TweetItem = require(&#39;./tweetitem.jsx&#39;);

var TweetList = React.createClass({
  render: function () {
    var that = this;
    var tweetNodes = this.props.data.map(function (item, index) {
      return (
        &lt;TweetItem key={index} text={item.text}&gt;&lt;/TweetItem&gt;
      );
    });
    return (
      &lt;ul className=&quot;tweets list-group&quot;&gt;
        {tweetNodes}
      &lt;/ul&gt;
    )
  }
});

module.exports = TweetList;
</code></pre>
<p>This component is much simpler - it only has a <code>render</code> method. First, we get our individual tweets and for each one define a <code>TweetItem</code> component. Then we create an unordered list and insert the tweet items into it. We then export it as <code>TweetList</code>.</p>
<p>Our final component is the <code>TweetItem</code> component. Create the following file at <code>components/tweetitem.jsx</code>:</p>
<pre><code class="lang-javascript">var React = require(&#39;react&#39;);

var TweetItem = React.createClass({
  render: function () {
    return (
      &lt;li className=&quot;list-group-item&quot;&gt;{this.props.text}&lt;/li&gt;
    );
  }
});

module.exports = TweetItem;
</code></pre>
<p>This component is quite simple. It’s just a single list item with the text set to the value of the tweet’s <code>text</code> attribute.</p>
<p>That should be all of our components done. Time to compile our Sass and run Browserify:</p>
<pre><code class="lang-bash">$ gulp compass
$ gulp react
</code></pre>
<p>Now, if you make sure you have set the appropriate environment variables, and then run <code>node worker.js</code> in one terminal, and <code>node index.js</code> in another, and visit <a href="http://localhost:5000/">http://localhost:5000/</a>, you should see your Twitter stream in all its glory! You can also try it with Javascript disabled, or in a text-mode browser such as Lynx, to demonstrate that it still renders the page without having to do anything on the client side - you’re only missing the constant updates.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>I hope this gives you some idea of how you can easily use React.js on both the client and server side to make web apps that are fast and search-engine friendly while also being easy to update dynamically. You can find the source code on <a href="https://github.com/matthewbdaly/twitter-stream">GitHub</a>.</p>
<p>Hopefully I’ll be able to publish some later tutorials that build on this to show you how to build more substantial web apps with React.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Extending our Node.js and Redis chat server]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/03/02/extending-our-node-dot-js-and-redis-chat-server/</guid>
            <pubDate>Mon, 02 Mar 2015 23:03:48 GMT</pubDate>
            <description><![CDATA[<p>In this tutorial, we’re going to extend the chat system we built in <a href="/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/">the first tutorial</a> to include the following functionality:</p>
<ul>
<li>Persisting the data</li>
<li>Prompting users to sign in and storing their details in a Redis-backed session</li>
</ul>
<p>In the process, we’ll pick up a bit more about using Redis.</p>
<h2 id="persistence">Persistence</h2>
<p>Our first task is to make our messages persist when the session ends. Now, in order to do this, we’re going to use a list. A list in Redis can be thought of as equivalent to an array or list in most programming languages, and can be retrieved by passing the key in a similar fashion to how you would retrieve a string.</p>
<p>As usual, we will write our test first. Open up <code>test/test.js</code> and replace the test for sending a message with this:</p>
<pre><code class="lang-javascript">    // Test sending a message
    describe(&#39;Test sending a message&#39;, function () {
        it(&quot;should return &#39;Message received&#39;&quot;, function (done) {
            // Connect to server
            var socket = io.connect(&#39;http://localhost:5000&#39;, {
                &#39;reconnection delay&#39; : 0,
                &#39;reopen delay&#39; : 0,
                &#39;force new connection&#39; : true
            });

            // Handle the message being received
            socket.on(&#39;message&#39;, function (data) {
                expect(data).to.include(&#39;Message received&#39;);

                client.lrange(&#39;chat:messages&#39;, 0, -1, function (err, messages) {
                    // Check message has been persisted
                    var message_list = [];
                    messages.forEach(function (message, i) {
                        message_list.push(message);
                    });
                    expect(message_list[0]).to.include(&#39;Message received&#39;);

                    // Finish up
                    socket.disconnect();
                    done();
                });
            });

            // Send the message
            socket.emit(&#39;send&#39;, { message: &#39;Message received&#39; });
        });
    });
</code></pre>
<p>The main difference here is that we use our Redis client to get the list <code>chat:messages</code>, and check to see if our message appears in it. Now, let’s run our test to ensure it fails:</p>
<pre><code class="lang-bash">$ npm test

&gt; babblr@1.0.0 test /Users/matthewdaly/Projects/babblr
&gt; grunt test --verbose

Initializing
Command-line options: --verbose

Reading &quot;Gruntfile.js&quot; Gruntfile...OK

Registering Gruntfile tasks.
Initializing config...OK

Registering &quot;grunt-contrib-jshint&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Loading &quot;jshint.js&quot; tasks...OK
+ jshint

Registering &quot;grunt-coveralls&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Loading &quot;coverallsTask.js&quot; tasks...OK
+ coveralls

Registering &quot;grunt-mocha-istanbul&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Loading &quot;index.js&quot; tasks...OK
+ istanbul_check_coverage, mocha_istanbul
Loading &quot;Gruntfile.js&quot; tasks...OK
+ test

Running tasks: test

Running &quot;test&quot; task

Running &quot;jshint&quot; task

Running &quot;jshint:all&quot; (jshint) task
Verifying property jshint.all exists in config...OK
Files: test/test.js, index.js -&gt; all
Options: force=false, reporterOutput=null
OK
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Verifying property mocha_istanbul.coverage exists in config...OK
Files: test
Options: require=[], ui=false, globals=[], reporter=false, timeout=false, coverage=false, slow=false, grep=false, dryRun=false, quiet=false, recursive=false, mask=&quot;*.js&quot;, root=false, print=false, noColors=false, harmony=false, coverageFolder=&quot;coverage&quot;, reportFormats=[&quot;cobertura&quot;,&quot;html&quot;,&quot;lcovonly&quot;], check={&quot;statements&quot;:false,&quot;lines&quot;:false,&quot;functions&quot;:false,&quot;branches&quot;:false}, excludes=false, mochaOptions=false, istanbulOptions=false
&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- test/*.js
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (484ms)
    Test sending a message
      1) should return &#39;Message received&#39;
Stopping the server


  1 passing (552ms)
  1 failing

  1) server Test sending a message should return &#39;Message received&#39;:
     Uncaught AssertionError: expected undefined to include &#39;Message received&#39;
      at /Users/matthewdaly/Projects/babblr/test/test.js:62:48
      at try_callback (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:592:9)
      at RedisClient.return_reply (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:685:13)
      at HiredisReplyParser.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:321:14)
      at HiredisReplyParser.emit (events.js:95:17)
      at HiredisReplyParser.execute (/Users/matthewdaly/Projects/babblr/node_modules/redis/lib/parser/hiredis.js:43:18)
      at RedisClient.on_data (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:547:27)
      at Socket.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/redis/index.js:102:14)
      at Socket.emit (events.js:95:17)
      at Socket.&lt;anonymous&gt; (_stream_readable.js:765:14)
      at Socket.emit (events.js:92:17)
      at emitReadable_ (_stream_readable.js:427:10)
      at emitReadable (_stream_readable.js:423:5)
      at readableAddChunk (_stream_readable.js:166:9)
      at Socket.Readable.push (_stream_readable.js:128:10)
      at TCP.onread (net.js:529:21)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 96.97% ( 32/33 ), 5 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 80% ( 4/5 )
Lines        : 96.97% ( 32/33 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
</code></pre>
<p>Our test fails, so now we can start work on implementing the functionality we need. First of all, when a new message is sent, we need to push it to the list. Amend the new message handler in <code>index.js</code> to look like this:</p>
<pre><code class="lang-javascript">// Handle new messages
io.sockets.on(&#39;connection&#39;, function (socket) {
    // Subscribe to the Redis channel
    subscribe.subscribe(&#39;ChatChannel&#39;);

    // Handle incoming messages
    socket.on(&#39;send&#39;, function (data) {
        // Publish it
        client.publish(&#39;ChatChannel&#39;, data.message);

        // Persist it to a Redis list
        client.rpush(&#39;chat:messages&#39;, &#39;Anonymous Coward : &#39; + data.message);
    });

    // Handle receiving messages
    var callback = function (channel, data) {
        socket.emit(&#39;message&#39;, data);
    };
    subscribe.on(&#39;message&#39;, callback);

    // Handle disconnect
    socket.on(&#39;disconnect&#39;, function () {
        subscribe.removeListener(&#39;message&#39;, callback);
    });
});
</code></pre>
<p>The only significant change is the <code>Persist it to a Redis list</code> section. Here we call the <code>RPUSH</code> command to push the current message to <code>chat:messages</code>. <code>RPUSH</code> pushes a message to the end of the list. There’s a similar command, <code>LPUSH</code>, which pushes an item to the beginning of the list, as well as <code>LPOP</code> and <code>RPOP</code>, which remove and return an item from the beginning and end of the list respectively.</p>
<p>Next we need to handle displaying the list when the main route loads. Replace the index route in <code>index.js</code> with this:</p>
<pre><code class="lang-javascript">// Define index route
app.get(&#39;/&#39;, function (req, res) {
    // Get messages
    client.lrange(&#39;chat:messages&#39;, 0, -1, function (err, messages) {
        /* istanbul ignore if */
        if (err) {
            console.log(err);
        } else {
            // Get messages
            var message_list = [];
            messages.forEach(function (message, i) {
                /* istanbul ignore next */
                message_list.push(message);
            });

            // Render page
            res.render(&#39;index&#39;, { messages: message_list});
        }
    });
});
</code></pre>
<p>Here we use the client to return all messages in the list by using the <code>LRANGE</code> command and defining the slice as being from the start to the end of the list. We then loop through the mesages and push each to a list, before passing that list to the view.</p>
<p>Speaking of which, we also need to update <code>views/index.hbs</code>:</p>
<pre><code class="lang-handlebars">{{&gt; header }}
        &lt;div class=&quot;container&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-md-8&quot;&gt;
                    &lt;div class=&quot;conversation&quot;&gt;
                        {{#each messages}}
                        &lt;p&gt;{{this}}&lt;/p&gt;
                        {{/each}}
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;col-md-4&quot;&gt;
                    &lt;form&gt;
                        &lt;div class=&quot;form-group&quot;&gt;
                            &lt;label for=&quot;message&quot;&gt;Message&lt;/label&gt;
                            &lt;textarea class=&quot;form-control&quot; id=&quot;message&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt;
                            &lt;a id=&quot;submitbutton&quot; class=&quot;btn btn-primary form-control&quot;&gt;Submit&lt;/a&gt;
                        &lt;div&gt;
                    &lt;/form&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
{{&gt; footer }}
</code></pre>
<p>This just loops through the messages and prints each one in turn. Now let’s run our tests and make sure they pass:</p>
<pre><code class="lang-bash">$ npm test

&gt; babblr@1.0.0 test /Users/matthewdaly/Projects/babblr
&gt; grunt test --verbose

Initializing
Command-line options: --verbose

Reading &quot;Gruntfile.js&quot; Gruntfile...OK

Registering Gruntfile tasks.
Initializing config...OK

Registering &quot;grunt-contrib-jshint&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Loading &quot;jshint.js&quot; tasks...OK
+ jshint

Registering &quot;grunt-coveralls&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Loading &quot;coverallsTask.js&quot; tasks...OK
+ coveralls

Registering &quot;grunt-mocha-istanbul&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Loading &quot;index.js&quot; tasks...OK
+ istanbul_check_coverage, mocha_istanbul
Loading &quot;Gruntfile.js&quot; tasks...OK
+ test

Running tasks: test

Running &quot;test&quot; task

Running &quot;jshint&quot; task

Running &quot;jshint:all&quot; (jshint) task
Verifying property jshint.all exists in config...OK
Files: test/test.js, index.js -&gt; all
Options: force=false, reporterOutput=null
OK
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Verifying property mocha_istanbul.coverage exists in config...OK
Files: test
Options: require=[], ui=false, globals=[], reporter=false, timeout=false, coverage=false, slow=false, grep=false, dryRun=false, quiet=false, recursive=false, mask=&quot;*.js&quot;, root=false, print=false, noColors=false, harmony=false, coverageFolder=&quot;coverage&quot;, reportFormats=[&quot;cobertura&quot;,&quot;html&quot;,&quot;lcovonly&quot;], check={&quot;statements&quot;:false,&quot;lines&quot;:false,&quot;functions&quot;:false,&quot;branches&quot;:false}, excludes=false, mochaOptions=false, istanbulOptions=false
&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- test/*.js
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (1262ms)
    Test sending a message
      ✓ should return &#39;Message received&#39; (48ms)
Stopping the server


  2 passing (2s)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 40/40 ), 7 ignored
Branches     : 100% ( 8/8 ), 2 ignored
Functions    : 85.71% ( 6/7 )
Lines        : 100% ( 40/40 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Running &quot;coveralls&quot; task

Running &quot;coveralls:app&quot; (coveralls) task
Verifying property coveralls.app exists in config...OK
Files: coverage/lcov.info
Options: src=&quot;coverage/lcov.info&quot;, force=false
Submitting file to coveralls.io: coverage/lcov.info
&gt;&gt; Failed to submit &#39;coverage/lcov.info&#39; to coveralls: Bad response: 422 {&quot;message&quot;:&quot;Couldn&#39;t find a repository matching this job.&quot;,&quot;error&quot;:true}
&gt;&gt; Failed to submit coverage results to coveralls
Warning: Task &quot;coveralls:app&quot; failed. Use --force to continue.

Aborted due to warnings.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
</code></pre>
<p>As before, don’t worry about Coveralls not working - it’s only an issue when it runs on Travis CI. If everything else is fine, our chat server should now persist our changes.</p>
<h2 id="sessions-and-user-login">Sessions and user login</h2>
<p>At present, it’s hard to carry on a conversation with someone using this site because you can’t see who is responding to you. We need to implement a mechanism to obtain a username for each user, store it in a session, and then use it to identify all of a user’s messages. In this case, we’re going to just prompt the user to enter a username of their choice, but if you wish, you can use something like <a href="http://passportjs.org/">Passport.js</a> to allow authentication using third-party services - I’ll leave that as an exercise for the reader.</p>
<p>Now, Express doesn’t include any support for sessions out of the box, so we have to install some additional libraries:</p>
<pre><code class="lang-bash">$ npm install connect-redis express-session body-parser --save
</code></pre>
<p>The <code>express-session</code> library is middleware for Express that allows for storing and retrieving session variables, while <code>connect-redis</code> allows it to use Redis to store this data. We used <code>body-parser</code> for the URL shortener to process <code>POST</code> data, so we will use it again here. Now, we need to set it up. Replace the part of <code>index.js</code> before we set up the templating with this:</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

// Declare variables used
var app, base_url, client, express, hbs, io, port, RedisStore, rtg, session, subscribe;

// Define values
express = require(&#39;express&#39;);
app = express();
port = process.env.PORT || 5000;
base_url = process.env.BASE_URL || &#39;http://localhost:5000&#39;;
hbs = require(&#39;hbs&#39;);
session = require(&#39;express-session&#39;);
RedisStore = require(&#39;connect-redis&#39;)(session);

// Set up connection to Redis
/* istanbul ignore if */
if (process.env.REDISTOGO_URL) {
    rtg  = require(&#39;url&#39;).parse(process.env.REDISTOGO_URL);
    client = require(&#39;redis&#39;).createClient(rtg.port, rtg.hostname);
    subscribe = require(&#39;redis&#39;).createClient(rtg.port, rtg.hostname);
    client.auth(rtg.auth.split(&#39;:&#39;)[1]);
    subscribe.auth(rtg.auth.split(&#39;:&#39;)[1]);
} else {
    client = require(&#39;redis&#39;).createClient();
    subscribe = require(&#39;redis&#39;).createClient();
}

// Set up session
app.use(session({
    store: new RedisStore({
        client: client
    }),
    secret: &#39;blibble&#39;
}));
</code></pre>
<p>This just sets up the session and configures it to use Redis as the back end. Don’t forget to change the value of <code>secret</code>.</p>
<p>Now, let’s plan out how our username system is going to work. If a user visits the site and there is no session set, then they should be redirected to a new route, <code>/login</code>. Here they will be prompted to enter a username. Once a satisfactory username (eg one or more characters) has been submitted via the form, it should be stored in the session and the user redirected to the index. There should also be a <code>/logout</code> route to destroy the session and redirect the user back to the login form.</p>
<p>First, let’s implement a test for fetching the login form in <code>test/test.js</code>:</p>
<pre><code class="lang-javascript">    // Test submitting to the login route
    describe(&#39;Test submitting to the login route&#39;, function () {
        it(&#39;should store the username in the session and redirect the user to the index&#39;, function (done) {
            request.post({ url: &#39;http://localhost:5000/login&#39;,
                form:{username: &#39;bobsmith&#39;},
                followRedirect: false},
                function (error, response, body) {
                    expect(response.headers.location).to.equal(&#39;/&#39;);
                    expect(response.statusCode).to.equal(302);
                    done();
            });
        });
    });
</code></pre>
<p>This test sends a <code>POST</code> request containing the field <code>username</code> with the value <code>bobsmith</code>. We expect to be redirected to the index route.</p>
<p>Let’s run the test to make sure it fails:</p>
<pre><code class="lang-bash">$ npm test

&gt; babblr@1.0.0 test /Users/matthewdaly/Projects/babblr
&gt; grunt test --verbose

Initializing
Command-line options: --verbose

Reading &quot;Gruntfile.js&quot; Gruntfile...OK

Registering Gruntfile tasks.
Initializing config...OK

Registering &quot;grunt-contrib-jshint&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Loading &quot;jshint.js&quot; tasks...OK
+ jshint

Registering &quot;grunt-coveralls&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Loading &quot;coverallsTask.js&quot; tasks...OK
+ coveralls

Registering &quot;grunt-mocha-istanbul&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Loading &quot;index.js&quot; tasks...OK
+ istanbul_check_coverage, mocha_istanbul
Loading &quot;Gruntfile.js&quot; tasks...OK
+ test

Running tasks: test

Running &quot;test&quot; task

Running &quot;jshint&quot; task

Running &quot;jshint:all&quot; (jshint) task
Verifying property jshint.all exists in config...OK
Files: test/test.js, index.js -&gt; all
Options: force=false, reporterOutput=null
OK
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Verifying property mocha_istanbul.coverage exists in config...OK
Files: test
Options: require=[], ui=false, globals=[], reporter=false, timeout=false, coverage=false, slow=false, grep=false, dryRun=false, quiet=false, recursive=false, mask=&quot;*.js&quot;, root=false, print=false, noColors=false, harmony=false, coverageFolder=&quot;coverage&quot;, reportFormats=[&quot;cobertura&quot;,&quot;html&quot;,&quot;lcovonly&quot;], check={&quot;statements&quot;:false,&quot;lines&quot;:false,&quot;functions&quot;:false,&quot;branches&quot;:false}, excludes=false, mochaOptions=false, istanbulOptions=false
&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- test/*.js
express-session deprecated undefined resave option; provide resave option index.js:9:1585
express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:9:1585
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (45ms)
    Test the login route
      ✓ should return a page with the text Please enter a handle
    Test submitting to the login route
      1) should store the username in the session and redirect the user to the index
    Test sending a message
      ✓ should return &#39;Message received&#39; (42ms)
Stopping the server


  3 passing (122ms)
  1 failing

  1) server Test submitting to the login route should store the username in the session and redirect the user to the index:
     Uncaught AssertionError: expected undefined to equal &#39;/&#39;
      at Request._callback (/Users/matthewdaly/Projects/babblr/test/test.js:61:58)
      at Request.self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:373:22)
      at Request.emit (events.js:98:17)
      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:1318:14)
      at Request.emit (events.js:117:20)
      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:1266:12)
      at IncomingMessage.emit (events.js:117:20)
      at _stream_readable.js:944:16
      at process._tickCallback (node.js:442:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 45/45 ), 7 ignored
Branches     : 100% ( 8/8 ), 2 ignored
Functions    : 87.5% ( 7/8 )
Lines        : 100% ( 45/45 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
</code></pre>
<p>Now, all we need to do to make this test pass is create a view containing the form and define a route to display it. First, we’ll define our new route in <code>index.js</code>:</p>
<pre><code class="lang-javascript">// Define login route
app.get(&#39;/login&#39;, function (req, res) {
    // Render view
    res.render(&#39;login&#39;);
});
</code></pre>
<p>Next, we’ll create our new template at <code>views/login.hbs</code>:</p>
<pre><code class="lang-handlebars">{{&gt; header }}
        &lt;div class=&quot;container&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-md-12&quot;&gt;
                    &lt;form action=&quot;/login&quot; method=&quot;POST&quot;&gt;
                        &lt;div class=&quot;form-group&quot;&gt;
                            &lt;label for=&quot;Username&quot;&gt;Please enter a handle&lt;/label&gt;
                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; size=&quot;20&quot; required id=&quot;username&quot; name=&quot;username&quot;&gt;&lt;/input&gt;
                            &lt;input type=&quot;submit&quot; class=&quot;btn btn-primary form-control&quot;&gt;&lt;/input&gt;
                        &lt;div&gt;
                    &lt;/form&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
{{&gt; footer }}
</code></pre>
<p>Let’s run our tests and make sure they pass:</p>
<pre><code class="lang-bash">$ npm test

&gt; babblr@1.0.0 test /Users/matthewdaly/Projects/babblr
&gt; grunt test --verbose

Initializing
Command-line options: --verbose

Reading &quot;Gruntfile.js&quot; Gruntfile...OK

Registering Gruntfile tasks.
Initializing config...OK

Registering &quot;grunt-contrib-jshint&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Loading &quot;jshint.js&quot; tasks...OK
+ jshint

Registering &quot;grunt-coveralls&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Loading &quot;coverallsTask.js&quot; tasks...OK
+ coveralls

Registering &quot;grunt-mocha-istanbul&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Loading &quot;index.js&quot; tasks...OK
+ istanbul_check_coverage, mocha_istanbul
Loading &quot;Gruntfile.js&quot; tasks...OK
+ test

Running tasks: test

Running &quot;test&quot; task

Running &quot;jshint&quot; task

Running &quot;jshint:all&quot; (jshint) task
Verifying property jshint.all exists in config...OK
Files: test/test.js, index.js -&gt; all
Options: force=false, reporterOutput=null
OK
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Verifying property mocha_istanbul.coverage exists in config...OK
Files: test
Options: require=[], ui=false, globals=[], reporter=false, timeout=false, coverage=false, slow=false, grep=false, dryRun=false, quiet=false, recursive=false, mask=&quot;*.js&quot;, root=false, print=false, noColors=false, harmony=false, coverageFolder=&quot;coverage&quot;, reportFormats=[&quot;cobertura&quot;,&quot;html&quot;,&quot;lcovonly&quot;], check={&quot;statements&quot;:false,&quot;lines&quot;:false,&quot;functions&quot;:false,&quot;branches&quot;:false}, excludes=false, mochaOptions=false, istanbulOptions=false
&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- test/*.js
express-session deprecated undefined resave option; provide resave option index.js:9:1585
express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:9:1585
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (64ms)
    Test the login route
      ✓ should return a page with the text Please enter a handle
    Test sending a message
      ✓ should return &#39;Message received&#39; (78ms)
Stopping the server


  3 passing (179ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 45/45 ), 7 ignored
Branches     : 100% ( 8/8 ), 2 ignored
Functions    : 87.5% ( 7/8 )
Lines        : 100% ( 45/45 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Running &quot;coveralls&quot; task

Running &quot;coveralls:app&quot; (coveralls) task
Verifying property coveralls.app exists in config...OK
Files: coverage/lcov.info
Options: src=&quot;coverage/lcov.info&quot;, force=false
Submitting file to coveralls.io: coverage/lcov.info
&gt;&gt; Failed to submit &#39;coverage/lcov.info&#39; to coveralls: Bad response: 422 {&quot;message&quot;:&quot;Couldn&#39;t find a repository matching this job.&quot;,&quot;error&quot;:true}
&gt;&gt; Failed to submit coverage results to coveralls
Warning: Task &quot;coveralls:app&quot; failed. Use --force to continue.

Aborted due to warnings.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
</code></pre>
<p>Next, we need to process the submitted form, set the session, and redirect the user back to the index. First, let’s add another test:</p>
<pre><code class="lang-javascript">    // Test submitting to the login route
    describe(&#39;Test submitting to the login route&#39;, function () {
        it(&#39;should store the username in the session and redirect the user to the index&#39;, function (done) {
            request.post({ url: &#39;http://localhost:5000/login&#39;,
                form:{username: &#39;bobsmith&#39;},
                followRedirect: false},
                function (error, response, body) {
                    expect(response.headers.location).to.equal(&#39;http://localhost:5000&#39;);
                    expect(response.statusCode).to.equal(301);
                    done();
            });
        });
    });
</code></pre>
<p>This test submits the username, and makes sure that the response received is a 301 redirect to the index route. Let’s check to make sure it fails:</p>
<pre><code class="lang-bash">$ npm test

&gt; babblr@1.0.0 test /Users/matthewdaly/Projects/babblr
&gt; grunt test --verbose

Initializing
Command-line options: --verbose

Reading &quot;Gruntfile.js&quot; Gruntfile...OK

Registering Gruntfile tasks.
Initializing config...OK

Registering &quot;grunt-contrib-jshint&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Loading &quot;jshint.js&quot; tasks...OK
+ jshint

Registering &quot;grunt-coveralls&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Loading &quot;coverallsTask.js&quot; tasks...OK
+ coveralls

Registering &quot;grunt-mocha-istanbul&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Loading &quot;index.js&quot; tasks...OK
+ istanbul_check_coverage, mocha_istanbul
Loading &quot;Gruntfile.js&quot; tasks...OK
+ test

Running tasks: test

Running &quot;test&quot; task

Running &quot;jshint&quot; task

Running &quot;jshint:all&quot; (jshint) task
Verifying property jshint.all exists in config...OK
Files: test/test.js, index.js -&gt; all
Options: force=false, reporterOutput=null
OK
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Verifying property mocha_istanbul.coverage exists in config...OK
Files: test
Options: require=[], ui=false, globals=[], reporter=false, timeout=false, coverage=false, slow=false, grep=false, dryRun=false, quiet=false, recursive=false, mask=&quot;*.js&quot;, root=false, print=false, noColors=false, harmony=false, coverageFolder=&quot;coverage&quot;, reportFormats=[&quot;cobertura&quot;,&quot;html&quot;,&quot;lcovonly&quot;], check={&quot;statements&quot;:false,&quot;lines&quot;:false,&quot;functions&quot;:false,&quot;branches&quot;:false}, excludes=false, mochaOptions=false, istanbulOptions=false
&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- test/*.js
express-session deprecated undefined resave option; provide resave option index.js:9:1585
express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:9:1585
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (476ms)
    Test the login route
      ✓ should return a page with the text Please enter a handle
    Test submitting to the login route
      1) should store the username in the session and redirect the user to the index
    Test sending a message
      ✓ should return &#39;Message received&#39; (42ms)
Stopping the server


  3 passing (557ms)
  1 failing

  1) server Test submitting to the login route should store the username in the session and redirect the user to the index:
     Uncaught AssertionError: expected undefined to equal &#39;http://localhost:5000&#39;
      at Request._callback (/Users/matthewdaly/Projects/babblr/test/test.js:61:58)
      at Request.self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:373:22)
      at Request.emit (events.js:98:17)
      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:1318:14)
      at Request.emit (events.js:117:20)
      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:1266:12)
      at IncomingMessage.emit (events.js:117:20)
      at _stream_readable.js:944:16
      at process._tickCallback (node.js:442:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 45/45 ), 7 ignored
Branches     : 100% ( 8/8 ), 2 ignored
Functions    : 87.5% ( 7/8 )
Lines        : 100% ( 45/45 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
</code></pre>
<p>Now, in order to process <code>POST</code> data we’ll need to use <code>body-parser</code>. Amend the top of <code>index.js</code> to look like this::</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

// Declare variables used
var app, base_url, bodyParser, client, express, hbs, io, port, RedisStore, rtg, session, subscribe;

// Define values
express = require(&#39;express&#39;);
app = express();
bodyParser = require(&#39;body-parser&#39;);
port = process.env.PORT || 5000;
base_url = process.env.BASE_URL || &#39;http://localhost:5000&#39;;
hbs = require(&#39;hbs&#39;);
session = require(&#39;express-session&#39;);
RedisStore = require(&#39;connect-redis&#39;)(session);

// Set up connection to Redis
/* istanbul ignore if */
if (process.env.REDISTOGO_URL) {
    rtg  = require(&#39;url&#39;).parse(process.env.REDISTOGO_URL);
    client = require(&#39;redis&#39;).createClient(rtg.port, rtg.hostname);
    subscribe = require(&#39;redis&#39;).createClient(rtg.port, rtg.hostname);
    client.auth(rtg.auth.split(&#39;:&#39;)[1]);
    subscribe.auth(rtg.auth.split(&#39;:&#39;)[1]);
} else {
    client = require(&#39;redis&#39;).createClient();
    subscribe = require(&#39;redis&#39;).createClient();
}

// Set up session
app.use(session({
    store: new RedisStore({
        client: client
    }),
    secret: &#39;blibble&#39;
}));

// Set up templating
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.set(&#39;view engine&#39;, &quot;hbs&quot;);
app.engine(&#39;hbs&#39;, require(&#39;hbs&#39;).__express);

// Register partials
hbs.registerPartials(__dirname + &#39;/views/partials&#39;);

// Set URL
app.set(&#39;base_url&#39;, base_url);

// Handle POST data
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
      extended: true
}));
</code></pre>
<p>Next, we define a <code>POST</code> route to handle the username input:</p>
<pre><code class="lang-javascript">// Process login
app.post(&#39;/login&#39;, function (req, res) {
    // Get username
    var username = req.body.username;

    // If username length is zero, reload the page
    if (username.length === 0) {
        res.render(&#39;login&#39;);
    } else {
        // Store username in session and redirect to index
        req.session.username = username;
        res.redirect(&#39;/&#39;);
    }
});
</code></pre>
<p>This should be fairly straightforward. This route accepts a username parameter. If this parameter is not present, the user will see the login form again. Otherwise, they are redirected back to the index.</p>
<p>Now, if you check <code>coverage/index.html</code> after running the tests again, you’ll notice that there’s a gap in our coverage for the scenario when a user submits an empty username. Let’s fix that - add the following test to <code>test/test.js</code>:</p>
<pre><code class="lang-javascript">    // Test empty login
    describe(&#39;Test empty login&#39;, function () {
        it(&#39;should show the login form&#39;, function (done) {
            request.post({ url: &#39;http://localhost:5000/login&#39;,
                form:{username: &#39;&#39;},
                followRedirect: false},
                function (error, response, body) {
                    expect(response.statusCode).to.equal(200);
                    expect(body).to.include(&#39;Please enter a handle&#39;);
                    done();
            });
        });
    });
</code></pre>
<p>Let’s run our tests again:</p>
<pre><code class="lang-bash">$ npm test

&gt; babblr@1.0.0 test /Users/matthewdaly/Projects/babblr
&gt; grunt test --verbose

Initializing
Command-line options: --verbose

Reading &quot;Gruntfile.js&quot; Gruntfile...OK

Registering Gruntfile tasks.
Initializing config...OK

Registering &quot;grunt-contrib-jshint&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-contrib-jshint/package.json...OK
Loading &quot;jshint.js&quot; tasks...OK
+ jshint

Registering &quot;grunt-coveralls&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-coveralls/package.json...OK
Loading &quot;coverallsTask.js&quot; tasks...OK
+ coveralls

Registering &quot;grunt-mocha-istanbul&quot; local Npm module tasks.
Reading /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Parsing /Users/matthewdaly/Projects/babblr/node_modules/grunt-mocha-istanbul/package.json...OK
Loading &quot;index.js&quot; tasks...OK
+ istanbul_check_coverage, mocha_istanbul
Loading &quot;Gruntfile.js&quot; tasks...OK
+ test

Running tasks: test

Running &quot;test&quot; task

Running &quot;jshint&quot; task

Running &quot;jshint:all&quot; (jshint) task
Verifying property jshint.all exists in config...OK
Files: test/test.js, index.js -&gt; all
Options: force=false, reporterOutput=null
OK
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Verifying property mocha_istanbul.coverage exists in config...OK
Files: test
Options: require=[], ui=false, globals=[], reporter=false, timeout=false, coverage=false, slow=false, grep=false, dryRun=false, quiet=false, recursive=false, mask=&quot;*.js&quot;, root=false, print=false, noColors=false, harmony=false, coverageFolder=&quot;coverage&quot;, reportFormats=[&quot;cobertura&quot;,&quot;html&quot;,&quot;lcovonly&quot;], check={&quot;statements&quot;:false,&quot;lines&quot;:false,&quot;functions&quot;:false,&quot;branches&quot;:false}, excludes=false, mochaOptions=false, istanbulOptions=false
&gt;&gt; Will execute: node /Users/matthewdaly/Projects/babblr/node_modules/istanbul/lib/cli.js cover --dir=/Users/matthewdaly/Projects/babblr/coverage --report=cobertura --report=html --report=lcovonly /Users/matthewdaly/Projects/babblr/node_modules/mocha/bin/_mocha -- test/*.js
express-session deprecated undefined resave option; provide resave option index.js:9:1669
express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:9:1669
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (44ms)
    Test the login route
      ✓ should return a page with the text Please enter a handle
    Test submitting to the login route
      ✓ should store the username in the session and redirect the user to the index
    Test empty login
      ✓ should show the login form
    Test sending a message
      ✓ should return &#39;Message received&#39; (41ms)
Stopping the server


  5 passing (145ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 54/54 ), 7 ignored
Branches     : 100% ( 10/10 ), 2 ignored
Functions    : 88.89% ( 8/9 )
Lines        : 100% ( 54/54 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Running &quot;coveralls&quot; task

Running &quot;coveralls:app&quot; (coveralls) task
Verifying property coveralls.app exists in config...OK
Files: coverage/lcov.info
Options: src=&quot;coverage/lcov.info&quot;, force=false
Submitting file to coveralls.io: coverage/lcov.info
&gt;&gt; Failed to submit &#39;coverage/lcov.info&#39; to coveralls: Bad response: 422 {&quot;message&quot;:&quot;Couldn&#39;t find a repository matching this job.&quot;,&quot;error&quot;:true}
&gt;&gt; Failed to submit coverage results to coveralls
Warning: Task &quot;coveralls:app&quot; failed. Use --force to continue.

Aborted due to warnings.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
</code></pre>
<p>Our test now passes (bar, of course, Coveralls failing). Our next step is to actually do something with the session. Now, the <code>request</code> module we use in our test requires a third-party module called <code>tough-cookie</code> to work with cookies, so we need to install that:</p>
<pre><code class="lang-bash">$ npm install tough-cookie --save-dev
</code></pre>
<p>Next, amend the login test as follows:</p>
<pre><code class="lang-javascript">    // Test submitting to the login route
    describe(&#39;Test submitting to the login route&#39;, function () {
        it(&#39;should store the username in the session and redirect the user to the index&#39;, function (done) {
            request.post({ url: &#39;http://localhost:5000/login&#39;,
                form:{username: &#39;bobsmith&#39;},
                jar: true,
                followRedirect: false},
                function (error, response, body) {
                    expect(response.headers.location).to.equal(&#39;/&#39;);
                    expect(response.statusCode).to.equal(302);

                    // Check the username
                    request.get({ url: &#39;http://localhost:5000/&#39;, jar: true }, function (error, response, body) {
                        expect(body).to.include(&#39;bobsmith&#39;);
                        done();
                    });
            });
        });
    });
</code></pre>
<p>Here we’re using a new parameter, namely <code>jar</code> - this tells <code>request</code> to store the cookies. We POST the username to the login form, and then we get the index route and verify that the username is shown in the request. Check the test fails, then amend the index route in <code>index.js</code> as follows:</p>
<pre><code class="lang-javascript">// Define index route
app.get(&#39;/&#39;, function (req, res) {
    // Get messages
    client.lrange(&#39;chat:messages&#39;, 0, -1, function (err, messages) {
        /* istanbul ignore if */
        if (err) {
            console.log(err);
        } else {
            // Get username
            var username = req.session.username;

            // Get messages
            var message_list = [];
            messages.forEach(function (message, i) {
                /* istanbul ignore next */
                message_list.push(message);
            });

            // Render page
            res.render(&#39;index&#39;, { messages: message_list, username: username });
        }
    });
});
</code></pre>
<p>Note we get the username and pass it through to the view. We need to adapt the header view to display the username. Amend <code>views/partials/header.hbs</code> to look like this:</p>
<pre><code class="lang-handlebars">&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;title&gt;Babblr&lt;/title&gt;
        &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;

        &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

        &lt;link rel=&quot;stylesheet&quot; href=&quot;/bower_components/bootstrap/dist/css/bootstrap.min.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/bower_components/bootstrap/dist/css/bootstrap-theme.min.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--[if lt IE 7]&gt;
            &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;
        &lt;nav class=&quot;navbar navbar-inverse navbar-static-top&quot; role=&quot;navigation&quot;&gt;
            &lt;div class=&quot;container-fluid&quot;&gt;
                &lt;div class=&quot;navbar-header&quot;&gt;
                    &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#header-nav&quot;&gt;
                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                    &lt;/button&gt;
                    &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;Babblr&lt;/a&gt;
                    &lt;div class=&quot;collapse navbar-collapse navbar-right&quot; id=&quot;header-nav&quot;&gt;
                        &lt;ul class=&quot;nav navbar-nav&quot;&gt;
                            {{#if username}}
                            &lt;li&gt;&lt;a href=&quot;/logout&quot;&gt;Logged in as {{ username }}&lt;/a&gt;&lt;/li&gt;
                            {{else}}
                            &lt;li&gt;&lt;a href=&quot;/login&quot;&gt;Log in&lt;/a&gt;&lt;/li&gt;
                            {{/if}}
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/nav&gt;
</code></pre>
<p>Note the addition of a logout link, which we will implement later. Let’s check our tests pass:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
express-session deprecated undefined resave option; provide resave option index.js:9:1669
express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:9:1669
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (44ms)
    Test the login route
      ✓ should return a page with the text Please enter a handle
    Test submitting to the login route
      ✓ should store the username in the session and redirect the user to the index
    Test empty login
      ✓ should show the login form
    Test sending a message
      ✓ should return &#39;Message received&#39; (45ms)
Stopping the server


  5 passing (156ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 55/55 ), 7 ignored
Branches     : 100% ( 10/10 ), 2 ignored
Functions    : 88.89% ( 8/9 )
Lines        : 100% ( 55/55 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Running &quot;coveralls:app&quot; (coveralls) task
&gt;&gt; Failed to submit &#39;coverage/lcov.info&#39; to coveralls: Bad response: 422 {&quot;message&quot;:&quot;Couldn&#39;t find a repository matching this job.&quot;,&quot;error&quot;:true}
&gt;&gt; Failed to submit coverage results to coveralls
Warning: Task &quot;coveralls:app&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>Excellent! Next, let’s implement the test for our logout route:</p>
<pre><code class="lang-javascript">    // Test logout
    describe(&#39;Test logout&#39;, function () {
        it(&#39;should log the user out&#39;, function (done) {
            request.post({ url: &#39;http://localhost:5000/login&#39;,
                form:{username: &#39;bobsmith&#39;},
                jar: true,
                followRedirect: false},
                function (error, response, body) {
                    expect(response.headers.location).to.equal(&#39;/&#39;);
                    expect(response.statusCode).to.equal(302);

                    // Check the username
                    request.get({ url: &#39;http://localhost:5000/&#39;, jar: true }, function (error, response, body) {
                        expect(body).to.include(&#39;bobsmith&#39;);

                        // Log the user out
                        request.get({ url: &#39;http://localhost:5000/logout&#39;, jar: true }, function (error, response, body) {
                            expect(body).to.include(&#39;Log in&#39;);
                            done();
                            });
                    });
            });
        });
    });
</code></pre>
<p>This is largely the same as the previous test, but adds some additional content at the end to test logging out afterwards. Let’s run the test:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
express-session deprecated undefined resave option; provide resave option index.js:9:1669
express-session deprecated undefined saveUninitialized option; provide saveUninitialized option index.js:9:1669
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (536ms)
    Test the login route
      ✓ should return a page with the text Please enter a handle
    Test submitting to the login route
      ✓ should store the username in the session and redirect the user to the index
    Test empty login
      ✓ should show the login form
    Test logout
      1) should log the user out
    Test sending a message
      ✓ should return &#39;Message received&#39; (49ms)
Stopping the server


  5 passing (682ms)
  1 failing

  1) server Test logout should log the user out:
     Uncaught AssertionError: expected &#39;Cannot GET /logout\n&#39; to include &#39;Log in&#39;
      at Request._callback (/Users/matthewdaly/Projects/babblr/test/test.js:105:45)
      at Request.self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:373:22)
      at Request.emit (events.js:98:17)
      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:1318:14)
      at Request.emit (events.js:117:20)
      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:1266:12)
      at IncomingMessage.emit (events.js:117:20)
      at _stream_readable.js:944:16
      at process._tickCallback (node.js:442:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 55/55 ), 7 ignored
Branches     : 100% ( 10/10 ), 2 ignored
Functions    : 88.89% ( 8/9 )
Lines        : 100% ( 55/55 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>Now we have a failing test, let’s implement our logout route. Add the following route to <code>index.js</code>:</p>
<pre><code class="lang-javascript">// Process logout
app.get(&#39;/logout&#39;, function (req, res) {
    // Delete username from session
    req.session.username = null;

    // Redirect user
    res.redirect(&#39;/&#39;);
});
</code></pre>
<p>If you run your tests again, they should now pass.</p>
<p>Now that we have the user’s name stored in the session, we can make use of it. First, let’s amend <code>static/js/main.js</code> so that it no longer adds a default username:</p>
<pre><code class="lang-javascript">$(document).ready(function () {
    &#39;use strict&#39;;

    // Set up the connection
    var field, socket, output;
    socket = io.connect(window.location.href);

    // Get a reference to the input
    field = $(&#39;textarea#message&#39;);

    // Get a reference to the output
    output = $(&#39;div.conversation&#39;);

    // Handle message submit
    $(&#39;a#submitbutton&#39;).on(&#39;click&#39;, function () {
        // Create the message
        var msg;
        msg = field.val();
        socket.emit(&#39;send&#39;, { message: msg });
        field.val(&#39;&#39;);
    });

    // Handle incoming messages
    socket.on(&#39;message&#39;, function (data) {
        // Insert the message
        output.append(&#39;&lt;p&gt;&#39; + data + &#39;&lt;/p&gt;&#39;);
    });
});
</code></pre>
<p>Then, in <code>index.js</code>, we need to declare a variable for our session middleware, which will be shared between Socket.IO and Express:</p>
<pre><code class="lang-javascript">// Declare variables used
var app, base_url, bodyParser, client, express, hbs, io, port, RedisStore, rtg, session, sessionMiddleware, subscribe;
</code></pre>
<p>Then we amend the session setup to make it easier to reuse for Socket.IO:</p>
<pre><code class="lang-javascript">// Set up session
sessionMiddleware = session({
    store: new RedisStore({
        client: client
    }),
    secret: &#39;blibble&#39;
});
app.use(sessionMiddleware);
</code></pre>
<p>Towards the end of the file, before we set up our handlers for Socket.IO, we integrate our sessions:</p>
<pre><code class="lang-javascript">// Integrate sessions
io.use(function(socket, next) {
    sessionMiddleware(socket.request, socket.request.res, next);
});
</code></pre>
<p>Finally, we rewrite our session handlers to use the username from the session:</p>
<pre><code class="lang-javascript">// Handle new messages
io.sockets.on(&#39;connection&#39;, function (socket) {
    // Subscribe to the Redis channel
    subscribe.subscribe(&#39;ChatChannel&#39;);

    // Handle incoming messages
    socket.on(&#39;send&#39;, function (data) {
        // Define variables
        var username, message;

        // Get username
        username = socket.request.session.username;
        if (!username) {
            username = &#39;Anonymous Coward&#39;;
        }
        message = username + &#39;: &#39; + data.message;

        // Publish it
        client.publish(&#39;ChatChannel&#39;, message);

        // Persist it to a Redis list
        client.rpush(&#39;chat:messages&#39;, message);
    });

    // Handle receiving messages
    var callback = function (channel, data) {
        socket.emit(&#39;message&#39;, data);
    };
    subscribe.on(&#39;message&#39;, callback);

    // Handle disconnect
    socket.on(&#39;disconnect&#39;, function () {
        subscribe.removeListener(&#39;message&#39;, callback);
    });
});
</code></pre>
<p>Note here that when a message is sent, we get the username from the session, and if it’s empty, set it to Anonymous Coward. We then prepend it to the message, publish it, and persist it.</p>
<h2 id="one-final-thing-">One final thing…</h2>
<p>One last job remains. At present, users can pass JavaScript through in messages, which is not terribly secure! We need to fix it. Amend the <code>send</code> handler as follows:</p>
<pre><code class="lang-javascript">    // Handle incoming messages
    socket.on(&#39;send&#39;, function (data) {
        // Define variables
        var username, message;

        // Strip tags from message
        message = data.message.replace(/&lt;[^&gt;]*&gt;/g, &#39;&#39;);

        // Get username
        username = socket.request.session.username;
        if (!username) {
            username = &#39;Anonymous Coward&#39;;
        }
        message = username + &#39;: &#39; + message;

        // Publish it
        client.publish(&#39;ChatChannel&#39;, message);

        // Persist it to a Redis list
        client.rpush(&#39;chat:messages&#39;, message);
    });
</code></pre>
<p>Here we use a regex to strip out any HTML tags from the message - this will prevent anyone injecting JavaScript into our chat client.</p>
<p>And that’s all, folks! If you want to check out the source for this lesson it’s in the repository on GitHub, tagged <code>lesson-2</code>. If you want to carry on working on this on your own, there’s still plenty you can do, such as:</p>
<ul>
<li>Adding support for multiple rooms</li>
<li>Using Passport.js to allow logging in using third-party services such as Twitter or Facebook</li>
<li>Adding formatting for messages, either by using something like Markdown, or a client-side rich text editor</li>
</ul>
<p>As you can see, it’s surprising how much you can accomplish using only Redis, and under certain circumstances it offers a lot of advantages over a relational database. It’s always worth thinking about whether Redis can be used for your project.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a chat server with Node.js and Redis]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/12/31/building-a-chat-server-with-node-dot-js-and-redis/</guid>
            <pubDate>Wed, 31 Dec 2014 14:10:57 GMT</pubDate>
            <description><![CDATA[<p>One of the more interesting capabilities Redis offers is its support for Pub/Sub. This allows you to subscribe to a specific channel, and then react when some content is published to that channel. In this tutorial, we’ll build a very simple web-based chat system that demonstrates Redis’s Pub/Sub support in action. Chat systems are pretty much synonymous with Node.js - it’s widely considered the “Hello, World!” of Node.js. Since we already used Node with the prior Redis tutorial, then it also makes sense to stick with it for this project too.</p>
<h2 id="installing-node-js">Installing Node.js</h2>
<p>Since the last tutorial, I’ve discovered <a href="https://github.com/creationix/nvm">NVM</a>, and if you’re using any flavour of Unix, I highly recommend using it. It’s not an option if you’re using Windows, however Redis doesn’t officially support Windows anyway, so if you want to follow along on a Windows machine I’d recommend using a VM.</p>
<p>If you followed the URL shortener tutorial, you should already have everything you need, though I’d still recommend switching to NVM as it’s very convenient. We’ll be using Grunt again, so you’ll need to make sure you have <code>grunt-cli</code> installed with the following command:</p>
<pre><code class="lang-bash">$ npm install -g grunt-cli
</code></pre>
<p>This assumes you used NVM to install Node - if it’s installed globally, you may need to use <code>sudo</code>.</p>
<h2 id="installing-dependencies">Installing dependencies</h2>
<p>As usual with a Node.js project, our first step is to create our <code>package.json</code> file:</p>
<pre><code class="lang-bash">$ npm init
</code></pre>
<p>Answer the questions so you end up with something like this (or just paste this into <code>package.json</code> and amend it as you see fit):</p>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;babblr&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;Chat client&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;grunt test --verbose&quot;
  },
  &quot;keywords&quot;: [
    &quot;chat&quot;
  ],
  &quot;author&quot;: &quot;Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)&quot;,
  &quot;license&quot;: &quot;GPLv2&quot;
}
</code></pre>
<p>Now let’s install our dependencies:</p>
<pre><code class="lang-bash">$ npm install express hbs redis hiredis socket.io socket.io-client --save
$ npm install chai grunt grunt-contrib-jshint grunt-coveralls grunt-mocha-istanbul istanbul mocha request --save-dev
</code></pre>
<p>These two commands will install our dependencies.</p>
<p>Now, if you followed on with the URL shortener tutorial, you’ll notice that we aren’t using Jade - instead we’re going to use Handlebars. Jade is quite a nice templating system, but I find it gets in the way for larger projects - you spend too much time looking up the syntax for things you already know in HTML. Handlebars is closer to HTML so we will use that. We’ll also use Socket.IO extensively on this project.</p>
<h2 id="support-files">Support files</h2>
<p>As before, we’ll also use Mocha for our unit tests and Istanbul to generate coverage stats. We’ll need a Grunt configuration for that, so here it is:</p>
<pre><code class="lang-javascript">module.exports = function (grunt) {
    &#39;use strict&#39;;

    grunt.initConfig({
        jshint: {
            all: [
                &#39;test/*.js&#39;,
                &#39;index.js&#39;
            ]
        },
        mocha_istanbul: {
            coverage: {
                src: &#39;test&#39;, // the folder, not the files,
                options: {
                    mask: &#39;*.js&#39;,
                    reportFormats: [&#39;cobertura&#39;, &#39;html&#39;, &#39;lcovonly&#39;]
                }
            }
        },
        coveralls: {
            options: {
                src: &#39;coverage/lcov.info&#39;,
                force: false
            },
            app: {
                src: &#39;coverage/lcov.info&#39;
            }
        }
    });

    // Load tasks
    grunt.loadNpmTasks(&#39;grunt-contrib-jshint&#39;);
    grunt.loadNpmTasks(&#39;grunt-coveralls&#39;);
    grunt.loadNpmTasks(&#39;grunt-mocha-istanbul&#39;);

    // Register tasks
    grunt.registerTask(&#39;test&#39;, [&#39;jshint&#39;, &#39;mocha_istanbul:coverage&#39;, &#39;coveralls&#39;]);
};
</code></pre>
<p>We also need a <code>.bowerrc</code>:</p>
<pre><code class="lang-json">{
    &quot;directory&quot;: &quot;static/bower_components&quot;
}
</code></pre>
<p>And a <code>bower.json</code>:</p>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;babblr&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;authors&quot;: [
    &quot;Matthew Daly &lt;matthewbdaly@gmail.com&gt;&quot;
  ],
  &quot;description&quot;: &quot;A simple chat server&quot;,
  &quot;moduleType&quot;: [
    &quot;node&quot;
  ],
  &quot;keywords&quot;: [
    &quot;chat&quot;
  ],
  &quot;license&quot;: &quot;GPLv2&quot;,
  &quot;homepage&quot;: &quot;http://matthewdaly.co.uk&quot;,
  &quot;private&quot;: true,
  &quot;ignore&quot;: [
    &quot;**/.*&quot;,
    &quot;node_modules&quot;,
    &quot;bower_components&quot;,
    &quot;test&quot;,
    &quot;tests&quot;
  ],
  &quot;dependencies&quot;: {
    &quot;html5-boilerplate&quot;: &quot;~4.3.0&quot;,
    &quot;jquery&quot;: &quot;~2.1.1&quot;,
    &quot;bootstrap&quot;: &quot;~3.3.1&quot;
  }
}
</code></pre>
<p>Then install the Bower dependencies:</p>
<pre><code class="lang-bash">$ bower install
</code></pre>
<p>We also need a <code>Procfile</code> so we can run it on Heroku:</p>
<pre><code class="lang-bash">web: node index.js
</code></pre>
<p>Now, let’s create the main file:</p>
<pre><code class="lang-bash">$ touch index.js
</code></pre>
<p>And our test file:</p>
<pre><code class="lang-bash">$ mkdir test
$ touch test/test.js
</code></pre>
<h2 id="implementing-the-chat-server">Implementing the chat server</h2>
<p>Next, let’s implement our first test. First of all, we’ll verify that the index route works:</p>
<pre><code class="lang-javascript">/*jslint node: true */
/*global describe: false, before: false, after: false, it: false */
&quot;use strict&quot;;

// Declare the variables used
var expect = require(&#39;chai&#39;).expect,
    request = require(&#39;request&#39;),
    server = require(&#39;../index&#39;),
    redis = require(&#39;redis&#39;),
    io = require(&#39;socket.io-client&#39;),
    client;
client = redis.createClient();

// Server tasks
describe(&#39;server&#39;, function () {

    // Beforehand, start the server
    before(function (done) {
        console.log(&#39;Starting the server&#39;);
        done();
    });

    // Afterwards, stop the server and empty the database
    after(function (done) {
        console.log(&#39;Stopping the server&#39;);
        client.flushdb();
        done();
    });

    // Test the index route
    describe(&#39;Test the index route&#39;, function () {
        it(&#39;should return a page with the title Babblr&#39;, function (done) {
            request.get({ url: &#39;http://localhost:5000/&#39; }, function (error, response, body) {
                expect(body).to.include(&#39;Babblr&#39;);
                expect(response.statusCode).to.equal(200);
                expect(response.headers[&#39;content-type&#39;]).to.equal(&#39;text/html; charset=utf-8&#39;);
                done();
            });
        });
    });
});
</code></pre>
<p>Note that this is very similar to the first test for the URL shortener, because it’s doing basically the same thing.</p>
<p>Now, run the test and make sure it fails:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task


  server
Starting the server
    Test the index route
      1) should return a page with the title Babblr
Stopping the server


  0 passing (873ms)
  1 failing

  1) server Test the index route should return a page with the title Babblr:
     Uncaught AssertionError: expected undefined to include &#39;Babblr&#39;
      at Request._callback (/Users/matthewdaly/Projects/babblr/test/test.js:34:33)
      at self.callback (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:373:22)
      at Request.emit (events.js:95:17)
      at Request.onRequestError (/Users/matthewdaly/Projects/babblr/node_modules/request/request.js:971:8)
      at ClientRequest.emit (events.js:95:17)
      at Socket.socketErrorListener (http.js:1552:9)
      at Socket.emit (events.js:95:17)
      at net.js:441:14
      at process._tickCallback (node.js:442:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 0/0 )
Branches     : 100% ( 0/0 )
Functions    : 100% ( 0/0 )
Lines        : 100% ( 0/0 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>With that confirmed, we can start writing code to make the test pass:</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

// Declare variables used
var app, base_url, client, express, hbs, io, port, rtg, subscribe;

// Define values
express = require(&#39;express&#39;);
app = express();
port = process.env.PORT || 5000;
base_url = process.env.BASE_URL || &#39;http://localhost:5000&#39;;
hbs = require(&#39;hbs&#39;);

// Set up connection to Redis
/* istanbul ignore if */
if (process.env.REDISTOGO_URL) {
    rtg  = require(&quot;url&quot;).parse(process.env.REDISTOGO_URL);
    client = require(&quot;redis&quot;).createClient(rtg.port, rtg.hostname);
    subscribe = require(&quot;redis&quot;).createClient(rtg.port, rtg.hostname);
    client.auth(rtg.auth.split(&quot;:&quot;)[1]);
    subscribe.auth(rtg.auth.split(&quot;:&quot;)[1]);
} else {
    client = require(&#39;redis&#39;).createClient();
    subscribe = require(&#39;redis&#39;).createClient();
}

// Set up templating
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.set(&#39;view engine&#39;, &quot;hbs&quot;);
app.engine(&#39;hbs&#39;, require(&#39;hbs&#39;).__express);

// Register partials
hbs.registerPartials(__dirname + &#39;/views/partials&#39;);

// Set URL
app.set(&#39;base_url&#39;, base_url);

// Define index route
app.get(&#39;/&#39;, function (req, res) {
    res.render(&#39;index&#39;);
});

// Serve static files
app.use(express.static(__dirname + &#39;/static&#39;));

// Listen
io = require(&#39;socket.io&#39;)({
}).listen(app.listen(port));
console.log(&quot;Listening on port &quot; + port);
</code></pre>
<p>If you compare this to the code for the URL shortener, you’ll notice a few fairly substantial differences. For one thing, we set up two Redis connections, not one - that’s because we need to do so when using Pub/Sub with Redis. You’ll also notice that we register Handlebars (<code>hbs</code>) rather than Jade, and define not just a directory for views, but another directory inside it for partials. Finally, setting it up to listen at the end is a bit more involved because we’ll be using Socket.IO.</p>
<p>Now, you can run your tests again at this point, but they won’t pass because we haven’t created our views. So let’s do that. Create the directory <code>views</code> and the subdirectory <code>partials</code> inside it. Then add the following content to <code>views/index.hbs</code>:</p>
<pre><code class="lang-hbs">{{&gt; header }}
        &lt;div class=&quot;container&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-md-8&quot;&gt;
                    &lt;div class=&quot;conversation&quot;&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;col-md-4&quot;&gt;
                    &lt;form&gt;
                        &lt;div class=&quot;form-group&quot;&gt;
                            &lt;label for=&quot;message&quot;&gt;Message&lt;/label&gt;
                            &lt;textarea class=&quot;form-control&quot; id=&quot;message&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt;
                            &lt;a id=&quot;submitbutton&quot; class=&quot;btn btn-primary form-control&quot;&gt;Submit&lt;/a&gt;
                        &lt;div&gt;
                    &lt;/form&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
{{&gt; footer }}
</code></pre>
<p>Add this to <code>views/partials/header.hbs</code>:</p>
<pre><code class="lang-hbs">&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;title&gt;Babblr&lt;/title&gt;
        &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;

        &lt;!-- Place favicon.ico and apple-touch-icon.png in the root directory --&gt;

        &lt;link rel=&quot;stylesheet&quot; href=&quot;/bower_components/bootstrap/dist/css/bootstrap.min.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/bower_components/bootstrap/dist/css/bootstrap-theme.min.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--[if lt IE 7]&gt;
            &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
        &lt;![endif]--&gt;
        &lt;nav class=&quot;navbar navbar-inverse navbar-static-top&quot; role=&quot;navigation&quot;&gt;
            &lt;div class=&quot;container&quot;&gt;
                &lt;div class=&quot;navbar-header&quot;&gt;
                    &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Babblr&lt;/a&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/nav&gt;
</code></pre>
<p>And add this to <code>views/partials/footer.hbs</code>:</p>
<pre><code class="lang-hbs">
        &lt;script src=&quot;/bower_components/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;/bower_components/bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;/js/main.js&quot;&gt;&lt;/script&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>You’ll also want to create placeholder CSS and JavaScript files:</p>
<pre><code class="lang-bash">$ mkdir static/js
$ mkdir static/css
$ touch static/js/main.js
$ touch static/css/style.css
</code></pre>
<p>The test should now pass:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (41ms)
Stopping the server


  1 passing (54ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 24/24 ), 5 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 100% ( 1/1 )
Lines        : 100% ( 24/24 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Running &quot;coveralls:app&quot; (coveralls) task
&gt;&gt; Failed to submit &#39;coverage/lcov.info&#39; to coveralls: Bad response: 422 {&quot;message&quot;:&quot;Couldn&#39;t find a repository matching this job.&quot;,&quot;error&quot;:true}
&gt;&gt; Failed to submit coverage results to coveralls
Warning: Task &quot;coveralls:app&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>Don’t worry about the coveralls task failing, as that only needs to pass when it runs on Travis CI.</p>
<p>So we now have our main route in place. The next step is to actually implement the chat functionality. Add this code to the test file:</p>
<pre><code class="lang-javascript">
    // Test sending a message
    describe(&#39;Test sending a message&#39;, function () {
        it(&quot;should return &#39;Message received&#39;&quot;, function (done) {
            // Connect to server
            var socket = io.connect(&#39;http://localhost:5000&#39;, {
                &#39;reconnection delay&#39; : 0,
                &#39;reopen delay&#39; : 0,
                &#39;force new connection&#39; : true
            });

            // Handle the message being received
            socket.on(&#39;message&#39;, function (data) {
                expect(data).to.include(&#39;Message received&#39;);
                socket.disconnect();
                done();
            });

            // Send the message
            socket.emit(&#39;send&#39;, { message: &#39;Message received&#39; });
        });
    });
</code></pre>
<p>This code should be fairly straightforward to understand. First, we connect to the server. Then, we set up a handler to verify the content of the message when it gets sent. Finally, we send the message. Let’s run the tests to make sure we get the expected result:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (337ms)
    Test sending a message
      1) should return &#39;Message received&#39;
Stopping the server


  1 passing (2s)
  1 failing

  1) server Test sending a message should return &#39;Message received&#39;:
     Error: timeout of 2000ms exceeded
      at null.&lt;anonymous&gt; (/Users/matthewdaly/Projects/babblr/node_modules/mocha/lib/runnable.js:159:19)
      at Timer.listOnTimeout [as ontimeout] (timers.js:112:15)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 24/24 ), 5 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 100% ( 1/1 )
Lines        : 100% ( 24/24 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>Now, let’s implement this functionality. Add this at the end of <code>index.js</code>:</p>
<pre><code class="lang-javascript">// Handle new messages
io.sockets.on(&#39;connection&#39;, function (socket) {
    // Subscribe to the Redis channel
    subscribe.subscribe(&#39;ChatChannel&#39;);

    // Handle incoming messages
    socket.on(&#39;send&#39;, function (data) {
        // Publish it
        client.publish(&#39;ChatChannel&#39;, data.message);
    });

    // Handle receiving messages
    var callback = function (channel, data) {
        socket.emit(&#39;message&#39;, data);
    };
    subscribe.on(&#39;message&#39;, callback);

    // Handle disconnect
    socket.on(&#39;disconnect&#39;, function () {
        subscribe.removeListener(&#39;message&#39;, callback);
    });
});
</code></pre>
<p>We’ll go through this. First, we create a callback for when a new connection is received. Inside the callback, we then subscribe to a Pub/Sub channel in Redis called <code>ChatChannel</code>.</p>
<p>Then, we define another callback so that on a <code>send</code> event from Socket.IO, we get the message and publish it to <code>ChatChannel</code>. After that, we define another callback to handle receiving messages, and set it to run when a new message is published to <code>ChatChannel</code>. Finally, we set up a callback to handle removing the listener when a user disconnects.</p>
<p>Note the two different connections to Redis - <code>client</code> and <code>subscribe</code>. As mentioned earlier, you need to use two connections to Redis when using Pub/Sub. This is because a client subscribed to one or more channels should not issue commands, so we use <code>subscribe</code> as a dedicated connection to handle subscriptions, and use <code>client</code> to publish new messages.</p>
<p>We’ll also need a bit of client-side JavaScript to handle sending and receiving messages. Amend <code>main.js</code> as follows:</p>
<pre><code class="lang-javascript">$(document).ready(function () {
    &#39;use strict&#39;;

    // Set up the connection
    var field, socket, output;
    socket = io.connect(window.location.href);

    // Get a reference to the input
    field = $(&#39;textarea#message&#39;);

    // Get a reference to the output
    output = $(&#39;div.conversation&#39;);

    // Handle message submit
    $(&#39;a#submitbutton&#39;).on(&#39;click&#39;, function () {
        // Create the message
        var msg;
        msg = field.val();
        socket.emit(&#39;send&#39;, { message: msg });
        field.val(&#39;&#39;);
    });

    // Handle incoming messages
    socket.on(&#39;message&#39;, function (data) {
        // Insert the message
        output.append(&#39;&lt;p&gt;Anonymous Coward : &#39; + data + &#39;&lt;/p&gt;&#39;);
    });
});
</code></pre>
<p>Here we have one callback that handles sending messages, and another that handles receiving messages. Note that every message will be preceded with Anonymous Coward - we won’t implement user names at this point (though I plan it for a future instalment).</p>
<p>We’ll also add a little bit of additional styling:</p>
<pre><code class="lang-css">div.conversation {
    height: 500px;
    overflow-y: scroll;
    border: 1px solid #000;
    padding: 10px;
}
</code></pre>
<p>Now, if you run your tests, they should pass:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Babblr (40ms)
    Test sending a message
      ✓ should return &#39;Message received&#39; (45ms)
Stopping the server


  2 passing (101ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/babblr/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/babblr/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 33/33 ), 5 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 100% ( 5/5 )
Lines        : 100% ( 33/33 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Running &quot;coveralls:app&quot; (coveralls) task
&gt;&gt; Failed to submit &#39;coverage/lcov.info&#39; to coveralls: Bad response: 422 {&quot;message&quot;:&quot;Couldn&#39;t find a repository matching this job.&quot;,&quot;error&quot;:true}
&gt;&gt; Failed to submit coverage results to coveralls
Warning: Task &quot;coveralls:app&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>If you now run the following command:</p>
<pre><code class="lang-bash">$ node index.js
</code></pre>
<p>Then visit <code>http://localhost:5000</code>, you should be able to create new messages. If you then open it up in a second tab, you can see messages added in one tab appear in another. Deploying to Heroku using Redis To Go will be straightforward, and you can then access it from multiple devices and see new chat messages appear in real time.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>This illustrates just how straightforward it is to use Redis’s Pub/Sub capability. The chat system is still quite limited, so in a future instalment we’ll develop it further. You can get the source code from the <a href="https://github.com/matthewbdaly/babblr">Github repository</a> - just switch to the <code>lesson-1</code> tag.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a URL shortener with Node.js and Redis]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/11/09/building-a-url-shortener-with-node-dot-js-and-redis/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/11/09/building-a-url-shortener-with-node-dot-js-and-redis/</guid>
            <pubDate>Sun, 09 Nov 2014 17:13:16 GMT</pubDate>
            <description><![CDATA[<p>The NoSQL movement is an exciting one for web developers. While relational databases such as MySQL are applicable to solving a wide range of problems, they aren’t the best solution for every problem. Sometimes you may find yourself dealing with a problem where an alternative data store may make more sense.</p>
<p>Redis is one of the data stores that have appeared as part of this movement, and is arguably one of the more generally useful ones. Since it solves different problems to a relational database, it’s not generally useful as an alternative to them - instead it is often used alongside them.</p>
<h2 id="what-is-redis-">What is Redis?</h2>
<p>Redis is described as follows on the website:</p>
<blockquote>
<p>“Redis is an open source, BSD licensed, advanced key-value cache and store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets, sorted sets, bitmaps and hyperloglogs”.</p>
</blockquote>
<p>In other words, its core functionality is that it allows you to store a value by a key, and later retrieve that data using the key. It also allows you to set an optional expiry time for that key-value pair. It’s quite similar to Memcached in that respect, and indeed one obvious use case for Redis is as an alternative to Memcached. However, it offers a number of additional benefits - for one thing, it supports more data types, and for another, it allows you to persist your data to disk (unlike Memcached, which only retains the data in memory, meaning it’s lost on restart or if Memcached crashes). The latter means that for some very simple web applications, Redis can be used as your sole data store.</p>
<p>In this tutorial, we’ll build a simple URL shortener, using Redis as the sole data store. A URL shortener only really requires two fields:</p>
<ul>
<li>A string to identify the correct URL</li>
<li>The URL</li>
</ul>
<p>That makes Redis a good fit for this use case since all we need to do is generate an ID for each URL, then when a link is followed, look up the URL for that key, and redirect the user to it. As long as this is all our application needs to do, we can quite happily use Redis for this rather than a relational database, and it will be significantly faster than a relational database would be for this use case.</p>
<h2 id="getting-started">Getting started</h2>
<p>We’re more interested in the fundamentals of using Redis in our application than a specific language here. As JavaScript is pretty much required to be a web developer, I think it’s a fairly safe bet to use Node.js rather than PHP or Python, since that way, even if your only experience of JavaScript is client-side, you shouldn’t have too much trouble following along.</p>
<p>You’ll need to have Node.js installed, and I’ll leave the details of installing this to you. You’ll also need the Grunt CLI - install this globally as follows:</p>
<pre><code class="lang-bash">$ sudo npm install -g grunt-cli
</code></pre>
<p>Finally, you’ll want to have Redis itself installed. You might also want to install hiredis, which is a faster Redis client that gets used automatically where available.</p>
<p>Now, let’s create our <code>package.json</code> file:</p>
<pre><code class="lang-bash">$ npm init
</code></pre>
<p>You’ll see a number of questions. Your generated <code>package.json</code> file should look something like this:</p>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;url-shortener&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A URL shortener&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;grunt test&quot;
  },
  &quot;keywords&quot;: [
    &quot;URL&quot;,
    &quot;shortener&quot;
  ],
  &quot;author&quot;: &quot;Matthew Daly &lt;matthew@matthewdaly.co.uk&gt; (http://matthewdaly.co.uk/)&quot;,
  &quot;license&quot;: &quot;GPLv2&quot;
}
</code></pre>
<p>Note in particular that we set our test command to <code>grunt test</code>.</p>
<p>Next, we install our required Node.js modules. First, install, the normal dependencies:</p>
<pre><code class="lang-bash">$ npm install --save body-parser express redis hiredis jade shortid
</code></pre>
<p>Next, install the development dependencies:</p>
<pre><code class="lang-bash">$ npm install --save-dev grunt grunt-contrib-jshint grunt-mocha-istanbul istanbul mocha chai request
</code></pre>
<p>Now, we’re going to use Grunt to run our tests, so that we can easily lint the JavaScript and generate code coverage details. Here’s the Gruntfile:</p>
<pre><code class="lang-javascript">module.exports = function (grunt) {
    &#39;use strict&#39;;

    grunt.initConfig({
        jshint: {
            all: [
                &#39;test/*.js&#39;,
                &#39;index.js&#39;
            ]
        },
        mocha_istanbul: {
            coverage: {
                src: &#39;test&#39;, // the folder, not the files,
                options: {
                    mask: &#39;*.js&#39;,
                    reportFormats: [&#39;cobertura&#39;, &#39;html&#39;]
                }
            }
        }
    });

    // Load tasks
    grunt.loadNpmTasks(&#39;grunt-contrib-jshint&#39;);
    grunt.loadNpmTasks(&#39;grunt-mocha-istanbul&#39;);

    // Register tasks
    grunt.registerTask(&#39;test&#39;, [&#39;jshint&#39;, &#39;mocha_istanbul:coverage&#39;]);
};
</code></pre>
<p>We’ll also create a <code>Procfile</code> in anticipation of deploying the app to Heroku:</p>
<pre><code class="lang-bash">web: node index.js
</code></pre>
<h2 id="creating-the-views">Creating the views</h2>
<p>For this application we’ll be using the Express framework and the Jade templating system. We need three templates:</p>
<ul>
<li>Submission form</li>
<li>Output form</li>
<li>404 page</li>
</ul>
<p>Create the folder <code>views</code> under the application directory and add the files <code>views/index.jade</code>:</p>
<pre><code class="lang-jade">doctype html
html(lang=&quot;en&quot;)
    head
        title=&quot;Shortbread&quot;

    body
        div.container
            div.row
                h1 Shortbread

            div.row
                form(action=&quot;/&quot;, method=&quot;POST&quot;)
                    input(type=&quot;url&quot;, name=&quot;url&quot;)
                    input(type=&quot;submit&quot;, value=&quot;Submit&quot;)
</code></pre>
<p>Also <code>views/output.jade</code>:</p>
<pre><code class="lang-jade">doctype html
html(lang=&quot;en&quot;)
    head
        title=Shortbread

    body
        div.container
            div.row
                h1 Shortbread
                p
                    | Your shortened URL is
                    a(href=base_url+&#39;/&#39;+id) #{base_url}/#{id}
</code></pre>
<p>and <code>views/error.jade</code>:</p>
<pre><code class="lang-jade">doctype html
html(lang=&quot;en&quot;)
    head
        title=&quot;Shortbread&quot;

    body
        div.container
            div.row
                h1 Shortbread
                p Link not found
</code></pre>
<h2 id="writing-our-first-test">Writing our first test</h2>
<p>We’re going to use Mocha for our tests, together with the Chai assertion library. Create a folder called <code>test</code>, and put the following in <code>test/test.js</code>:</p>
<pre><code class="lang-javascript">/*jslint node: true */
/*global describe: false, before: false, after: false, it: false */
&quot;use strict&quot;;

// Declare the variables used
var expect = require(&#39;chai&#39;).expect,
    request = require(&#39;request&#39;),
    server = require(&#39;../index&#39;),
    redis = require(&#39;redis&#39;),
    client;
client = redis.createClient();

// Server tasks
describe(&#39;server&#39;, function () {

    // Beforehand, start the server
    before(function (done) {
        console.log(&#39;Starting the server&#39;);
        done();
    });

    // Afterwards, stop the server and empty the database
    after(function (done) {
        console.log(&#39;Stopping the server&#39;);
        client.flushdb();
        done();
    });

    // Test the index route
    describe(&#39;Test the index route&#39;, function () {
        it(&#39;should return a page with the title Shortbread&#39;, function (done) {
            request.get({ url: &#39;http://localhost:5000&#39; }, function (error, response, body) {
                expect(body).to.include(&#39;Shortbread&#39;);
                expect(response.statusCode).to.equal(200);
                expect(response.headers[&#39;content-type&#39;]).to.equal(&#39;text/html; charset=utf-8&#39;);
                done();
            });
        });
    });
});
</code></pre>
<p>This code bears a little explanation. First, we import the required modules, as well as our <code>index.js</code> file (which we have yet to add). Then we create a callback to contain our tests.</p>
<p>Inside the callback, we call the <code>before()</code> and <code>after()</code> functions, which let us set up and tear down our tests. As part of the teardown process, we flush the Redis database.</p>
<p>Finally, we fetch our home page and verify that it returns a 200 status code and a content type of text/html, as well as including the name or our application.</p>
<p>We’ll need to create our <code>index.js</code> file to avoid a nasty error, but we won’t populate it just yet:</p>
<pre><code class="lang-bash">$ touch index.js
</code></pre>
<p>Let’s run our tests:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task


  server
Starting the server
    Test the index route
      1) should return a page with the title Shortbread
Stopping the server


  0 passing (152ms)
  1 failing

  1) server Test the index route should return a page with the title Shortbread:
     Uncaught AssertionError: expected undefined to include &#39;Shortbread&#39;
      at Request._callback (/Users/matthewdaly/Projects/url-shortener/test/test.js:33:33)
      at self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:372:22)
      at Request.emit (events.js:95:17)
      at Request.onRequestError (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:963:8)
      at ClientRequest.emit (events.js:95:17)
      at Socket.socketErrorListener (http.js:1551:9)
      at Socket.emit (events.js:95:17)
      at net.js:440:14
      at process._tickCallback (node.js:419:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 0/0 )
Branches     : 100% ( 0/0 )
Functions    : 100% ( 0/0 )
Lines        : 100% ( 0/0 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>Now that we have a failing test, we can start work on our app proper. Open up <code>index.js</code> and add the following code:</p>
<pre><code class="lang-javascript">/*jslint node: true */
&#39;use strict&#39;;

// Declare variables used
var app, base_url, bodyParser, client, express, port, rtg, shortid;

// Define values
express = require(&#39;express&#39;);
app = express();
port = process.env.PORT || 5000;
shortid = require(&#39;shortid&#39;);
bodyParser = require(&#39;body-parser&#39;);
base_url = process.env.BASE_URL || &#39;http://localhost:5000&#39;;

// Set up connection to Redis
if (process.env.REDISTOGO_URL) {
  rtg  = require(&quot;url&quot;).parse(process.env.REDISTOGO_URL);
  client = require(&quot;redis&quot;).createClient(rtg.port, rtg.hostname);
  client.auth(rtg.auth.split(&quot;:&quot;)[1]);
} else {
  client = require(&#39;redis&#39;).createClient();
}

// Set up templating
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.set(&#39;view engine&#39;, &quot;jade&quot;);
app.engine(&#39;jade&#39;, require(&#39;jade&#39;).__express);

// Set URL
app.set(&#39;base_url&#39;, base_url);

// Handle POST data
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));

// Define index route
app.get(&#39;/&#39;, function (req, res) {
  res.render(&#39;index&#39;);
});

// Serve static files
app.use(express.static(__dirname + &#39;/static&#39;));

// Listen
app.listen(port);
console.log(&#39;Listening on port &#39; + port);
</code></pre>
<p>Let’s go through this code. First we confirm that linting tools should treat this as a Node app, and use strict mode (I recommend always using strict mode in JavaScript).</p>
<p>Then we declare our variables and import the required modules. Note here that we set the port to 5000, but can also set it based on the <code>PORT</code> environment variable, which is used by Heroku. We also define a base URL, which again can be overriden from an environment variable when hosted on Heroku.</p>
<p>We then set up our connection to our Redis instance. When we push the code up to Heroku, we’ll use the Redis To Go addon, so we check for an environment variable containing the Redis URL. If it’s set, we use that to connect. Otherwise, we just connect as normal.</p>
<p>We then set up templating using Jade, and define the folder containing our views, and store the base URL within the app. Then we set up <code>bodyParser</code> so that Express can handle POST data.</p>
<p>Next, we define our index route to just render the <code>index.jade</code> file. Finally, we set up our static folder and set the app to listen on the correct port.</p>
<p>Let’s run our test:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Shortbread (116ms)
Stopping the server


  1 passing (128ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 86.96% ( 20/23 )
Branches     : 83.33% ( 5/6 )
Functions    : 100% ( 1/1 )
Lines        : 86.96% ( 20/23 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Done, without errors.
</code></pre>
<p>Note that Istanbul will have generated a nice HTML coverage report, which will be at <code>coverage/index.html</code>, but this won’t show 100% test coverage due to the Heroku-specific Redis section. To fix this, amend that section as follows:</p>
<pre><code class="lang-javascript">/* istanbul ignore if */
if (process.env.REDISTOGO_URL) {
    rtg  = require(&quot;url&quot;).parse(process.env.REDISTOGO_URL);
    client = require(&quot;redis&quot;).createClient(rtg.port, rtg.hostname);
    client.auth(rtg.auth.split(&quot;:&quot;)[1]);
} else {
    client = require(&#39;redis&#39;).createClient();
}
</code></pre>
<p>Telling Istanbul to ignore the if clause resolves that problem nicely.</p>
<h2 id="submitting-a-url">Submitting a URL</h2>
<p>Next, let’s add the ability to add a URL. First, add the following test, after the one for the index:</p>
<pre><code class="lang-javascript">    // Test submitting a URL
    describe(&#39;Test submitting a URL&#39;, function () {
        it(&#39;should return the shortened URL&#39;, function (done) {
            request.post(&#39;http://localhost:5000&#39;, {form: {url: &#39;http://www.google.co.uk&#39;}}, function (error, response, body) {
                expect(body).to.include(&#39;Your shortened URL is&#39;);
                expect(response.statusCode).to.equal(200);
                expect(response.headers[&#39;content-type&#39;]).to.equal(&#39;text/html; charset=utf-8&#39;);
                done();
            });
        });
    });
</code></pre>
<p>This test submits a URL via POST, and checks to see that the response view gets returned. Now, let’s run our tests again:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Shortbread (223ms)
    Test submitting a URL
      1) should return the shortened URL
Stopping the server


  1 passing (318ms)
  1 failing

  1) server Test submitting a URL should return the shortened URL:
     Uncaught AssertionError: expected &#39;Cannot POST /\n&#39; to include &#39;Your shortened URL is&#39;
      at Request._callback (/Users/matthewdaly/Projects/url-shortener/test/test.js:45:33)
      at Request.self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:372:22)
      at Request.emit (events.js:98:17)
      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:1310:14)
      at Request.emit (events.js:117:20)
      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:1258:12)
      at IncomingMessage.emit (events.js:117:20)
      at _stream_readable.js:943:16
      at process._tickCallback (node.js:419:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 23/23 ), 3 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 100% ( 1/1 )
Lines        : 100% ( 23/23 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>We have a failing test, so let’s make it pass. Add the following route after the index one:</p>
<pre><code class="lang-javascript">// Define submit route
app.post(&#39;/&#39;, function (req, res) {
    // Declare variables
    var url, id;

    // Get URL
    url = req.body.url;

    // Create a hashed short version
    id = shortid.generate();

    // Store them in Redis
    client.set(id, url, function () {
        // Display the response
        res.render(&#39;output&#39;, { id: id, base_url: base_url });
    });
});
</code></pre>
<p>This route is fairly simple. It handles POST requests to the index route, and first of all it gets the URL from the POST request. Then it randomly generates a hash to use as the key.</p>
<p>The next part is where we see Redis in action. We create a new key-value pair, with the key set to the newly generated ID, and the value set to the URL. Once Redis confirms that has been done, the callback is fired, which renders the <code>output.jade</code> view with the ID and base URL passed through, so that we can see our shortened URL.</p>
<p>With that done, our test should pass:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Shortbread (89ms)
    Test submitting a URL
      ✓ should return the shortened URL (65ms)
Stopping the server


  2 passing (167ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 29/29 ), 3 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 100% ( 3/3 )
Lines        : 100% ( 29/29 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Done, without errors.
</code></pre>
<p>Our final task is to implement the short URL handling. We want to check to see if a short URL exists. If it does, we redirect the user to the destination. If it doesn’t, we raise a 404 error. For that we need two more tests. Here they are:</p>
<pre><code class="lang-javascript">
    // Test following a URL
    describe(&#39;Test following a URL&#39;, function () {
        it(&#39;should redirect the user to the shortened URL&#39;, function (done) {
            // Create the URL
            client.set(&#39;testurl&#39;, &#39;http://www.google.com&#39;, function () {
                // Follow the link
                request.get({
                    url: &#39;http://localhost:5000/testurl&#39;,
                    followRedirect: false
                }, function (error, response, body) {
                    expect(response.headers.location).to.equal(&#39;http://www.google.com&#39;);
                    expect(response.statusCode).to.equal(301);
                    done();
                });
            });
        });
    });

    // Test non-existent link
    describe(&#39;Test following a non-existent-link&#39;, function () {
        it(&#39;should return a 404 error&#39;, function (done) {
            // Follow the link
            request.get({
                url: &#39;http://localhost:5000/nonexistenturl&#39;,
                followRedirect: false
            }, function (error, response, body) {
                expect(response.statusCode).to.equal(404);
                expect(body).to.include(&#39;Link not found&#39;);
                done();
            });
        });
    });
</code></pre>
<p>The first test creates a URL for testing purposes. It then navigates to that URL. Note that we set <code>followRedirect</code> to <code>true</code> - this is because, by default, <code>request</code> will follow any redirect, so we need to prevent it from doing so to ensure that the headers to redirect the user are set correctly.</p>
<p>Once the response has been received, we then check that the status code is 301 (Moved Permanently), and that the <code>Location</code> header is set to the correct destination. When a real browser visits this page, it will be redirected accordingly.</p>
<p>The second test tries to fetch a non-existent URL, and checks that the status code is 404, and the response contains the words <code>Link not found</code>.</p>
<p>If we run our tests, they should now fail:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Shortbread (252ms)
    Test submitting a URL
      ✓ should return the shortened URL (47ms)
    Test following a URL
      1) should redirect the user to the shortened URL
    Test following a non-existent-link
      2) should return a 404 error
Stopping the server


  2 passing (322ms)
  2 failing

  1) server Test following a URL should redirect the user to the shortened URL:
     Uncaught AssertionError: expected undefined to equal &#39;http://www.google.com&#39;
      at Request._callback (/Users/matthewdaly/Projects/url-shortener/test/test.js:63:58)
      at Request.self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:372:22)
      at Request.emit (events.js:98:17)
      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:1310:14)
      at Request.emit (events.js:117:20)
      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:1258:12)
      at IncomingMessage.emit (events.js:117:20)
      at _stream_readable.js:943:16
      at process._tickCallback (node.js:419:13)

  2) server Test following a non-existent-link should return a 404 error:
     Uncaught AssertionError: expected &#39;Cannot GET /nonexistenturl\n&#39; to include &#39;Link not found&#39;
      at Request._callback (/Users/matthewdaly/Projects/url-shortener/test/test.js:80:33)
      at Request.self.callback (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:372:22)
      at Request.emit (events.js:98:17)
      at Request.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:1310:14)
      at Request.emit (events.js:117:20)
      at IncomingMessage.&lt;anonymous&gt; (/Users/matthewdaly/Projects/url-shortener/node_modules/request/request.js:1258:12)
      at IncomingMessage.emit (events.js:117:20)
      at _stream_readable.js:943:16
      at process._tickCallback (node.js:419:13)



=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 29/29 ), 3 ignored
Branches     : 100% ( 6/6 ), 1 ignored
Functions    : 100% ( 3/3 )
Lines        : 100% ( 29/29 )
================================================================================
&gt;&gt;
Warning: Task &quot;mocha_istanbul:coverage&quot; failed. Use --force to continue.

Aborted due to warnings.
</code></pre>
<p>Now, let’s add our final route:</p>
<pre><code class="lang-javascript">// Define link route
app.route(&#39;/:id&#39;).all(function (req, res) {
    // Get ID
    var id = req.params.id.trim();

    // Look up the URL
    client.get(id, function (err, reply) {
        if (!err &amp;&amp; reply) {
            // Redirect user to it
            res.status(301);
            res.set(&#39;Location&#39;, reply);
            res.send();
        } else {
            // Confirm no such link in database
            res.status(404);
            res.render(&#39;error&#39;);
        }
    });
});
</code></pre>
<p>We accept the ID as a parameter in the URL. We trim off any whitespace around it, and then we query Redis for a URL with that ID. If we find one, we set the status code to 301, and the location to the URL, and send the response. Otherwise, we set the status to 404 and render the error view.</p>
<p>Now, let’s check it passes:</p>
<pre><code class="lang-bash">$ grunt test
Running &quot;jshint:all&quot; (jshint) task
&gt;&gt; 2 files lint free.

Running &quot;mocha_istanbul:coverage&quot; (mocha_istanbul) task
Listening on port 5000


  server
Starting the server
    Test the index route
      ✓ should return a page with the title Shortbread (90ms)
    Test submitting a URL
      ✓ should return the shortened URL (47ms)
    Test following a URL
      ✓ should redirect the user to the shortened URL
    Test following a non-existent-link
      ✓ should return a 404 error
Stopping the server


  4 passing (191ms)

=============================================================================
Writing coverage object [/Users/matthewdaly/Projects/url-shortener/coverage/coverage.json]
Writing coverage reports at [/Users/matthewdaly/Projects/url-shortener/coverage]
=============================================================================

=============================== Coverage summary ===============================
Statements   : 100% ( 38/38 ), 3 ignored
Branches     : 100% ( 10/10 ), 1 ignored
Functions    : 100% ( 5/5 )
Lines        : 100% ( 38/38 )
================================================================================
&gt;&gt; Done. Check coverage folder.

Done, without errors.
</code></pre>
<p>Excellent! Our URL shortener is now complete. From here, deploying it to Heroku is straightforward - you’ll need to install the Redis to Go addon, and refer to Heroku’s documentation on deploying Node.js applications for more details.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>You’ll find the source for this application <a href="https://github.com/matthewbdaly/Shortbread">here</a> and a demo <a href="http://shortbread-example.herokuapp.com/">here</a>.</p>
<p>I hope you’ve enjoyed this brief introduction to Redis, and that it’s opened your eyes to at least one of the alternatives out there to a relational database. I’ll hopefully be able to follow this up with examples of some other problems Redis is ideal for solving.</p>
]]></description>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>codeigniter | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/codeigniter/</link>
        <description>codeigniter | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 04 Nov 2018 18:43:02 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2018</copyright>
        <item>
            <title><![CDATA[Forcing SSL in CodeIgniter]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/06/23/forcing-ssl-in-codeigniter/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/06/23/forcing-ssl-in-codeigniter/</guid>
            <pubDate>Sat, 23 Jun 2018 12:03:28 GMT</pubDate>
            <description><![CDATA[<p>I haven’t started a new CodeIgniter project since 2014, and don’t intend to, but on occasion I’ve been asked to do maintenance work on legacy CodeIgniter projects. This week I was asked to help out with a situation where a CodeIgniter site was being migrated to HTTPS and there were issues resulting from the migration.</p>
<p>Back in 2012, when working on my first solo project, I’d built a website using CodeIgniter that used HTTPS, but also needed to support an affiliate marketing system that did not support it, so certain pages had to force HTTP, and others had to force HTTPS, so I’d used the hook system to create hooks to enforce this. This kind of requirement is unlikely to reoccur now because HTTPS is becoming more prevalent, but sometimes it may be easier to enforce HTTPS at application level than in the web server configuration or using htaccess. It’s relatively straightforward to do that in CodeIgniter.</p>
<p>The first step is to create the hook. Save this as <code>application/hooks/ssl.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">force_ssl</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    $CI =&amp; get_instance();</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    $CI-&gt;config-&gt;config[<span class="hljs-string">'base_url'</span>] = str_replace(<span class="hljs-string">'http://'</span>, <span class="hljs-string">'https://'</span>, $CI-&gt;config-&gt;config[<span class="hljs-string">'base_url'</span>]);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">if</span> ($_SERVER[<span class="hljs-string">'SERVER_PORT'</span>] != <span class="hljs-number">443</span>) redirect($CI-&gt;uri-&gt;uri_string());</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-meta">?&gt;</span></td></table></code></pre>
<p>Next, we register the hook. Update <code>application/configs/hooks.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span>  <span class="hljs-keyword">if</span> ( ! defined(<span class="hljs-string">'BASEPATH'</span>)) <span class="hljs-keyword">exit</span>(<span class="hljs-string">'No direct script access allowed'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">/*</td><tr><td class="linenos" data-pseudo-content="3"></td><td>| -------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="4"></td><td>| Hooks</td><tr><td class="linenos" data-pseudo-content="5"></td><td>| -------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="6"></td><td>| This file lets you define "hooks" to extend CI without hacking the core</td><tr><td class="linenos" data-pseudo-content="7"></td><td>| files.  Please see the user guide for info:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>|</td><tr><td class="linenos" data-pseudo-content="9"></td><td>|    http://codeigniter.com/user_guide/general/hooks.html</td><tr><td class="linenos" data-pseudo-content="10"></td><td>|</td><tr><td class="linenos" data-pseudo-content="11"></td><td>*/</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>$hook[<span class="hljs-string">'post_controller_constructor'</span>][] = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                                <span class="hljs-string">'function'</span> =&gt; <span class="hljs-string">'force_ssl'</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                                <span class="hljs-string">'filename'</span> =&gt; <span class="hljs-string">'ssl.php'</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                                <span class="hljs-string">'filepath'</span> =&gt; <span class="hljs-string">'hooks'</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                                );</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-comment">/* End of file hooks.php */</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-comment">/* Location: ./application/config/hooks.php */</span></td></table></code></pre>
<p>This tells CodeIgniter that it should looks in the <code>application/hooks</code> directory for a file called <code>ssl.php</code>, and return the function <code>force_ssl</code>.</p>
<p>Finally, we enable hooks. Update <code>application/config/config.php</code>:</p>
<pre><code class="hljs lang-php singleline">$config[<span class="hljs-string">'enable_hooks'</span>] = <span class="hljs-keyword">TRUE</span>;</code></pre>
<p>If you only want to force SSL in production, not development, you may want to amend the <code>ssl.php</code> file to only perform the redirect in non-development environments, perhaps by using an environment variable via DotEnv.</p>
]]></description>
        </item>
    </channel>
</rss>
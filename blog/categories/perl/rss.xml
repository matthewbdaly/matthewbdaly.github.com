<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>perl | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/perl/</link>
        <description>perl | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Wed, 11 Mar 2020 22:14:34 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2020</copyright>
        <item>
            <title><![CDATA[Deleting unwanted Vim swap files using Perl]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/10/29/deleting-unwanted-vim-swap-files-using-perl/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/10/29/deleting-unwanted-vim-swap-files-using-perl/</guid>
            <pubDate>Fri, 29 Oct 2010 19:49:49 GMT</pubDate>
            <description><![CDATA[<p>Yesterday I realised that I had somehow managed to scatter Vim swap files all across the Dropbox folder I use to share Perl and Python scripts I’d written between several computers, and it would be a good idea to clear them up. I didn’t like the idea of using grep to search for them and manually deleting them, so I decided this was the ideal opportunity to write a Perl script to do it for me!</p>
<p>I came up with the following:</p>
<pre><code class="lang-perl">#!/usr/bin/perl -w

use strict;
use Cwd;

sub searchDir
{
    # Subroutine to scan a directory looking for Vim swap files
    # Get directory to read and current directory
    my $readdir = shift;
    my $startdir = cwd();

    # Change directory to the target one
    chdir($readdir) or die &quot;Unable to open $readdir! $!\n&quot;;
    print &quot;Scanning contents of directory $startdir\n&quot;;

    # Open the directory and grab the names of all the files and folders in it
    opendir(DIR, &quot;.&quot;) or die &quot;Unable to open current directory! $!\n&quot;;
    my @entries = readdir(DIR) or die &quot;Unable to read directory! $!\n&quot;;
    closedir(DIR);

    # Loop through the files and folders in the directory
    foreach my $entry (@entries)
    {
        # Skip this one and the one above it in the filesystem hierarchy
        next if($entry eq &quot;.&quot;);
        next if($entry eq &quot;..&quot;);

        # If a file is a directory, call the searchDir subroutine recursively in order to scan it
        if(-d $entry)
        {
            searchDir($entry);
            next;
        }

        # Use a regular expression to check to see if the current file starts with a period, and ends with .swp - if it does, it&#39;s a Vim swap file
        if($entry =~ m/^\..*\.swp$/)
        {
            # Inform the user that a Vim swap file has been found and print out the path to it
            print &quot;Found a Vim swap file!\n&quot;;
            my $swppath = cwd();
            print &quot;It&#39;s the file $entry in $swppath.\n&quot;;
            my $fullpath = $swppath . &quot;/&quot; . $entry;
            print &quot;The full path is $fullpath.\n&quot;;

            # Prompt the user to delete the file
            print &quot;Do you wish to delete this file? (Y/N)\t&quot;;
            chomp(my $reply = );
            if($reply =~ m/y/i)
            {
                print &quot;Deleting $fullpath...\n&quot;;
                unlink($fullpath);
            }
        }
    }

    chdir($startdir);
}

# Get directory to begin the search
print &quot;Enter directory to start search: &quot;;
chomp(my $beginSearch = );

# call searchDir to start the search
searchDir($beginSearch);
</code></pre>
<p>Thankfully, I’ve now discovered the <a href="https://wordpress.org/extend/plugins/preserve-code-formatting/">Preserve Code Formatting plugin</a> for WordPress, which seems to do a good job at making the code look presentable!</p>
<p>This isn’t perfect - it uses recursion to examine subdirectories, and when I ran it on my /home folder it somehow wound up in /sys on my Ubuntu machine and I ended up getting a deep recursion warning (a little research suggests this happens when it goes over 100 directories in). However, it seems to work fine for scanning individual folders in my /home directory, and that’s all I really wanted anyway.</p>
<p>I love how Perl makes writing this kind of simple script so easy. It’s a great language for that kind of systems administration task.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[A couple of things I love about Perl]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/10/27/a-couple-of-things-i-love-about-perl/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/10/27/a-couple-of-things-i-love-about-perl/</guid>
            <pubDate>Tue, 26 Oct 2010 23:15:33 GMT</pubDate>
            <description><![CDATA[<p>In the time that I’ve been learning Perl, I’ve slowly grown to appreciate the strengths of the language more and more. There’s two things in particular that I like about Perl. Once that I really don’t think anyone is going to be surprised by is CPAN. It’s a fantastic resource - there are a huge quantity of Perl modules available for virtually any task under the sun, and they’re incredibly useful.</p>
<p>The other is just how good the documentation is - I’ve never considered myself to be someone who learns terribly well from Unix man pages, but perldoc seems to have very good documentation indeed, including that for CPAN modules. Also, it helps that if you don’t do well with the man page format, you have the option of running podwebserver and getting the documentation formatted as web pages.</p>
<p>To give an example, I’m particularly interested in all kinds of network programming, be it web development, IRC, Jabber or whatever, and I’d heard of the Net::IRC module so I decided to start using it to create a simple IRC bot (yes, I know I should really be using POE::Component::IRC instead!). Using the information gleaned from perldoc Net::IRC it was easy to get started writing a bot, and I’ve now come up with the following simple bot:</p>
<pre><code class="lang-perl">#!/usr/bin/perl -w

use strict;
use Net::IRC;

my $irc = new Net::IRC;
my $nick = &quot;mattsbot&quot;;
my $server = &quot;irc.freenode.net&quot;;
my $channel = &quot;#botpark&quot;;
my $port = 6667;
my $ircname = &quot;My wonderful bot&quot;;
my $owner = &quot;mattbd&quot;; 

sub on_connect
{
   my $self = shift;

   print &quot;Joining $channel\n&quot;;
   $self-&gt;join($channel);
   $self-&gt;privmsg($channel,&quot;Ready to go!&quot;);
}

sub on_disconnect
{
    my $self = shift;
    $self-&gt;join($channel);
    $self-&gt;privmsg($channel, &quot;Sorry about that - dropped out for a sec.&quot;);
} 

sub on_join
{
    # Get the connection and event objects
    my ($conn, $event) = @_;

    # Get the nick that just joined
    my $newnick = $event-&gt;{nick};

    # Greet the new nick
    $conn-&gt;privmsg($channel, &quot;Hello, $newnick! I&#39;m a greeting bot!&quot;);
}

sub on_msg
{
    # Get the connection and event objects
    my ($conn, $event) = @_;

    # Get nick of messaging user
    my $messager = $event-&gt;{nick};

    # Respond negatively
    $conn-&gt;privmsg($messager, &quot;Sorry, I&#39;m just a bot. Please don&#39;t message me!&quot;);
}

sub on_public
{
    # Get the connection and event objects
    my ($conn, $event) = @_;

    # Get nick of messaging user
    my $messager = $event-&gt;{nick};

    # Get text of message
    my $text = $event-&gt;{args}[0];

    # Check to see if text contains name of bot - if so message the user negatively
    if($text =~ m/$nick/)
    {
        $conn-&gt;privmsg($channel, &quot;Sorry, $messager,I&#39;m just a simple bot!&quot;);
    }
}

my $conn = $irc-&gt;newconn(Nick =&gt;$nick,Server=&gt;$server,Port=&gt;$port,Ircname=&gt;$ircname);
$conn-&gt;add_global_handler(&#39;376&#39;, \&amp;on;_connect);
$conn-&gt;add_global_handler(&#39;disconnect&#39;, \&amp;on;_disconnect);
$conn-&gt;add_global_handler(&#39;msg&#39;, \&amp;on;_msg);
$conn-&gt;add_global_handler(&#39;join&#39;, \&amp;on;_join);
$conn-&gt;add_global_handler(&#39;msg&#39;, \&amp;on;_msg);
$conn-&gt;add_global_handler(&#39;public&#39;, \&amp;on;_public);
$irc-&gt;start();
</code></pre>
<p>Now, this bot isn’t exactly hugely capable - all it does is greet new joiners, and tell you to leave it alone if you try to talk to it, but it was pretty easy to code it, thanks to the documentation, and it’s a good base to build on. From here, it’s easy to extend the on_public and on_msg subroutines to deal with other messages - for instance, I could use a regular expression to look for “!respond” in the text of the message and if it’s found, respond with any appropriate text.</p>
<p>I’ve hard-coded the appropriate details into the script in this case to make it quicker and easier to test it, but it would be trivial to change it to either accept settings passed as arguments from the command line, or have it grab these from a separate text file.</p>
<p>My initial doubts about Perl are really wearing off. It’s a powerful language and one that, now I’ve picked up the basic syntax, I’m having little trouble getting work done with. </p>
]]></description>
        </item>
        <item>
            <title><![CDATA[I passed!]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/10/19/i-passed/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/10/19/i-passed/</guid>
            <pubDate>Tue, 19 Oct 2010 13:52:55 GMT</pubDate>
            <description><![CDATA[<p>Just a short post to say that today I did my CIW Perl Fundamentals exam, and passed it. Glad that’s out of the way!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Another Perl snippet...]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/10/16/another-perl-snippet/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/10/16/another-perl-snippet/</guid>
            <pubDate>Sat, 16 Oct 2010 20:11:10 GMT</pubDate>
            <description><![CDATA[<p>Here’s another simple Perl program I thought I’d share. It’s a very simple app for recording notes from the shell. As pasting the last one into WordPress didn’t work too well, <a href="http://dl.dropbox.com/u/5031/notable.pl">it’s on my Dropbox account</a> instead. I’ve used SQLite as the backend for the database (a no-brainer - I really like SQLite for little quick-and-dirty scripts like this) and it works pretty well.</p>
<p>At some point I may go back to this basic concept and expand on it a little - it would make sense to add a GUI to it, either by using a graphical toolkit such as Tk or turning it into a web app. I also like the idea of adapting it to use a non-relational database - something like CouchDB perhaps.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Getting work done with Perl]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/10/15/getting-work-done-with-perl/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/10/15/getting-work-done-with-perl/</guid>
            <pubDate>Fri, 15 Oct 2010 19:39:10 GMT</pubDate>
            <description><![CDATA[<p>After my initial struggles with Perl, I now think I’m really starting to get to grips with the language. I generally find it a pain when you have to learn by building small but basically useless scripts - I always do best when building something useful.</p>
<p>As one of the exercises for my studies I had to open a database connection to a Microsoft Access database, but I wanted to do the exercise in Ubuntu (I’ve always preferred using Unix-like operating systems for programming, and thanks to apt-get it’s a lot less grief installing additional libraries and modules as you need them) and couldn’t get Perl to connect to the database properly, so I resolved to export it to either MySQL or SQLite.</p>
<p>I was able to export it to MySQL in the end using mdbtools, but I wasn’t entirely happy with the end result. I resorted to re-exporting the data as a CSV file, then resolved to write a small Perl script to read the file, parse it using a regular expression to obtain the necessary information, then insert it into a new SQLite database.</p>
<p>Here’s what I came up with:</p>
<pre><code class="lang-perl">#!/usr/bin/perl -w

use strict;
use DBI;

my $db = &quot;dbi:SQLite:backend.db&quot;;

if (!(-e &quot;backend.db&quot;))
{
   print &quot;Database does not exist. Creating it...&quot;;

   # Create the database
   my $dbh = DBI-&gt;connect($db) or die &quot;Error in connecting to database! $DBI::errstr&quot;;
   my $createdb = $dbh-&gt;do(&quot;CREATE TABLE CARS( ID INTEGER PRIMARY KEY, YEAR INTEGER, MAKE VARCHAR(30), MODEL VARCHAR(30), COLOR VARCHAR(30), PRICE INTEGER);&quot;);
   $dbh-&gt;disconnect();
}

open(READFILE, &quot;cartable.csv&quot;);

while()
{
   unless($_ =~ m/id,/)
   {
      m/\d+\,(\d{4})\,\&quot;(\w+)\&quot;\,\&quot;(\w+)\&quot;\,\&quot;(\w+)\&quot;\,\&quot;(\d+)\&quot;/;
      my $year = $1;
      my $make = $2;
      my $model = $3;
      my $color = $4;
      my $price = $5;

      my $dbh2 = DBI-&gt;connect($db) or die &quot;Error in connecting to database! $DBI::errstr&quot;;
      my $insertdb = $dbh2-&gt;do(&quot;INSERT INTO CARS (YEAR, MAKE, MODEL, COLOR, PRICE) VALUES (\&quot;$year\&quot;, \&quot;$make\&quot;, \&quot;$model\&quot;, \&quot;$color\&quot;, \&quot;$price\&quot;);&quot;);
      $dbh2-&gt;disconnect;
   }
}
close(READFILE);

print &quot;Write completed!\n&quot;;
print &quot;To demonstrate it works, we&#39;ll run a SELECT query against the database...\n&quot;;

# Read the database
my $readdb = DBI-&gt;connect($db);
my $dbselect = $readdb-&gt;prepare(&quot;SELECT * FROM CARS;&quot;);
$dbselect-&gt;execute;

# Print the results
print &quot;ID\tYear\tMake\tModel\tColor\tPrice\n&quot;;
while(my @row = $dbselect-&gt;fetchrow_array)
{
   print &quot;$row[0]\t$row[1]\t$row[2]\t$row[3]\t$row[4]\t$row[5]\n&quot;;
}

# Close the connection
$readdb-&gt;disconnect;
</code></pre>
<p>Apologies for the fact that the indentation doesn’t seem to have copied across from Vim very well (can anyone recommend a good WordPress plugin for displaying code, none of the ones I’ve tried seem to be any good?). It works well, and it’s also helped me grasp Perl’s database API better.</p>
<p>I think I’ve got a better idea now of what Python and Perl are best at and when to use each. Perl is a great language, but the fact that a lot of it is implicit makes it a little harder to pick up at first than Python - for instance, the default variable, which is quite a good idea, but takes a little getting used to. Its regex support is great, and I like the database API, but I would find it a lot harder to do any object-oriented programming in Perl than in Python (which I guess is why <a href="http://www.iinteractive.com/moose/">Moose</a> exists). I’ve found Perl very useful for quick and dirty scripts and as a glue language, but for longer scripts Python seems the better choice.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Perl after Python]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/08/16/perl-after-python/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/08/16/perl-after-python/</guid>
            <pubDate>Mon, 16 Aug 2010 20:50:57 GMT</pubDate>
            <description><![CDATA[<p>I’m currently studying for the CIW Web Developer qualification, and having passed the exams for database design and JavaScript, I’m now on to the third component, Perl. I figured that having already picked up a reasonable grasp of another scripting language (namely Python), that I would have no trouble picking up Perl quickly, as happened when I learned JavaScript.</p>
<p>Unfortunately, it hasn’t quite worked out as well as I’d hoped so far, and in a number of ways. First of all, it doesn’t seem to “fit your brain” quite as easily as Python does - I find that the significant number of non-alphanumeric characters used makes it less intuitive than Python, at least for me. I’m also not a great fan of the syntax - in particular, I really am not keen on the syntax used for object-oriented programming. In general I’m finding it a struggle to pick up many things I learned quite quickly in Python.</p>
<p>That said, Perl has plenty of awesome features. CPAN has a staggering number of modules available, and makes it very easy to install them. And of course, its support for regular expressions is second to none. Don’t get me wrong, it’s a language I really want to know better and be able to use well, but I am finding it quite hard going compared to Python.</p>
<p>I strongly suspect, however, that it may well be, at least in part, because I learned Python first and my brain is used to the Pythonic way of doing things, therefore I’m having to unlearn those habits for Perl. Has anyone else learned Python first and then struggled to pick up Perl, or is it just me? Does learning Python first predispose you to finding Perl more difficult?</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Moving on to Perl]]></title>
            <link>https://matthewdaly.co.uk/blog/2010/06/23/moving-on-to-perl/</link>
            <guid>https://matthewdaly.co.uk/blog/2010/06/23/moving-on-to-perl/</guid>
            <pubDate>Wed, 23 Jun 2010 12:41:29 GMT</pubDate>
            <description><![CDATA[<p>I’m glad to report that today I passed my CIW JavaScript Fundamentals exam with 98%! I was a bit concerned about this as some of the questions on the practice exam were downright wrong (as in the supposedly correct answers were in fact wrong), but thankfully this turned out not to be the case for the actual exam.</p>
<p>Next step is learning Perl. I’m particularly interested to learn more about Perl because it’s something you can get a lot of use out of - it can be used for regular expressions, general Unix scripting and web development, and I’m interested to see how it compares to Python.</p>
]]></description>
        </item>
    </channel>
</rss>
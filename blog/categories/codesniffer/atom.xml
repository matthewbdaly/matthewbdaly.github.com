<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>codesniffer | Matthew Daly&apos;s Blog</title>
    <updated>2020-03-11T22:14:34Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/codesniffer/"/>
    <subtitle>codesniffer | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2020</rights>
    <entry>
        <title type="html"><![CDATA[Writing a custom sniff for PHP CodeSniffer]]></title>
        <id>https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/</id>
        <link href="https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/">
        </link>
        <updated>2019-01-13T18:50:45Z</updated>
        <summary type="html"><![CDATA[<p>I’ve recently come around to the idea that <a href="https://matthiasnoback.nl/2018/09/final-classes-by-default-why/">in PHP all classes should be final by default</a>, and have started doing so as a matter of course. However, when you start doing something like this it’s easy to miss a few files that haven’t been updated, or forget to do it, so I wanted a way to detect PHP classes that are not set as either abstract or final, and if possible, set them as final automatically. I’ve mentioned before that I use PHP CodeSniffer extensively, and that has the capability to both find and resolve deviations from a coding style, so last night I started looking into the possibility of creating a coding standard for this. It took a little work to understand how to do this so I thought I’d use this sniff as a simple example.</p>
<p>The first part is to set out the directory structure. There’s a very specific layout you have to follow for PHP CodeSniffer:</p>
<ul>
<li>The folder for the standard must have the name of the standard, and be in the source folder set by Composer (in this case, <code>src/AbstractOrFinalClassesOnly</code>.</li>
<li>This folder must contain a <code>ruleset.xml</code> file defining the name and description of the standard, and any other required content.</li>
<li>Any defined sniffs must be in a <code>Sniffs</code> folder.</li>
</ul>
<p>The <code>ruleset.xml</code> file was fairly simple in this case, as this is a very simple standard:</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;ruleset name=&quot;AbstractOrFinalClassesOnly&quot;&gt;
    &lt;description&gt;Checks all classes are marked as either abstract or final.&lt;/description&gt;
&lt;/ruleset&gt;
</code></pre>
<p>The sniff is intended to do the following:</p>
<ul>
<li>Check all classes have either the <code>final</code> keyword or the <code>abstract</code> keyword set</li>
<li>When running the fixer, make all classes without the <code>abstract</code> keyword final</li>
</ul>
<p>First of all, our class must implement the interface <code>PHP_CodeSniffer\Sniffs\Sniff</code>, which requires the following methods:</p>
<pre><code class="lang-php">    public function register(): array;

    public function process(File $file, $position): void;
</code></pre>
<p>Note that <code>File</code> here is an instance of <code>PHP_CodeSniffer\Files\File</code>. The first method registers the code the sniff should operate on. Here we’re only interested in classes, so we return an array containing <code>T_CLASS</code>. This is defined in the <a href="https://secure.php.net/manual/en/tokens.php">list of parser tokens used by PHP</a>, and represents classes and objects:</p>
<pre><code class="lang-php">    public function register(): array
    {
        return [T_CLASS];
    }
</code></pre>
<p>For the <code>process()</code> method, we receive two arguments, the file itself, and the position. We need to keep a record of the tokens we check for, so we do so in a private property:</p>
<pre><code class="lang-php">    private $tokens = [
        T_ABSTRACT,
        T_FINAL,
    ];
</code></pre>
<p>Then, we need to find the error:</p>
<pre><code class="lang-php">        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
        }
</code></pre>
<p>We use <code>$file</code> to get the token before <code>class</code>, and pass the <code>$tokens</code> property as a list of acceptable values. If the preceding token is not either <code>abstract</code> or <code>final</code>, we add a fixable error. The first argument is the string error message, the second is the location, and the third is the class of the sniff that has failed.</p>
<p>That will catch the issue, but won’t actually fix it. To do that, we need to get the fixer from the file object, and call its <code>addContent()</code> method to add the <code>final</code> keyword. We amend <code>process()</code> to extract the fixer, add it as a property, and then call the <code>fix()</code> method when we come across a fixable error:</p>
<pre><code class="lang-php">    public function process(File $file, $position): void
    {
        $this-&gt;fixer = $file-&gt;fixer;
        $this-&gt;position = $position;

        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
            $this-&gt;fix();
        }
    }
</code></pre>
<p>Then we define the <code>fix()</code> method:</p>
<pre><code class="lang-php">    private function fix(): void
    {
        $this-&gt;fixer-&gt;addContent($this-&gt;position - 1, &#39;final &#39;);
    }
</code></pre>
<p>Here’s the finished class:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types=1);

namespace Matthewbdaly\AbstractOrFinalClassesOnly\Sniffs;

use PHP_CodeSniffer\Sniffs\Sniff;
use PHP_CodeSniffer\Files\File;

/**
 * Sniff for catching classes not marked as abstract or final
 */
final class AbstractOrFinalSniff implements Sniff
{
    private $tokens = [
        T_ABSTRACT,
        T_FINAL,
    ];

    private $fixer;

    private $position;

    public function register(): array
    {
        return [T_CLASS];
    }

    public function process(File $file, $position): void
    {
        $this-&gt;fixer = $file-&gt;fixer;
        $this-&gt;position = $position;

        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
            $this-&gt;fix();
        }
    }

    private function fix(): void
    {
        $this-&gt;fixer-&gt;addContent($this-&gt;position - 1, &#39;final &#39;);
    }
}
</code></pre>
<p>I’ve made the resulting standard <a href="https://github.com/matthewbdaly/abstract-or-final-sniff">available via Github</a>.</p>
<p>This is a bit rough and ready and I’ll probably refactor it a bit when I have time. In addition, it’s not quite displaying the behaviour I want as it should, since ideally it should only be looking for the <code>abstract</code> and <code>final</code> keywords in classes that implement an interface. However, it’s proven fairly easy to create this sniff, except for the fact I had to go rooting around various tutorials that weren’t all that clear. Hopefully this example is a bit simpler and easier to follow.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Catching debug statements in PHP]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/11/06/catching-debug-statements-in-php/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/11/06/catching-debug-statements-in-php/">
        </link>
        <updated>2017-11-06T12:00:18Z</updated>
        <summary type="html"><![CDATA[<p>It’s unfortunately quite easy to neglect to remove debugging statements in PHP code. I’ve done so many times myself, and it’s not unknown for these to wind up in production. After I saw it happen again recently, I decided to look around for a way to prevent it happening.</p>
<p><a href="/blog/2017/03/15/enforcing-a-coding-standard-with-php-codesniffer/">As mentioned earlier</a>, I generally use PHP CodeSniffer to enforce a coding standard on my projects, and it’s easy to set it up and run it. With a little work, you can also use it to catch these unwanted debugging statements before they get committed.</p>
<p>First, you need to make sure <code>squizlabs/php_codesniffer</code> is included in your project’s development dependencies in <code>composer.json</code>. Then, create a <code>phpcs.xml</code> file that looks something like this:</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;ruleset name=&quot;PHP_CodeSniffer&quot;&gt;
    &lt;description&gt;Coding standard.&lt;/description&gt;
    &lt;file&gt;src&lt;/file&gt;
    &lt;arg value=&quot;np&quot;/&gt;
    &lt;rule ref=&quot;PSR2&quot;/&gt;
    &lt;rule ref=&quot;Squiz.Commenting.FunctionComment&quot; /&gt;
    &lt;rule ref=&quot;Squiz.Commenting.FunctionCommentThrowTag&quot; /&gt;
    &lt;rule ref=&quot;Squiz.Commenting.ClassComment&quot; /&gt;
    &lt;rule ref=&quot;Generic.PHP.ForbiddenFunctions&quot;&gt;
        &lt;properties&gt;
            &lt;property name=&quot;forbiddenFunctions&quot; type=&quot;array&quot; value=&quot;eval=&gt;NULL,dd=&gt;NULL,die=&gt;NULL,var_dump=&gt;NULL,sizeof=&gt;count,delete=&gt;unset,print=&gt;echo,create_function=&gt;NULL&quot;/&gt;
        &lt;/properties&gt;
    &lt;/rule&gt;
&lt;/ruleset&gt;
</code></pre>
<p>The key is the rule <code>Squiz.PHP.ForbiddenFunctions</code>. This allows us to define a list of functions that are forbidden in our project. Typically this will be things like <code>die()</code>, <code>eval()</code>, <code>var_dump()</code> and <code>dd()</code>.</p>
<p>Now, this ruleset will catch the unwanted functions (as well as enforcing PSR2 and certain rules about comments), but we can’t guarantee that we’ll always remember to run it. We could run CodeSniffer in continuous integration (and this is a good idea anyway), but that doesn’t stop us from committing code with those forbidden functions. We need a way to ensure that CodeSniffer runs on every commit and doesn’t allow it to go ahead if it fails. To do that we can use a pre-commit hook. Save the following in your repository as <code>.git/hooks/pre-commit</code>:</p>
<pre><code class="lang-bash">vendor/bin/phpcs
</code></pre>
<p>Then run the following command to make it executable:</p>
<pre><code class="lang-bash">$ chmod +x .git/hooks/pre-commit
</code></pre>
<p>A pre-commit hook is run before every commit, and if it returns false, will not allow the commit to go ahead. That means that if CodeSniffer fails for any reason, we will have to go back and fix the problem before we can commit. If for some reason you do need to bypass this check, you can still do so by using the <code>--no-verify</code> flag with <code>git commit</code>.</p>
<p>The advantage of this method is that it’s not dependent on any one IDE or editor, so it’s widely applicable. However, if you’re doing this sort of thing with Git hooks, you may want to look at some of the solutions for managing hooks, since <code>.git/hooks</code> is outside the actual Git repository.</p>
]]></summary>
    </entry>
</feed>
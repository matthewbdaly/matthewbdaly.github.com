<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>programming | Matthew Daly&apos;s Blog</title>
    <updated>2018-02-25T13:24:59Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/programming/"/>
    <subtitle>programming | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Yet another tutorial for building a blog using Python and Django - Part 1]]></title>
        <id>https://matthewdaly.co.uk/blog/2012/02/24/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-1/</id>
        <link href="https://matthewdaly.co.uk/blog/2012/02/24/yet-another-tutorial-for-building-a-blog-using-python-and-django-part-1/">
        </link>
        <updated>2012-02-24T16:17:10Z</updated>
        <summary type="html"><![CDATA[<p>While I’m extremely fond of Perl for quick hacks and scripts, and have used PHP a fair amount for web development purposes (both on its own and with the CodeIgniter framework), there is one language I love above all others, and that’s Python. I’ve found that, when compared to PHP or Perl, at least for me, it’s a lot easier to “get into the zone” when programming in Python, the code I produce tends to be a lot more readable and easier to follow, and the interactive interpreter makes it really easy to figure out what’s going on in a way that just isn’t possible with PHP or Perl. Also, Python was always designed to be an object-oriented language, and IMHO has a better object model than either Perl or PHP.</p>
<p>While it would be fair to say that Python doesn’t have a single web development framework that monopolises developer’s attention the way Rails does for Ruby programmers, Django is undoubtedly the best-known Python framework. It’s solid, easy to use, and has the best documentation of any web development framework I’ve ever seen (don’t get me wrong, CodeIgniter in particular has very good documentation, but Django’s is exceptional).</p>
<p>In this tutorial, we’re going to build a very simple blogging engine using Django. In its initial stages, it will be an extremely simple web app - we won’t bother with comments, tags, categories or multiple users , or any of the other niceties of a fully-fledged blogging engine. Instead, we will build a very basic Tumblr-style blogging engine, capable of publishing blog posts and very little else. As time goes by, we can add further functionality to this and build it up into a more capable blogging solution.</p>
<p>So, let’s get started. Go to the <a href="https://www.djangoproject.com/">Django project website</a> and download the latest release (NOTE: as at time of writing this was 1.3.1, but we’re now up to 1.4.3 as at 14 January 2013, and some changes have been made to Django’s structure). Follow the installation instructions given there, and you should be ready to go. Note that from here on, I’m assuming you’re using a Unix-like operating system such as a Linux distro or Mac OS X - if you’re using Windows, there’s a few extra steps you’ll have to take, such as installing Python, and some of the commands you use may be different.</p>
<p>Once Django is installed, find a suitable folder in which to store your new Django project (perhaps a Projects folder in your home directory might be a good place). Note that Django includes its own development server, so you don’t need to install a full LAMP stack like you would if you were developing in PHP. Then, from the folder you want to store your project in, run the following command:</p>
<pre><code class="hljs lang-bash singleline">django-admin.py startproject DjangoB<span class="hljs-built_in">log</span></code></pre>
<p>This will create a brand-new directory containing all the files you need for your new Django project. If you now cd into this directory, you should see manage.py, as well as a folder called DjangoBlog containing the files <code>__init__.py</code>, <code>settings.py</code> and <code>urls.py</code>.</p>
<p>Let’s go through what these files do. First of all, there’s <code>__init__.py</code> - don’t worry about this, it’s a blank file and you don’t need to touch it.</p>
<p>Next, manage.py contains a number of extremely useful commands that you will find handy when using Django. You’re unlikely to need to edit it, but you’ll use it a lot.</p>
<p>Next, settings.py is the settings for the web app you’re building. It will specify details like what Django applications you’re using, what timezone you’re in, your database connection details and so on. You’ll need to edit this, so open it up in your favourite text editor.</p>
<p>Look for a line that reads “DATABASES”. Under here you’ll notice the following line:</p>
<pre><code class="hljs lang-python singleline">      <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.'</span>, <span class="hljs-comment"># Add 'postgresql_psycopg2',     'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></code></pre>
<p>You can use pretty much any relational database you like with Django, and because it uses its own Object-Relational Mapping (ORM), it generates the SQL needed for you, taking into account any quirks in that particular database engine. It therefore doesn’t really matter what database you use, and it’s easy to swap them out. For development purposes, we’ll use SQLite as it ships with Python and requires less configuration, so change this line to read as follows:</p>
<pre><code class="hljs lang-python singleline">      <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.sqlite3'</span>, <span class="hljs-comment"># Add 'postgresql_psycopg2',     'postgresql', 'mysql', 'sqlite3' or 'oracle'.</span></code></pre>
<p>Next you’ll see this line:</p>
<pre><code class="hljs lang-python singleline">      <span class="hljs-string">'NAME'</span>: <span class="hljs-string">''</span>,                      <span class="hljs-comment"># Or path to database file if using sqlite3.</span></code></pre>
<p>It really doesn’t matter what you call the file. I tend to call mine backend.db, as follows:</p>
<pre><code class="hljs lang-python singleline">        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'backend.db'</span>,                      <span class="hljs-comment"># Or path to database file if using sqlite3.</span></code></pre>
<p>If you keep going down, you’ll notice <code>TIME_ZONE</code> and <code>LANGUAGE_CODE</code>. You may wish to change these from their default settings (I change mine to <code>Europe/London</code> for <code>TIME_ZONE</code> and <code>en-gb</code> for <code>LANGUAGE_CODE</code>).</p>
<p>Even further down, you’ll notice the <code>INSTALLED_APPS</code> section. Django distinguishes between a project and an application - while a project will normally be a single website, an application will be a set of functionality within that website. For instance, our blog will be a single application, but we could reuse that application on multiple projects. Django also includes a number of applications out of the box - for instance, the flatpages and admin applications can be used together if you wanted to use Django to build a simple CMS, without having to build a new application at all.</p>
<p>For now, we don’t need to add any new applications, so let’s save the changes we’ve made to settings.py and move on to urls.py. This handles directing any incoming HTTP requests to the appropriate place to deal with them. It uses simple regular expressions to evaluate the incoming requests, and maps them to specific view functions. Note that it already includes URLs for the admin functionality, but these are commented out by default.</p>
<p>Exit urls.py and head back to the main directory for your project. Now, we need to test that everything works OK. Run the following command:</p>
<pre><code class="hljs lang-bash singleline">python manage.py runserver</code></pre>
<p>Remember I said that the manage.py script had a lot of useful functions? This is one of them. Django has its own simple web server so you don’t have to faff around setting up Apache just for development purposes, and this launches it. If you go to <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, you should see a screen telling you that Django is running.</p>
<p>Now, you can stop the server for now using <kbd>Ctrl-C</kbd>, and we’ll start work on your new app. Run the following command to create your new app:</p>
<pre><code class="hljs lang-bash singleline">python manage.py startapp blogengine</code></pre>
<p>Again, note that you used manage.py to do this. There should now be a directory called blogengine in your project. Move into it, and you should find that it contains four files - <code>__init__.py</code>, <code>models.py</code>, <code>tests.py</code> and <code>views.py</code>. Again, <code>__init__.py</code> can be safely ignored, and <code>tests.py</code> can also be left alone, but <code>models.py</code> and <code>views.py</code> deserve closer examination.</p>
<p>If you haven’t used an MVC framework before, then you’ll need this explaining. MVC stands for Model-View-Controller, and it describes a method of logically separating out code for a web application to make it easier to work with. Models represent the data held by the application, views represent what end-users see of the application, and controllers represent the logic that ties the two together.</p>
<p>Django uses a slightly unusual interpretation of MVC. The models work exactly the same as they do in other frameworks, but the logic is handled by the view, and the presentation is handled by templates. Compared to more conventional MVC frameworks such as CodeIgniter, Django’s views are more like controllers, and its templates are more like views. Django is therefore often described as an MTV framework (Model-Template-View), instead of an MVC one.</p>
<p>So, to create our blog, we first need to create a model to describe the data. Edit models.py so it looks like the following:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    title = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    pub_date = models.DateTimeField()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    text = models.TextField()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">return</span> self.title</td></table></code></pre>
<p>To activate our new app, we also need to include it under INSTALLED_APPS in settings.py:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'blogengine'</span>,</code></pre>
<p>In Django, you create your models as Python classes, which makes it very easy to grasp. Here, a blog post is an object, and it has a title, a publication date, and some text. Note that Post here inherits from models.Model, and has specific types of field that map to field types in the database table. For instance, models.CharField obviously maps to a VARCHAR field in the database, and TextField maps to a TEXT field. You can actually see the SQL that will generate the database table for this model by returning to the project’s main directory and running python manage.py sqlall blogengine:</p>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">BEGIN</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">"blogengine_post"</span> (</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"id"</span> <span class="hljs-built_in">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">"title"</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">"pub_date"</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">"text"</span> <span class="hljs-built_in">text</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">COMMIT</span>;</td></table></code></pre>
<p>Note the “id” field. You didn’t add this - by default, Django will create an id field in any new table, and will make this the primary key in that database table. You can, however, override this behaviour if you wish. Here it’s exactly what we want so we’ll stick with it for now.</p>
<p>Also note the <strong>unicode</strong> method. This represents a string that describes that object. Here the title of a blog post seems the most logical way of describing it, so we return the object’s title.</p>
<p>Now that we’ve got our model set up, how do we get the information into it? For a blog post, all of the information will be submitted by the user, so we need to set up some kind of administrative interface. Fortunately, one of Django’s killer features is the admin interface that ships with it. This makes it really quick and easy to get certain kinds of sites up and running.</p>
<p>First of all, we need to activate the admin application. Head up to settings.py and uncomment the line that reads:</p>
<pre><code class="hljs lang-python singleline">    <span class="hljs-string">'django.contrib.admin'</span>,</code></pre>
<p>Save it, then head for urls.py and uncomment the following lines:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># from django.contrib import admin</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment"># admin.autodiscover()</span></td></table></code></pre>
<p>And:</p>
<pre><code class="hljs lang-python singleline">   <span class="hljs-comment"># url(r'^admin/', include(admin.site.urls)),</span></code></pre>
<p>Now, in order for the admin interface to be able to set up new blog posts, you need to also register it. In the blogengine directory containing your app, create a new file called admin.py, and fill it out with the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>admin.site.register(models.Post)</td></table></code></pre>
<p>Once that’s done, return to the project directory and run this command to create the database tables you need:</p>
<pre><code class="hljs lang-bash singleline">python manage.py syncdb</code></pre>
<p>You’ll get asked for some information to set up your user account - remember it as you’ll need it to log into the admin interface. Once that’s done, run python manage.py runserver again, and return to <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a> again. You should be confronted with a 404 page - that’s fine, that’s exactly what we should be seeing. You’ll note that the message states that Django tried the ^admin/ path without success - what this means is that this is the only URL pattern in urls.py at the moment, and the path you entered didn’t match this.</p>
<p>If you change the URL in the browser to <a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a>, you should get a login screen. Enter the username and password you set when you ran syncdb and click Log in. You should now see Django’s admin interface, with Posts available, and an Add and Change dialogue visible next to it. If you want to add a few blog posts, just to have some data to work with, go ahead. Note that for the Date and Time dialogues, Django automatically adds the Today and Now shortcuts.</p>
<p>So, our model is now sorted and we have some data in the web app. The next step is to write our views. You’ll notice that the blogengine app contains a file called views.py - open this up and enter the following code:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># Create your views here.</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render_to_response</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> blogengine.models <span class="hljs-keyword">import</span> Post</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getRecentPosts</span><span class="hljs-params">(request)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-comment"># Get all blog posts</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    posts = Post.objects.all()</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment"># Sort posts into chronological order</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    sorted_posts = posts.order_by(<span class="hljs-string">'-pub_date'</span>)</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment"># Display all the posts</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">return</span> render_to_response(<span class="hljs-string">'posts.html'</span>, { <span class="hljs-string">'posts'</span>:sorted_posts})</td></table></code></pre>
<p>Let’s go through this code. The first line imports the render_to_response method, which is used to render a template. The second line imports the Post model.</p>
<p>Next, we define the getRecentPosts view. For simplicity’s sake, we aren’t going to bother about pagination for the moment, so we’ll just get all the posts. The view is written as a Python function, and we pass it the request object as the sole parameter.</p>
<p>Next, we get all of the Post objects, using Post.objects.all(), and assign it to a list called posts. As we want these to be in reverse chronological order, we then reorder them by pub_date (note the - sign at the beginning to denote reverse order) and assign the result to sorted_posts. Finally, we load the posts.html template and pass through sorted_posts as the value in a dictionary called posts.</p>
<p>With our view done, we now need to produce a template for it. Head back up to your main project directory and create a new folder called templates. Then, go into settings.py and find the line marked TEMPLATE_DIRS. Inside the brackets, underneath the comments, add the full, absolute path to the new templates folder, as in this example:</p>
<pre><code class="hljs lang-bash singleline">  <span class="hljs-string">"/Users/matthewdaly/Development/Python/Django/blog/templates"</span></code></pre>
<p>You’ll have to change this to the full, absolute path on your machine. This will tell Django to look for the templates in that folder. Now, go into templates, and create a new file called posts.html. Enter the following text into it:</p>
<pre><code class="hljs lang-django"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Django Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">for</span></span> post <span class="hljs-keyword">in</span> posts %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ post.title }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">{{ post.pub_date }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        </span><span class="hljs-template-variable">{{ post.text }}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        </span><span class="hljs-template-tag">{% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %}</span><span class="xml"></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></td></table></code></pre>
<p>Most of this is just plain old HTML, but you’ll notice that {% %} denotes tags that can include some logic (such as a for loop in this case), and {{ }} denotes a variable. Remember that in the view we passed through a dictionary containing all of the Post objects, and here we’re iterating through all of those post objects, outputting their title, publication date and text content.</p>
<p>With this done, we need to configure the routes to call the getRecentPosts view when someone visits the home page. Open urls.py again and add the following code underneath where you enabled the admin, but still inside the parentheses:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment"># Home page</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    url(<span class="hljs-string">r''</span>, <span class="hljs-string">'blogengine.views.getRecentPosts'</span>),</td></table></code></pre>
<p>Now, this is a very simple regular expression. Here, this is our default page, so we leave the single quotes after the r empty. We then specify that this URL should be handled by the getRecentPosts function, inside views.py, in the blogengine application.</p>
<p>Save that, and start up the development server again with python manage.py runserver. Then, if you haven’t already added a few test posts, do so via the admin interface. Then open <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>, and you should see your blog posts.</p>
<p>So, we now have the beginnings of a blogging application! We’ll leave it here for now, and will go on to add functionality like viewing individual posts and pagination later. We’ll also look into adding further functionality to our blog, such as supporting multiple authors, tagging posts, and adding flat pages.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[So you REALLY don't know regular expressions?]]></title>
        <id>https://matthewdaly.co.uk/blog/2012/01/29/so-you-really-dont-know-regular-expressions/</id>
        <link href="https://matthewdaly.co.uk/blog/2012/01/29/so-you-really-dont-know-regular-expressions/">
        </link>
        <updated>2012-01-29T19:52:53Z</updated>
        <summary type="html"><![CDATA[<p>Ever since I started my new job, I’ve noticed a curious phenomenon. I work with two wonderfully gifted programmers who both know PHP much better than I do, and I learn something new from them all the time. However, neither one of them really knows or uses regular expressions.</p>
<p>Now, as I learned Perl before I learned PHP, naturally I learned regular expressions quite early on in that process. In Perl, regular expressions are a huge part of the language - you simply cannot get away without learning them to some extent as they are used extensively in so many parts of the language.</p>
<p>Apparently I’m not the only one to notice this. Here’s a quote I found on Stack Exchange:</p>
<blockquote>
<p>In earlier phases of my career (ie. pre-PHP), I was a Perl guru, and one major aspect of Perl gurudom is mastery of regular expressions.</p>
<p>On my current team, I’m literally the only one of us who reaches for regex before other (usually nastier) tools. Seems like to the rest of the team they’re pure magic. They’ll wheel over to my desk and ask for a regex that takes me literally ten seconds to put together, and then be blown away when it works. I don’t know–I’ve worked with them so long, it’s just natural at this point.</p>
<p>In the absence of regex-fluency, you’re left with combinations of flow-control statements wrapping strstr and strpos statements, which gets ugly and hard to run in your head. I’d much rather craft one elegant regex than thirty lines of plodding string searching.</p>
</blockquote>
<p>While I would hesitate to call myself a Perl guru (at best I would call myself intermediate with Perl), I would say I know enough about regular expressions that I can generally get useful work done with them.</p>
<p>Take the following example in Perl (edited somewhat as it didn’t play nice with TinyMCE):</p>
<pre><code class="hljs lang-perl"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$fruit = <span class="hljs-string">"apple,banana,cherry"</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">print</span> $fruit;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>@fruit = <span class="hljs-keyword">split</span>(<span class="hljs-regexp">/,/</span>,$fruit);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">foreach</span>(@fruit)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">print</span> $_.<span class="hljs-string">"\n"</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td>apple,banana,cherry</td><tr><td class="linenos" data-pseudo-content="9"></td><td>apple</td><tr><td class="linenos" data-pseudo-content="10"></td><td>banana</td><tr><td class="linenos" data-pseudo-content="11"></td><td>cherry</td></table></code></pre>
<p>Now, this code should be fairly easy to understand, even if you don’t really know Perl. $fruit is a string containing “apple,banana,cherry”. The split() function takes two arguments, a regular expression defining the character(s) that are used to separate the parts of the string you want to put into an array, and the string you want to split. This returns the array @fruit, which consists of three strings, “apple’, “banana”, and “cherry”.</p>
<p>In PHP, you can do pretty much the same thing, using the explode() function:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>$fruit = <span class="hljs-string">"apple,banana,cherry"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">echo</span> $fruit.<span class="hljs-string">"\n"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$fruitArray = explode(<span class="hljs-string">","</span>,$fruit);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">foreach</span>($fruitArray <span class="hljs-keyword">as</span> $fruitArrayItem)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">echo</span> $fruitArrayItem.<span class="hljs-string">"\n"</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-meta">?&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>apple,banana,cherry</td><tr><td class="linenos" data-pseudo-content="11"></td><td>apple</td><tr><td class="linenos" data-pseudo-content="12"></td><td>banana</td><tr><td class="linenos" data-pseudo-content="13"></td><td>cherry</td></table></code></pre>
<p>As you can see, they work in pretty much the same way here. Both return basically the same output, and the syntax for using the appropriate functions for splitting the strings is virtually identical.</p>
<p>However, it’s once things get a bit more difficult that it becomes obvious how much more powerful regular expressions are. Say you’re dealing with a string that’s similar to that above, but may use different characters to separate the elements. For instance, say you’ve obtained the data that you want to pass through into an array from a text file and it’s somewhat inconsistent - perhaps the information you want is separated by differing amounts and types of whitespace, or different characters. The explode() function simply won’t handle that (at least, not without a lot of pain). But with Perl’s split() function, that’s no problem. Here’s how you might deal with input that had different types and quantities of whitespace as a separator:</p>
<pre><code class="hljs lang-perl singleline">@fruit = <span class="hljs-keyword">split</span>(<span class="hljs-regexp">/\s+/</span>,$fruit);</code></pre>
<p>Yes, it’s that simple! The \s metacharacter matches any type of whitespace, and the + modifier means that it will match one or more times. Now you can very easily convert the contents of that string into an array.</p>
<p>Or say you want to convert an entire string of text, with all kinds of punctuation and whitespace, into an array, but only keep the actual words. This wouldn’t be practical with explode(), but with split() it’s easy:</p>
<pre><code class="hljs lang-perl singleline">@fruit = <span class="hljs-keyword">split</span>(<span class="hljs-regexp">/\W+/</span>,$fruit);</code></pre>
<p>The \W metacharacter matches any non-word character (ie anything other than a-z, A-Z or 0-9), and again the + modifier means that it will match one or more times.</p>
<p>And of course, regular expressions are useful for many more tasks than this that, while possible with most language’s existing string functions, can get very nasty quite quickly. Say you want to match a UK postcode to check that it’s valid (note that for the sake of simplicity, I’m going to ignore BFPO and GIR postcodes). These use a format of one or two letters, followed by one digit, then may have an additional digit or letter, then a space, then a digit, then two letters. This would be a nightmare to check using most language’s native string functions, but with a regex in Perl, it’s relatively simple:</p>
<pre><code class="hljs lang-perl"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">my</span> $postcode = <span class="hljs-string">"NR1 1NP"</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">if</span>($postcode =~ <span class="hljs-regexp">m/^[a-zA-Z]{1,2}\d{1}(|[a-zA-Z0-9]{1})(|\s+)\d{1}\w{2}$/</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">print</span> <span class="hljs-string">"It matched!\n"</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>}</td></table></code></pre>
<p>And if you wanted to return the first part of the postcode if it matched as well, that’s simple too:</p>
<pre><code class="hljs lang-perl"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">my</span> $postcode = <span class="hljs-string">"NR1 1NP"</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">if</span>($postcode =~ <span class="hljs-regexp">s/^([a-zA-Z]{1,2}\d{1}(|[a-zA-Z0-9]{1}))(|\s+)\d{1}\w{2}$/$1/</span>)</td><tr><td class="linenos" data-pseudo-content="3"></td><td>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">print</span> <span class="hljs-string">"It matched! $postcode\n"</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>}</td></table></code></pre>
<p>Now, you may say “But that’s in Perl! I’m using PHP!’. Well, regular expressions are an extremely powerful part of PHP that are very useful, they’re just not as central to the language as they are in Perl. PHP actually has two distinct types of regular expressions - POSIX-extended regular expressions, and Perl-compatible regular expressions (or PCRE). However, POSIX-extended regular expressions were deprecated from PHP 5.3 onwards, so it’s not really worth taking the time to learn them when PCRE will do exactly the same thing and is going to be around for the future. Furthermore, most other programming languages also support Perl-compatible regular expressions, so they’re fairly portable between languages, and once you’ve learned them in one language, you can easily use them in another. In other words, if you learn how to work with regular expressions in Perl, you can very easily transfer that knowledge to most other programming languages that support regular expressions.</p>
<p>In the first example given above, we can replace explode() with preg_split, and the syntax is virtually identical to split() in Perl, with the only difference being the name of the function and that the pattern to match is wrapped in double quotes:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>$fruit = <span class="hljs-string">"apple,banana,cherry"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">echo</span> $fruit.<span class="hljs-string">"\n"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$fruitArray = preg_split(<span class="hljs-string">"/,/"</span>,$fruit);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">foreach</span>($fruitArray <span class="hljs-keyword">as</span> $fruitArrayItem)</td><tr><td class="linenos" data-pseudo-content="6"></td><td>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">echo</span> $fruitArrayItem.<span class="hljs-string">"\n"</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-meta">?&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>apple,banana,cherry</td><tr><td class="linenos" data-pseudo-content="11"></td><td>apple</td><tr><td class="linenos" data-pseudo-content="12"></td><td>banana</td><tr><td class="linenos" data-pseudo-content="13"></td><td>cherry</td></table></code></pre>
<p>Along similar lines, if we want to check if a string matches a pattern, we can use preg_match(), and if we want to search and replace, we can use preg_replace(). PHP’s regular expression support is not appreciably poorer than Perl’s, even if it’s less central to the language as a whole.</p>
<blockquote>
<p>But regular expressions are slower than PHP’s string functions!</p>
</blockquote>
<p>Yes, that’s true. So it’s a mistake to use regular expressions for something that can be handled quickly and easily using string functions. For instance, if in the following string you wanted to replace the word “cow” with “sheep”:</p>
<blockquote>
<p>The cow jumped over the moon</p>
</blockquote>
<p>You could use something like this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>$text = <span class="hljs-string">"The cow jumped over the moon"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$text = preg_replace(<span class="hljs-string">"/cow/"</span>,<span class="hljs-string">"sheep"</span>,$text);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-meta">?&gt;</span></td></table></code></pre>
<p>However, because here you are only looking to match literal characters, you don’t need to use a regular expression. Just use the following:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>$text = str_replace(<span class="hljs-string">"cow"</span>,<span class="hljs-string">"sheep"</span>,$text);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta">?&gt;</span></td></table></code></pre>
<p>But, if you have to do some more complex pattern matching, you have to start using strpos to get the location of specific characters and returning substrings between those characters, and it gets very messy, very quickly indeed. In those cases, while I haven’t done any kind of benchmarking on it, it stands to reason that quite quickly you’ll reach a point where a regex would be faster.</p>
<p>However, for a number of common tasks, such as validating email addresses and URLs, there’s another way and you don’t need to resort to regular expressions, or faffing about with loads of string functions. The filter_var() function can be used for validating or sanitising email addresses and URLs, among other things, so this is worth using instead of writing a regex. If you’re using a framework such as CodeIgniter, you may have access to its native functions for validating this kind of thing, so you should use those instead.</p>
<blockquote>
<p>But regular expressions are ugly and make for less readable code!</p>
</blockquote>
<p>Not really. They seem intimidating to the newcomer, and very few people can just glance at a regex and instantly know what it does. But with regexes, you can often do complex things in far fewer lines of code than would be needed to accomplish the same thing using just PHP’s string functions. If you can do something in a line or two using string functions, it’s probably best to do that. But after that, things go downhill very quickly.</p>
<p>Once you learn them, regular expressions really are not that hard, and you’ll probably find enough things to use them for that you’ll get plenty of practice at them. They’re certainly more readable to anyone with even a modicum of experience using them than line after line of flow-control statements.</p>
<blockquote>
<p>But you shouldn’t be using regular expressions for parsing HTML or XML!</p>
</blockquote>
<p>Quite true. Regular expressions are the wrong tool for that. You should probably use an existing library of some kind for that.</p>
<blockquote>
<p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p>
</blockquote>
<p>Ah, yes, surely one of the most misused quotes on the web! Again, regular expressions are not the right tool for every job, and there’s a lot of tasks they get used for, and quite frankly, shouldn’t be. Most of us who know regular expressions have been known to use them for things we probably shouldn’t (I actually only just stumbled across filter_var, so I’ve done my share of validating email addresses using regexes, and I’m as guilty as anyone else of overusing them). But there’s still plenty of stuff you should use it for when what you need to do can’t be accomplished quickly and easily using string functions.</p>
<p>Regular expressions are not inherently evil. They’re a tool like any other. What is bad is using them for things where a simple alternative exists. However, they are still extremely useful, and there’s plenty of valid use cases for them.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github]]></title>
        <id>https://matthewdaly.co.uk/blog/2012/01/13/github/</id>
        <link href="https://matthewdaly.co.uk/blog/2012/01/13/github/">
        </link>
        <updated>2012-01-13T19:25:20Z</updated>
        <summary type="html"><![CDATA[<p>To date, Subversion is the single versioning system I have the most experience with. I use it at work, and I was already somewhat familiar with it beforehand. However, with all the buzz over Git over the last few years, it’s always been tempting to explore that as an alternative.</p>
<p>I’ve had a Github account for over a year, but had as yet not added anything to it. However, today that changed. I’ve had a rather haphazard approch towards my .vimrc and other Vim configuration files for a while, with the result that they tend to be less than consistent across different machines. I’ve seen that a fair number of people put their Vim configuration files under version control, and that seemed like an effective solution, so I’ve gotten my .vimrc and .vim into a respectable state and added them to <a href="https://github.com/matthewbdaly/My-vim-configuration">a new repository</a>. Now I should have no excuse for letting them get out of sync.</p>
<p>I have to say, Github is a truly wonderful service. The tutorials for getting started with Git are really good, and make it easy to get started. It’s probably one of the main reasons why Git is becoming more and more popular- there isn’t really anything comparable for Subversion.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[What makes a good programming textbook?]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/08/22/what-makes-a-good-programming-textbook/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/08/22/what-makes-a-good-programming-textbook/">
        </link>
        <updated>2010-08-22T16:15:28Z</updated>
        <summary type="html"><![CDATA[<p>I own a lot of programming textbooks. I went through a long phase of buying ones about virtually any technology I was even remotely interested in, therefore I own loads of books about Perl, Ruby, Python, PHP and C, among others. Granted, with many of them I’ve done little more than flick through them (I find it’s hard to get round to learning things like that without some kind of plan, which was what made me eventually start doing a more formal course since it forced a plan on me), but I’ve seen quite a few.</p>
<p>But of course, not every textbook is equal. Some are great, truly seminal works that are raved about by well-known programmers. Examples include the Camel book (Programming Perl) and K &amp; R (The C Programming Language). Others are rarely mentioned. But what makes a really good textbook? Here I’m going to list some of the attributes that I’ve found in my favourite and most effective programming texts, and that I think make for a good, effective and informative textbook that makes a good job of getting you up and running programming in a new language:</p>
<ul>
<li><strong>Lots of working examples to enter</strong> - To learn to program, whether from scratch or in a brand new language, the best advice I’ve ever heard was that you need to read a lot of code, and write a lot of code. I find that, at least at the start, nothing helps me learn to code in a new language better than lots of examples for me to type in and run, in order to pick up the basic syntax and keywords of the language. After all, that’s how many people used to learn BASIC, by typing in listings from magazines, and it’s how you learn English as a child - you’re exposed to the language, and you copy it, then understanding comes later. One of the best examples of this is C for Dummies, All In One Desktop Reference, by Dan Godkin - it’s packed full of loads of great example programs to enter and run that demonstrate the basic concepts well in C.</li>
</ul>
<ul>
<li><strong>Maintains your interest by showing you how to do interesting things</strong> - Not many people are interested in learning a new programming language to do something tedious (that said, if someone already has to do something tedious, such as a task at work, teaching them how to write a program to do it for them may well be considerably more interesting for them than doing the task themselves, hence the popularity of scripting languages for automating dull tasks), so a good programming textbook needs to show the learner how to do something interesting. Games are an obvious example, but they can get a bit much - how many different versions of Hangman do people want to create? Simple web apps are also an option with many programming languages. If something needs to be more utilitarian, then if possible it should be genuinely useful for solving a problem (the programmer doesn’t necessarily need to have this problem, they just need to see how to create a program to fix it). Frivolous little scripts that do things like recite “99 Bottles of Beer” to demonstrate for loops have their place, but that place is near the start only - by the end a programmer wants to be able to write useful programs.</li>
</ul>
<ul>
<li><strong>Good exercises to stretch the reader </strong>- Many textbooks will have additional exercises for the reader at the end of each chapter that allow them to practice their skills and ensure they aren’t just copying a listing, but are genuinely capable of writing code from scratch in the language. These are effectively the “homework” assignments, and I’ve found that these can be far more important at teaching me how to use the language well for actual programming projects than the listings within the book.</li>
</ul>
<p>These are my thoughts, but I’d be interested to read what other people think about this issue. What’s the best programming textbook you’ve ever used, and why do you like it? What do you think a good programming textbook should have?</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Perl after Python]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/08/16/perl-after-python/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/08/16/perl-after-python/">
        </link>
        <updated>2010-08-16T20:50:57Z</updated>
        <summary type="html"><![CDATA[<p>I’m currently studying for the CIW Web Developer qualification, and having passed the exams for database design and JavaScript, I’m now on to the third component, Perl. I figured that having already picked up a reasonable grasp of another scripting language (namely Python), that I would have no trouble picking up Perl quickly, as happened when I learned JavaScript.</p>
<p>Unfortunately, it hasn’t quite worked out as well as I’d hoped so far, and in a number of ways. First of all, it doesn’t seem to “fit your brain” quite as easily as Python does - I find that the significant number of non-alphanumeric characters used makes it less intuitive than Python, at least for me. I’m also not a great fan of the syntax - in particular, I really am not keen on the syntax used for object-oriented programming. In general I’m finding it a struggle to pick up many things I learned quite quickly in Python.</p>
<p>That said, Perl has plenty of awesome features. CPAN has a staggering number of modules available, and makes it very easy to install them. And of course, its support for regular expressions is second to none. Don’t get me wrong, it’s a language I really want to know better and be able to use well, but I am finding it quite hard going compared to Python.</p>
<p>I strongly suspect, however, that it may well be, at least in part, because I learned Python first and my brain is used to the Pythonic way of doing things, therefore I’m having to unlearn those habits for Perl. Has anyone else learned Python first and then struggled to pick up Perl, or is it just me? Does learning Python first predispose you to finding Perl more difficult?</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Staying productive in summer]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/07/10/staying-productive-in-summer/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/07/10/staying-productive-in-summer/">
        </link>
        <updated>2010-07-10T00:21:20Z</updated>
        <summary type="html"><![CDATA[<p>Unless you live in the southern hemisphere, summer’s here. Right now it’s gone midnight but it’s still very hot, and being in the UK, where home air conditioning is not common, there’s little way to alleviate the heat besides opening the window (which you don’t want to do because people are continually having barbecues).</p>
<p>I have to admit to just not being a summer person - I don’t really like hot weather or outdoor pursuits in general. I’m happier in spring and autumn when it’s cool, but not cold, and I can wear my favourite Animal hoodie if it does turn chillier. When it gets hot I find it extremely difficult to get anything done unless I can do so in a fully air-conditioned environment, and have a lot of trouble sleeping at night, exacerbating the problem due to tiredness. Unfortunately, I’m now having to learn Perl from scratch during this time (a fairly daunting prospect at the best of times!), and it’s a bit of a nightmare trying to actually sit down and learn regular expressions properly when it’s hot and stuffy and you can’t think straight.</p>
<p>I’ll have to try going to a nice cool air-conditioned cafe with my Dell Mini, get a cold drink and see if I can get some work done that way. But I’m curious to know if anyone else has any good tips for remaining productive at learning a new programming language during hot weather that they’d like to pass on?</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why you should try Vim]]></title>
        <id>https://matthewdaly.co.uk/blog/2010/05/10/why-you-should-try-vim/</id>
        <link href="https://matthewdaly.co.uk/blog/2010/05/10/why-you-should-try-vim/">
        </link>
        <updated>2010-05-10T19:15:24Z</updated>
        <summary type="html"><![CDATA[<p>I’m a huge fan of the Vim text editor. I have the key bindings burned so deep into my head I keep reaching for the Escape key at work when I want to move around in a document in Microsoft Word, or hitting J to try and move down. In short, I’m incurably hooked on this wonderfully powerful text editor, and if you’re still using something like gedit, TextEdit, or (god forbid!) Notepad, then I want to get you to think hard about switching to Vim!</p>
<p>I first started using Vim nearly two years ago. At the time, I had a fair grasp of HTML, but hadn’t really gotten into programming as such. I had my Eee PC 2G Surf with me most of the time, but didn’t have regular access to the Internet, and didn’t have a full-sized laptop available for much of the time. The main text editor I’d used to date was Kate in KDE3.5.</p>
<p>One day I decided that, for lack of anything else to do, I was going to run through the Vim tutorial (accessed by entering <code>vimtutor</code>) in a terminal on my Eee PC. It was weird to start with, but I soon got used to the unusual-seeming key bindings. As a touch-typist, Vim worked really well for me since it meant I didn’t have to move my hands off the keyboard at all, and the arcane-sounding keys soon became second nature. When I started work on the Site Development Foundations part of my CIW Foundation course, naturally I used Vim, and it worked well for both HTML and CSS documents, and of course the more I used it the more proficient at it I became.</p>
<p>Then when I first started learning Python, Vim really came into its own. The syntax highlighting is a real help, it’s extremely fast to move around in and edit a document, and the autocompletion, while perhaps not quite as good as that in a language-specific IDE, was good enough for most purposes. I’ve since used Vim for coding in HTML, CSS, Python, JavaScript and C, as well as editing configuration files in various Unix-like operating systems, and it’s been an excellent editor for all of these. I’ve barely scratched the surface of what it can do, and I already couldn’t imagine using anything else.</p>
<p>So, why should you use Vim? Here are just a few of the reasons.</p>
<p><strong>Vim is everywhere</strong></p>
<p>If you’re running Mac OS X, a CLI-only version of Vim is included, and you can get a graphical version called MacVim as well if you need it. Most Linux distributions include either Vim or another vi clone by default, and if not it’s available from your distribution’s repositories. If you’re running another Unix flavour, again you almost certainly have Vim or another vi clone, and if not you can get one. And if you’re on Windows you can grab a copy too. If you use a text editor like Kate, gedit, or so on, then you can’t guarantee you can get it on other platforms. With Vim you can.</p>
<p>Also, the fact that Vim is a CLI application means that even if you have to edit something via SSH or Telnet, you still have access to a text editor you know well and can work just as well as you would with a GUI.</p>
<p><strong>Vim is flexible</strong></p>
<p>If you’re using Vim, you can rely on it to edit files in virtually any programming or markup language you like, making it easy to adapt. Learning Ruby? You can do it in Vim. Now you want to learn Java? Again, Vim will do the job. By allowing you to use a familiar environment for virtually any programming language you may want to learn, Vim means you’ll be productive quicker in a new language than you would be if you had to use a different text editor to the one you’ve used before.</p>
<p><strong>Vim is fast</strong></p>
<p>If you know how much faster touch-typing is than hunt-and-peck typing, then you’ll have some idea of why Vim is faster than regular typing. Because Vim uses the home row for navigation, and in general is designed so you move your fingers as little as possible, it’s faster than just about any other text editor you can name. The key bindings are deceptively simple to remember for the most part, as it’s your fingers that need to remember them, not you brain.</p>
<p>Vim doesn’t require the use of a mouse to navigate, nor does it require you to move your hand to the cursor keys. It also allows you to jump through a document as many times as you want - for instance, to go down 9 lines, you just enter <code>9j</code>. And it’s easy to search for specific words and navigate to them.</p>
<p><strong>Vim is easy to customise</strong></p>
<p>By editing your .vimrc configuration file, you can easily modify how Vim works for your own needs. You can easily change settings to suit your working habits better, such as setting it to work with a mouse, add line numbers, change the colour scheme for syntax highlighting, change the key bindings etc. Vim can also be extend by use of scripts and plugins. Once you have it set up the way you want, it’s easy to move all your settings to another computer.</p>
<p><strong>Vim always has a way to make things easier</strong></p>
<p>One of the best things about Vim is that, because it’s a solid, mature product, someone’s usually thought of a way to do whatever you want to do, quickly and easily. For instance, recently I was writing a JavaScript function to rate passwords for security, and I decided to get a list of bad passwords off the Web. I soon found one, but it was in excess of three thousand entries long, and I had to edit it to put them all into an array as individual strings, enclosed by quotes and separated by commas, ideally each on a line by themselves. This would have been an incredibly tedious task if I had to do it manually, so I did a little digging and discovered how to create a macro in Vim. This made it trivial to perform this task with only a few keypresses.</p>
<p><strong>Vim is tightly integrated with the command line</strong></p>
<p>Vim makes it easy to run other shell commands without leaving, by entering <code>:!</code>, followed by the command you want to run from the shell. This means it’s easy to run or compile a program you’ve just written without leaving Vim, so you don’t lose your place. When you’re done, you’re sent straight back into Vim, exactly where you left off.</p>
<p><strong>Vim behaves like a GUI application</strong></p>
<p>Yes, Vim may normally be a command-line application, but it still manages to pack in many of the niceties of graphical applications. You can split the screen horizontally or vertically, or open new files in new tabs. It’s even possible to use it with a mouse in most cases.</p>
<p>These are just a few of the reasons why I love Vim, and if you haven’t already tried it, or if you’re still using a less-powerful text editor, then I urge you to give it a go. Yes, the learning curve can be a bit steep, but it’s well worth it in terms of boosting your productivity. It works well for hand-coding HTML and CSS, or for programming in almost any language you can think of. You can get started today - if you’re using Linux or Mac OS X, it’s almost certainly already there waiting for you, and on Windows it’s just a download away. Try launching the tutorial by entering <code>vimtutor</code> in the shell, and work through it, and you’ll find yourself getting used to it surprisingly quickly. Or why not try <a href="http://cream.sourceforge.net/">Cream</a>, essentially a preconfigured version of Vim that has a shallower learning curve? If you use a text editor at all, you really should give Vim a try.</p>
]]></summary>
    </entry>
</feed>
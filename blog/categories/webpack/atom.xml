<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>webpack | Matthew Daly&apos;s Blog</title>
    <updated>2018-10-19T16:27:08Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/webpack/"/>
    <subtitle>webpack | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Creating a personal dashboard with React and Webpack]]></title>
        <id>https://matthewdaly.co.uk/blog/2016/08/15/creating-a-personal-dashboard-with-react-and-webpack/</id>
        <link href="https://matthewdaly.co.uk/blog/2016/08/15/creating-a-personal-dashboard-with-react-and-webpack/">
        </link>
        <updated>2016-08-15T22:18:00Z</updated>
        <summary type="html"><![CDATA[<p>The Raspberry Pi is a great device for running simple web apps at home on a permanent basis, and you can pick up a small touchscreen for it quite cheaply. This makes it easy to build and host a small personal dashboard that pulls important data from various APIs or RSS feeds and displays it. You’ll often see dashboards like this on Raspberry Pi forums and subreddits. As I’m currently between jobs, and have some time to spare before my new job starts, I decided to start creating my own version of it. It was obvious that React.js is a good fit for this as it allows you to break up your user interface into multiple independent components and keep the functionality close to the UI. It also makes it easy to reuse widgets by passing different parameters through each time.</p>
<p>In this tutorial I’ll show you how to start building a simple personal dashboard using React and Webpack. You can then install Nginx on your Raspberry Pi and host it from there. In the process, you’ll be able to pick up a bit of knowledge about Webpack and ECMAScript 2015 (using Babel). Our initial implementation will have only two widgets, a clock and a feed, but those should show you enough of the basics that you should then be able to build other widgets you may have in mind.</p>
<h2 id="installing-our-dependencies">Installing our dependencies</h2>
<p>First, let’s create our <code>package.json</code>:</p>
<pre><code class="hljs lang-bash singleline">$ npm init -y</code></pre>
<p>Then install the dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ npm install --save-dev babel-cli babel-register babel-core babel-eslint babel-loader babel-preset-es2015 babel-preset-react chai css-loader eslint eslint-loader eslint-plugin-react file-loader istanbul@^1.0.0-alpha.2 jquery jsdom mocha moment node-sass react react-addons-pure-render-mixin react-addons-test-utils react-dom react-hot-loader request sass-loader style-loader url-loader webpack webpack-dev-server</code></pre>
<p>Note that we need to install a specific version of Istanbul to get code coverage.</p>
<p>Next, we create our Webpack config. Save this as <code>webpack.config.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);  </td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-built_in">module</span>.exports = {  </td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attr">entry</span>: [</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      <span class="hljs-string">'webpack/hot/only-dev-server'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-string">"./js/app.js"</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    ],</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">'source-map'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attr">output</span>: {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-attr">path</span>: __dirname + <span class="hljs-string">'/static'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-attr">filename</span>: <span class="hljs-string">"bundle.js"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attr">module</span>: {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-attr">preLoaders</span>: [</td><tr><td class="linenos" data-pseudo-content="15"></td><td>          {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/(\.js$|\.jsx$)/</span>, </td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, </td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-attr">loader</span>: <span class="hljs-string">"eslint-loader"</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>          }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-attr">loaders</span>: [</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            { <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jsx?$/</span>, <span class="hljs-attr">loaders</span>: [<span class="hljs-string">'react-hot'</span>, <span class="hljs-string">'babel'</span>], <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span> },</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            { <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">'babel-loader'</span>},</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            { <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.woff2?$/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">"url-loader?limit=25000"</span> },</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            { <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(eot|svg|ttf)?$/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">"file-loader"</span> },</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            { <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/</span>, <span class="hljs-attr">loader</span>: <span class="hljs-string">"style!css!sass"</span> }</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        ]</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attr">eslint</span>: {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="hljs-attr">configFile</span>: <span class="hljs-string">'.eslintrc.yml'</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-attr">plugins</span>: [</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-keyword">new</span> webpack.HotModuleReplacementPlugin(),</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      <span class="hljs-keyword">new</span> webpack.NoErrorsPlugin()</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="36"></td><td>};</td></table></code></pre>
<p>Note the various loaders we’re using. We use ESLint to lint our Javascript files for code quality, and the build will fail if they do not match the required standards. We’re also using loaders for CSS, Sass, Babel (so we can use ES2015 for our Javascript) and fonts. Also, note the hot module replacement plugin - this allows us to reload the application automatically. If you haven’t used Webpack before, this config should be sufficient to get you started, but I recommend reading the <a href="https://webpack.github.io/">documentation</a>.</p>
<p>We also need to configure ESLint how we want. Here is the configuration we will be using, which should be saved as <code>.eslintrc.yml</code>:</p>
<pre><code class="hljs lang-yaml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attr">rules:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">  no-debugger:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">  no-console:</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">  no-unused-vars:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attr">  indent:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-attr">  quotes:</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-string">single</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-attr">  linebreak-style:</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-string">unix</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-attr">  semi:</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-number">2</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-bullet">    -</span> <span class="hljs-string">always</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-attr">env:</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-attr">  es6:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-attr">  browser:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-attr">  node:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-attr">extends:</span> <span class="hljs-string">'eslint:recommended'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-attr">parserOptions:</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-attr">  sourceType:</span> <span class="hljs-string">module</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-attr">  ecmaFeatures:</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-attr">    jsx:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td><span class="hljs-attr">    experimentalObjectRestSpread:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-attr">    modules:</span> <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td><span class="hljs-attr">plugins:</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td><span class="hljs-bullet">  -</span> <span class="hljs-string">react</span></td></table></code></pre>
<p>We also need a base HTML file. Save this as <code>index.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;!doctype html&gt;</span>  </td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>  </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Personal Dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></td></table></code></pre>
<p>We also need to set the commands for building and testing our app in <code>package.json</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  "scripts": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    "test": "istanbul cover _mocha -- --compilers js:babel-core/register --require ./test/setup.js 'test/**/*.@(js|jsx)'",</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    "test:watch": "npm run test -- --watch",</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    "start": "webpack-dev-server --progress --colors",</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    "build": "webpack --progress --colors"</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  "babel": {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    "presets": [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      "es2015",</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      "react"</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  },</td></table></code></pre>
<p>The <code>npm test</code> command will call Mocha to run the tests, but will also use Istanbul to generate test coverage. For the sake of brevity, our tests won’t be terribly comprehensive. The <code>npm start</code> command will run a development server, while <code>npm run build</code> will build our application.</p>
<p>We also need to create the <code>test/</code> folder and the <code>test/setup.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> jsdom <span class="hljs-keyword">from</span> <span class="hljs-string">'jsdom'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> chai <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">const</span> doc = jsdom.jsdom(<span class="hljs-string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">const</span> win = doc.defaultView;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>global.document = doc;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>global.window = win;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">window</span>).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> global)) {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    global[key] = <span class="hljs-built_in">window</span>[key];</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>});</td></table></code></pre>
<p>This sets up Chai and creates a dummy DOM for our tests. We also need to create the folder <code>js/</code> and the file <code>js/app.js</code>. You can leave that file empty for now.</p>
<p>If you now run <code>npm start</code> and navigate to <a href="http://localhost:8080/webpack-dev-server/">http://localhost:8080/webpack-dev-server/</a>, you can see the current state of the application.</p>
<h2 id="our-dashboard-component">Our dashboard component</h2>
<p>Our first React component will be a wrapper for all the other ones. Each of the rest of the components will be a self-contained widget that will populate itself without the need for a centralized data store like Redux. I will mention that Redux is a very useful library, and for larger React applications it makes a lot of sense to use it, but here we’re better off having each widget manage its own data internally, rather than have it be passed down from a single data store.</p>
<p>Save the following as <code>test/components/dashboard.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> TestUtils <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-test-utils'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> {findDOMNode} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> Dashboard <span class="hljs-keyword">from</span> <span class="hljs-string">'../../js/components/dashboard'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>describe(<span class="hljs-string">'Dashboard'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  it(<span class="hljs-string">'renders the dashboard'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> component = renderIntoDocument(</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dashboard</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"My Dashboard"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    const title = findDOMNode(component.refs.title);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    expect(title).to.be.ok;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    expect(title.textContent).to.contain('My Dashboard');</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="18"></td><td>}</span></td></table></code></pre>
<p>This tests that we can set the title of our dashboard component. Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td><tr><td class="linenos" data-pseudo-content="7"></td><td>module.js:327</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    throw err;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ^</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Error: Cannot find module <span class="hljs-string">'../../js/components/dashboard'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    at Function.Module._resolveFilename (module.js:325:15)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    at Function.Module._load (module.js:276:25)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    at Module.require (module.js:353:17)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    at require (internal/module.js:12:17)</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    at Object.&lt;anonymous&gt; (dashboard.js:4:1)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    at Module._compile (module.js:409:26)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    at loader (/home/matthew/Projects/personal-dashboard/node_modules/babel-register/lib/node.js:148:5)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    at Object.require.extensions.(anonymous <span class="hljs-keyword">function</span>) [as .js] (/home/matthew/Projects/personal-dashboard/node_modules/babel-register/lib/node.js:158:7)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    at Module.load (module.js:343:32)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    at Function.Module._load (module.js:300:12)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    at Module.require (module.js:353:17)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    at require (internal/module.js:12:17)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:220:27</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    at Array.forEach (native)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    at Mocha.loadFiles (/home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:217:14)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    at Mocha.run (/home/matthew/Projects/personal-dashboard/node_modules/mocha/lib/mocha.js:485:10)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    at Object.&lt;anonymous&gt; (/home/matthew/Projects/personal-dashboard/node_modules/mocha/bin/_mocha:403:18)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    at Module._compile (module.js:409:26)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    at Object.Module._extensions..js (module.js:416:10)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    at Object.Module._extensions.(anonymous <span class="hljs-keyword">function</span>) (/home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/hook.js:109:37)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    at Module.load (module.js:343:32)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    at Function.Module._load (module.js:300:12)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    at Function.Module.runMain (module.js:441:10)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    at runFn (/home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/<span class="hljs-built_in">command</span>/common/run-with-cover.js:122:16)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/<span class="hljs-built_in">command</span>/common/run-with-cover.js:251:17</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/istanbul/lib/util/file-matcher.js:68:16</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:52:16</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:361:13</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:52:16</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    at <span class="hljs-keyword">done</span> (/home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:246:17)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:44:16</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    at /home/matthew/Projects/personal-dashboard/node_modules/async/lib/async.js:358:17</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    at LOOP (fs.js:1530:14)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    at nextTickCallbackWith0Args (node.js:420:9)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    at process._tickCallback (node.js:349:13)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>Our dashboard file doesn’t exist. So let’s create it:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir js/components</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ touch js/components/dashboard.js</td></table></code></pre>
<p>And run our test again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components).</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    1) renders the dashboard</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>  0 passing (31ms)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  1 failing</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  1) Dashboard renders the dashboard:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at Context.&lt;anonymous&gt; (dashboard.js:11:23)</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td><tr><td class="linenos" data-pseudo-content="38"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>Now we have a failing test, we can create our component. Save this as <code>js/components/dashboard.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"dashboard"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"title"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td></table></code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ renders the dashboard</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  1 passing (50ms)</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td></table></code></pre>
<p>Our first component is in place. However, it isn’t getting loaded. We also need to start thinking about styling. Create the file <code>scss/style.scss</code>, but leave it blank for now. Then save this in <code>js/app.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> Dashboard <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/dashboard'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'../scss/style.scss'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>ReactDOM.render(</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dashboard</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"My Dashboard"</span> /&gt;</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  document.getElementById('view')</td><tr><td class="linenos" data-pseudo-content="9"></td><td>);</span></td></table></code></pre>
<p>Note that we’re importing CSS or Sass files in the same way as Javascript files. This is unique to Webpack, and while it takes a bit of getting used to, it has its advantages - if you import only the styles relating to each component, you can be sure there’s no orphaned CSS files. Here, we only have one CSS file anyway, so it’s a non-issue.</p>
<p>If you now run <code>npm start</code>, our dashboard gets loaded and the title is displayed. With our dashboard in place, we can now implement our first widget.</p>
<h2 id="creating-the-clock-widget">Creating the clock widget</h2>
<p>Our first widget will be a simple clock. This demonstrates changing the state of the widget on an interval. First let’s write a test - save this as <code>test/components/clockwidget.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> TestUtils <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-test-utils'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> {findDOMNode} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'../../js/components/clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>describe(<span class="hljs-string">'Clock Widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  it(<span class="hljs-string">'renders the clock widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-number">1465160300530</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">const</span> component = renderIntoDocument(</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ClockWidget</span> <span class="hljs-attr">time</span>=<span class="hljs-string">{currentTime}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    const time = findDOMNode(component.refs.time);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    expect(time).to.be.ok;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    expect(time.textContent).to.contain('Sunday');</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>});</span></td></table></code></pre>
<p>And create an empty file at <code>js/components/clockwidget.js</code>. Then we run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Clock Widget</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components).</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    1) renders the clock widget</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    ✓ renders the dashboard</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  1 passing (46ms)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  1 failing</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  1) Clock Widget renders the clock widget:</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>      at Context.&lt;anonymous&gt; (clockwidget.js:12:23)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>No coverage information was collected, <span class="hljs-built_in">exit</span> without writing coverage information</td><tr><td class="linenos" data-pseudo-content="41"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>With a failing test in place, we can create our component:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">'moment'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  getInitialState() {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      <span class="hljs-attr">time</span>: <span class="hljs-keyword">this</span>.props.time || moment()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> time = moment(<span class="hljs-keyword">this</span>.state.time).format(<span class="hljs-string">'dddd, Do MMMM YYYY, h:mm:ss a'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"clockwidget widget"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"widget-content"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"time"</span>&gt;</span>{time}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>});</td></table></code></pre>
<p>Note that the component accepts a property of <code>time</code>. The <code>getInitialState()</code> method then converts <code>this.props.time</code> into <code>this.state.time</code> so that it can be displayed on render. Note we also set a default of the current time using Moment.js.</p>
<p>We also need to update the dashboard component to load this new component:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"dashboard"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"title"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">ClockWidget</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>});</td></table></code></pre>
<p>Now, if you try running <code>npm start</code> and viewing the dashboard in the browser, you will see that it displays the current time and date, but it’s not being updated. You can force the page to reload every now and then, but we can do better than that. We can set an interval in which the time will refresh. As the smallest unit we show is seconds, this interval should be 1 second.</p>
<p>Amend the clock component as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">'moment'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  getInitialState() {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      <span class="hljs-attr">time</span>: <span class="hljs-keyword">this</span>.props.time || moment()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  tick() {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">this</span>.setState({</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-attr">time</span>: moment()</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  componentDidMount() {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">this</span>.interval = setInterval(<span class="hljs-keyword">this</span>.tick, <span class="hljs-number">1000</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  componentWillUnmount() {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    clearInterval(<span class="hljs-keyword">this</span>.interval);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">const</span> time = moment(<span class="hljs-keyword">this</span>.state.time).format(<span class="hljs-string">'dddd, Do MMMM YYYY, h:mm:ss a'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"clockwidget widget"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"widget-content"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"time"</span>&gt;</span>{time}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>});</td></table></code></pre>
<p>When our component has mounted, we set an interval of 1,000 milliseconds, and each time it elapses we call the <code>tick()</code> method. This method sets the state to the current time, and as a result the user interface is automatically re-rendered. On unmount, we clear the interval.</p>
<p>In this case we’re just calling a single function on a set interval. In principle, the same approach can be used to populate components in other ways, such as by making an AJAX request.</p>
<h2 id="creating-an-rss-widget">Creating an RSS widget</h2>
<p>Our next widget will be a simple RSS feed reader. We’ll fetch the content with jQuery and render it using React. We’ll also reload it regularly. First, let’s create our test:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> TestUtils <span class="hljs-keyword">from</span> <span class="hljs-string">'react-addons-test-utils'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> {findDOMNode} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">import</span> FeedWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'../../js/components/feedwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">import</span> {expect} <span class="hljs-keyword">from</span> <span class="hljs-string">'chai'</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">const</span> {renderIntoDocument, scryRenderedDOMComponentsWithClass, Simulate} = TestUtils;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>describe(<span class="hljs-string">'Feed Widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  it(<span class="hljs-string">'renders the Feed widget'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">const</span> url = <span class="hljs-string">"http://feeds.bbci.co.uk/news/rss.xml?edition=uk"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">const</span> component = renderIntoDocument(</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FeedWidget</span> <span class="hljs-attr">feed</span>=<span class="hljs-string">{url}</span> <span class="hljs-attr">size</span>=<span class="hljs-string">{5}</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">{60}</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    const feed = findDOMNode(component.refs.feed);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    expect(feed).to.be.ok;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    expect(feed.textContent).to.contain(url);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="19"></td><td>});</span></td></table></code></pre>
<p>Our feed widget will accept an external URL as an argument, and will then poll this URL regularly to populate the feed. It also allows us to specify the <code>size</code> attribute, which denotes the number of feed items, and the <code>delay</code> attribute, which denotes the number of seconds it should wait before fetching the data again.</p>
<p>We also need to amend the dashboard component to include this widget:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> FeedWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./feedwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"dashboard"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"title"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">ClockWidget</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">FeedWidget</span> <span class="hljs-attr">feed</span>=<span class="hljs-string">"http://feeds.bbci.co.uk/news/rss.xml?edition=uk"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">"60"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});</span></td></table></code></pre>
<p>If we then create <code>js/components/feedwidget.js</code> and run <code>npm test</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; personal-dashboard@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/personal-dashboard</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; istanbul cover _mocha -- --compilers js:babel-core/register --require ./<span class="hljs-built_in">test</span>/setup.js <span class="hljs-string">'test/**/*.@(js|jsx)'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Clock Widget</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ renders the clock widget (92ms)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Dashboard</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components). Check the render method of `dashboard`.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    1) renders the dashboard</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Feed Widget</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Warning: React.createElement: <span class="hljs-built_in">type</span> should not be null, undefined, boolean, or number. It should be a string (<span class="hljs-keyword">for</span> DOM elements) or a ReactClass (<span class="hljs-keyword">for</span> composite components).</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    2) renders the Feed widget</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>  1 passing (286ms)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  2 failing</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>  1) Dashboard renders the dashboard:</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object. Check the render method of `dashboard`.</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      at instantiateReactComponent (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      at instantiateChild (node_modules/react/lib/ReactChildReconciler.js:43:28)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      at node_modules/react/lib/ReactChildReconciler.js:70:16</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      at traverseAllChildrenImpl (node_modules/react/lib/traverseAllChildren.js:69:5)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      at traverseAllChildrenImpl (node_modules/react/lib/traverseAllChildren.js:85:23)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      at traverseAllChildren (node_modules/react/lib/traverseAllChildren.js:164:10)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      at Object.ReactChildReconciler.instantiateChildren (node_modules/react/lib/ReactChildReconciler.js:69:7)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      at ReactDOMComponent.ReactMultiChild.Mixin._reconcilerInstantiateChildren (node_modules/react/lib/ReactMultiChild.js:194:41)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (node_modules/react/lib/ReactMultiChild.js:231:27)</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at ReactDOMComponent.Mixin._createInitialChildren (node_modules/react/lib/ReactDOMComponent.js:715:32)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>      at ReactDOMComponent.Mixin.mountComponent (node_modules/react/lib/ReactDOMComponent.js:531:12)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>      at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (node_modules/react/lib/ReactMultiChild.js:242:44)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>      at ReactDOMComponent.Mixin._createInitialChildren (node_modules/react/lib/ReactDOMComponent.js:715:32)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>      at ReactDOMComponent.Mixin.mountComponent (node_modules/react/lib/ReactDOMComponent.js:531:12)</td><tr><td class="linenos" data-pseudo-content="41"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="42"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:397:34)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:397:34)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="47"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="48"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="49"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="50"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="51"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="52"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="53"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="54"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="55"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="56"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="57"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="58"></td><td>      at Context.&lt;anonymous&gt; (dashboard.js:11:23)</td><tr><td class="linenos" data-pseudo-content="59"></td><td></td><tr><td class="linenos" data-pseudo-content="60"></td><td>  2) Feed Widget renders the Feed widget:</td><tr><td class="linenos" data-pseudo-content="61"></td><td>     Invariant Violation: Element <span class="hljs-built_in">type</span> is invalid: expected a string (<span class="hljs-keyword">for</span> built-in components) or a class/<span class="hljs-keyword">function</span> (<span class="hljs-keyword">for</span> composite components) but got: object.</td><tr><td class="linenos" data-pseudo-content="62"></td><td>      at invariant (node_modules/fbjs/lib/invariant.js:38:15)</td><tr><td class="linenos" data-pseudo-content="63"></td><td>      at [object Object].instantiateReactComponent [as _instantiateReactComponent] (node_modules/react/lib/instantiateReactComponent.js:86:134)</td><tr><td class="linenos" data-pseudo-content="64"></td><td>      at [object Object].ReactCompositeComponentMixin.performInitialMount (node_modules/react/lib/ReactCompositeComponent.js:388:22)</td><tr><td class="linenos" data-pseudo-content="65"></td><td>      at [object Object].ReactCompositeComponentMixin.mountComponent (node_modules/react/lib/ReactCompositeComponent.js:262:21)</td><tr><td class="linenos" data-pseudo-content="66"></td><td>      at Object.ReactReconciler.mountComponent (node_modules/react/lib/ReactReconciler.js:47:35)</td><tr><td class="linenos" data-pseudo-content="67"></td><td>      at mountComponentIntoNode (node_modules/react/lib/ReactMount.js:105:32)</td><tr><td class="linenos" data-pseudo-content="68"></td><td>      at ReactReconcileTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>      at batchedMountComponentIntoNode (node_modules/react/lib/ReactMount.js:126:15)</td><tr><td class="linenos" data-pseudo-content="70"></td><td>      at ReactDefaultBatchingStrategyTransaction.Mixin.perform (node_modules/react/lib/Transaction.js:138:20)</td><tr><td class="linenos" data-pseudo-content="71"></td><td>      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react/lib/ReactDefaultBatchingStrategy.js:63:19)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>      at Object.batchedUpdates (node_modules/react/lib/ReactUpdates.js:98:20)</td><tr><td class="linenos" data-pseudo-content="73"></td><td>      at Object.ReactMount._renderNewRootComponent (node_modules/react/lib/ReactMount.js:285:18)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>      at Object.ReactMount._renderSubtreeIntoContainer (node_modules/react/lib/ReactMount.js:371:32)</td><tr><td class="linenos" data-pseudo-content="75"></td><td>      at Object.ReactMount.render (node_modules/react/lib/ReactMount.js:392:23)</td><tr><td class="linenos" data-pseudo-content="76"></td><td>      at ReactTestUtils.renderIntoDocument (node_modules/react/lib/ReactTestUtils.js:85:21)</td><tr><td class="linenos" data-pseudo-content="77"></td><td>      at Context.&lt;anonymous&gt; (feedwidget.js:12:23)</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td></td><tr><td class="linenos" data-pseudo-content="81"></td><td></td><tr><td class="linenos" data-pseudo-content="82"></td><td>=============================== Coverage summary ===============================</td><tr><td class="linenos" data-pseudo-content="83"></td><td>Statements   : 83.33% ( 10/12 )</td><tr><td class="linenos" data-pseudo-content="84"></td><td>Branches     : 50% ( 1/2 )</td><tr><td class="linenos" data-pseudo-content="85"></td><td>Functions    : 66.67% ( 4/6 )</td><tr><td class="linenos" data-pseudo-content="86"></td><td>Lines        : 83.33% ( 10/12 )</td><tr><td class="linenos" data-pseudo-content="87"></td><td>================================================================================</td><tr><td class="linenos" data-pseudo-content="88"></td><td>npm ERR! Test failed.  See above <span class="hljs-keyword">for</span> more details.</td></table></code></pre>
<p>Our test fails, so we can start work on the widget proper. Here it is:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> jQuery <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">window</span>.jQuery = jQuery;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">const</span> FeedItem = React.createClass({</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{this.props.link}</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"feeditem"</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>});</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  getInitialState() {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      <span class="hljs-attr">feed</span>: [],</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      <span class="hljs-attr">size</span>: <span class="hljs-keyword">this</span>.props.size || <span class="hljs-number">5</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    };</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  componentDidMount() {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">this</span>.getFeed();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">this</span>.interval = setInterval(<span class="hljs-keyword">this</span>.getFeed, (<span class="hljs-keyword">this</span>.props.delay * <span class="hljs-number">1000</span>));</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  componentWillUnmount() {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    clearInterval(<span class="hljs-keyword">this</span>.interval);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  getFeed() {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">let</span> that = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    jQuery.ajax({</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      <span class="hljs-attr">url</span>: <span class="hljs-keyword">this</span>.props.feed,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">let</span> xml = jQuery(response);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">let</span> feed = [];</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        xml.find(<span class="hljs-string">'item'</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>          <span class="hljs-keyword">let</span> item = {};</td><tr><td class="linenos" data-pseudo-content="38"></td><td>          item.title = jQuery(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">'title'</span>).text();</td><tr><td class="linenos" data-pseudo-content="39"></td><td>          item.link = jQuery(<span class="hljs-keyword">this</span>).find(<span class="hljs-string">'guid'</span>).text();</td><tr><td class="linenos" data-pseudo-content="40"></td><td>          feed.push(item);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        that.setState({</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          <span class="hljs-attr">feed</span>: feed.slice(<span class="hljs-number">0</span>,that.state.size)</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="47"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-keyword">let</span> feedItems = <span class="hljs-keyword">this</span>.state.feed.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="50"></td><td>      <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FeedItem</span> <span class="hljs-attr">title</span>=<span class="hljs-string">{item.title}</span> <span class="hljs-attr">link</span>=<span class="hljs-string">{item.link}</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item.link}</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">FeedItem</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>      );</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="55"></td><td>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"feedwidget widget"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"widget-content"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"feed"</span>&gt;</span> Fetched from {this.props.feed}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="58"></td><td>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>            {feedItems}</td><tr><td class="linenos" data-pseudo-content="60"></td><td>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="65"></td><td>});</td></table></code></pre>
<p>This is by far the most complex component, so a little explanation is called for. We include jQuery as a dependency at the top of the file. Then we create a component for rendering an individual feed item, called <code>FeedItem</code>. This is very simple, consisting of an anchor tag wrapped around a list item. Note the use of the <code>const</code> keyword - in ES6 this denotes a constant.</p>
<p>Next, we move onto the feed widget proper. We set the initial state of the feed to be an empty array. Then, we define a <code>componentDidMount()</code> method that calls <code>getFeed()</code> and sets up an interval to call it again, based on the <code>delay</code> property. The <code>getFeed()</code> method fetches the URL in question and sets <code>this.state.feed</code> to an array of the most recent entries in the feed, with the size denoted by the <code>size</code> property passed through. We also clear that interval when the component is about to be umounted.</p>
<p>Note that you may have problems with the <code>Access-Control-Allow-Origin</code> HTTP header. It’s possible to disable this in your web browser, so if you want to run this as a dashboard you’ll probably need to do so. On Chrome there’s a useful <a href="https://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiw9Mm4r8TOAhVNOMAKHUicCF4QFggcMAA&amp;url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fallow-control-allow-origi%2Fnlfbmbojpeacfghkpbjhddihlkkiljbi%3Fhl%3Den&amp;usg=AFQjCNHSUFqc6ylxfxfbWzmmFJ6L5QUvyg&amp;sig2=fJaf_HKgY8XDsd-JeY_PXg&amp;bvm=bv.129422649,d.d24">plugin</a> that allows you to disable this when needed.</p>
<p>Because our <code>FeedWidget</code> has been created in a generic manner, we can then include multiple feed widgets easily, as in this example:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> ClockWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./clockwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">import</span> FeedWidget <span class="hljs-keyword">from</span> <span class="hljs-string">'./feedwidget'</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.createClass({</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  render() {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">return</span> (</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      &lt;div className="dashboard"&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        &lt;h1 ref="title"&gt;{this.props.title}&lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        &lt;div className="wrapper"&gt;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>          &lt;ClockWidget /&gt;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>          &lt;FeedWidget feed="http://feeds.bbci.co.uk/news/rss.xml?edition=uk" size="5" delay="60" /&gt;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>          &lt;FeedWidget feed="https://www.sitepoint.com/feed/" size="10" delay="120" /&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    );</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>});</td></table></code></pre>
<p>We also need to style our widgets. Save this as <code>scss/_colours.scss</code>:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-variable">$bgColour</span>: <span class="hljs-number">#151515</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-variable">$txtColour</span>: <span class="hljs-number">#cfcfcf</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-variable">$clockBg</span>: <span class="hljs-number">#fa8c00</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-variable">$clockHoverBg</span>: <span class="hljs-number">#0099ff</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-variable">$clockTxt</span>: <span class="hljs-number">#fff</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-variable">$feedBg</span>: <span class="hljs-number">#0099ff</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-variable">$feedTxt</span>: <span class="hljs-number">#fff</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-variable">$feedHoverBg</span>: <span class="hljs-number">#fa8c00</span>;</td></table></code></pre>
<p>And this as <code>scss/style.scss</code>:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">'colours'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$bgColour</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$txtColour</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.dashboard</span> {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.wrapper</span> {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    -moz-<span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    -webkit-<span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    -moz-<span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    -webkit-<span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>}</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.widget</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attribute">display</span>: inline-block;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1em</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span>;</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    &amp;:hover {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h4</span> {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.widget-content</span> {</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="42"></td><td>}</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.clockwidget</span> {</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$clockBg</span>;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$clockTxt</span>;</td><tr><td class="linenos" data-pseudo-content="47"></td><td>}</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.feedwidget</span> {</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$feedBg</span>;</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$feedTxt</span>;</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-selector-tag">h2</span> {</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-attribute">word-wrap</span>: break-word;</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="56"></td><td></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-selector-tag">ul</span> {</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-selector-tag">a</span> {</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-attribute">text-decoration</span>: none;</td><tr><td class="linenos" data-pseudo-content="63"></td><td>            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>            <span class="hljs-selector-tag">li</span> {</td><tr><td class="linenos" data-pseudo-content="66"></td><td>                <span class="hljs-attribute">list-style-type</span>: none;</td><tr><td class="linenos" data-pseudo-content="67"></td><td>                <span class="hljs-attribute">font-weight</span>: bold;</td><tr><td class="linenos" data-pseudo-content="68"></td><td>                <span class="hljs-attribute">color</span>: <span class="hljs-variable">$feedTxt</span>;</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}</td></table></code></pre>
<p>The end result should look something like this:</p>
<p><img src="/static/images/dashboard.png" alt="The personal dashboard in action"></p>
<p>With that done, feel free to add whatever other feeds you want to include.</p>
<h2 id="deploying-our-dashboard">Deploying our dashboard</h2>
<p>The final step is deploying our dashboard to our Raspberry Pi or other device. Run the following command to generate the Javascript:</p>
<pre><code class="hljs lang-bash singleline">$ npm run build</code></pre>
<p>This will create <code>static/bundle.js</code>. You can then copy that file over to your web server with <code>index.html</code> and place both files in the web root. I recommend using Nginx if you’re using a Raspberry Pi as it’s faster and simpler for static content. If you’re likely to make a lot of changes you might want to create a command in the <code>scripts</code> section of your <code>package.json</code> to deploy the files more easily.</p>
<p>These basic widgets should be enough to get you started. You should be able to use the feed widget with virtually any RSS feed, and you should be able to use a similar approach to poll third-party APIs, although you might need to authenticate in some way (if you do, you won’t want to expose your authentication details, so ensure that nobody from outside the network can view your application). I’ll leave it to you to see what kind of interesting widgets you come up with for your own dashboard, but some ideas to get you started include:</p>
<ul>
<li>Public transport schedules/Traffic issues</li>
<li>Weather reports</li>
<li>Shopping lists/Todo lists, with HTML5 local storage used to persist them</li>
<li>Galleries of recent photos on social networks</li>
<li>Status of servers on cloud hosting providers</li>
</ul>
<p>With a little thought, you can probably come up with a few more than that! I’ve created a <a href="https://github.com/matthewbdaly/personal-dashboard">Github repository with the source code</a> so you can check your own implementation against it.</p>
]]></summary>
    </entry>
</feed>
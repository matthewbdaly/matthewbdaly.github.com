<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>behave | Matthew Daly&apos;s Blog</title>
    <updated>2017-10-20T22:01:03Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/behave/"/>
    <subtitle>behave | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2017</rights>
    <entry>
        <title type="html"><![CDATA[Getting django-behave and Celery to work together]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/">
        </link>
        <updated>2015-06-17T19:34:08Z</updated>
        <summary type="html"><![CDATA[<p>I ran into a small issue today. I’m working on a Django app which uses Celery to handle certain tasks that don’t need to return a response within the context of the HTTP request. I also wanted to use <code>django_behave</code> for running BDD tests. The trouble is that both <code>django_behave</code> and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.</p>
<p>However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default test runner to make it work with Celery. I was therefore able to create my own custom test runner that inherited from <code>DjangoBehaveTestSuiteRunner</code> and applied the changes necessary to get Celery working with it. Here is the test runner I wrote, which was saved as <code>myproject/runner.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> djcelery.contrib.test_runner <span class="hljs-keyword">import</span> _set_eager</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> django_behave.runner <span class="hljs-keyword">import</span> DjangoBehaveTestSuiteRunner</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CeleryAndBehaveRunner</span><span class="hljs-params">(DjangoBehaveTestSuiteRunner)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setup_test_environment</span><span class="hljs-params">(self, **kwargs)</span>:</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        _set_eager()</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        settings.BROKER_BACKEND = <span class="hljs-string">'memory'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        super(CeleryAndBehaveRunner, self).setup_test_environment(**kwargs)</td></table></code></pre>
<p>To use it, you need to set the test runner in <code>settings.py</code></p>
<pre><code class="hljs lang-python singleline">TEST_RUNNER = <span class="hljs-string">'myproject.runner.CeleryAndBehaveRunner'</span></code></pre>
<p>Once that was done, my tests worked flawlessly with Celery, and the Behave tests ran as expected.</p>
]]></summary>
    </entry>
</feed>
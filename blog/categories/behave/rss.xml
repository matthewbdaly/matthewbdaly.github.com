<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>behave | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/behave/</link>
        <description>behave | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 09 Feb 2020 10:17:09 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2020</copyright>
        <item>
            <title><![CDATA[Getting django-behave and Celery to work together]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/06/17/getting-django-behave-and-celery-to-work-together/</guid>
            <pubDate>Wed, 17 Jun 2015 19:34:08 GMT</pubDate>
            <description><![CDATA[<p>I ran into a small issue today. I’m working on a Django app which uses Celery to handle certain tasks that don’t need to return a response within the context of the HTTP request. I also wanted to use <code>django_behave</code> for running BDD tests. The trouble is that both <code>django_behave</code> and Celery provide their own custom test runners that extend the default Django test runner, and so it looked like I might have to choose between the two.</p>
<p>However, it turned out that the Celery one was actually very simple, with only a handful of changes needing to be made to the default test runner to make it work with Celery. I was therefore able to create my own custom test runner that inherited from <code>DjangoBehaveTestSuiteRunner</code> and applied the changes necessary to get Celery working with it. Here is the test runner I wrote, which was saved as <code>myproject/runner.py</code>:</p>
<pre><code class="lang-python">from django.conf import settings
from djcelery.contrib.test_runner import _set_eager
from django_behave.runner import DjangoBehaveTestSuiteRunner

class CeleryAndBehaveRunner(DjangoBehaveTestSuiteRunner):
    def setup_test_environment(self, **kwargs):
        _set_eager()
        settings.BROKER_BACKEND = &#39;memory&#39;
        super(CeleryAndBehaveRunner, self).setup_test_environment(**kwargs)
</code></pre>
<p>To use it, you need to set the test runner in <code>settings.py</code></p>
<pre><code class="lang-python">TEST_RUNNER = &#39;myproject.runner.CeleryAndBehaveRunner&#39;
</code></pre>
<p>Once that was done, my tests worked flawlessly with Celery, and the Behave tests ran as expected.</p>
]]></description>
        </item>
    </channel>
</rss>
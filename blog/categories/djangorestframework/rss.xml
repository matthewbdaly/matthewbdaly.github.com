<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>djangorestframework | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/djangorestframework/</link>
        <description>djangorestframework | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 27 Oct 2019 22:22:38 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[Handling images as base64 strings with Django REST Framework]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/07/04/handling-images-as-base64-strings-with-django-rest-framework/</guid>
            <pubDate>Sat, 04 Jul 2015 12:01:40 GMT</pubDate>
            <description><![CDATA[<p>I’m currently working on a Phonegap app that involves taking pictures and uploading them via a REST API. I’ve done this before, and I found at that time that the best way to do so was to fetch the image as a base-64 encoded string and push that up, rather than the image file itself. However, the last time I did so, I was using Tastypie to build the API, and I’ve since switched over to Django REST Framework as my API toolkit of choice.</p>
<p>It didn’t take long to find <a href="https://gist.github.com/yprez/7704036">this gist</a> giving details of how to do so, but it didn’t work as is, partly because I was using Python 3, and partly because the <code>from_native</code> method has gone as at Django REST Framework 3.0. It was, however, straightforward to adapt it to work. Here’s my solution:</p>
<pre><code class="lang-python">import base64, uuid
from django.core.files.base import ContentFile
from rest_framework import serializers


# Custom image field - handles base 64 encoded images
class Base64ImageField(serializers.ImageField):
    def to_internal_value(self, data):
        if isinstance(data, str) and data.startswith(&#39;data:image&#39;):
            # base64 encoded image - decode
            format, imgstr = data.split(&#39;;base64,&#39;) # format ~= data:image/X,
            ext = format.split(&#39;/&#39;)[-1] # guess file extension
            id = uuid.uuid4()
            data = ContentFile(base64.b64decode(imgstr), name = id.urn[9:] + &#39;.&#39; + ext)
        return super(Base64ImageField, self).to_internal_value(data)
</code></pre>
<p>This solution will handle both base 64 encoded strings and image files. Then, just use this field as normal.</p>
]]></description>
        </item>
    </channel>
</rss>
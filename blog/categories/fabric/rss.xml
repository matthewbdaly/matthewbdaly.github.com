<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>fabric | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/fabric/</link>
        <description>fabric | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Tue, 14 May 2019 13:59:57 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[Deploying new versions of a Laravel app with Fabric]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/</guid>
            <pubDate>Mon, 05 Sep 2016 21:22:16 GMT</pubDate>
            <description><![CDATA[<p><a href="https://laravel.com/docs/5.3/envoy">Envoy</a> is the official way to run tasks on a remote server for Laravel apps. A typical Envoy task for deploying a new version might look like this:</p>
<pre><code class="lang-blade">@servers([&#39;web&#39; =&gt; &#39;matthew@server1.example.com&#39;])

@task(&#39;deploy&#39;, [&#39;on&#39; =&gt; &#39;web&#39;])
    cd /var/www
    sudo chown -R matthew:matthew .
    git pull origin master
    php artisan migrate
    php artisan view:clear
    composer dump-autoload
    sudo chown -R www-data:www-data .
    sudo supervisorctl restart mail-queue
@endtask
</code></pre>
<p>This would be defined in <code>Envoy.blade.php</code>. With this in place, and Envoy set up globally, you can then run <code>envoy run deploy</code> to run the <code>deploy</code> command.</p>
<p>However, Envoy requires the PHP SSH library, which I haven’t been able to get working with PHP 7. Fortunately I was already familiar with <a href="http://www.fabfile.org/">Fabric</a>, which makes an excellent alternative as long as you don’t mind writing the task in Python.</p>
<p>The same kind of task might look like this in a Fabric script, saved as <code>fabfile.py</code>:</p>
<pre><code class="lang-python">#!/usr/bin/env python
from fabric.api import local, env, run, sudo
from fabric.context_managers import cd, prefix

env.hosts = [&#39;server1.example.com&#39;]
env.path = &quot;/var/www&quot;
env.user = &quot;matthew&quot;
env.password = &quot;password&quot;
# Or...
env.key_filename = &#39;/path/to/ssh/key&#39;

def deploy():
    &quot;&quot;&quot;
    Deploy the latest version
    &quot;&quot;&quot;
    # Push changes to Bitbucket
    local(&quot;git push origin master&quot;)

    # Switch to project directory
    with cd(env.path):
        # Change owner
        sudo(&#39;chown -R matthew:matthew .&#39;)

        # Pull changes to server
        run(&#39;git pull origin master&#39;)

        # Run migrations
        run(&#39;php artisan migrate&#39;)

        # Clear cached files
        run(&#39;php artisan view:clear&#39;)
        run(&#39;composer dump-autoload&#39;)

        # Change owner back
        sudo(&#39;chown -R www-data:www-data .&#39;)

        # restart mail queue
        sudo(&#39;supervisorctl restart mail-queue&#39;)
</code></pre>
<p>Then, assuming Fabric is already installed locally, you can run <code>fab deploy</code> to push up the latest revision.</p>
<p>Either of these solutions will do a fine job of deploying your app. If you do need to store user-specific data in your Fabric script, it’s probably prudent to keep it out of version control.</p>
<p>Whichever way you choose, it’s a really good idea to do what you can to automate deployment. It can be a boring, repetitive job, and both of these solutions make it much easier.</p>
]]></description>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>vim | Matthew Daly&apos;s Blog</title>
    <updated>2018-02-18T13:14:39Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk/blog/categories/vim/"/>
    <subtitle>vim | I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Syntax highlighting in fenced code blocks in Vim]]></title>
        <id>https://matthewdaly.co.uk/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/</id>
        <link href="https://matthewdaly.co.uk/blog/2015/03/02/syntax-highlighting-in-fenced-code-blocks-in-vim/">
        </link>
        <updated>2015-03-02T23:25:43Z</updated>
        <summary type="html"><![CDATA[<p>Just thought I’d share a little trick I picked up recently. As you may know, GitHub flavoured Markdown (which I use for this blog) supports fenced code blocks, allowing you to specify a language for a block of code in a Markdown file.</p>
<p>If you put the following code in your <code>.vimrc</code>, you can get syntax highlighting in those code blocks when you open up a Markdown file in Vim:</p>
<pre><code class="hljs lang-viml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">"Syntax highlighting in Markdown</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">au</span> BufNewFile,BufReadPost *.md <span class="hljs-keyword">set</span> <span class="hljs-keyword">filetype</span>=markdown</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">let</span> <span class="hljs-variable">g:markdown_fenced_languages</span> = [<span class="hljs-string">'bash=sh'</span>, <span class="hljs-string">'css'</span>, <span class="hljs-string">'django'</span>, <span class="hljs-string">'handlebars'</span>, <span class="hljs-string">'javascript'</span>, <span class="hljs-string">'js=javascript'</span>, <span class="hljs-string">'json=javascript'</span>, <span class="hljs-string">'perl'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'ruby'</span>, <span class="hljs-string">'sass'</span>, <span class="hljs-string">'xml'</span>, <span class="hljs-string">'html'</span>]</td></table></code></pre>
<p>This does depend on having the appropriate syntax files installed. However, you can easily add in syntax files for many other languages that Vim supports, and there are third-party ones available to install - in my case, I’ve got the <code>handlebars</code> one installed, which doesn’t come with Vim.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Changing date format from DD/MM/YYYY to YYYY-MM-DD in Vim]]></title>
        <id>https://matthewdaly.co.uk/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/</id>
        <link href="https://matthewdaly.co.uk/blog/2014/09/28/changing-date-format-from-dd-slash-mm-slash-yyyy-to-yyyy-mm-dd-in-vim/">
        </link>
        <updated>2014-09-28T18:53:34Z</updated>
        <summary type="html"><![CDATA[<p>Recently I had the occasion to reformat a load of dates in Vim from <code>DD/MM/YYYY</code> to <code>YYYY-MM-DD</code>. In Vim, this is quite simple:</p>
<pre><code class="hljs lang-viml singleline">:<span class="hljs-meta">%</span>s/\<span class="hljs-comment">(\d\{2}\)</span>\/\<span class="hljs-comment">(\d\{2}\)</span>\/\<span class="hljs-comment">(\d\{4}\)</span>/\<span class="hljs-number">3</span>-\<span class="hljs-number">2</span>-\<span class="hljs-number">1</span>/g</code></pre>
<p>This should be easy to adapt to reformatting other date formats.</p>
]]></summary>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>testing | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/testing/</link>
        <description>testing | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sat, 02 Feb 2019 21:45:57 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[An approach to writing golden master tests for PHP web applications]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/08/an-approach-to-writing-golden-master-tests-for-php-web-applications/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/08/an-approach-to-writing-golden-master-tests-for-php-web-applications/</guid>
            <pubDate>Mon, 08 Oct 2018 10:20:53 GMT</pubDate>
            <description><![CDATA[<p>Apologies if some of the spelling or formatting on this post is off - I wrote it on a long train journey down to London, with sunlight at an inconvenient angle.</p>
<p>Recently I had to carry out some substantial changes to the legacy web app I maintain as the lion’s share of my current job. The client has several channels that represent different parts of the business that would expect to see different content on the home page, and access to content is limited first by channel, and then by location. The client wanted an additional channel added. Due to bad design earlier in the application’s lifetime that isn’t yet practical to refactor away, each type of location has its own model, so it was necessary to add a new location model. It also had to work seamlessly, in the same way as the other location types. Unfortunately, these branch types didn’t use polymorphism, and instead used large switch statements, and it wasn’t practical to refactor all that away in one go. This was therefore quite a high-risk job, especially considering the paucity of tests on a legacy code base.</p>
<p>I’d heard of the concept of a <em>golden master test</em> before. If you haven’t heard of it before, the idea is that it works by running a process, capturing the output, and then comparing the output of that known good version against future runs. It’s very much a test of last resort since, in the context of a web app, it’s potentially very brittle since it depends on the state of the application remaining the same between runs to avoid false positives. I needed a set of simple “snapshot tests”, similar to how snapshot testing works with Jest, to catch unexpected breakages in a large number of pages, and this approach seemed to fit the bill. Unfortunately, I hadn’t been able to find a good example of how to do this for PHP applications, so it took a while to figure out something that worked.</p>
<p>Here is an example base test case I used for this approach:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests;

use PHPUnit_Framework_TestCase as BaseTestCase;
use Behat\Mink\Driver\GoutteDriver;
use Behat\Mink\Session;

class GoldenMasterTestCase extends BaseTestCase
{
    protected $driver;

    protected $session;

    protected $baseUrl = &#39;http://localhost:8000&#39;;

    protected $snapshotDir = &quot;tests/snapshots/&quot;;

    public function setUp()
    {
        $this-&gt;driver = new GoutteDriver();
        $this-&gt;session = new Session($this-&gt;driver);
    }

    public function tearDown()
    {
        $this-&gt;session = null;
        $this-&gt;driver = null;
    }

    public function loginAs($username, $password)
    {
        $this-&gt;session-&gt;visit($this-&gt;baseUrl.&#39;/login&#39;);
        $page = $this-&gt;session-&gt;getPage();
        $page-&gt;fillField(&quot;username&quot;, $username);
        $page-&gt;fillField(&quot;password&quot;, $password);
        $page-&gt;pressButton(&quot;Sign In&quot;);
        return $this;
    }

    public function goto($path)
    {
        $this-&gt;session-&gt;visit($this-&gt;baseUrl.$path);
        $this-&gt;assertNotEquals(404, $this-&gt;session-&gt;getStatusCode());
        return $this;
    }

    public function saveHtml()
    {
        if (!$this-&gt;snapshotExists()) {
            $this-&gt;saveSnapshot();
        }
        return $this;
    }

    public function assertSnapshotsMatch()
    {
        $path = $this-&gt;getPath();
        $newHtml = $this-&gt;processHtml($this-&gt;getHtml());
        $oldHtml = $this-&gt;getOldHtml();
        $diff = &quot;&quot;;
        if (function_exists(&#39;xdiff_string_diff&#39;)) {
            $diff = xdiff_string_diff($oldHtml, $newHtml);
        }
        $message = &quot;The path $path does not match the snapshot\n$diff&quot;;
        self::assertThat($newHtml == $oldHtml, self::isTrue(), $message);
    }

    protected function getHtml()
    {
        return $this-&gt;session-&gt;getPage()-&gt;getHtml();
    }

    protected function getPath()
    {
        $url = $this-&gt;session-&gt;getCurrentUrl();
        $path = parse_url($url, PHP_URL_PATH);
        $query = parse_url($url, PHP_URL_QUERY);
        $frag = parse_url($url, PHP_URL_FRAGMENT);
        return $path.$query.$frag;
    }

    protected function getEscapedPath()
    {
        return $this-&gt;snapshotDir.str_replace(&#39;/&#39;, &#39;_&#39;, $this-&gt;getPath()).&#39;.snap&#39;;
    }

    protected function snapshotExists()
    {
        return file_exists($this-&gt;getEscapedPath());
    }

    protected function processHtml($html)
    {
        return preg_replace(&#39;/&lt;input type=&quot;hidden&quot;[^&gt;]+\&gt;/i&#39;, &#39;&#39;, $html);
    }

    protected function saveSnapshot()
    {
        $html = $this-&gt;processHtml($this-&gt;getHtml());
        file_put_contents($this-&gt;getEscapedPath(), $html);
    }

    protected function getOldHtml()
    {
        return file_get_contents($this-&gt;getEscapedPath());
    }
}
</code></pre>
<p>Because this application is built with Zend 1 and doesn’t have an easy way to get the HTML response without actually running the application, I was forced to use an actual HTTP client to fetch the content while the web server is running. I’ve used Mink together with Behat many times in the past, and the Goutte driver is fast and doesn’t rely on Javascript, so that was the best bet for a simple way of retrieving the HTML. Had I been taking this approach with a Laravel application, I could have populated the testing database with a common set of fixtures, and passed a request object through the application and captured the response object’s output rather than using an HTTP client, thereby eliminating the need to run a web server and making the tests faster and less brittle.</p>
<p>Another issue was CSRF handling. A CSRF token is, by definition, generated randomly each time the page is loaded, and so it broke those pages that had forms with CSRF tokens. The solution I came up with was to strip out the hidden input fields.</p>
<p>When each page is tested, the first step is to fetch the content of that page. The test case then checks to see if there’s an existing snapshot. If not, the content is saved as a new snapshot file. Otherwise, the two snapshots are compared, and the test fails if they do not match.</p>
<p>Once that base test case was in place, it was then straightforward to extend it to test multiple pages. I wrote one test to check pages that did not require login, and another to check pages that did require login, and the paths for those pages were passed through using a data provider method, as shown below:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\GoldenMaster;

use Tests\GoldenMasterTestCase;

class GoldenMasterTest extends GoldenMasterTestCase
{
    /**
     * @dataProvider nonAuthDataProvider
     */
    public function testNonAuthPages($data)
    {
        $this-&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function nonAuthDataProvider()
    {
        return [
            [&#39;/login&#39;],
        ];
    }

    /**
     * @dataProvider dataProvider
     */
    public function testPages($data)
    {
        $this-&gt;loginAs(&#39;foo&#39;, &#39;bar&#39;)
            -&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function dataProvider()
    {
        return [
            [&#39;/foo&#39;],
            [&#39;/bar&#39;],
        ];
    }
}
</code></pre>
<p>Be warned, this is <em>not</em> an approach I would advocate as a matter of course, and it should only ever be a last resort as an alternative to onerous manual testing for things that can’t be tested in their current form. It’s extremely brittle, and I’ve had to deal with a lot of false positives, although that would be easier if I could populate a testing database beforehand and use that as the basis of the tests. It’s also very slow, with each test taking three or four seconds to run, although again this would be less of an issue if I could pass through a request object and get the response HTML directly. Nonetheless, I’ve found it to be a useful technique as a test of last resort for legacy applications.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Mutation testing with Infection]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/09/13/mutation-testing-with-infection/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/09/13/mutation-testing-with-infection/</guid>
            <pubDate>Thu, 13 Sep 2018 19:10:09 GMT</pubDate>
            <description><![CDATA[<p>Writing automated tests is an excellent way of catching bugs during development and maintenance of your application, not to mention the other benefits. However, it’s hard to gauge the quality of your tests, particularly when you first start out. Coverage will give you a good idea of what code was actually run during the test, but it won’t tell you if the test itself actually tests anything worthwhile.</p>
<p><a href="https://infection.github.io/">Infection</a> is a mutation testing framework. The documentation defines mutation testing as follows:</p>
<blockquote>
<p>Mutation testing involves modifying a program in small ways. Each mutated version is called a Mutant. To assess the quality of a given test set, these mutants are executed against the input test set to see if the seeded faults can be detected. If mutated program produces failing tests, this is called a killed mutant. If tests are green with mutated code, then we have an escaped mutant.</p>
</blockquote>
<p>Infection works by running the test suite, carrying out a series of mutations on the source code in order to try to break the tests, and then collecting the results. The actual mutations carried out are not random - there is a set of mutations that get carried out every time, so results should be consistent. Ideally, all mutants should be killed by your tests - escaped mutants can indicate that either the line of mutated code is not tested, or the tests for that line are not very useful.</p>
<p>I decided to add mutation testing to my <a href="https://github.com/matthewbdaly/laravel-cart">Laravel shopping cart package</a>. In order to use Infection, you need to be able to generate code coverage, which means having either XDebug or phpdbg installed. Once Infection is installed (refer to the documentation for this), you can run this command in the project directory to configure it:</p>
<pre><code class="lang-bash">$ infection
</code></pre>
<p>Infection defaults to using PHPUnit for the tests, but it also supports PHPSpec. If you’re using PHPSpec, you will need to specify the testing framework like this:</p>
<pre><code class="lang-bash">$ infection --test-framework=phpspec
</code></pre>
<p>Since PHPSpec doesn’t support code coverage out of the box, you’ll need to install a package for that - I used <code>leanphp/phpspec-code-coverage</code>.</p>
<p>On first run, you’ll be prompted to create a configuration file. Your source directory should be straightforward to set up, but at the next step, if your project uses interfaces in the source directory, you should exclude them. The rest of the defaults should be fine.</p>
<p>I found that the first run gave a large number of uncovered results, but the second and later ones were more consistent - not sure if it’s an issue with my setup or not. Running it gave me this:</p>
<pre><code class="lang-bash">$ infection
You are running Infection with xdebug enabled.
    ____      ____          __  _
   /  _/___  / __/__  _____/ /_(_)___  ____ 
   / // __ \/ /_/ _ \/ ___/ __/ / __ \/ __ \
 _/ // / / / __/  __/ /__/ /_/ / /_/ / / / /
/___/_/ /_/_/  \___/\___/\__/_/\____/_/ /_/

    0 [&gt;---------------------------] &lt; 1 secRunning initial test suite...

PHPUnit version: 6.5.13

   27 [============================] 3 secs

Generate mutants...

Processing source code files: 5/5
Creating mutated files and processes: 43/43
.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out

...................MMM...M.......M.........          (43 / 43)

43 mutations were generated:
      38 mutants were killed
       0 mutants were not covered by tests
       5 covered mutants were not detected
       0 errors were encountered
       0 time outs were encountered

Metrics:
         Mutation Score Indicator (MSI): 88%
         Mutation Code Coverage: 100%
         Covered Code MSI: 88%

Please note that some mutants will inevitably be harmless (i.e. false positives).

Time: 21s. Memory: 12.00MB
</code></pre>
<p>Our test run shows 5 escaped mutants, and the remaining 38 were killed. We can view the results by looking at the generated <code>infection-log.txt</code>:</p>
<pre><code class="lang-txt">Escaped mutants:
================


1) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:132    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
-                if ($item[&#39;qty&#39;] &gt; 0) {
+                if ($item[&#39;qty&#39;] &gt; -1) {
                     $item[&#39;qty&#39;] -= 1;
                 }
             }


2) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:132    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
-                if ($item[&#39;qty&#39;] &gt; 0) {
+                if ($item[&#39;qty&#39;] &gt; 1) {
                     $item[&#39;qty&#39;] -= 1;
                 }
             }


3) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:132    [M] GreaterThan

--- Original
+++ New
@@ @@
     {
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
-                if ($item[&#39;qty&#39;] &gt; 0) {
+                if ($item[&#39;qty&#39;] &gt;= 0) {
                     $item[&#39;qty&#39;] -= 1;
                 }
             }


4) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:133    [M] Assignment

--- Original
+++ New
@@ @@
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
                 if ($item[&#39;qty&#39;] &gt; 0) {
-                    $item[&#39;qty&#39;] -= 1;
+                    $item[&#39;qty&#39;] = 1;
                 }
             }
             return $item;


5) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:197    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     private function hasStringKeys(array $items)
     {
-        return count(array_filter(array_keys($items), &#39;is_string&#39;)) &gt; 0;
+        return count(array_filter(array_keys($items), &#39;is_string&#39;)) &gt; 1;
     }
     /**
      * Validate input

Timed Out mutants:
==================

Not Covered mutants:
====================
</code></pre>
<p>This displays the mutants that escaped, and include a diff of the changed code, so we can see that all of these involve changing the comparison operators.</p>
<p>The last one can be resolved easily because the comparison is superfluous - the result of <code>count()</code> can be evaluated as true or false by itself, so removing the <code>&gt; 0</code> at the end in the test solves the problem quite neatly.</p>
<p>The other four mutations are somewhat harder. They all amend the <code>decrement</code> method’s conditions, showing that a single assertion doesn’t really fully check the behaviour. Here’s the current test for that method:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\Unit\Services;

use Tests\TestCase;
use Matthewbdaly\LaravelCart\Services\Cart;
use Mockery as m;

class CartTest extends TestCase
{
    /**
     * @dataProvider arrayProvider
     */
    public function testCanDecrementQuantity($data)
    {
        $data[0][&#39;row_id&#39;] = &#39;my_row_id_1&#39;;
        $data[1][&#39;row_id&#39;] = &#39;my_row_id_2&#39;;
        $newdata = $data;
        $newdata[1][&#39;qty&#39;] = 1;
        $session = m::mock(&#39;Illuminate\Contracts\Session\Session&#39;);
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($data);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newdata)-&gt;once();
        $uniqid = m::mock(&#39;Matthewbdaly\LaravelCart\Contracts\Services\UniqueId&#39;);
        $cart = new Cart($session, $uniqid);
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
    }
}
</code></pre>
<p>It should be possible to decrement it if the quantity is more than zero, but not to go any lower. However, our current test does not catch anything but decrementing it from 2 to 1, which doesn’t fully demonstrate this. We therefore need to add a few more assertions to cover taking it down to zero, and then trying to decrement it again. Here’s how we might do that.</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\Unit\Services;

use Tests\TestCase;
use Matthewbdaly\LaravelCart\Services\Cart;
use Mockery as m;

class CartTest extends TestCase
{
    /**
     * @dataProvider arrayProvider
     */
    public function testCanDecrementQuantity($data)
    {
        $data[0][&#39;row_id&#39;] = &#39;my_row_id_1&#39;;
        $data[1][&#39;row_id&#39;] = &#39;my_row_id_2&#39;;
        $newdata = $data;
        $newdata[1][&#39;qty&#39;] = 1;
        $session = m::mock(&#39;Illuminate\Contracts\Session\Session&#39;);
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($data);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newdata)-&gt;once();
        $uniqid = m::mock(&#39;Matthewbdaly\LaravelCart\Contracts\Services\UniqueId&#39;);
        $cart = new Cart($session, $uniqid);
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
        $newerdata = $newdata;
        $newerdata[1][&#39;qty&#39;] = 0;
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($newdata);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newerdata)-&gt;once();
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($newerdata);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newerdata)-&gt;once();
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
    }
}
</code></pre>
<p>If we re-run Infection, we now get a much better result:</p>
<pre><code class="lang-bash">$ infection
You are running Infection with xdebug enabled.
    ____      ____          __  _
   /  _/___  / __/__  _____/ /_(_)___  ____ 
   / // __ \/ /_/ _ \/ ___/ __/ / __ \/ __ \
 _/ // / / / __/  __/ /__/ /_/ / /_/ / / / /
/___/_/ /_/_/  \___/\___/\__/_/\____/_/ /_/

Running initial test suite...

PHPUnit version: 6.5.13

   22 [============================] 3 secs

Generate mutants...

Processing source code files: 5/5
Creating mutated files and processes: 41/41
.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out

.........................................            (41 / 41)

41 mutations were generated:
      41 mutants were killed
       0 mutants were not covered by tests
       0 covered mutants were not detected
       0 errors were encountered
       0 time outs were encountered

Metrics:
         Mutation Score Indicator (MSI): 100%
         Mutation Code Coverage: 100%
         Covered Code MSI: 100%

Please note that some mutants will inevitably be harmless (i.e. false positives).

Time: 19s. Memory: 12.00MB
</code></pre>
<p>Code coverage only tells you what lines of code are actually executed - it doesn’t tell you much about how effectively that line of code is tested. Infection gives you a different insight into the quality of your tests, helping to write better ones. I’ve so far found it very useful for getting feedback on the quality of my tests. It’s interesting that PHPSpec tests seem to have a consistently lower proportion of escaped mutants than PHPUnit ones - perhaps the more natural workflow when writing specs with PHPSpec makes it easier to write good tests.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating custom assertions with PHPUnit]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/11/16/creating-custom-assertions-with-phpunit/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/11/16/creating-custom-assertions-with-phpunit/</guid>
            <pubDate>Thu, 16 Nov 2017 15:15:50 GMT</pubDate>
            <description><![CDATA[<p>Today I’ve been working on a library I’m building for making it easier to build RESTful API’s with Laravel. It uses an abstract RESTful controller, which inherits from the default Laravel controller, and I wanted to verify that the instantiated controller includes all the traits from the base controller.</p>
<p>However, there was a problem. The only practical way to verify that a class includes a trait is with the <code>class_uses()</code> function, but this doesn’t work if the class inherits from a parent that includes these traits. As the class is abstract, it can’t be instantiated directly, so you must either create a dummy class just for testing that extends it, or mock the class, and that means that <code>class_uses()</code> won’t work. As a result, I needed to first get the parent class, then call <code>class_uses()</code> on that, which is possible, but a bit verbose to do repeatedly for several tests.</p>
<p>Fortunately it’s quite easy to create your own custom assertions in PHPUnit. I started out by setting up the test with the assertion I wanted to have:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\Unit\Http\Controllers;

use Tests\TestCase;
use Mockery as m;

class RestfulControllerTest extends TestCase
{
    public function testTraits()
    {
        $controller = m::mock(&#39;Matthewbdaly\Harmony\Http\Controllers\RestfulController&#39;)-&gt;makePartial();
        $this-&gt;assertParentHasTrait(&#39;Illuminate\Foundation\Bus\DispatchesJobs&#39;, $controller);
        $this-&gt;assertParentHasTrait(&#39;Illuminate\Foundation\Validation\ValidatesRequests&#39;, $controller);
        $this-&gt;assertParentHasTrait(&#39;Illuminate\Foundation\Auth\Access\AuthorizesRequests&#39;, $controller);
    }
}
</code></pre>
<p>Actually implementing the assertion is fairly straightforward. You simply add the assertion as a method on the base test case you’re using. and accept whatever arguments are required, plus a final argument of <code>$message = &#39;&#39;</code>. Then you call <code>self::assertThat()</code>, as demonstrated below:</p>
<pre><code class="lang-php">    public function assertParentHasTrait($trait, $class, $message = &#39;&#39;)
    {
        $parent = get_parent_class($class);
        $traits = class_uses($parent);
        self::assertThat(in_array($trait, $traits), self::isTrue(), $message);
    }
</code></pre>
<p>In this case we’re asserting that the specified trait appears in the list of traits on the parent class. Note the use of <code>self::isTrue()</code> - this just verifies that the response is truthy.</p>
<p>Using this method it’s quite easy to create custom assertions, which can help make your tests less verbose and easier to read.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Snapshot test your Vue components with Jest]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/</guid>
            <pubDate>Sat, 17 Jun 2017 13:12:02 GMT</pubDate>
            <description><![CDATA[<p>At work I’ve recently started using <a href="https://vuejs.org/">Vue</a> as my main front-end framework instead of Angular 1. It has a relatively shallow learning curve and has enough similarities with both React and Angular 1 that if you’re familiar with one or both of them it feels quite familiar. We’re a Laravel shop and Laravel comes out of the box with a basic scaffolding for using Vue, so not only is it the path of least resistance, but many of my colleagues knew it already and it’s used on some existing projects (one of which I’ve been helping out on this week), so it made sense to learn it. Add to that the fact that the main alternative is Angular 2, which I vehemently dislike, and learning Vue was a no-brainer.</p>
<p><a href="https://facebook.github.io/jest/docs/snapshot-testing.html">Snapshot tests</a> are a really useful way of making sure your user interface doesn’t change unexpectedly. Facebook introduced them to their Jest testing framework last year, and they’ve started to appear in other testing frameworks too. In their words…</p>
<blockquote>
<p>A typical snapshot test case for a mobile app renders a UI component, takes a screenshot, then compares it to a reference image stored alongside the test. The test will fail if the two images do not match: either the change is unexpected, or the screenshot needs to be updated to the new version of the UI component.</p>
</blockquote>
<p>This makes it easy to make sure than a UI component, such as a React or Vue component, does not unexpectedly change how it is rendered. In the event that it does change, it will fail the test, and it’s up to the developer to confirm whether or not that’s expected - if so they can generate a new version of the snapshot and be on their way. Without it, you’re stuck manually testing that the right HTML tags get generated, which is a chore.</p>
<p>Jest’s documentation is aimed pretty squarely at React, but it’s not hard to adapt it to work with Vue components. Here I’ll show you how I got it working with Vue.</p>
<h2 id="setting-up-a-new-project">Setting up a new project</h2>
<p>I used the <a href="https://github.com/vuejs/vue-cli">Vue CLI</a> boilerplate generator to set up my initial dependencies for this project. I then had to install some further packages:</p>
<pre><code class="lang-bash">$ npm install --save-dev jest babel-jest jest-vue-preprocessor
</code></pre>
<p>After that, I had to configure Jest to work with Vue. The finished <code>package.json</code> looked like this:</p>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;myproject&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A project&quot;,
  &quot;author&quot;: &quot;Matthew Daly &lt;matthew@matthewdaly.co.uk&gt;&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,
    &quot;start&quot;: &quot;node build/dev-server.js&quot;,
    &quot;build&quot;: &quot;node build/build.js&quot;,
    &quot;lint&quot;: &quot;eslint --ext .js,.vue src&quot;,
    &quot;test&quot;: &quot;jest __test__/ --coverage&quot;
  },
  &quot;dependencies&quot;: {
    &quot;vue&quot;: &quot;^2.3.3&quot;,
    &quot;vue-router&quot;: &quot;^2.3.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;autoprefixer&quot;: &quot;^6.7.2&quot;,
    &quot;babel-core&quot;: &quot;^6.22.1&quot;,
    &quot;babel-eslint&quot;: &quot;^7.1.1&quot;,
    &quot;babel-jest&quot;: &quot;^20.0.3&quot;,
    &quot;babel-loader&quot;: &quot;^6.2.10&quot;,
    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.22.0&quot;,
    &quot;babel-preset-env&quot;: &quot;^1.3.2&quot;,
    &quot;babel-preset-stage-2&quot;: &quot;^6.22.0&quot;,
    &quot;babel-register&quot;: &quot;^6.22.0&quot;,
    &quot;chalk&quot;: &quot;^1.1.3&quot;,
    &quot;connect-history-api-fallback&quot;: &quot;^1.3.0&quot;,
    &quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;,
    &quot;css-loader&quot;: &quot;^0.28.0&quot;,
    &quot;eslint&quot;: &quot;^3.19.0&quot;,
    &quot;eslint-config-standard&quot;: &quot;^6.2.1&quot;,
    &quot;eslint-friendly-formatter&quot;: &quot;^2.0.7&quot;,
    &quot;eslint-loader&quot;: &quot;^1.7.1&quot;,
    &quot;eslint-plugin-html&quot;: &quot;^2.0.0&quot;,
    &quot;eslint-plugin-promise&quot;: &quot;^3.4.0&quot;,
    &quot;eslint-plugin-standard&quot;: &quot;^2.0.1&quot;,
    &quot;eventsource-polyfill&quot;: &quot;^0.9.6&quot;,
    &quot;express&quot;: &quot;^4.14.1&quot;,
    &quot;extract-text-webpack-plugin&quot;: &quot;^2.0.0&quot;,
    &quot;file-loader&quot;: &quot;^0.11.1&quot;,
    &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.1.3&quot;,
    &quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;,
    &quot;http-proxy-middleware&quot;: &quot;^0.17.3&quot;,
    &quot;jest&quot;: &quot;^20.0.4&quot;,
    &quot;jest-vue-preprocessor&quot;: &quot;^1.0.1&quot;,
    &quot;opn&quot;: &quot;^4.0.2&quot;,
    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^1.3.0&quot;,
    &quot;ora&quot;: &quot;^1.2.0&quot;,
    &quot;rimraf&quot;: &quot;^2.6.0&quot;,
    &quot;semver&quot;: &quot;^5.3.0&quot;,
    &quot;shelljs&quot;: &quot;^0.7.6&quot;,
    &quot;url-loader&quot;: &quot;^0.5.8&quot;,
    &quot;vue-loader&quot;: &quot;^12.1.0&quot;,
    &quot;vue-style-loader&quot;: &quot;^3.0.1&quot;,
    &quot;vue-template-compiler&quot;: &quot;^2.3.3&quot;,
    &quot;webpack&quot;: &quot;^2.6.1&quot;,
    &quot;webpack-bundle-analyzer&quot;: &quot;^2.2.1&quot;,
    &quot;webpack-dev-middleware&quot;: &quot;^1.10.0&quot;,
    &quot;webpack-hot-middleware&quot;: &quot;^2.18.0&quot;,
    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;
  },
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;&gt;= 4.0.0&quot;,
    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;
  },
  &quot;browserslist&quot;: [
    &quot;&gt; 1%&quot;,
    &quot;last 2 versions&quot;,
    &quot;not ie &lt;= 8&quot;
  ],
  &quot;jest&quot;: {
    &quot;testRegex&quot;: &quot;spec.js$&quot;,
    &quot;moduleFileExtensions&quot;: [
      &quot;js&quot;,
      &quot;vue&quot;
    ],
    &quot;transform&quot;: {
      &quot;^.+\\.js$&quot;: &quot;&lt;rootDir&gt;/node_modules/babel-jest&quot;,
      &quot;.*\\.(vue)$&quot;: &quot;&lt;rootDir&gt;/node_modules/jest-vue-preprocessor&quot;
    }
  }
}
</code></pre>
<p>I won’t include things like the Webpack config, because that’s all generated by Vue CLI. Note that we need to tell Jest what file extensions it should work with, including <code>.vue</code>, and we need to specify the appropriate transforms for different types of files. We use <code>jest-vue-preprocessor</code> for <code>.vue</code> files and <code>babel-jest</code> for <code>.js</code> files.</p>
<p>With that done, we can create a basic component. We’ll assume we’re writing a simple issue tracker here, and our first component will be at <code>src/components/Issue.vue</code>:</p>
<pre><code class="lang-html">&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;An Issue&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data () {
    return {}
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
&lt;/style&gt;
</code></pre>
<p>Next, we create a simple test for this component. Save this as <code>__test__/components/issue.spec.js</code>:</p>
<pre><code class="lang-javascript">import Issue from &#39;../../src/components/Issue.vue&#39;
import Vue from &#39;vue&#39;

const Constructor = Vue.extend(Issue)
const vm = new Constructor().$mount()

describe(&#39;Issue&#39;, () =&gt; {
  it(&#39;should render&#39;, () =&gt; {
    expect(vm.$el.querySelector(&#39;h1&#39;).textContent).toEqual(&#39;An Issue&#39;)
  });

  it(&#39;should match the snapshot&#39;, () =&gt; {
    expect(vm.$el).toMatchSnapshot()
  });
});
</code></pre>
<p><code>Constructor</code> is what creates our Vue component, while <code>vm</code> is our actual newly-mounted Vue component. We can refer to the HTML inside the component through <code>vm.$el</code>, so we can then work with the virtual DOM easily.</p>
<p>In the first test we use the more traditional method of verifying our UI component has worked as expected - we fetch an HTML tag inside it and verify that the content inside is what we expect. This is fine for a small component, but as the components get larger we’ll find it more of a chore.</p>
<p>The second test is much simpler and more concise. We simply assert that it matches the snapshot. Not only is that easier, but it can scale to components of any size because we don’t have to check every little element.</p>
<p>Let’s run our tests:</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 PASS  __test__/components/issue.spec.js
  Issue
    ✓ should render (46ms)
    ✓ should match the snapshot (14ms)

Snapshot Summary
 › 1 snapshot written in 1 test suite.

Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   1 added, 1 total
Time:        8.264s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |    96.15 |       50 |      100 |       96 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Note this section:</p>
<pre><code class="lang-bash">Snapshot Summary
 › 1 snapshot written in 1 test suite.
</code></pre>
<p>This tells us that the snapshot has been successfully written. If we run the tests again we should see that it checks against the existing snapshot:</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 PASS  __test__/components/issue.spec.js
  Issue
    ✓ should render (40ms)
    ✓ should match the snapshot (12ms)

Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   1 passed, 1 total
Time:        3.554s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |    96.15 |       50 |      100 |       96 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Great stuff. Now, if we make a minor change to our component, such as changing the text from <code>An Issue</code> to <code>My Issue</code>, does it pick that up?</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 FAIL  __test__/components/issue.spec.js (5.252s)
  ● Issue › should render

    expect(received).toEqual(expected)

    Expected value to equal:
      &quot;An Issue&quot;
    Received:
      &quot;My Issue&quot;

      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:9:52)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)

  ● Issue › should match the snapshot

    expect(value).toMatchSnapshot()

    Received value does not match stored snapshot 1.

    - Snapshot
    + Received

     &lt;div&gt;
       &lt;h1&gt;
    -    An Issue
    +    My Issue
       &lt;/h1&gt;
     &lt;/div&gt;

      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:13:20)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)

  Issue
    ✕ should render (48ms)
    ✕ should match the snapshot (25ms)

Snapshot Summary
 › 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.

Test Suites: 1 failed, 1 total
Tests:       2 failed, 2 total
Snapshots:   1 failed, 1 total
Time:        7.082s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |    96.15 |       50 |      100 |       96 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Yes, we can see that it’s picked up on the change and thrown an error. Note this line:</p>
<pre><code class="lang-bash"> › 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.
</code></pre>
<p>Jest is telling us that our snapshot has changed, but if we expect that, we can just run <code>npm test -- -u</code> to replace the existing one with our new one. Then, our tests will pass again.</p>
<p>Now, this component is pretty useless. It doesn’t accept any external input whatsoever, so the response is always going to be the same. How do we test a more dynamic component? Amend the component to look like this:</p>
<pre><code class="lang-html">&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;{{ issue.name }}&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  props: {
    issue: Object
  },
  data () {
    return {}
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
&lt;/style&gt;
</code></pre>
<p>We’re now passing the <code>issue</code> object into our component as a prop, and getting the name from that. That will break our test, so we need to amend it to pass through the props:</p>
<pre><code class="lang-javascript">import Issue from &#39;../../src/components/Issue.vue&#39;
import Vue from &#39;vue&#39;

const Constructor = Vue.extend(Issue)
const issue = {
  name: &#39;My Issue&#39;
}
const vm = new Constructor({
  propsData: { issue: issue }
}).$mount()

describe(&#39;Issue&#39;, () =&gt; {
  it(&#39;should render&#39;, () =&gt; {
    expect(vm.$el.querySelector(&#39;h1&#39;).textContent).toEqual(&#39;My Issue&#39;)
  });

  it(&#39;should match the snapshot&#39;, () =&gt; {
    expect(vm.$el).toMatchSnapshot()
  });
});
</code></pre>
<p>Here we pass our prop into the constructor for the component. Now, let’s run the tests again:</p>
<pre><code class="lang-bash">$ npm test

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage

 FAIL  __test__/components/issue.spec.js
  ● Issue › should match the snapshot

    expect(value).toMatchSnapshot()

    Received value does not match stored snapshot 1.

    - Snapshot
    + Received

     &lt;div&gt;
       &lt;h1&gt;
    -    An Issue
    +    My Issue
       &lt;/h1&gt;
     &lt;/div&gt;

      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:18:20)
      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)

  Issue
    ✓ should render (39ms)
    ✕ should match the snapshot (25ms)

Snapshot Summary
 › 1 snapshot test failed in 1 test suite. Inspect your code changes or run with `npm test -- -u` to update them.

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 passed, 2 total
Snapshots:   1 failed, 1 total
Time:        3.717s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |     96.3 |       50 |      100 |    96.15 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Jest has picked up on our changes and thrown an error. However, because we know the UI has changed, we’re happy with this situation, so we can tell Jest to replace the prior snapshot with <code>npm test -- -u</code> as mentioned earlier:</p>
<pre><code class="lang-bash">$ npm test -- -u

&gt; myproject@1.0.0 test /home/matthew/Projects/myproject
&gt; jest __test__/ --coverage &quot;-u&quot;

 PASS  __test__/components/issue.spec.js
  Issue
    ✓ should render (39ms)
    ✓ should match the snapshot (14ms)

Snapshot Summary
 › 1 snapshot updated in 1 test suite.

Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   1 updated, 1 total
Time:        3.668s
Ran all test suites matching &quot;__test__/&quot;.
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
All files                                                  |     96.3 |       50 |      100 |    96.15 |                |
 root                                                      |      100 |      100 |      100 |      100 |                |
  unknown                                                  |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |
  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |
 root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |
  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |
-----------------------------------------------------------|----------|----------|----------|----------|----------------|
</code></pre>
<p>Great, we now have a passing test suite again! That’s all we need to make sure that any regressions in the generated HTML of a component get caught.</p>
<p>Of course, this won’t help with the actual functionality of the component. However, Jest is pretty easy to use to write tests for the actual functionality of the application. If you prefer another testing framework, it’s possible to do the same with them, although I will leave setting them up as an exercise for the reader.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Integrating Behat with Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/02/18/integrating-behat-with-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/02/18/integrating-behat-with-laravel/</guid>
            <pubDate>Sat, 18 Feb 2017 21:25:57 GMT</pubDate>
            <description><![CDATA[<p>The Gherkin format used by tools like Cucumber is a really great way of specifying how your application will work. It’s easy for even non-technical stakeholders to understand, it makes it natural to break your tests into easily reusable steps, and it encourages you to think about the application from an end-user’s perspective. It’s also one of the easiest ways to get started writing automated tests when you first start out - it’s much more intuitive to a junior developer than lower-level unit tests, and is easier to add to a legacy project that may not have been built with testability in mind - if you can drive a browser, you can test it.</p>
<p><a href="http://behat.org/en/latest/">Behat</a> is a PHP equivalent. Combined with <a href="http://mink.behat.org/en/latest/">Mink</a>, it allows for easy automated acceptance tests of a PHP application. However, out of the box it doesn’t integrate well with Laravel. There is <a href="https://github.com/laracasts/Behat-Laravel-Extension">Jeffrey Way’s Behat Laravel extension</a>, but it doesn’t seem to be actively maintained and seems to be overkill for this purpose. I wanted something that I could use to run integration tests using PHPUnit’s assertions and Laravel’s testing utilities, and crucially, I wanted to do so as quickly as possible. That meant running a web server and using an automated web browser wasn’t an option. Also, I often work on REST API’s, and browser testing isn’t appropriate for those - in API tests I’m more interested in setting up the fixtures, making a single request, and verifying that it does what it’s meant to do, as quickly as possible.</p>
<p>As it turns out, integrating Behat and Laravel isn’t that hard. When using Behat, your <code>FeatureContext.php</code> file must implement the <code>Behat\Behat\Context\Context</code> interface, but as this interface does not implement any methods, you can extend any existing class and declare that it implements that interface. That means we can just extend the existing <code>Tests\TestCase</code> class in Laravel 5.4 and gain access to all the same testing utilities we have in our regular Laravel tests.</p>
<p>Then, in the constructor we can set environment variables using <code>putenv()</code> so that we can set it up to use an in-memory SQLite database for faster tests. We also use the <code>@BeforeScenario</code> hook to migrate the database before each scenario, and the <code>@AfterScenario</code> hook to roll it back afterwards.</p>
<p>Here’s the finished example:</p>
<pre><code class="lang-php">&lt;?php

use Behat\Behat\Context\Context;
use Behat\Gherkin\Node\PyStringNode;
use Behat\Gherkin\Node\TableNode;
use Tests\TestCase;
use Behat\Behat\Tester\Exception\PendingException;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\User;
use Behat\Behat\Hook\Scope\BeforeScenarioScope;
use Behat\Behat\Hook\Scope\AfterScenarioScope;
use Illuminate\Contracts\Console\Kernel;

/**
 * Defines application features from the specific context.
 */
class FeatureContext extends TestCase implements Context
{
    use DatabaseMigrations;

    protected $content;

    /**
     * Initializes context.
     *
     * Every scenario gets its own context instance.
     * You can also pass arbitrary arguments to the
     * context constructor through behat.yml.
     */
    public function __construct()
    {
        putenv(&#39;DB_CONNECTION=sqlite&#39;);
        putenv(&#39;DB_DATABASE=:memory:&#39;);
        parent::setUp();
    }

    /** @BeforeScenario */
    public function before(BeforeScenarioScope $scope)
    {
        $this-&gt;artisan(&#39;migrate&#39;);

        $this-&gt;app[Kernel::class]-&gt;setArtisan(null);
    }

    /** @AfterScenario */
    public function after(AfterScenarioScope $scope)
    {
        $this-&gt;artisan(&#39;migrate:rollback&#39;);
    }

    /**
     * @Given I visit the path :path
     */
    public function iVisitThePath($path)
    {
        $response = $this-&gt;get(&#39;/&#39;);
        $this-&gt;assertEquals(200, $response-&gt;getStatusCode());
        $this-&gt;content = $response-&gt;getContent();
    }

    /**
     * @Then I should see the text :text
     */
    public function iShouldSeeTheText($text)
    {
        $this-&gt;assertContains($text, $this-&gt;content);
    }

    /**
     * @Given a user called :user exists
     */
    public function aUserCalledExists($user)
    {
        $user = factory(App\User::class)-&gt;create([
            &#39;name&#39; =&gt; $user,
        ]);
    }

    /**
     * @Given I am logged in as :user
     */
    public function iAmLoggedInAs($user)
    {
        $user = User::where(&#39;name&#39;, $user)-&gt;first();
        $this-&gt;be($user);
    }

}
</code></pre>
<p>Note that I’ve added a few basic example methods for our tests. As you can see, we can call the same methods we normally use in Laravel tests to make assertions and HTTP requests. If you’re using Dusk, you can also call that in the same way you usually would.</p>
<p>We might then write the following feature file to demonstrate our application at work:</p>
<pre><code class="lang-gherkin">Feature: Login

    Background:
        Given a user called &quot;Alan&quot; exists
        And a user called &quot;Bob&quot; exists
        And a user called &quot;Clare&quot; exists
        And a user called &quot;Derek&quot; exists
        And a user called &quot;Eric&quot; exists

    Scenario: Log in as Alan
        Given I am logged in as &quot;Alan&quot;
        And I visit the path &quot;/&quot;
        Then I should see the text &quot;Laravel&quot;

    Scenario: Log in as Bob
        Given I am logged in as &quot;Bob&quot;
        And I visit the path &quot;/&quot;
        Then I should see the text &quot;Laravel&quot;

    Scenario: Log in as Clare
        Given I am logged in as &quot;Clare&quot;
        And I visit the path &quot;/&quot;
        Then I should see the text &quot;Laravel&quot;

    Scenario: Log in as Derek
        Given I am logged in as &quot;Derek&quot;
        And I visit the path &quot;/&quot;
        Then I should see the text &quot;Laravel&quot;

    Scenario: Log in as Eric
        Given I am logged in as &quot;Eric&quot;
        And I visit the path &quot;/&quot;
        Then I should see the text &quot;Laravel&quot;
</code></pre>
<p>We can then run these tests with <code>vendor/bin/behat</code>:</p>
<pre><code class="lang-bash">$ vendor/bin/behat 
Feature: Login

  Background:                         # features/auth.feature:3
    Given a user called &quot;Alan&quot; exists # FeatureContext::aUserCalledExists()
    And a user called &quot;Bob&quot; exists    # FeatureContext::aUserCalledExists()
    And a user called &quot;Clare&quot; exists  # FeatureContext::aUserCalledExists()
    And a user called &quot;Derek&quot; exists  # FeatureContext::aUserCalledExists()
    And a user called &quot;Eric&quot; exists   # FeatureContext::aUserCalledExists()

  Scenario: Log in as Alan               # features/auth.feature:10
    Given I am logged in as &quot;Alan&quot;       # FeatureContext::iAmLoggedInAs()
    And I visit the path &quot;/&quot;             # FeatureContext::iVisitThePath()
    Then I should see the text &quot;Laravel&quot; # FeatureContext::iShouldSeeTheText()

  Scenario: Log in as Bob                # features/auth.feature:15
    Given I am logged in as &quot;Bob&quot;        # FeatureContext::iAmLoggedInAs()
    And I visit the path &quot;/&quot;             # FeatureContext::iVisitThePath()
    Then I should see the text &quot;Laravel&quot; # FeatureContext::iShouldSeeTheText()

  Scenario: Log in as Clare              # features/auth.feature:20
    Given I am logged in as &quot;Clare&quot;      # FeatureContext::iAmLoggedInAs()
    And I visit the path &quot;/&quot;             # FeatureContext::iVisitThePath()
    Then I should see the text &quot;Laravel&quot; # FeatureContext::iShouldSeeTheText()

  Scenario: Log in as Derek              # features/auth.feature:25
    Given I am logged in as &quot;Derek&quot;      # FeatureContext::iAmLoggedInAs()
    And I visit the path &quot;/&quot;             # FeatureContext::iVisitThePath()
    Then I should see the text &quot;Laravel&quot; # FeatureContext::iShouldSeeTheText()

  Scenario: Log in as Eric               # features/auth.feature:30
    Given I am logged in as &quot;Eric&quot;       # FeatureContext::iAmLoggedInAs()
    And I visit the path &quot;/&quot;             # FeatureContext::iVisitThePath()
    Then I should see the text &quot;Laravel&quot; # FeatureContext::iShouldSeeTheText()

5 scenarios (5 passed)
40 steps (40 passed)
0m0.50s (19.87Mb)
</code></pre>
<p>Higher level tests can get very tedious if you’re not careful - you wind up setting up the same fixtures and making the same requests many times over. By using Behat in this way, not only are you writing your tests in a way that is easy to understand, but you’re also breaking it down into logical, repeatable steps, and by passing arguments in each step you limit the amount of repetition. It’s also fast if you aren’t running browser-based tests, making it particularly well-suited to API testing.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Testing your API documentation with Dredd]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/</guid>
            <pubDate>Mon, 08 Aug 2016 16:05:00 GMT</pubDate>
            <description><![CDATA[<p>Documenting your API is something most developers agree is generally a Good Thing, but it’s a pain in the backside, and somewhat boring to do. What you really need is a tool that allows you to specify the details of your API before you start work, generate documentation from that specification, and test your implementation against that specification.</p>
<p>Fortunately, such a tool exists. The <a href="https://apiblueprint.org/">Blueprint</a> specification allows you to document your API using a Markdown-like syntax. You can then create HTML documentation using a tool like <a href="https://github.com/danielgtaylor/aglio">Aglio</a> or <a href="https://apiary.io/">Apiary</a>, and test it against your implementation using <a href="https://github.com/apiaryio/dredd">Dredd</a>.</p>
<p>In this tutorial we’ll implement a very basic REST API using the Lumen framework. We’ll first specify our API, then we’ll implement routes to match the implementation. In the process, we’ll demonstrate the Blueprint specification in action.</p>
<h2 id="getting-started">Getting started</h2>
<p>Assuming you already have PHP 5.6 or better and Composer installed, run the following command to create our Lumen app skeleton:</p>
<pre><code class="lang-bash">$ composer create-project --prefer-dist laravel/lumen demoapi
</code></pre>
<p>Once it has finished installing, we’ll also need to add the Dredd hooks:</p>
<pre><code class="lang-bash">$ cd demoapi
$ composer require ddelnano/dredd-hooks-php
</code></pre>
<p>We need to install Dredd. It’s a Node.js tool, so you’ll need to have that installed. We’ll also install Aglio to generate HTML versions of our documentation:</p>
<pre><code class="lang-bash">$ npm install -g aglio dredd
</code></pre>
<p>We also need to create a configuration file for Dredd, which you can do by running <code>dredd init</code>. Or you can just copy the one below:</p>
<pre><code class="lang-yml">dry-run: null
hookfiles: null
language: php
sandbox: false
server: &#39;php -S localhost:3000 -t public/&#39;
server-wait: 3
init: false
custom:
  apiaryApiKey: &#39;&#39;
names: false
only: []
reporter: apiary
output: []
header: []
sorted: false
user: null
inline-errors: false
details: false
method: []
color: true
level: info
timestamp: false
silent: false
path: []
hooks-worker-timeout: 5000
hooks-worker-connect-timeout: 1500
hooks-worker-connect-retry: 500
hooks-worker-after-connect-wait: 100
hooks-worker-term-timeout: 5000
hooks-worker-term-retry: 500
hooks-worker-handler-host: localhost
hooks-worker-handler-port: 61321
config: ./dredd.yml
blueprint: apiary.apib
endpoint: &#39;http://localhost:3000&#39;
</code></pre>
<p>If you choose to run <code>dredd init</code>, you’ll see prompts for a number of things, including:</p>
<ul>
<li>The server command</li>
<li>The blueprint file name</li>
<li>The endpoint</li>
<li>Any Apiary API key</li>
<li>The language you want to use</li>
</ul>
<p>There are Dredd hooks for many languages, so if you’re planning on building a REST API in a language other than PHP, don’t worry - you can still test it with Dredd, you’ll just get prompted to install different hooks.</p>
<p>Note the <code>hookfiles</code> section, which specifies a hookfile to run during the test in order to set up the API. We’ll touch on that in a moment. Also, note the <code>server</code> setting - this specifies the command we should call to run the server. In this case we’re using the PHP development server.</p>
<p>If you’re using Apiary with your API (which I highly recommend), you can also set the following parameter to ensure that every time you run Dredd, it submits the results to Apiary:</p>
<pre><code class="lang-yml">custom:
  apiaryApiKey: &lt;API KEY HERE&gt;
  apiaryApiName: &lt;API NAME HERE&gt;
</code></pre>
<h2 id="hookfiles">Hookfiles</h2>
<p>As mentioned, the hooks allow you to set up your API. In our case, we’ll need to set up some fixtures for our tests.  Save this file at <code>tests/dredd/hooks/hookfile.php</code>:</p>
<pre><code class="lang-php">&lt;?php

use Dredd\Hooks;
use Illuminate\Support\Facades\Artisan;

require __DIR__ . &#39;/../../../vendor/autoload.php&#39;;

$app = require __DIR__ . &#39;/../../../bootstrap/app.php&#39;;

$app-&gt;make(\Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();

Hooks::beforeAll(function (&amp;$transaction) use ($app) {
   putenv(&#39;DB_CONNECTION=sqlite&#39;);
   putenv(&#39;DB_DATABASE=:memory:&#39;);
   Artisan::call(&#39;migrate:refresh&#39;);
   Artisan::call(&#39;db:seed&#39;);
});
Hooks::beforeEach(function (&amp;$transaction) use ($app) {
   Artisan::call(&#39;migrate:refresh&#39;);
   Artisan::call(&#39;db:seed&#39;);
});
</code></pre>
<p>Before the tests run, we set the environment up to use an in-memory SQLite database. We also migrate and seed the database, so we’re working with a clean database. As part of this tutorial, we’ll create seed files for the fixtures we need in the database.</p>
<p>This hookfile assumes that the user does not need to be authenticated to communicate with the API. If that’s not the case for your API, you may want to include something like this in your hookfile’s <code>beforeEach</code> callback:</p>
<pre><code class="lang-php">   $user = App\User::first();
   $token = JWTAuth::fromUser($user);
   $transaction-&gt;request-&gt;headers-&gt;Authorization = &#39;Bearer &#39; . $token;
</code></pre>
<p>Here we’re using the <a href="https://github.com/tymondesigns/jwt-auth">JWT Auth</a> package for Laravel to authenticate users of our API, and we need to set the <code>Authorization</code> header to contain a valid JSON web token for the given user. If you’re using a different method, such as HTTP Basic authentication, you’ll need to amend this code to reflect that.</p>
<p>With that done, we need to create the Blueprint file for our API. Recall the following line in <code>dredd.yml</code>:</p>
<pre><code class="lang-yml">blueprint: apiary.apib
</code></pre>
<p>This specifies the path to our documentation. Let’s create that file:</p>
<pre><code class="lang-bash">$ touch apiary.apib
</code></pre>
<p>Once this is done, you should be able to run Dredd:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
warn: Parser warning in file &#39;apiary.apib&#39;: (warning code undefined) Could not recognize API description format. Falling back to API Blueprint by default.
info: Beginning Dredd testing...
complete: Tests took 619ms
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/4aab4155-cfc4-4fda-983a-fea280933ad4
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>With that done, we’re ready to start work on our API.</p>
<h2 id="our-first-route">Our first route</h2>
<p>Dredd is not a testing tool in the usual sense. Under no circumstances should you use it as a substitute for something like PHPUnit - that’s not what it’s for. It’s for ensuring that your documentation and your implementation remain in sync. However, it’s not entirely impractical to use it as a Behaviour-driven development tool in the same vein as Cucumber or Behat - you can use it to plan out the endpoints your API will have, the requests they accept, and the responses they return, and then verify your implementation against the documentation.</p>
<p>We will only have a single endpoint, in order to keep this tutorial as simple and concise as possible. Our endpoint will expose products for a shop, and will allow users to fetch, create, edit and delete products. Note that we won’t be implementing any kind of authentication, which in production is almost certainly not what you want - we’re just going for the simplest possible implementation.</p>
<p>First, we’ll implement getting a list of products:</p>
<pre><code class="lang-markdown">FORMAT: 1A

# Demo API

# Products [/api/products]
Product object representation

## Get products [GET /api/products]
Get a list of products

+ Request (application/json)

+ Response 200 (application/json)
    + Body

            {
                &quot;id&quot;: 1,
                &quot;name&quot;: &quot;Purple widget&quot;,
                &quot;description&quot;: &quot;A purple widget&quot;,
                &quot;price&quot;: 5.99,
                &quot;attributes&quot;: {
                    &quot;colour&quot;: &quot;Purple&quot;,
                    &quot;size&quot;: &quot;Small&quot;
                }
            }
</code></pre>
<p>A little explanation is called for. First the <code>FORMAT</code> section denotes the version of the API. Then, the <code># Demo API</code> section denotes the name of the API.</p>
<p>Next, we define the <code>Products</code> endpoint, followed by our first method. Then we define what should be contained in the request, and what the response should look like. Blueprint is a little more complex than that, but that’s sufficient to get us started.</p>
<p>Then we run <code>dredd</code> again:</p>
<pre><code class="lang-bash">$ dredd.yml
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
fail: GET /api/products duration: 61ms
info: Displaying failed tests...
fail: GET /api/products duration: 61ms
fail: headers: Header &#39;content-type&#39; has value &#39;text/html; charset=UTF-8&#39; instead of &#39;application/json&#39;
body: Can&#39;t validate real media type &#39;text/plain&#39; against expected media type &#39;application/json&#39;.
statusCode: Status code is not &#39;200&#39;

request: 
method: GET
uri: /api/products
headers: 
    Content-Type: application/json
    User-Agent: Dredd/1.5.0 (Linux 4.4.0-31-generic; x64)

body: 



expected: 
headers: 
    Content-Type: application/json

body: 
{
  &quot;id&quot;: 1,
  &quot;name&quot;: &quot;Purple widget&quot;,
  &quot;description&quot;: &quot;A purple widget&quot;,
  &quot;price&quot;: 5.99,
  &quot;attributes&quot;: {
    &quot;colour&quot;: &quot;Purple&quot;,
    &quot;size&quot;: &quot;Small&quot;
  }
}
statusCode: 200


actual: 
statusCode: 404
headers: 
    host: localhost:3000
    connection: close
    x-powered-by: PHP/7.0.8-0ubuntu0.16.04.2
    cache-control: no-cache
    date: Mon, 08 Aug 2016 10:30:33 GMT
    content-type: text/html; charset=UTF-8

body: 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta name=&quot;robots&quot; content=&quot;noindex,nofollow&quot; /&gt;
        &lt;style&gt;
            /* Copyright (c) 2010, Yahoo! Inc. All rights reserved. Code licensed under the BSD License: http://developer.yahoo.com/yui/license.html */
            html{color:#000;background:#FFF;}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0;}table{border-collapse:collapse;border-spacing:0;}fieldset,img{border:0;}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:normal;}li{list-style:none;}caption,th{text-align:left;}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal;}q:before,q:after{content:&#39;&#39;;}abbr,acronym{border:0;font-variant:normal;}sup{vertical-align:text-top;}sub{vertical-align:text-bottom;}input,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit;}input,textarea,select{*font-size:100%;}legend{color:#000;}
            html { background: #eee; padding: 10px }
            img { border: 0; }
            #sf-resetcontent { width:970px; margin:0 auto; }
                        .sf-reset { font: 11px Verdana, Arial, sans-serif; color: #333 }
            .sf-reset .clear { clear:both; height:0; font-size:0; line-height:0; }
            .sf-reset .clear_fix:after { display:block; height:0; clear:both; visibility:hidden; }
            .sf-reset .clear_fix { display:inline-block; }
            .sf-reset * html .clear_fix { height:1%; }
            .sf-reset .clear_fix { display:block; }
            .sf-reset, .sf-reset .block { margin: auto }
            .sf-reset abbr { border-bottom: 1px dotted #000; cursor: help; }
            .sf-reset p { font-size:14px; line-height:20px; color:#868686; padding-bottom:20px }
            .sf-reset strong { font-weight:bold; }
            .sf-reset a { color:#6c6159; cursor: default; }
            .sf-reset a img { border:none; }
            .sf-reset a:hover { text-decoration:underline; }
            .sf-reset em { font-style:italic; }
            .sf-reset h1, .sf-reset h2 { font: 20px Georgia, &quot;Times New Roman&quot;, Times, serif }
            .sf-reset .exception_counter { background-color: #fff; color: #333; padding: 6px; float: left; margin-right: 10px; float: left; display: block; }
            .sf-reset .exception_title { margin-left: 3em; margin-bottom: 0.7em; display: block; }
            .sf-reset .exception_message { margin-left: 3em; display: block; }
            .sf-reset .traces li { font-size:12px; padding: 2px 4px; list-style-type:decimal; margin-left:20px; }
            .sf-reset .block { background-color:#FFFFFF; padding:10px 28px; margin-bottom:20px;
                -webkit-border-bottom-right-radius: 16px;
                -webkit-border-bottom-left-radius: 16px;
                -moz-border-radius-bottomright: 16px;
                -moz-border-radius-bottomleft: 16px;
                border-bottom-right-radius: 16px;
                border-bottom-left-radius: 16px;
                border-bottom:1px solid #ccc;
                border-right:1px solid #ccc;
                border-left:1px solid #ccc;
            }
            .sf-reset .block_exception { background-color:#ddd; color: #333; padding:20px;
                -webkit-border-top-left-radius: 16px;
                -webkit-border-top-right-radius: 16px;
                -moz-border-radius-topleft: 16px;
                -moz-border-radius-topright: 16px;
                border-top-left-radius: 16px;
                border-top-right-radius: 16px;
                border-top:1px solid #ccc;
                border-right:1px solid #ccc;
                border-left:1px solid #ccc;
                overflow: hidden;
                word-wrap: break-word;
            }
            .sf-reset a { background:none; color:#868686; text-decoration:none; }
            .sf-reset a:hover { background:none; color:#313131; text-decoration:underline; }
            .sf-reset ol { padding: 10px 0; }
            .sf-reset h1 { background-color:#FFFFFF; padding: 15px 28px; margin-bottom: 20px;
                -webkit-border-radius: 10px;
                -moz-border-radius: 10px;
                border-radius: 10px;
                border: 1px solid #ccc;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
                    &lt;div id=&quot;sf-resetcontent&quot; class=&quot;sf-reset&quot;&gt;
                &lt;h1&gt;Sorry, the page you are looking for could not be found.&lt;/h1&gt;
                                        &lt;h2 class=&quot;block_exception clear_fix&quot;&gt;
                            &lt;span class=&quot;exception_counter&quot;&gt;1/1&lt;/span&gt;
                            &lt;span class=&quot;exception_title&quot;&gt;&lt;abbr title=&quot;Symfony\Component\HttpKernel\Exception\NotFoundHttpException&quot;&gt;NotFoundHttpException&lt;/abbr&gt; in &lt;a title=&quot;/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 450&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;RoutesRequests.php line 450&lt;/a&gt;:&lt;/span&gt;
                            &lt;span class=&quot;exception_message&quot;&gt;&lt;/span&gt;
                        &lt;/h2&gt;
                        &lt;div class=&quot;block&quot;&gt;
                            &lt;ol class=&quot;traces list_exception&quot;&gt;
       &lt;li&gt; in &lt;a title=&quot;/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 450&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;RoutesRequests.php line 450&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;at &lt;abbr title=&quot;Laravel\Lumen\Application&quot;&gt;Application&lt;/abbr&gt;-&gt;handleDispatcherResponse(&lt;em&gt;array&lt;/em&gt;(&#39;0&#39;)) in &lt;a title=&quot;/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 387&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;RoutesRequests.php line 387&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;at &lt;abbr title=&quot;Laravel\Lumen\Application&quot;&gt;Application&lt;/abbr&gt;-&gt;Laravel\Lumen\Concerns\{closure}() in &lt;a title=&quot;/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 636&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;RoutesRequests.php line 636&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;at &lt;abbr title=&quot;Laravel\Lumen\Application&quot;&gt;Application&lt;/abbr&gt;-&gt;sendThroughPipeline(&lt;em&gt;array&lt;/em&gt;(), &lt;em&gt;object&lt;/em&gt;(&lt;abbr title=&quot;Closure&quot;&gt;Closure&lt;/abbr&gt;)) in &lt;a title=&quot;/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 389&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;RoutesRequests.php line 389&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;at &lt;abbr title=&quot;Laravel\Lumen\Application&quot;&gt;Application&lt;/abbr&gt;-&gt;dispatch(&lt;em&gt;null&lt;/em&gt;) in &lt;a title=&quot;/home/matthew/Projects/demoapi/vendor/laravel/lumen-framework/src/Concerns/RoutesRequests.php line 334&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;RoutesRequests.php line 334&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;at &lt;abbr title=&quot;Laravel\Lumen\Application&quot;&gt;Application&lt;/abbr&gt;-&gt;run() in &lt;a title=&quot;/home/matthew/Projects/demoapi/public/index.php line 28&quot; ondblclick=&quot;var f=this.innerHTML;this.innerHTML=this.title;this.title=f;&quot;&gt;index.php line 28&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;

            &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;



complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total
complete: Tests took 533ms
[Mon Aug  8 11:30:33 2016] 127.0.0.1:44472 [404]: /api/products
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/0153d5bf-6efa-4fdb-b02a-246ddd75cb14
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>Our route is returning HTML, not JSON, and is also raising a 404 error. So let’s fix that. First, let’s create our <code>Product</code> model at <code>app/Product.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Product extends Model
{
    //
}
</code></pre>
<p>Next, we need to create a migration for the database tables for the <code>Product</code> model:</p>
<pre><code class="lang-bash">$ php artisan make:migration create_product_table
Created Migration: 2016_08_08_105737_create_product_table
</code></pre>
<p>This will create a new file under <code>database/migrations</code>. Open this file and paste in the following:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateProductTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        // Create products table
        Schema::create(&#39;products&#39;, function (Blueprint $table) {
            $table-&gt;increments(&#39;id&#39;);
            $table-&gt;string(&#39;name&#39;);
            $table-&gt;text(&#39;description&#39;);
            $table-&gt;float(&#39;price&#39;);
            $table-&gt;json(&#39;attributes&#39;);
            $table-&gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        // Drop products table
        Schema::drop(&#39;products&#39;);
    }
}
</code></pre>
<p>Note that we create fields that map to the attributes our API exposes. Also, note the use of the JSON field. In databases that support it, like PostgreSQL, it uses the native JSON support, otherwise it works like a text field. Next, we run the migration to create the table:</p>
<pre><code class="lang-bash">$ php artisan migrate
Migrated: 2016_08_08_105737_create_product_table
</code></pre>
<p>With our model done, we now need to ensure that when Dredd runs, there is some data in the database, so we’ll create a seeder file at <code>database/seeds/ProductSeeder</code>:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;
use Carbon\Carbon;

class ProductSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Add product
        DB::table(&#39;products&#39;)-&gt;insert([
            &#39;name&#39; =&gt; &#39;Purple widget&#39;,
            &#39;description&#39; =&gt; &#39;A purple widget&#39;,
            &#39;price&#39; =&gt; 5.99,
            &#39;attributes&#39; =&gt; json_encode([
                &#39;colour&#39; =&gt; &#39;purple&#39;,
                &#39;size&#39; =&gt; &#39;Small&#39;
            ]),
            &#39;created_at&#39; =&gt; Carbon::now(),
            &#39;updated_at&#39; =&gt; Carbon::now(),
        ]);
    }
}
</code></pre>
<p>You also need to amend <code>database/seeds/DatabaseSeeder</code> to call it:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $this-&gt;call(&#39;ProductSeeder&#39;);
    }
}
</code></pre>
<p>I found I also had to run the following command to find the new seeder:</p>
<pre><code class="lang-bash">$ composer dump-autoload
</code></pre>
<p>Then, call the seeder:</p>
<pre><code class="lang-bash">$ php artisan db:seed
Seeded: ProductSeeder
</code></pre>
<p>We also need to enable Eloquent, as Lumen disables it by default. Uncomment the following line in <code>bootstrap/app.php</code>:</p>
<pre><code class="lang-php">$app-&gt;withEloquent();
</code></pre>
<p>With that done, we can move onto the controller.</p>
<h2 id="creating-the-controller">Creating the controller</h2>
<p>Create the following file at <code>app/Http/Controllers/ProductController</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Product;

class ProductController extends Controller
{
    private $product;

    public function __construct(Product $product) {
        $this-&gt;product = $product;
    }

    public function index()
    {
        // Get all products
        $products = $this-&gt;product-&gt;all();

        // Send response
        return response()-&gt;json($products, 200);
    }
}
</code></pre>
<p>This implements the <code>index</code> route. Note that we inject the <code>Product</code> instance into the controller. Next, we need to hook it up in <code>app/Http/routes.php</code>:</p>
<pre><code class="lang-php">&lt;?php

/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Here is where you can register all of the routes for an application.
| It is a breeze. Simply tell Lumen the URIs it should respond to
| and give it the Closure to call when that URI is requested.
|
*/

$app-&gt;get(&#39;/api/products&#39;, &#39;ProductController@index&#39;);
</code></pre>
<p>Then we run Dredd again:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
[Mon Aug  8 12:36:28 2016] 127.0.0.1:45466 [200]: /api/products
fail: GET /api/products duration: 131ms
info: Displaying failed tests...
fail: GET /api/products duration: 131ms
fail: body: At &#39;&#39; Invalid type: array (expected object)

request: 
method: GET
uri: /api/products
headers: 
    Content-Type: application/json
    User-Agent: Dredd/1.5.0 (Linux 4.4.0-31-generic; x64)

body: 



expected: 
headers: 
    Content-Type: application/json

body: 
{
  &quot;id&quot;: 1,
  &quot;name&quot;: &quot;Purple widget&quot;,
  &quot;description&quot;: &quot;A purple widget&quot;,
  &quot;price&quot;: 5.99,
  &quot;attributes&quot;: {
    &quot;colour&quot;: &quot;Purple&quot;,
    &quot;size&quot;: &quot;Small&quot;
  }
}
statusCode: 200


actual:
statusCode: 200
headers:
    host: localhost:3000
    connection: close
    x-powered-by: PHP/7.0.8-0ubuntu0.16.04.2
    cache-control: no-cache
    content-type: application/json
    date: Mon, 08 Aug 2016 11:36:28 GMT

body:
[ 
  { 
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;Purple widget&quot;,
    &quot;description&quot;: &quot;A purple widget&quot;,
    &quot;price&quot;: &quot;5.99&quot;,
    &quot;attributes&quot;: &quot;{\&quot;colour\&quot;:\&quot;purple\&quot;,\&quot;size\&quot;:\&quot;Small\&quot;}&quot;,
    &quot;created_at&quot;: &quot;2016-08-08 11:32:24&quot;,
    &quot;updated_at&quot;: &quot;2016-08-08 11:32:24&quot;
  }
]



complete: 0 passing, 1 failing, 0 errors, 0 skipped, 1 total
complete: Tests took 582ms
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/83da2d67-c846-4356-a3b8-4d7c32daa7ef
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>Whoops, looks like we made a mistake here. The index route returns an array of objects, but we’re looking for a single object in the blueprint. We also need to wrap our attributes in quotes, and add the <code>created_at</code> and <code>updated_at</code> attributes. Let’s fix the blueprint:</p>
<pre><code class="lang-markdown">FORMAT: 1A

# Demo API

# Products [/api/products]
Product object representation

## Get products [GET /api/products]
Get a list of products

+ Request (application/json)

+ Response 200 (application/json)
    + Body

            [
                {
                    &quot;id&quot;: 1,
                    &quot;name&quot;: &quot;Purple widget&quot;,
                    &quot;description&quot;: &quot;A purple widget&quot;,
                    &quot;price&quot;: 5.99,
                    &quot;attributes&quot;: &quot;{\&quot;colour\&quot;: \&quot;Purple\&quot;,\&quot;size\&quot;: \&quot;Small\&quot;}&quot;,
                    &quot;created_at&quot;: &quot;*&quot;,
                    &quot;updated_at&quot;: &quot;*&quot;
                }
            ]
</code></pre>
<p>Let’s run Dredd again:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
pass: GET /api/products duration: 65ms
complete: 1 passing, 0 failing, 0 errors, 0 skipped, 1 total
complete: Tests took 501ms
[Mon Aug  8 13:05:54 2016] 127.0.0.1:45618 [200]: /api/products
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/7c23d4ae-aff2-4daf-bbdf-9fd76fc58b97
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>And now we can see that our test passes.</p>
<p>Next, we’ll implement a test for fetching a single product:</p>
<pre><code class="lang-markdown">## Get a product [GET /api/products/1]
Get a single product

+ Request (application/json)

+ Response 200 (application/json)
    + Body

            {
              &quot;id&quot;: 1,
              &quot;name&quot;: &quot;Purple widget&quot;,
              &quot;description&quot;: &quot;A purple widget&quot;,
              &quot;price&quot;: 5.99,
              &quot;attributes&quot;: &quot;{\&quot;colour\&quot;: \&quot;Purple\&quot;,\&quot;size\&quot;: \&quot;Small\&quot;}&quot;,
              &quot;created_at&quot;: &quot;*&quot;,
              &quot;updated_at&quot;: &quot;*&quot;
            }
</code></pre>
<p>Note the same basic format - we define the URL that should be fetched, the content of the request, and the response, including the status code.</p>
<p>Let’s hook up our route in <code>app/Http/routes.php</code>:</p>
<pre><code class="lang-php">$app-&gt;get(&#39;/api/products/{id}&#39;, &#39;ProductController@show&#39;);
</code></pre>
<p>And add the <code>show()</code> method to the controller:</p>
<pre><code class="lang-php">    public function show($id)
    {
        // Get individual product
        $product = $this-&gt;product-&gt;findOrFail($id);

        // Send response
        return response()-&gt;json($product, 200);
    }
</code></pre>
<p>Running Dredd again should show this method has been implemented:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
pass: GET /api/products duration: 66ms
[Mon Aug  8 13:21:31 2016] 127.0.0.1:45750 [200]: /api/products
pass: GET /api/products/1 duration: 17ms
complete: 2 passing, 0 failing, 0 errors, 0 skipped, 2 total
complete: Tests took 521ms
[Mon Aug  8 13:21:31 2016] 127.0.0.1:45752 [200]: /api/products/1
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/bb6d03c3-8fad-477c-b140-af6e0cc8b96c
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>That’s our read support done. We just need to add support for <code>POST</code>, <code>PATCH</code> and <code>DELETE</code> methods.</p>
<h2 id="our-remaining-methods">Our remaining methods</h2>
<p>Let’s set up the test for our <code>POST</code> method first:</p>
<pre><code class="lang-markdown">## Create products [POST /api/products]
Create a new product

+ name (string) - The product name
+ description (string) - The product description
+ price (float) - The product price
+ attributes (string) - The product attributes

+ Request (application/json)
    + Body

            {
                &quot;name&quot;: &quot;Blue widget&quot;,
                &quot;description&quot;: &quot;A blue widget&quot;,
                &quot;price&quot;: 5.99,
                &quot;attributes&quot;: &quot;{\&quot;colour\&quot;: \&quot;blue\&quot;,\&quot;size\&quot;: \&quot;Small\&quot;}&quot;
            }

+ Response 201 (application/json)
    + Body

            {
              &quot;id&quot;: 2,
              &quot;name&quot;: &quot;Blue widget&quot;,
              &quot;description&quot;: &quot;A blue widget&quot;,
              &quot;price&quot;: 5.99,
              &quot;attributes&quot;: &quot;{\&quot;colour\&quot;: \&quot;blue\&quot;,\&quot;size\&quot;: \&quot;Small\&quot;}&quot;,
              &quot;created_at&quot;: &quot;*&quot;,
              &quot;updated_at&quot;: &quot;*&quot;
            }
</code></pre>
<p>Note we specify the format of the parameters that should be passed through, and that our status code should be 201, not 200 - this is arguably a more correct choice for creating a resource. Be careful of the whitespace - I had some odd issues with it. Next, we add our route:</p>
<pre><code class="lang-php">$app-&gt;post(&#39;/api/products&#39;, &#39;ProductController@store&#39;);
</code></pre>
<p>And the <code>store()</code> method in the controller:</p>
<pre><code class="lang-php">    public function store(Request $request)
    {
        // Validate request
        $valid = $this-&gt;validate($request, [
            &#39;name&#39; =&gt; &#39;required|string&#39;,
            &#39;description&#39; =&gt; &#39;required|string&#39;,
            &#39;price&#39; =&gt; &#39;required|numeric&#39;,
            &#39;attributes&#39; =&gt; &#39;string&#39;,
        ]);

        // Create product
        $product = new $this-&gt;product;
        $product-&gt;name = $request-&gt;input(&#39;name&#39;);
        $product-&gt;description = $request-&gt;input(&#39;description&#39;);
        $product-&gt;price = $request-&gt;input(&#39;price&#39;);
        $product-&gt;attributes = $request-&gt;input(&#39;attributes&#39;);

        // Save product
        $product-&gt;save();

        // Send response
        return response()-&gt;json($product, 201);
    }
</code></pre>
<p>Note that we validate the attributes, to ensure they are correct and that the required ones exist. Running Dredd again should show the route is now in place:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
pass: GET /api/products duration: 69ms
[Mon Aug  8 15:17:35 2016] 127.0.0.1:47316 [200]: /api/products
pass: GET /api/products/1 duration: 18ms
[Mon Aug  8 15:17:35 2016] 127.0.0.1:47318 [200]: /api/products/1
pass: POST /api/products duration: 42ms
complete: 3 passing, 0 failing, 0 errors, 0 skipped, 3 total
complete: Tests took 575ms
[Mon Aug  8 15:17:35 2016] 127.0.0.1:47322 [201]: /api/products
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/cb5971cf-180d-47ed-abf4-002378941134
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>Next, we’ll implement <code>PATCH</code>. This targets an existing object, but accepts parameters in the same way as <code>POST</code>:</p>
<pre><code class="lang-markdown">## Update existing products [PATCH /api/products/1]
Update an existing product

+ name (string) - The product name
+ description (string) - The product description
+ price (float) - The product price
+ attributes (string) - The product attributes

+ Request (application/json)
    + Body

            {
                &quot;name&quot;: &quot;Blue widget&quot;,
                &quot;description&quot;: &quot;A blue widget&quot;,
                &quot;price&quot;: 5.99,
                &quot;attributes&quot;: &quot;{\&quot;colour\&quot;: \&quot;blue\&quot;,\&quot;size\&quot;: \&quot;Small\&quot;}&quot;
            }

+ Response 200 (application/json)
    + Body

            {
              &quot;id&quot;: 2,
              &quot;name&quot;: &quot;Blue widget&quot;,
              &quot;description&quot;: &quot;A blue widget&quot;,
              &quot;price&quot;: 5.99,
              &quot;attributes&quot;: &quot;{\&quot;colour\&quot;: \&quot;blue\&quot;,\&quot;size\&quot;: \&quot;Small\&quot;}&quot;,
              &quot;created_at&quot;: &quot;*&quot;,
              &quot;updated_at&quot;: &quot;*&quot;
            }
</code></pre>
<p>We add our new route:</p>
<pre><code class="lang-php">$app-&gt;patch(&#39;/api/products/{id}&#39;, &#39;ProductController@update&#39;);
</code></pre>
<p>And our <code>update()</code> method:</p>
<pre><code class="lang-php">    public function update(Request $request, $id)
    {
        // Validate request
        $valid = $this-&gt;validate($request, [
            &#39;name&#39; =&gt; &#39;string&#39;,
            &#39;description&#39; =&gt; &#39;string&#39;,
            &#39;price&#39; =&gt; &#39;numeric&#39;,
            &#39;attributes&#39; =&gt; &#39;string&#39;,
        ]);

        // Get product
        $product = $this-&gt;product-&gt;findOrFail($id);

        // Update it
        if ($request-&gt;has(&#39;name&#39;)) {
            $product-&gt;name = $request-&gt;input(&#39;name&#39;);
        }
        if ($request-&gt;has(&#39;description&#39;)) {
            $product-&gt;description = $request-&gt;input(&#39;description&#39;);
        }
        if ($request-&gt;has(&#39;price&#39;)) {
            $product-&gt;price = $request-&gt;input(&#39;price&#39;);
        }
        if ($request-&gt;has(&#39;attributes&#39;)) {
            $product-&gt;attributes = $request-&gt;input(&#39;attributes&#39;);
        }

        // Save product
        $product-&gt;save();

        // Send response
        return response()-&gt;json($product, 200);
    }
</code></pre>
<p>Here we can’t guarantee every parameter will exist, so we test for it. We run Dredd again:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
pass: GET /api/products duration: 74ms
[Mon Aug  8 15:27:14 2016] 127.0.0.1:47464 [200]: /api/products
pass: GET /api/products/1 duration: 19ms
[Mon Aug  8 15:27:14 2016] 127.0.0.1:47466 [200]: /api/products/1
pass: POST /api/products duration: 36ms
[Mon Aug  8 15:27:14 2016] 127.0.0.1:47470 [201]: /api/products
[Mon Aug  8 15:27:14 2016] 127.0.0.1:47474 [200]: /api/products/1
pass: PATCH /api/products/1 duration: 34ms
complete: 4 passing, 0 failing, 0 errors, 0 skipped, 4 total
complete: Tests took 2579ms
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/eae98644-44ad-432f-90fc-5f73fa674f66
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>One last method to implement - the <code>DELETE</code> method. Add this to <code>apiary.apib</code>:</p>
<pre><code class="lang-markdown">## Delete products [DELETE /api/products/1]
Delete an existing product

+ Request (application/json)

+ Response 200 (application/json)
    + Body

            {
                &quot;status&quot;: &quot;Deleted&quot;
            }
</code></pre>
<p>Next, add the route:</p>
<pre><code class="lang-php">$app-&gt;delete(&#39;/api/products/{id}&#39;, &#39;ProductController@destroy&#39;);
</code></pre>
<p>And the <code>destroy()</code> method in the controller:</p>
<pre><code class="lang-php">    public function destroy($id)
    {
        // Get product
        $product = $this-&gt;product-&gt;findOrFail($id);

        // Delete product
        $product-&gt;delete();

        // Return empty response
        return response()-&gt;json([&#39;status&#39; =&gt; &#39;deleted&#39;], 200);
    }
</code></pre>
<p>And let’s run Dredd again:</p>
<pre><code class="lang-bash">$ dredd
info: Configuration &#39;./dredd.yml&#39; found, ignoring other arguments.
info: Using apiary reporter.
info: Starting server with command: php -S localhost:3000 -t public/
info: Waiting 3 seconds for server command to start...
info: Beginning Dredd testing...
pass: GET /api/products duration: 66ms
[Mon Aug  8 15:57:44 2016] 127.0.0.1:48664 [200]: /api/products
pass: GET /api/products/1 duration: 19ms
[Mon Aug  8 15:57:44 2016] 127.0.0.1:48666 [200]: /api/products/1
pass: POST /api/products duration: 45ms
[Mon Aug  8 15:57:44 2016] 127.0.0.1:48670 [201]: /api/products
pass: PATCH /api/products/1 duration: 24ms
[Mon Aug  8 15:57:44 2016] 127.0.0.1:48674 [200]: /api/products/1
pass: DELETE /api/products/1 duration: 27ms
complete: 5 passing, 0 failing, 0 errors, 0 skipped, 5 total
complete: Tests took 713ms
[Mon Aug  8 15:57:44 2016] 127.0.0.1:48678 [200]: /api/products/1
complete: See results in Apiary at: https://app.apiary.io/public/tests/run/a3e11d59-1dad-404b-9319-61ca5c0fcd15
info: Sending SIGTERM to the backend server
info: Backend server was killed
</code></pre>
<p>Our REST API is now finished.</p>
<h2 id="generating-html-version-of-your-documentation">Generating HTML version of your documentation</h2>
<p>Now we have finished documenting and implementing our API, we need to generate an HTML version of it. One way is to use <code>aglio</code>:</p>
<pre><code class="lang-bash">$ aglio -i apiary.apib -o output.html
</code></pre>
<p>This will write the documentation to <code>output.html</code>. There’s also scope for choosing different themes if you wish.</p>
<p>You can also use Apiary, which has the advantage that they’ll create a stub of your API so that if you need to work with the API before it’s finished being implemented, you can use that as a placeholder.</p>
<h2 id="summary">Summary</h2>
<p>The Blueprint language is a useful way of documenting your API, and makes it simple enough that it’s hard to weasel out of doing so. It’s worth taking a closer look at <a href="https://apiblueprint.org/">the specification</a> as it goes into quite a lot of detail. It’s hard to ensure that the documentation and implementation remain in sync, so it’s a good idea to use Dredd to ensure that any changes you make don’t invalidate the documentation. With Aglio or Apiary, you can easily convert the documentation into a more attractive format.</p>
<p>You’ll find the source code for this demo API <a href="https://github.com/matthewbdaly/demoapi">on Github</a>, so if you get stuck, take a look at that. I did have a fair few issues with whitespace, so bear that in mind if it behaves oddly. I’ve also noticed a few quirks, such as Dredd not working properly if a route returns a 204 response code, which is why I couldn’t use that for deleting - this <a href="https://github.com/apiaryio/dredd/issues/468">appears to be a bug</a>, but hopefully this will be resolved soon.</p>
<p>I’ll say it again, Dredd is not a substitute for proper unit tests, and under no circumstances should you use it as one. However, it can be very useful as a way to plan how your API will work and ensure that it complies with that plan, and to ensure that the implementation and documentation don’t diverge. Used as part of your normal continuous integration setup, Dredd can make sure that any divergence between the docs and the application is picked up on and fixed as quickly as possible, while also making writing documentation less onerous.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Testing PHP web applications with Cucumber]]></title>
            <link>https://matthewdaly.co.uk/blog/2012/11/03/testing-php-web-applications-with-cucumber/</link>
            <guid>https://matthewdaly.co.uk/blog/2012/11/03/testing-php-web-applications-with-cucumber/</guid>
            <pubDate>Sat, 03 Nov 2012 16:43:00 GMT</pubDate>
            <description><![CDATA[<p>Ever since I first heard of <a href="http://cukes.info/">Cucumber</a>, it’s seemed like something I would find really useful. Like many developers, especially those who use PHP regularly, I know full well that I should make a point of writing proper automated tests for my web apps, but invariably wind up just thinking “I haven’t got time to get my head around a testing framework and it’ll take ages to set up, so I’ll just click around and look for bugs”. This does get very, very tedious quite quickly, however.</p>
<p>At work I’ve reached a point with  a web app I’m building where I needed to test it extensively to make sure it worked OK. I soon began to get very, very fed up of the repetitive clicking around necessary to test the application, so I began looking around for a solution. I gave Selenium IDE a try, but I found that to be annoyingly unreliable when recording tests. I’d heard of Cucumber, so I did some googling, found some resources, and began tinkering with that. Quite quickly, I had a few basic acceptance tests up and running that were much more reliable than Selenium IDE, and much less tedious to use than manual testing. Within a very short space of time, I realised that Cucumber was one of those tools that was going to dramatically improve my coding experience, much like when I switched from Subversion to Git.</p>
<p>What’s so great about Cucumber compared to other acceptance testing solutions?</p>
<ul>
<li>Cucumber scenarios are written using Gherkin, a simple syntax that makes it easy for customers to set out exactly what behaviour they want to see. Far from being tedious requirement documents, these set out in a simple and intuitive way what should happen once the application is complete. By requiring customers to think carefully about what they want and get it down in writing, you can ensure the customer has a good idea what they want before you write any code, making it much less likely they’ll turn around afterwards and say “No, that’s not what we want”. This, more than anything, is for me the true power of Cucumber - it allows customers and developers to easily collaborate to set out what the web app will do, and gets you automated tests into the bargain as well.</li>
<li>Because Cucumber is packaged as a Ruby gem, it’s easy to install it and any other Ruby modules it may require.</li>
<li>You can use Capybara to test your web app. Capybara is a very handy Ruby gem that allows you to easily interact with your web app, and it allows several different drivers to be used. If you don’t need JavaScript, for instance, you can use Mechanize for faster tests. If you do, you can use selenium-webdriver to automate the browser instead, and it will load an instance of Firefox and use that for testing.</li>
<li>It can also be used for testing RESTful web services. HTTParty is another handy Ruby gem that can be used for testing an API.</li>
</ul>
<p>One question you may ask is ‘Why use a Ruby tool to test PHP apps?’. Well, there is <a href="http://behat.org/">Behat</a>, a very similar tool for PHP, so you can use that if you’d prefer. However, I personally have found that it’s not too much of a problem switching context between writing Ruby code for the acceptance tests and PHP code for the application itself. Ruby also has some advantages here - <a href="https://rvm.io/">RVM</a> is a very handy tool for running multiple instances of Ruby, and RubyGems makes it easy to install any additional modules you may need. You don’t really need to know much Ruby to use it - this is essentially my first encounter with Ruby barring a few small tutorials, but I haven’t had any significant issues with it. Finally, the Cucumber community seems to be very active, which is always a plus.</p>
<p>When searching for a tutorial on getting Cucumber working with PHP, I only found <a href="http://jamieonsoftware.com/journal/2011/1/2/high-level-testing-php-applications-with-cucumber.html">one good one</a>, and that didn’t cover a lot of the issues I’d have liked to cover, not did it cover actually using Cucumber as part of the development process, so I had to puzzle out much of it myself. So hopefully, by covering more of the ground that your average PHP developer is likely to need, I can show you just how useful Cucumber can be when added to your PHP development toolkit.</p>
<p>In this tutorial, we’ll build a very simple todo-list application using the Slim framework, but we’ll use Cucumber to test it throughout to ensure that it works the way we want it to. Hopefully, by doing this, we’ll get a rock-solid web app that meets our requirements exactly.</p>
<p>First of all, you’ll want to install RVM to make it easier to manage multiple Ruby installs. You may be able to use your system’s Ruby install, but RVM is usually a safer bet:</p>
<pre><code class="lang-bash">\curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>
<p>This was sufficient to install RVM on Mac OS X. On Ubuntu, I also had to install the openssl and zlib packages. Before installing RVM, use apt-get to install the required packages:</p>
<pre><code class="lang-bash">sudo apt-get install curl git git-core zlib1g-dev zlibc libxml2-dev libxslt1-dev libyaml-dev build-essential checkinstall openssl libreadline6 libreadline6-dev zlib1g libssl-dev libsqlite3-dev sqlite3 autoconf libc6-dev ncurses-dev automake libtool bison subversion pkg-config
</code></pre>
<p>Once RVM is installed, then close and reopen your terminal so that RVM is loaded. Then, install the correct packages:</p>
<pre><code class="lang-bash">rvm pkg install openssl zlib
</code></pre>
<p>Now we can install our new copy of Ruby. On Ubuntu, I had to install Ruby 1.8.7 first:</p>
<pre><code class="lang-bash">rvm install 1.8.7
rvm use 1.8.7
</code></pre>
<p>Then I installed Ruby 1.9.3:</p>
<pre><code class="lang-bash">rvm install 1.9.3 --with-openssl-dir=$HOME/.rvm/usr
</code></pre>
<p>Whereas on OS X, this is all that was required:</p>
<pre><code class="lang-bash">rvm install 1.9.3
</code></pre>
<p>Once that’s done, run the following to set the version of Ruby being used</p>
<pre><code class="lang-bash">rvm use 1.9.3
</code></pre>
<p>With that done, you should be able to install the required Ruby gems. Now, you could install these manually, like this:</p>
<pre><code class="lang-bash">gem install cucumber
gem install rspec
gem install mechanize
gem install capybara
gem install selenium-webdriver
gem install capybara-mechanize
</code></pre>
<p>However, there’s a more convenient way. First, create a file in the project’s root directory called Gemfile and put the following content into it:</p>
<pre><code class="lang-ruby">source &quot;http://rubygems.org&quot;
gem &quot;cucumber&quot;
gem &quot;rspec&quot;
gem &quot;mechanize&quot;
gem &quot;capybara&quot;
gem &quot;selenium-webdriver&quot;
gem &quot;capybara-mechanize&quot;
</code></pre>
<p>Then install the Bundler gem:</p>
<pre><code class="lang-bash">gem install bundler
</code></pre>
<p>Then use Bundler to install the required gems:</p>
<pre><code class="lang-bash">bundle install
</code></pre>
<p>This makes it easier to get your project set up somewhere else because you can put the Gemfile under version control, making it easier to duplicate this setup elsewhere.</p>
<p>With that out of the way, let’s start work on our app. To save time, we’ll use the Slim framework to do some of the heavy lifting for our application. Download <a href="http://www.slimframework.com/">Slim</a> and put it in a folder on your local web server.</p>
<p>Now, before we actually write any code, we’ll set out our first Cucumber scenario. Create a folder inside the folder you put Slim inside and call it <code>features</code>. Inside it, create a new file called <code>todo.feature</code> and put the following content into it:</p>
<pre><code class="lang-gherkin">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

    Scenario: New item
        Given I am on the home page
        When I click on New Item
        And I fill in the item
        And I click the button Submit
        Then I should see the new item added to the list
</code></pre>
<p>Notice how simple this is? Everything is written as an example of how an end user would interact with the site. There’s nothing hard about this - it just describes what the site needs to do.</p>
<p>The first line is just the name of this feature. The following three lines are just a comment. Then the Scenario line gives a name to this particular scenario - a Scenario is just a series of steps that describes an action.</p>
<p>Then, we see the Given line. This sets out the starting conditions. Note that you can easily set out multiple starting conditions using the And keyword on subsequent lines, as we do later in the file. Here, we’re just making sure we’re on the home page.</p>
<p>Next, we see the When line. This, and the subsequent And lines, set out what actions we want to take when going through this step. In this example, we’re clicking on a link marked ‘New Item’, filling in a text input, and clicking the Submit button. So we’re already thinking about how our application is going to work, before we’ve written a line of code.</p>
<p>Finally, we see the Then line. This sets out what should have happened once we’ve finished going through this step. Here we want to make sure the new item has been added to the list.</p>
<p>Now, go to the folder you unpacked Slim into and run <code>cucumber</code> from the shell. You should see something like this:</p>
<pre><code class="lang-sh">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/todo.feature:8
    When I click on New Item                         # features/todo.feature:9
    And I fill in the item                           # features/todo.feature:10
    And I click the button Submit                    # features/todo.feature:11
    Then I should see the new item added to the list # features/todo.feature:12

1 scenario (1 undefined)
5 steps (5 undefined)
0m0.004s

You can implement step definitions for undefined steps with these snippets:

Given /^I am on the home page$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click on New Item$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I fill in the item$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click the button Submit$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see the new item added to the list$/ do
  pending # express the regexp above with the code you wish you had
end

If you want snippets in a different programming language,
just make sure a file with the appropriate file extension
exists where cucumber looks for step definitions.
</code></pre>
<p>At this stage, Cucumber isn’t doing anything much, it’s just telling you that these steps haven’t been defined as yet. To define a step, you simply write some Ruby code that expresses that step.</p>
<p>Let’s do that. Under <code>features</code>, create a new directory called <code>step_definitions</code>. Inside that, create a file called <code>todo_steps.rb</code> and paste the code snippets returned by Cucumber into it. Once that has been saved, run <code>cucumber</code> again and you should see something like this:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
      TODO (Cucumber::Pending)
      ./features/step_definitions/todo_steps.rb:2:in `/^I am on the home page$/&#39;
      features/todo.feature:8:in `Given I am on the home page&#39;
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

1 scenario (1 pending)
5 steps (4 skipped, 1 pending)
0m0.004s
</code></pre>
<p>So far, the steps we’ve written don’t actually do anything - each step contains nothing but the pending statement. We need to replace the code inside each of those steps with some Ruby code that implements that step. As the first step in this scenario is still pending, Cucumber skips all the remaining steps.</p>
<p>Let’s implement these steps. First of all, we need to set some configuration options. In the <code>features</code> folder, create a new folder called <code>support</code>, and under that create a new file called <code>env.rb</code>. In there, place the following code:</p>
<pre><code class="lang-ruby">require &#39;rspec/expectations&#39;
require &#39;capybara&#39;
require &#39;capybara/mechanize&#39;
require &#39;capybara/cucumber&#39;
require &#39;test/unit/assertions&#39;
require &#39;mechanize&#39;

World(Test::Unit::Assertions)

Capybara.default_driver = :mechanize
Capybara.app_host = &quot;http://localhost&quot;
World(Capybara)
</code></pre>
<p>This includes all of the Ruby gems required for our purposes, and sets Capybara to use the Mechanize driver for testing web apps. If you’ve not heard of it before, Capybara can be thought of as a way of scripting a web browser that supports numerous drivers, some of which are headless and some of which aren’t. Here we’re using Mechanize, which is headless, but later on we’ll use Selenium to show you how it would work with a non-headless web browser.</p>
<p>With that done, the next job is to actually implement the steps. Head back to <code>features/step_definitions/todo_steps.rb</code> and edit it as follows:</p>
<pre><code class="lang-ruby">Given /^I am on the home page$/ do
    visit &quot;http://localhost/~matthewdaly/todo/index.php&quot;
end

When /^I click on New Item$/ do
      pending # express the regexp above with the code you wish you had
end

When /^I fill in the item$/ do
      pending # express the regexp above with the code you wish you had
end

When /^I click the button Submit$/ do
      pending # express the regexp above with the code you wish you had
end

Then /^I should see the new item added to the list$/ do
      pending # express the regexp above with the code you wish you had
end
</code></pre>
<p>Don’t forget to replace the URL in that first step with the one pointing at your index.php for your local copy of Slim. At this point we’re only implementing the first step, so that’s all we need to do for now. Once that’s done, go back to the root of the web app and run <code>cucumber</code> again. You should see something like this:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
      TODO (Cucumber::Pending)
      ./features/step_definitions/todo_steps.rb:6:in `/^I click on New Item$/&#39;
      features/todo.feature:9:in `When I click on New Item&#39;
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

1 scenario (1 pending)
5 steps (3 skipped, 1 pending, 1 passed)
0m0.036s
</code></pre>
<p>Our first step has passed! Now, we move onto the next step. Open features/step_definitions/todo_steps.rb again, and amend the second step definition as follows:</p>
<pre><code class="lang-ruby">When /^I click on New Item$/ do
   click_link (&#39;New Item&#39;)
end
</code></pre>
<p>Now, hang on a minute here. This Ruby code is pretty easy to understand - it just clicks on a link with the title, ID or text ‘New Item’. But we don’t want to have to rewrite this step for every single link in the application. Wouldn’t it be great if we could have this step definition accept any text and click on the appropriate link, so we could reuse it elsewhere? Well, we can. Change the second step to look like this:</p>
<pre><code class="lang-ruby">When /^I click on (.*)$/ do |link|
    click_link (link)
end
</code></pre>
<p>What’s happening here is that we capture the text after the word ‘on’ using a regular expression and pass it through to the step definition as the variable <code>link</code>. Then, we have Capybara click on that link. Pretty simple, and it saves us on some work in future.</p>
<p>Now run <code>cucumber</code> again, and you should see something like this:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
      no link with title, id or text &#39;New Item&#39; found (Capybara::ElementNotFound)
      (eval):2:in `send&#39;
      (eval):2:in `click_link&#39;
      ./features/step_definitions/todo_steps.rb:6:in `/^I click on (.*)$/&#39;
      features/todo.feature:9:in `When I click on New Item&#39;
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

Failing Scenarios:
cucumber features/todo.feature:7 # Scenario: New item

1 scenario (1 failed)
5 steps (1 failed, 3 skipped, 1 passed)
0m0.042s
</code></pre>
<p>We’ve got our second step in place, but it’s failing because there is no link with the text ‘New Item’. Let’s remedy that. Head back to the folder you put Slim in, and open index.php.</p>
<pre><code class="lang-php">&lt;?php
require &#39;Slim/Slim.php&#39;;

\Slim\Slim::registerAutoloader();

$app = new \Slim\Slim();

// GET route
$app-&gt;get(&#39;/&#39;, function () {
    $template = &lt;&lt;&lt;EOT
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Todo list&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;a href=&quot;index.php/newitem&quot;&gt;New Item&lt;/a&gt;
    &lt;/body&gt;
&lt;/html&gt;
EOT;
    echo $template;
});

$app-&gt;run();
?&gt;
</code></pre>
<p>Here I’ve stripped out most of the default code and comments so we can see more easily what’s happening. If you haven’t used Slim before, it works by letting you define routes that are accessed via HTTP GET, POST, PUT or DELETE methods, and define what the response will be to each one. Here, we’ve defined a simple controller for GET requests to ‘/‘, and we return a template that includes a link with the text ‘New Item’.</p>
<p>Now, run <code>cucumber</code> again and you should see the following:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
      Received the following error for a GET request to http://localhost/~matthewdaly/todo/newitem: &#39;404 =&gt; Net::HTTPNotFound for http://localhost/~matthewdaly/todo/newitem -- unhandled response&#39; (RuntimeError)
      (eval):2:in `send&#39;
      (eval):2:in `click_link&#39;
      ./features/step_definitions/todo_steps.rb:6:in `/^I click on (.*)$/&#39;
      features/todo.feature:9:in `When I click on New Item&#39;
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

Failing Scenarios:
cucumber features/todo.feature:7 # Scenario: New item

1 scenario (1 failed)
5 steps (1 failed, 3 skipped, 1 passed)
0m0.153s
</code></pre>
<p>Our second step is still failing, but only because we haven’t yet defined a route for the destination when we click on the link, so let’s fix that. Open up index.php again and change it to look like this:</p>
<pre><code class="lang-php">&lt;?php
require &#39;Slim/Slim.php&#39;;

\Slim\Slim::registerAutoloader();

$app = new \Slim\Slim();

// GET route
$app-&gt;get(&#39;/&#39;, function () {
    $template = &lt;&lt;&lt;EOT
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Todo list&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;a href=&quot;index.php/newitem&quot;&gt;New Item&lt;/a&gt;
    &lt;/body&gt;
&lt;/html&gt;
EOT;
    echo $template;
});

$app-&gt;get(&#39;/newitem&#39;, function () {
    $template = &lt;&lt;&lt;EOT
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Todo list&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=&quot;index.php/submitnewitem&quot; method=&quot;POST&quot;&gt;
            &lt;label&gt;New todo item text&lt;input type=&quot;text&quot; name=&quot;item&quot; /&gt;&lt;/label&gt;
            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
EOT;
    echo $template;
});

$app-&gt;run();
?&gt;
</code></pre>
<p>We’re just adding a new route to handle what happens when we click the link here. The new page also has a form for submitting the new item.</p>
<p>With that done, the second step should be in place. Run <code>cucumber</code> again and you should see something like this:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
      TODO (Cucumber::Pending)
      ./features/step_definitions/todo_steps.rb:10:in `/^I fill in the item$/&#39;
      features/todo.feature:10:in `And I fill in the item&#39;
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

1 scenario (1 pending)
5 steps (2 skipped, 1 pending, 2 passed)
0m0.048s
</code></pre>
<p>So onto the third step. We’ve already created the input for filling in the item, so all we need to do to make this step pass is write an appropriate step definition:</p>
<pre><code class="lang-ruby">When /^I fill in the item$/ do
    fill_in &#39;item&#39;, :with =&gt; &#39;Feed cat&#39;
end
</code></pre>
<p>With that done, run <code>cucumber</code> again and this step should pass:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
      TODO (Cucumber::Pending)
      ./features/step_definitions/todo_steps.rb:14:in `/^I click the button Submit$/&#39;
      features/todo.feature:11:in `And I click the button Submit&#39;
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

1 scenario (1 pending)
5 steps (1 skipped, 1 pending, 3 passed)
0m0.117s
</code></pre>
<p>Now we need to implement the step for clicking the Submit button. As with clicking on the New Item link, we can make this step generic to save us time later:</p>
<pre><code class="lang-ruby">When /^I click the button (.*)$/ do |button|
    click_button (button)
end
</code></pre>
<p>With that done, run <code>cucumber</code> again and you should see something like this:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
      Received the following error for a POST request to http://localhost/~matthewdaly/todo/index.php/index.php/submitnewitem: &#39;404 =&gt; Net::HTTPNotFound for http://localhost/~matthewdaly/todo/index.php/index.php/submitnewitem -- unhandled response&#39; (RuntimeError)
      (eval):2:in `send&#39;
      (eval):2:in `click_button&#39;
      ./features/step_definitions/todo_steps.rb:14:in `/^I click the button (.*)$/&#39;
      features/todo.feature:11:in `And I click the button Submit&#39;
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

Failing Scenarios:
cucumber features/todo.feature:7 # Scenario: New item

1 scenario (1 failed)
5 steps (1 failed, 1 skipped, 3 passed)
0m0.210s
</code></pre>
<p>The step is failing here because submitting the new item generates a 404 error. We need to handle the POST. Open up index.php again and edit it to look like this:</p>
<pre><code class="lang-php">&lt;?php
require &#39;Slim/Slim.php&#39;;

\Slim\Slim::registerAutoloader();

$app = new \Slim\Slim();

// GET route
$app-&gt;get(&#39;/&#39;, function () {
    $template = &lt;&lt;&lt;EOT
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Todo list&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;a href=&quot;index.php/newitem&quot;&gt;New Item&lt;/a&gt;
    &lt;/body&gt;
&lt;/html&gt;
EOT;
    echo $template;
});

$app-&gt;get(&#39;/newitem&#39;, function () {
    $template = &lt;&lt;&lt;EOT
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Todo list&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;form action=&quot;index.php/submitnewitem&quot; method=&quot;POST&quot;&gt;
            &lt;label&gt;New todo item text&lt;input type=&quot;text&quot; name=&quot;item&quot; /&gt;&lt;/label&gt;
            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
EOT;
    echo $template;
});

$app-&gt;post(&#39;/submitnewitem&#39;, function () {
    $item = $_POST[&#39;item&#39;];
    $template = &lt;&lt;&lt;EOT
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Todo list&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;$item&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
EOT;
    echo $template;
});

$app-&gt;run();
?&gt;
</code></pre>
<p>Here we’re cheating a little bit. In a working application we’d want to store the to-do list items in a database, but to keep this tutorial simple we’ll just output the result of the POST request and leave implementing a database to store the items as an exercise for the reader.</p>
<p>Now, run <code>cucumber</code> again and you should see that this step now passes:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17
      TODO (Cucumber::Pending)
      ./features/step_definitions/todo_steps.rb:18:in `/^I should see the new item added to the list$/&#39;
      features/todo.feature:12:in `Then I should see the new item added to the list&#39;

1 scenario (1 pending)
5 steps (1 pending, 4 passed)
0m0.067s
</code></pre>
<p>On to our final step. We want to make sure the page contains the text we submitted, which is very easy to do with Capybara. Change the final step to look like this:</p>
<pre><code class="lang-ruby">Then /^I should see the new item added to the list$/ do
    page.should have_content(&#39;Feed cat&#39;)
end
</code></pre>
<p>Now run <code>cucumber</code> again and you should see that the scenario has now passed:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  Scenario: New item                                 # features/todo.feature:7
    Given I am on the home page                      # features/step_definitions/todo_steps.rb:1
    When I click on New Item                         # features/step_definitions/todo_steps.rb:5
    And I fill in the item                           # features/step_definitions/todo_steps.rb:9
    And I click the button Submit                    # features/step_definitions/todo_steps.rb:13
    Then I should see the new item added to the list # features/step_definitions/todo_steps.rb:17

1 scenario (1 passed)
5 steps (5 passed)
0m0.068s
</code></pre>
<p>We’re nearly done here, but first there’s a couple of other handy things you can do with Cucumber that I’d like to show you. We’ve been using the Mechanize driver for Capybara, which is very fast and efficient. However, it’s effectively a text-mode browser like Lynx, so it can’t be used to test any functionality that relies on JavaScript. However, Mechanize isn’t the only driver available for Capybara, and you can switch to the JavaScript driver when necessary so you can test. The default JavaScript driver is Selenium, which will launch an instance of Firefox and use that for the test.</p>
<p>It’s easy to switch to the JavaScript driver when you need it. Just tag the scenario with @javascript, as in this example:</p>
<pre><code class="lang-gherkin">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

    @javascript
    Scenario: New item
        Given I am on the home page
        When I click on New Item
        And I fill in the item
        And I click the button Submit
        Then I should see the new item added to the list
</code></pre>
<p>Now run <code>cucumber</code> again and this time it will fire up an instance of Firefox and use that to run the tests. This can also be handy for debugging purposes since, unlike with Mechanize, you can see the pages.</p>
<p>Finally, what about if you want to test the same functionality multiple times with different input? You don’t want to have to write out multiple scenarios that are virtually identical, even if you have refactored them to make them more useful. What you need is a way to repeat the same test, only with different input each time.</p>
<p>Handily, Cucumber can do this too. First, let’s refactor the code for our step definitions so the final step can handle any text:</p>
<pre><code class="lang-ruby">Given /^I am on the home page$/ do
    visit &quot;http://localhost/~matthewdaly/todo/index.php&quot;
end

When /^I click on (.*)$/ do |link|
    click_link (link)
end

When /^I fill in the item with (.*)$/ do |item|
    fill_in &#39;item&#39;, :with =&gt; item
end

When /^I click the button (.*)$/ do |button|
    click_button (button)
end

Then /^I should see the text (.*)$/ do |text|
    page.should have_content(text)
end
</code></pre>
<p>Here we’ve changed the third and fifth items so we can pass any value we want through to them. As I mentioned earlier, this is good practice since it means we don’t have to write more code for our tests than we need to.</p>
<p>With that done, open up the feature file and amend it to look like this:</p>
<pre><code class="lang-gherkin">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

    @javascript
    Scenario Outline: New item
        Given I am on the home page
        When I click on New Item
        And I fill in the item with &lt;item&gt;
        And I click the button Submit
        Then I should see the text &lt;item&gt;
    Examples:
        | item                      |   
        | Feed cat                  |   
        | Stop milk                 |   
        | Take over world           |
</code></pre>
<p>If you then run <code>cucumber</code> again, the scenario should run three times, each time entering different text:</p>
<pre><code class="lang-bash">Feature: Todo

    In order to use the site
    As a user
    I want to be able to submit, view and delete to-do list items

  @javascript
  Scenario Outline: New item           # features/todo.feature:8
    Given I am on the home page        # features/step_definitions/todo_steps.rb:1
    When I click on New Item           # features/step_definitions/todo_steps.rb:5
    And I fill in the item with &lt;item&gt; # features/step_definitions/todo_steps.rb:9
    And I click the button Submit      # features/step_definitions/todo_steps.rb:13
    Then I should see the text &lt;item&gt;  # features/step_definitions/todo_steps.rb:17

    Examples: 
      | item            |
      | Feed cat        |
      | Stop milk       |
      | Take over world |

3 scenarios (3 passed)
15 steps (15 passed)
0m25.936s
</code></pre>
<p>With only a few changes, we’re now running the same scenario over and over again with different input, and testing the output is correct for each one. This makes it very easy to test repetitive content. For instance, if you had an e-commerce site with lots of products and you wanted to test the pages for some of the products, you could put them in a table like this. You can have more than one column if necessary, so you could write a scenario like this:</p>
<pre><code class="lang-gherkin">    Scenario Outline: Test products
        Given I am on the home page
        When I search for &lt;product&gt;
        And I click on the first result
        Then I should not see any errors
        And I should see the text &lt;productname&gt;

    Examples:
        | product           | productname                           |
        | supersprocket     | Super Sprocket 3000                   |
</code></pre>
<p>As you can see, Cucumber is a really simple way to start testing your web apps, and can really improve the quality of your code. Even if you’ve never used Ruby before, <a href="https://github.com/jnicklas/capybara#readme">Capybara’s API</a> is very simple and intuitive, and should adequately cover most of what you need to do when testing a web app.</p>
<p>As I mentioned, the PHP community in general has been a bit slack in terms of getting proper automated tests working. But Cucumber makes it so simple, and offers so many other benefits, such as human-readable tests and getting stakeholders more involved in the development process, that there’s really no excuse not to use it. Hope you’ve enjoyed this tutorial, and that it’s encouraged you to start using Cucumber to test your own web apps.</p>
]]></description>
        </item>
    </channel>
</rss>
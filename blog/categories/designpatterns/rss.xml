<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>designpatterns | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/designpatterns/</link>
        <description>designpatterns | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Wed, 03 Oct 2018 23:06:31 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2018</copyright>
        <item>
            <title><![CDATA[Replacing switch statements with polymorphism in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/03/replacing-switch-statements-with-polymorphism-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/03/replacing-switch-statements-with-polymorphism-in-php/</guid>
            <pubDate>Wed, 03 Oct 2018 22:07:33 GMT</pubDate>
            <description><![CDATA[<p>For the last few months, I’ve been making a point of picking up on certain antipatterns, and ways to avoid or remove them. One I’ve seen a lot recently is unnecessary large switch-case or if-else statements. For instance, here is a simplified example of one of these, which renders links to different objects:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">switch</span> ($item-&gt;getType()) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">case</span> <span class="hljs-string">'audio'</span>:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        $media = <span class="hljs-keyword">new</span> stdClass;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        $media-&gt;type = <span class="hljs-string">'audio'</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $media-&gt;duration = $item-&gt;getLength();</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        $media-&gt;name = $item-&gt;getName();</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        $media-&gt;url = $item-&gt;getUrl();</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">case</span> <span class="hljs-string">'video'</span>:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        $media = <span class="hljs-keyword">new</span> stdClass;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $media-&gt;type = <span class="hljs-string">'video'</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        $media-&gt;duration = $item-&gt;getVideoLength();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $media-&gt;name = $item-&gt;getTitle();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $media-&gt;url = $item-&gt;getUrl();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-keyword">return</span> <span class="hljs-string">'&lt;a href="'</span>.$media-&gt;url.<span class="hljs-string">'" class="'</span>.$media-&gt;type.<span class="hljs-string">'" data-duration="'</span>.$media-&gt;duration.<span class="hljs-string">'"&gt;'</span>.$media-&gt;name.<span class="hljs-string">'&lt;/a&gt;'</span>;</td></table></code></pre>
<p>There are a number of problems with this, most notably the fact that it’s doing a lot of work to try and create a new set of objects that behave consistently. Instead, your objects should be polymorphic - in other words, you should be able to treat the original objects the same.</p>
<p>While strictly speaking you don’t need one, it’s a good idea to create an interface that defines the required methods. That way, you can have those objects implement that interface, and be certain that they have all the required methods:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MediaItem</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span></span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getType</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></span>;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>}</td></table></code></pre>
<p>Then, you need to implement that interface in your objects. It doesn’t matter if the implementations are different, as long as the methods exist. That way, objects can define how they return a particular value, which is simpler and more logical than defining it in a large switch-case statement elsewhere. It also helps to prevent duplication. Here’s what the audio object might look like:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">MediaItem</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Audio</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MediaItem</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;length;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;name;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getType</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;type;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;url;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>And here’s a similar example of the video object:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">MediaItem</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Video</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MediaItem</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getVideoLength();</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getTitle();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getType</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;type;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrl</span><span class="hljs-params">()</span>: <span class="hljs-title">string</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;url;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>With that done, the code to render the links can be greatly simplified:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">return</span> <span class="hljs-string">'&lt;a href="'</span>.$item-&gt;getUrl().<span class="hljs-string">'" class="'</span>.$item-&gt;getType().<span class="hljs-string">'" data-duration="'</span>.$item-&gt;getLength().<span class="hljs-string">'"&gt;'</span>.$media-&gt;getName().<span class="hljs-string">'&lt;/a&gt;'</span>;</td></table></code></pre>
<p>Because we can use the exact same methods and get consistent responses, yet also allow for the different implementations within the objects, this approach allows for much more elegant and readable code. Different objects can be treated in the same way without the need for writing extensive if or switch statements.</p>
<p>I haven’t had the occasion to do so, but in theory this approach is applicable in other languages, such as Javascript or Python (although these languages don’t have the concept of interfaces). Since discovering the swtch statement antipattern and how to replace it with polymorphism, I’ve been able to remove a lot of overly complex code.</p>
]]></description>
        </item>
    </channel>
</rss>
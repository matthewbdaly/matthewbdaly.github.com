<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>grunt | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/grunt/</link>
        <description>grunt | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Thu, 27 Dec 2018 18:44:42 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2018</copyright>
        <item>
            <title><![CDATA[My static site generator post on Sitepoint]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/05/03/my-static-site-generator-post-on-sitepoint/</guid>
            <pubDate>Sun, 03 May 2015 18:55:30 GMT</pubDate>
            <description><![CDATA[<p>I wrote an article for Sitepoint recently about creating a static site generator as a Grunt plugin, similar to the one for this site. You can find it <a href="http://www.sitepoint.com/building-static-site-generator-grunt-plugin/">here</a>.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[How I added search to my site with Lunr.js]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/04/18/how-i-added-search-to-my-site-with-lunr-dot-js/</guid>
            <pubDate>Sat, 18 Apr 2015 14:05:41 GMT</pubDate>
            <description><![CDATA[<p>As I mentioned a while back, I recently switched the search on my site from Google’s site-specific search to <a href="http://lunrjs.com/">Lunr.js</a>. Since my site is built with a static site generator, I can’t implement search using database queries, and I was keen to have an integrated search method that would be fast and not require server-side scripting, and Lunr.js seemed to fit the bill.</p>
<p>The first task in implementing it was to generate the index. As I wrote the Grunt task that generates the blog, I amended that task to generate an index at the same time as I generated the posts. I installed Lunr.js with the following command:</p>
<pre><code class="lang-bash">npm install lunr --save
</code></pre>
<p>I then imported it in the task, and set up the field names:</p>
<pre><code class="lang-javascript">    var lunr = require(&#39;lunr&#39;);

    searchIndex = lunr(function () {
        this.field(&#39;title&#39;, { boost: 10 });
        this.field(&#39;body&#39;);
        this.ref(&#39;href&#39;);
    });
</code></pre>
<p>This defined fields for the title, body, and hyperlink, and set the hyperlink as the reference. The variable <code>searchIndex</code> represents the Lunr index.</p>
<p>Next, I looped through the posts, and passed the appropriate details to be added to the index:</p>
<pre><code class="lang-javascript">    for (post in post_items) {
        var doc = {
            &#39;title&#39;: post_items[post].meta.title,
            &#39;body&#39;: post_items[post].post.rawcontent,
            &#39;href&#39;: post_items[post].path
        };
        store[doc.href] = {
            &#39;title&#39;: doc.title
        };
        searchIndex.add(doc);
    }
</code></pre>
<p>At this point, <code>post_items</code> represents an array of objects, with each object representing a blog post. Note that the <code>body</code> field is set to the value of the item’s attribute <code>post.rawcontent</code>, which represents the raw Markdown rather than the compiled HTML.</p>
<p>I then store the title in the <code>store</code> object, so that it can be accessed using the <code>href</code> field as a key.</p>
<p>I then do the same thing when generating the pages:</p>
<pre><code class="lang-javascript">    // Add them to the index
    var doc = {
        &#39;title&#39;: data.meta.title,
        &#39;body&#39;: data.post.rawcontent,
        &#39;href&#39;: permalink + &#39;/&#39;
    };
    store[doc.href] = {
        &#39;title&#39;: data.meta.title
    };
    searchIndex.add(doc);
</code></pre>
<p>Note that this is already inside the loop that generates the pages, so I don’t include that.</p>
<p>We then write the index to a file:</p>
<pre><code class="lang-javascript">    // Write index
    grunt.file.write(options.www.dest + &#39;/lunr.json&#39;, JSON.stringify({
        index: searchIndex.toJSON(),
        store: store
    }));
</code></pre>
<p>That takes care of generating our index, but we need to implement some client-side code to handle the search. We need to include Lunr.js on the client side as well, (I recommend using Bower to do so), alongside jQuery. If you include both, the following code should do the trick:</p>
<pre><code class="lang-javascript">$(document).ready(function () {
    &#39;use strict&#39;;

    // Set up search
    var index, store;
    $.getJSON(&#39;/lunr.json&#39;, function (response) {

        // Create index
        index = lunr.Index.load(response.index);

        // Create store
        store = response.store;

        // Handle search
        $(&#39;input#search&#39;).on(&#39;keyup&#39;, function () {
            // Get query
            var query = $(this).val();

            // Search for it
            var result = index.search(query);

            // Output it
            var resultdiv = $(&#39;ul.searchresults&#39;);
            if (result.length === 0) {
                // Hide results
                resultdiv.hide();
            } else {
                // Show results
                resultdiv.empty();
                for (var item in result) {
                    var ref = result[item].ref;
                    var searchitem = &#39;&lt;li&gt;&lt;a href=&quot;&#39; + ref + &#39;&quot;&gt;&#39; + store[ref].title + &#39;&lt;/a&gt;&lt;/li&gt;&#39;;
                    resultdiv.append(searchitem);
                }
                resultdiv.show();
            }
        });
    });
}); 
</code></pre>
<p>This should be easy to understand. On load, we fetch and parse the <code>lunr.json</code> file from the server, and load the index. We then set up an event handler for the <code>keyup</code> event on an input with the ID of <code>search</code>. We get the value of the input, and query our index, and we loop through our results and display them.</p>
<p>I was pleased with how straightforward it was to implement search with Lunr.js, and it works well. It’s also a lot faster than any server-side solution since the index is generated during the build process, and is loaded with the rest of the site, so the only factor in the speed of the response is how quick your browser executes JavaScript. You could probably also use it with a Node.js application by generating the index dynamically, although you’d probably want to cache it to some extent.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Adding a new search engine to my site]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/04/04/adding-a-new-search-engine-to-my-site/</guid>
            <pubDate>Sat, 04 Apr 2015 00:47:43 GMT</pubDate>
            <description><![CDATA[<p>I’ve just finished implementing a new search engine for this site. Obviously, with it using a static site generator, searching a relational database isn’t an option. For a long while I’d just been getting by with Google’s site-specific search, which worked, but meant leaving the site to view the search results.</p>
<p>Now, I’ve implemented a client-side search system using <a href="http://lunrjs.com/">Lunr.js</a>. It wasn’t too time consuming, and as the index is generated with the rest of the site and loaded with the page, the response is almost instantaneous. I may write a future blog post on how to integrate Lunr.js with your site, as it’s very handy and is an ideal solution for implementing search on a static site.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Switching to my own static site generator]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/02/15/switching-to-my-own-static-site-generator/</guid>
            <pubDate>Sun, 15 Feb 2015 18:11:22 GMT</pubDate>
            <description><![CDATA[<p>As you may have seen if you’re visiting the site, I’ve finally switched over from Octopress to the static site generator I’ve been working on for the last few months. Apologies if you’re seeing lots of old posts in your RSS reader - there must have been an inconsistency between the RSS feed for this and that for Octopress.</p>
<p>I actually still really like Octopress, however I’m not and have never been a big fan of Ruby. Python and JavaScript are my two main go-to languages (although I do a lot of work professionally with PHP as well), so I wanted a solution in one of those languages, but I wanted something that was very similar to Octopress in every other way. I also wanted the facility to easily concatenate and minify static files as part of my deployment process to make the whole thing as lean as possible, so it made sense to build it as a Grunt plugin and create a Yeoman generator for building the boilerplate for the blog. Also, it’s always easier to work with your own code, and so using templates I wrote myself should make it quicker and easier for me to customise the blog how I want.</p>
<p>While deploying it did throw up a few errors that I’ve had to fix, it’s gone fairly smoothly and I’m pretty happy with it, although I will no doubt spend some time tweaking it over the next few weeks. It’s built with GitHub Pages in mind, but the fact that it’s built using Grunt should make it straightforward to switch to a different deployment method - during development I’ve actually used <code>grunt-rsync</code> to deploy to my Raspberry Pi and <code>grunt-bitbucket-pages</code> to deploy to Bitbucket in order to test it and both work absolutely fine. There are also Grunt plugins for deploying via FTP around, so if you want to check it out, then as long as you have at least some familiarity with Grunt you should be able to deploy it however you wish. The generator is meant to be only a starting point for your own site, so by all means check it out, tinker with the styling and templates, and make it your own. I will be very happy indeed if I see someone else using it in the wild.</p>
<p>Static site generators are generally somewhat harder to use than a CMS like WordPress, but they have many advantages:</p>
<ul>
<li>Lighter - you can quite easily host a static site with just Nginx on a Raspberry Pi</li>
<li>Faster - with no database or actual dynamic content on the server, just flat HTML, your site will be far quicker to load than a WordPress blog</li>
<li>Cheaper to host</li>
<li>Easy to deploy - if your workflow is very command-line based like mine is, it’s very quick and easy to get blogging</li>
</ul>
<p>If you can get away with using a static site generator rather than a database-driven blogging system, then it’s well worth doing so.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[My first Grunt plugin]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/12/28/my-first-grunt-plugin/</guid>
            <pubDate>Sun, 28 Dec 2014 17:04:41 GMT</pubDate>
            <description><![CDATA[<p>A while back, I mentioned that I’d written a Yeoman generator for creating a flat HTML blog, called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>. For this, I’d used the first Grunt plugin I could find for the purpose, which was <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a>. This worked, but I wasn’t really very happy with it.</p>
<p>The ideal Grunt plugin I had in mind was as follows:</p>
<ul>
<li>Used Handlebars for templating</li>
<li>Generated posts from Markdown files</li>
<li>Saved files in named folders with a single <code>index.html</code> file in each one (like Octopress does) so that no file extension is visible on a page</li>
<li>Generated index pages, rather than just showing the latest post as the first page</li>
</ul>
<p>Unfortunately, <code>grunt-markdown-blog</code> only fulfilled the second criteria, so it was never going to be something I stuck with long-term. However, I couldn’t find anything else that would do the trick, so it looked like my only option was to write a suitable plugin myself.</p>
<p>I started a new Git repository a while back, but didn’t make much progress. Then, on Christmas Eve, I suddenly got the urge to start working on this again, and in a matter of a few hours I’d gotten a working Grunt plugin that ticked all of these boxes. I had to delay getting it integrated into the generator due to Christmas day, and then an unfortunate bout of flu, but I’ve now published it as <a href="https://github.com/matthewbdaly/grunt-blogbuilder">grunt-blogbuilder</a> and amended the Yeoman generator to use it instead.</p>
<p>I’m really pleased with the outcome, and while I’m still not yet ready to migrate over to it from Octopress, it’s a massive step forward, and building a Grunt plugin has been an interesting experience.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Introducing generator-simple-static-blog]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/10/05/introducing-generator-simple-static-blog/</guid>
            <pubDate>Sun, 05 Oct 2014 18:56:46 GMT</pubDate>
            <description><![CDATA[<p>I’m a big fan of static site generators. I ditched WordPress for Octopress over two years ago because it was free to host on GitHub Pages and much faster, had much better syntax highlighting, and I liked being able to write posts in Vim, and I’ve never looked back since.</p>
<p>That said, Octopress is written in Ruby, a language I’ve never been that keen on. Ideally I’d prefer to use Python or JavaScript, but none of the solutions I’ve found have been to my liking. Recently I’ve been using Grunt and Yeoman to some extent, and I’ve wondered about the idea of creating a Yeoman generator to build a static blogging engine. After discovering <code>grunt-markdown-blog</code>, I took the plunge and have built a simple blog generator called <a href="https://github.com/matthewbdaly/generator-simple-static-blog">generator-simple-static-blog</a>.</p>
<p>I’ve published it to NPM, so feel free to check it out. It includes code highlighting with the Zenburn colour scheme by default (although highlight.js includes many other themes, so just switch to another one if you want), and it should be easy to edit the templates. I’ve also included the ability to deploy automatically to GitHub Pages using Grunt.</p>
<p>I don’t anticipate moving over to this from Octopress for the foreseeable future, but it’s been an interesting project for the weekend.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[My first Yeoman generator]]></title>
            <link>https://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/</link>
            <guid>https://matthewdaly.co.uk/blog/2014/01/25/my-first-yeoman-generator/</guid>
            <pubDate>Sat, 25 Jan 2014 11:38:40 GMT</pubDate>
            <description><![CDATA[<p>At work I use the <a href="http://www.getskeleton.com/">Skeleton boilerplate</a> a lot - my boss, who handles most of the design work, likes it and generally uses it for his designs. I’ve also been using <a href="http://gruntjs.com/">Grunt</a> a lot lately, so it was inevitable that I’d probably start to look for a <a href="http://yeoman.io/">Yeoman</a> generator for working with it.</p>
<p>There was an existing Yeoman generator for Skeleton, but it didn’t really do what I wanted. I wanted something that:</p>
<ul>
<li>Included jQuery and Modernizr</li>
<li>Automatically concatenates and minifies all the JavaScript and CSS</li>
<li>Will automatically rebuild on changes</li>
<li>Includes LiveReload and a development server</li>
<li>Includes automatic deployment via FTP</li>
</ul>
<p>After looking through the documentation for Yeoman, it was actually quick and easy to throw together my own generator and put it up. It’s available <a href="https://npmjs.org/package/generator-skellington">here</a>, and the GitHub repository is <a href="https://github.com/matthewbdaly/generator-skellington">here</a>.</p>
<p>Future plans for it include:</p>
<ul>
<li>Adding auto-prefixing for CSS</li>
<li>Removing redundant CSS rules automatically</li>
<li>Possibly, alternate deployment methods</li>
</ul>
<p>Frustratingly, NPM seems to be playing up at present - it’s not picking up the README file, and the Yeoman site isn’t pulling it in. Any idea why, anyone?</p>
]]></description>
        </item>
    </channel>
</rss>
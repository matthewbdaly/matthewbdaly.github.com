<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>postgresql | Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk/blog/categories/postgresql/</link>
        <description>postgresql | I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Fri, 20 Oct 2017 22:01:02 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2017</copyright>
        <item>
            <title><![CDATA[Simple fuzzy search with Laravel and PostgreSQL]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/10/03/simple-fuzzy-search-with-laravel-and-postgresql/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/10/03/simple-fuzzy-search-with-laravel-and-postgresql/</guid>
            <pubDate>Tue, 03 Oct 2017 22:56:11 GMT</pubDate>
            <description><![CDATA[<p>When implementing fuzzy search, many developers reach straight for specialised tools like Elasticsearch. However, for simple implementations, this is often overkill. PostgreSQL, my relational database of choice, can natively handle fuzzy search quite easily if you know how. Hereâ€™s how you might use this with Laravel.</p>
<p>Suppose we have the following migration to create a <code>locations</code> table, storing towns, cities and villages:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateLocations</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Create locations table</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'locations'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>)-&gt;unsigned();</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">// Drop locations table</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        Schema::drop(<span class="hljs-string">'locations'</span>);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>}</td></table></code></pre>
<p>The key to this implementation of fuzzy search is <em>trigrams</em>. A trigram is a group of three consecutive characters taken from a string. Using the <code>pg_trgm</code> module, which comes with PostgreSQL, we can break a string into as many trigrams as possible, and then return the strings with the most matching trigrams.</p>
<p>We can ensure that <code>pg_trgm</code> is set up on the database by creating a migration:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddTrgmExtension</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::statement(<span class="hljs-string">'CREATE EXTENSION IF NOT EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::statement(<span class="hljs-string">'DROP EXTENSION IF EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>Make sure you run the migration as well. Once that is done, we can make a raw fuzzy query against the <code>name</code> field as follows:</p>
<pre><code class="hljs lang-sql singleline"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> locations <span class="hljs-keyword">WHERE</span> <span class="hljs-string">'burgh'</span> % <span class="hljs-keyword">name</span>;</code></pre>
<p>Translating that to work with the Eloquent ORM, we can perform fuzzy queries against the <code>name</code> field as follows:</p>
<pre><code class="hljs lang-php singleline">$location = Location::whereRaw(<span class="hljs-string">"'burgh' % name"</span>)-&gt;get();</code></pre>
<p>This query might match both <code>Aldeburgh</code> and <code>Edinburgh</code>. Itâ€™s also able to handle slight misspellings, as in this example:</p>
<pre><code class="hljs lang-php singleline">$location = Location::whereRaw(<span class="hljs-string">"'hendrad' % name"</span>)-&gt;get();</code></pre>
<p>This query will match <code>East Hendred</code> or <code>West Hendred</code> successfully. As you can see, we can match strings at any point in the name string, and handle slight mis-spellings without any problems.</p>
<p>In practice, rather than using <code>whereRaw()</code> every time, youâ€™ll probably want to create a local scope that accepts the name you want to match against.</p>
<h2 id="improving-performance-with-an-index">Improving performance with an index</h2>
<p>The performance of these queries isnâ€™t that great out of the box. We can improve them by creating an index:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddTrgmExtension</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::statement(<span class="hljs-string">'CREATE EXTENSION IF NOT EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        DB::statement(<span class="hljs-string">'CREATE INDEX locations_name_trigram ON locations USING gist(name gist_trgm_ops);'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        DB::statement(<span class="hljs-string">'DROP INDEX IF EXISTS locations_name_trigram'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        DB::statement(<span class="hljs-string">'DROP EXTENSION IF EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}</td></table></code></pre>
<p>Adding an index should produce a noticeable improvement in the response time.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>PostgreSQLâ€™s <code>pg_trgm</code> module is a fairly straightforward way of implementing fuzzy search. Itâ€™s not much more involved than a <code>LIKE</code> or <code>ILIKE</code> clause in your query, and for many use cases, itâ€™s more than sufficient. If you donâ€™t have a huge number of records, itâ€™s probably a more appropriate choice than something like Elasticsearch, and has the advantage of a simpler stack. However, if you have a larger dataset, you may be better off with a dedicated search solution. As always, if youâ€™re unsure itâ€™s a good idea to try both and see what works best for that particular use case.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Exploring the HStoreField in Django 1.8]]></title>
            <link>https://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/</link>
            <guid>https://matthewdaly.co.uk/blog/2015/08/01/exploring-the-hstorefield-in-django-1-dot-8/</guid>
            <pubDate>Sat, 01 Aug 2015 17:26:54 GMT</pubDate>
            <description><![CDATA[<p>One of the most interesting additions in Django 1.8 is the new Postgres-specific fields. I started using PostgreSQL in preference to MySQL for Django apps last year, and so I was interested in the additional functionality they offer.</p>
<p>By far the biggest deal out of all of these was the new <code>HStoreField</code> type. PostgreSQL added a JSON data type a little while back, and <code>HStoreField</code> allows you to use that field type. This is a really big deal because it allows you to store arbitrary data as JSON and query it. Previously, you could of course just store data as JSON in a text field, but that lacked the same ability to query it. This gives you many of the advantages of a NoSQL document database such as MongoDB in a relational database. For instance, you can store different products with different data about them, and crucially, query them by that data. Previously, the only way to add arbitrary product data and be able to query it was to have it in a separate table, and it was often cumbersome to join them when fetching multiple products.</p>
<p>Letâ€™s see a working example. We might be building an online store where products can have all kinds of arbitrary data stored about them. One product might be a plastic box, and youâ€™d need to list the capacity as an additional attribute. Another product might be a pair of shoes, which have no capacity, but do have a size. It might be difficult to model this otherwise, but <code>HStoreField</code> is perfect for this kind of data.</p>
<p>First, letâ€™s set up our database. Iâ€™ll assume you already have PostgreSQL up and running via your package manager. First, we need to create our database:</p>
<pre><code class="hljs lang-bash singleline">$ createdb djangostore</code></pre>
<p>Next, we need to create a new user for this database with superuser access:</p>
<pre><code class="hljs lang-bash singleline">$ createuser store <span class="hljs-_">-s</span> -P</code></pre>
<p>Youâ€™ll be prompted for a password - Iâ€™m assuming this will just be <code>password</code> here. Next, we need to connect to PostgreSQL using the <code>psql</code> utility:</p>
<pre><code class="hljs lang-bash singleline">$ psql djangostore -U store -W</code></pre>
<p>Youâ€™ll be prompted for your new password. Next, run the following command:</p>
<pre><code class="hljs lang-psql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta"># CREATE EXTENSION hstore;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta"># GRANT ALL PRIVILEGES ON DATABASE djangostore TO store;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-meta"># \q</span></td></table></code></pre>
<p>The first command installs the HStore extension. Next we make sure our new user has the privileges required on the new database:</p>
<p>Weâ€™ve now created our database and a user to interact with it. Next, weâ€™ll set up our Django install:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ <span class="hljs-built_in">cd</span> Projects</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir djangostore</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ <span class="hljs-built_in">cd</span> djangostore</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ pyvenv venv</td><tr><td class="linenos" data-pseudo-content="5"></td><td>$ <span class="hljs-built_in">source</span> venv/bin/activate</td><tr><td class="linenos" data-pseudo-content="6"></td><td>$ pip install Django psycopg2 ipdb</td><tr><td class="linenos" data-pseudo-content="7"></td><td>$ django-admin.py startproject djangostore</td><tr><td class="linenos" data-pseudo-content="8"></td><td>$ python manage.py startapp store</td></table></code></pre>
<p>Iâ€™m assuming here that youâ€™re using Python 3.4. On Ubuntu, getting it working is <a href="https://gist.github.com/denilsonsa/21e50a357f2d4920091e">a bit more involved</a>.</p>
<p>Next, open up <code>djangostore/settings.py</code> and amend <code>INSTALLED_APPS</code> to include the new app and the PostgreSQL-specific functionality:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>INSTALLED_APPS = (</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'django.contrib.admin'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'django.contrib.auth'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'django.contrib.contenttypes'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-string">'django.contrib.sessions'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-string">'django.contrib.messages'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-string">'django.contrib.staticfiles'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-string">'django.contrib.postgres'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>)</td></table></code></pre>
<p>Youâ€™ll also need to configure the database settings:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DATABASES = {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">'default'</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.postgresql_psycopg2'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'djangostore'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'store'</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-string">'HOST'</span>: <span class="hljs-string">'localhost'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-string">'PORT'</span>: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>We need to create an empty migration to use <code>HStoreField</code>:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py makemigrations --empty store</code></pre>
<p>This command should create the file <code>store/migrations/0001_initial.py</code>. Open this up and edit it to look like this:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment"># -*- coding: utf-8 -*-</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models, migrations</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.operations <span class="hljs-keyword">import</span> HStoreExtension</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Migration</span><span class="hljs-params">(migrations.Migration)</span>:</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    dependencies = [</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    operations = [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        HStoreExtension(),</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    ]</td></table></code></pre>
<p>This will make sure the HStore extension is installed. Next, letâ€™s run these migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Operations to perform:</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  Synchronize unmigrated apps: messages, staticfiles, postgres</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Apply all migrations: sessions, store, admin, auth, contenttypes</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Synchronizing apps without migrations:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  Creating tables...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    Running deferred SQL...</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  Installing custom SQL...</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Running migrations:</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  Rendering model states... DONE</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Applying contenttypes.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Applying auth.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  Applying admin.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  Applying contenttypes.0002_remove_content_type_name... OK</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Applying auth.0002_alter_permission_name_max_length... OK</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Applying auth.0003_alter_user_email_max_length... OK</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  Applying auth.0004_alter_user_username_opts... OK</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  Applying auth.0005_alter_user_last_login_null... OK</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  Applying auth.0006_require_contenttypes_0002... OK</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  Applying sessions.0001_initial... OK</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  Applying store.0001_initial... OK</td></table></code></pre>
<p>Now, weâ€™re ready to start creating our <code>Product</code> model. Open up <code>store/models.py</code> and amend it as follows:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">from</span> django.contrib.postgres.fields <span class="hljs-keyword">import</span> HStoreField</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-comment"># Create your models here.</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><span class="hljs-params">(models.Model)</span>:</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    updated_at = models.DateTimeField(auto_now=<span class="hljs-keyword">True</span>)</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    name = models.CharField(max_length=<span class="hljs-number">200</span>)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    description = models.TextField()</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    price = models.FloatField()</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    attributes = HStoreField()</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> self.name</td></table></code></pre>
<p>Note that <code>HStoreField</code> is not part of the standard group of model fields, and needs to be imported from the Postgres-specific fields module. Next, letâ€™s create and run our migrations:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ python manage.py makemigrations</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ python manage.py migrate</td></table></code></pre>
<p>We should now have a <code>Product</code> model where the <code>attributes</code> field can be any arbitrary data we want. Note that we installed <code>ipdb</code> earlier - if youâ€™re not familiar with it, this is an improved Python debugger, and also pulls in <code>ipython</code>, an improved Python shell, which Django will use if available.</p>
<p>Open up the Django shell:</p>
<pre><code class="hljs lang-bash singleline">$ python manage.py shell</code></pre>
<p>Then, import the <code>Product</code> model:</p>
<pre><code class="hljs lang-python singleline"><span class="hljs-keyword">from</span> store.models <span class="hljs-keyword">import</span> Product</code></pre>
<p>Letâ€™s create our first product - a plastic storage box:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>box = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>box.name = <span class="hljs-string">'Box'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>box.description = <span class="hljs-string">'A big box'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>box.price = <span class="hljs-number">5.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>box.attributes = { <span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">"colour"</span>: <span class="hljs-string">"blue"</span>}</td><tr><td class="linenos" data-pseudo-content="6"></td><td>box.save()</td></table></code></pre>
<p>If we take a look, we can see that the attributes can be returned as a Python dictionary:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">12</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">12</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>We can easily retrieve single values:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">15</span>]: Product.objects.all()[<span class="hljs-number">0</span>].attributes[<span class="hljs-string">'capacity'</span>]</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">15</span>]: <span class="hljs-string">'1L'</span></td></table></code></pre>
<p>Letâ€™s add a second product - a mop:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>mop = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td>mop.name = <span class="hljs-string">'Mop'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>mop.description = <span class="hljs-string">'A mop'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>mop.price = <span class="hljs-number">12.99</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>mop.attributes = { <span class="hljs-string">'colour'</span>: <span class="hljs-string">"red"</span> }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>mop.save()</td></table></code></pre>
<p>Now, we can filter out only the red items easily:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">2</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'red'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">2</span>]: [&lt;Product: Mop&gt;]</td></table></code></pre>
<p>Here we search for items where the <code>colour</code> attribute is set to <code>red</code>, and we only get back the mop. Letâ€™s do the same for blue items:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">3</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Here it returns the box. Letâ€™s now search for an item with a capacity of 1L:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">4</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">4</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Only the box has the capacity attribute at all, and itâ€™s the only one returned. Letâ€™s see what happens when we search for an item with a capacity of 2L, which we know is not present:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">5</span>]: Product.objects.filter(attributes__contains={<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'2L'</span>})</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">5</span>]: []</td></table></code></pre>
<p>No items returned, as expected. Letâ€™s look for any item with the <code>capacity</code> attribute:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">6</span>]: Product.objects.filter(attributes__has_key=<span class="hljs-string">'capacity'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">6</span>]: [&lt;Product: Box&gt;]</td></table></code></pre>
<p>Again, it only returns the box, as thatâ€™s the only one where that key exists. Note that all of this is tightly integrated with the existing API for the Django ORM. Letâ€™s add a third product, a food hamper:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">3</span>]: hamper = Product()</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">4</span>]: hamper.name = <span class="hljs-string">'Hamper'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>In [<span class="hljs-number">5</span>]: hamper.description = <span class="hljs-string">'A food hamper'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>In [<span class="hljs-number">6</span>]: hamper.price = <span class="hljs-number">19.99</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>In [<span class="hljs-number">7</span>]: hamper.attributes = {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>   ...: <span class="hljs-string">'contents'</span>: <span class="hljs-string">'ham, cheese, coffee'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>   ...: <span class="hljs-string">'size'</span>: <span class="hljs-string">'90cmx60cm'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   ...: }</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>In [<span class="hljs-number">8</span>]: hamper.save()</td></table></code></pre>
<p>Next, letâ€™s return only those items that have a <code>contents</code> attribute that contains <code>cheese</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">9</span>]: Product.objects.filter(attributes__contents__contains=<span class="hljs-string">'cheese'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">9</span>]: [&lt;Product: Hamper&gt;]</td></table></code></pre>
<p>As you can see, the <code>HStoreField</code> type allows for quite complex queries, while allowing you to set arbitrary values for an individual item. This overcomes one of the biggest issues with relational databases - the inability to set arbitrary data. Previously, you might have to work around it in some fashion, such as creating a table containing attributes for individual items which had to be joined on the product table. This is very cumbersome and difficult to use, especially when you wanted to work with more than one product. With this approach, itâ€™s easy to filter products by multiple values in the HStore field, and you get back all of the attributes at once, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>In [<span class="hljs-number">13</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Out[<span class="hljs-number">13</span>]: [&lt;Product: Box&gt;]</td><tr><td class="linenos" data-pseudo-content="3"></td><td>In [<span class="hljs-number">14</span>]: Product.objects.filter(attributes__capacity=<span class="hljs-string">'1L'</span>, attributes__colour=<span class="hljs-string">'blue'</span>)[<span class="hljs-number">0</span>].attributes</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Out[<span class="hljs-number">14</span>]: {<span class="hljs-string">'capacity'</span>: <span class="hljs-string">'1L'</span>, <span class="hljs-string">'colour'</span>: <span class="hljs-string">'blue'</span>}</td></table></code></pre>
<p>Similar functionality is coming in a future version of MySQL, so it wouldnâ€™t be entirely surprising to see <code>HStoreField</code> become more generally available in Django in the near future. For now, this functionality is extremely useful and makes for a good reason to ditch MySQL in favour of PostgreSQL for your future Django apps.</p>
]]></description>
        </item>
    </channel>
</rss>
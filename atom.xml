<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>Matthew Daly&apos;s Blog</title>
    <updated>2018-09-09T12:40:04Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk"/>
    <subtitle>I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Switching from Vim to Neovim]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/09/09/switching-from-vim-to-neovim/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/09/09/switching-from-vim-to-neovim/">
        </link>
        <updated>2018-09-09T12:40:35Z</updated>
        <summary type="html"><![CDATA[<p>I honestly thought it would never happen. I’ve been using Vim since 2008, and every other editor I’ve tried (including VSCode, Emacs, Sublime Text and Atom) hasn’t come up to scratch. There were a few useful features in PHPStorm, to be fair, but nothing that justified the bother of moving. Also, I suffer from a degree of RSI from my prior career as an insurance clerk (years of using crap keyboards and mice on Windows XP took its toll…), and Vim has always been the most RSI-friendly editor I found.</p>
<p>Yet I have actually gone ahead and migrated away… to Neovim. Of course, the fact that the workflow is essentially identical helps in the migration process, as does the fact that it supports most of the same plugins.</p>
<p>My workflow has always been strongly CLI-based. I use GNU Screen and Byobu together to run multiple “tabs” in the terminal, so the lack of GUI support in Neovim doesn’t bother me in the slightest. The only change I really made was to my <code>.bash_aliases</code> so that the Vim command ran <code>screen -t Vim nvim</code>, so that it would open up Neovim rather than Vim in a new Screen tab.</p>
<p>Initially I switched straight over to using the same settings and plugins I had with Vim, and they worked seamlessly. However, after a while I decided to use the opportunity to completely overhaul the plugins and settings I used and largely start over - cull the ones I no longer needed, add some new ones, and comment it properly.</p>
<h2 id="loading-plugins">Loading plugins</h2>
<p>I used to use Pathogen to manage my Vim plugins, but it didn’t actually import the plugins itself, and just provided a structure for them. This meant that the only practical way I found to pull in third-party plugins was to set them up as Git submodules, meaning I had to store my configuration in version control and clone it recursively onto a new machine. It also made updating cumbersome.</p>
<p>Now I’ve switched to <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, which makes things much easier. I can define my dependencies in my <code>.config/nvim/init.vim</code> and pull them in with <code>PlugInstall</code>. If I want to update them, I run <code>PlugUpdate</code>, or if I need to add something else, I merely add it in the file and run <code>PlugInstall</code> again. Nice and easy.</p>
<p>The first section of my configuration file loads the dependencies:</p>
<pre><code class="hljs lang-vim"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">call</span> plug#begin()</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">" NERDTree</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>Plug <span class="hljs-string">'scrooloose/nerdtree'</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">" Git integration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Plug <span class="hljs-string">'tpope/vim-fugitive'</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>Plug <span class="hljs-string">'airblade/vim-gitgutter'</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-comment">" Linting</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Plug <span class="hljs-string">'neomake/neomake'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>Plug <span class="hljs-string">'w0rp/ale'</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-comment">" PHP-specific integration</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>Plug <span class="hljs-string">'phpactor/phpactor'</span> ,  {<span class="hljs-string">'do'</span>: <span class="hljs-string">'composer install'</span>, <span class="hljs-string">'for'</span>: <span class="hljs-string">'php'</span>}</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Plug <span class="hljs-string">'ncm2/ncm2'</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>Plug <span class="hljs-string">'roxma/nvim-yarp'</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>Plug <span class="hljs-string">'phpactor/ncm2-phpactor'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-comment">" Snippets</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>Plug <span class="hljs-string">'SirVer/ultisnips'</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>Plug <span class="hljs-string">'honza/vim-snippets'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-comment">" Comments</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>Plug <span class="hljs-string">'tpope/vim-commentary'</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-comment">" Search</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>Plug <span class="hljs-string">'ctrlpvim/ctrlp.vim'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td><span class="hljs-comment">" Syntax</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>Plug <span class="hljs-string">'sheerun/vim-polyglot'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>Plug <span class="hljs-string">'matthewbdaly/vim-filetype-settings'</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td><span class="hljs-comment">" Themes</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>Plug <span class="hljs-string">'nanotech/jellybeans.vim'</span> , {<span class="hljs-string">'as'</span>: <span class="hljs-string">'jellybeans'</span>}</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td><span class="hljs-keyword">call</span> plug#end()</td></table></code></pre>
<p>As always, it’s a good idea to comment your config and try to group things logically. Note that I have one plugin of my own listed here - this is just a collection of settings for different filetypes, such as making Javascript files use 2 spaces for indentation, and it’s easier to keep that in a repository and pull it in as a dependency.</p>
<h2 id="completion">Completion</h2>
<p>The next part of the config deals with configuration. Most of the time the default omnicompletion is pretty good, but in the process of building out this config, I discovered PHPActor, which has massively improved my development experience with PHP - it finally provides completion as good as most IDE’s, and also provides similar refactoring tools. My config for completion currently looks like this:</p>
<pre><code class="hljs lang-vim"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">"Completion</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">autocmd</span> FileType * <span class="hljs-keyword">setlocal</span> formatoptions-=<span class="hljs-keyword">c</span> formatoptions-=r formatoptions-=<span class="hljs-keyword">o</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">set</span> ofu=syntaxcomplete#Complete</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">autocmd</span> FileType php <span class="hljs-keyword">setlocal</span> omnifunc=phpactor#Complete</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">let</span> <span class="hljs-variable">g:phpactorOmniError</span> = <span class="hljs-variable">v:true</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">autocmd</span> BufEnter * <span class="hljs-keyword">call</span> ncm2#enable_for_buffer()</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">set</span> completeopt=noinsert,menuone,noselect</td></table></code></pre>
<h2 id="general-config">General config</h2>
<p>This is a set of standard settings for the general behaviour of the application, such as setting the colorscheme and default indentation levels. I also routinely disable the mouse because it bugs me.</p>
<pre><code class="hljs lang-vim"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">"General</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">colorscheme</span> jellybeans</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">set</span> <span class="hljs-keyword">nu</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">filetype</span> plugin <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">set</span> nocp</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">set</span> ruler</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">set</span> wildmenu</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">set</span> mouse-=<span class="hljs-keyword">a</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">set</span> t_Co=<span class="hljs-number">256</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-comment">"Code folding</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">set</span> foldmethod=manual</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">"Tabs and spacing</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-keyword">set</span> autoindent</td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">4</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-keyword">set</span> expandtab</td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">4</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-keyword">set</span> smarttab</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-comment">"Search</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-keyword">set</span> hlsearch</td><tr><td class="linenos" data-pseudo-content="25"></td><td><span class="hljs-keyword">set</span> incsearch</td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-keyword">set</span> ignorecase</td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-keyword">set</span> smartcase</td><tr><td class="linenos" data-pseudo-content="28"></td><td><span class="hljs-keyword">set</span> diffopt +=iwhite</td></table></code></pre>
<h2 id="markdown-configuration">Markdown configuration</h2>
<p>This section sets the file type for Markdown. It disables the Markdown plugin included in <code>vim-polyglot</code> as I had problems with it, and sets the languages that will be highlighted in fenced code blocks. I may at some point migrate this to the filetype repository.</p>
<pre><code class="hljs lang-vim"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">"Syntax highlighting in Markdown</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">au</span> BufNewFile,BufReadPost *.md <span class="hljs-keyword">set</span> <span class="hljs-keyword">filetype</span>=markdown</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">let</span> <span class="hljs-variable">g:polyglot_disabled</span> = [<span class="hljs-string">'markdown'</span>]</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">let</span> <span class="hljs-variable">g:markdown_fenced_languages</span> = [<span class="hljs-string">'bash=sh'</span>, <span class="hljs-string">'css'</span>, <span class="hljs-string">'django'</span>, <span class="hljs-string">'javascript'</span>, <span class="hljs-string">'js=javascript'</span>, <span class="hljs-string">'json=javascript'</span>, <span class="hljs-string">'perl'</span>, <span class="hljs-string">'php'</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'ruby'</span>, <span class="hljs-string">'sass'</span>, <span class="hljs-string">'xml'</span>, <span class="hljs-string">'html'</span>, <span class="hljs-string">'vim'</span>]</td></table></code></pre>
<h2 id="neomake">Neomake</h2>
<p>I used to use Syntastic for checking my code for errors, but I’ve always found it problematic - it was slow and would often block the editor for some time. Neovim does have support for asynchronous jobs (as does Vim 8), but Syntastic doesn’t use it, so I decided to look elsewhere.</p>
<p>Neomake seemed a lot better, so I migrated over to it. It doesn’t require much configuration, and it’s really fast - unlike Syntastic, it supports asynchronous jobs. This part of the config sets it up to run on changes with no delay in writing, so I get near-instant feedback if a syntax error creeps in, and it doesn’t block the editor the way Syntastic used to.</p>
<pre><code class="hljs lang-vim"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">" Neomake config</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">" Full config: when writing or reading a buffer, and on changes in insert and</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-comment">" normal mode (after 1s; no delay when writing).</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">call</span> neomake#configure#automake(<span class="hljs-string">'nrwi'</span>, <span class="hljs-number">500</span>)</td></table></code></pre>
<h2 id="phpactor">PHPActor</h2>
<p>As mentioned above, PHPActor has dramatically improved my experience when coding in PHP by providing access to features normally found only in full IDE’s. Here’s the fairly standard config I use for the refactoring functionality:</p>
<pre><code class="hljs lang-vim"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">" PHPActor config</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">" Include use statement</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">u</span> :<span class="hljs-keyword">call</span> phpactor#UseAdd()<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">" Invoke the context menu</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;Leader&gt;</span>mm :<span class="hljs-keyword">call</span> phpactor#ContextMenu()<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-comment">" Invoke the navigation menu</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">nn</span> :<span class="hljs-keyword">call</span> phpactor#Navigate()<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-comment">" Goto definition of class or class member under the cursor</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">o</span> :<span class="hljs-keyword">call</span> phpactor#GotoDefinition()<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-comment">" Transform the classes in the current file</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;Leader&gt;</span>tt :<span class="hljs-keyword">call</span> phpactor#Transform()<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-comment">" Generate a new class (replacing the current file)</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">cc</span> :<span class="hljs-keyword">call</span> phpactor#ClassNew()<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-comment">" Extract expression (normal mode)</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;silent&gt;</span><span class="hljs-symbol">&lt;Leader&gt;</span>ee :<span class="hljs-keyword">call</span> phpactor#ExtractExpression(<span class="hljs-variable">v:false</span>)<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-comment">" Extract expression from selection</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-keyword">vmap</span> <span class="hljs-symbol">&lt;silent&gt;</span><span class="hljs-symbol">&lt;Leader&gt;</span>ee :<span class="hljs-symbol">&lt;C-U&gt;</span><span class="hljs-keyword">call</span> phpactor#ExtractExpression(<span class="hljs-variable">v:true</span>)<span class="hljs-symbol">&lt;CR&gt;</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-comment">" Extract method from selection</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td><span class="hljs-keyword">vmap</span> <span class="hljs-symbol">&lt;silent&gt;</span><span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">em</span> :<span class="hljs-symbol">&lt;C-U&gt;</span><span class="hljs-keyword">call</span> phpactor#ExtractMethod()<span class="hljs-symbol">&lt;CR&gt;</span></td></table></code></pre>
<h2 id="summary">Summary</h2>
<p>Vim or Neovim configuration files are never static. Your needs are always changing, and you’re constantly discovering new plugins and new settings to try out, and keeping ones that prove useful. It’s been helpful to start over and ditch some plugins I no longer needed, pull in some new ones, and organise my configuration a bit better.</p>
<p>Now that I can set the dependencies in a text file rather than pulling them in as Git submodules, it makes more sense to keep my config in a <a href="https://gist.github.com/matthewbdaly/80b777ad3db885ebeecd27687fb121cd">Github Gist</a> rather than a Git repository, and that’s where I plan to retain it for now. Feel free to fork or cannibalize it for your own purposes if you wish.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Better strings in PHP]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/07/25/better-strings-in-php/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/07/25/better-strings-in-php/">
        </link>
        <updated>2018-07-25T21:25:17Z</updated>
        <summary type="html"><![CDATA[<p>One of the weaknesses of PHP as a programming language is the limitations of some of the fundamental types. For instance, a string in PHP is a simple value, rather than an object, and doesn’t have any methods associated with it. Instead, to manipulate a string, you have to call all manner of functions. By comparison, in Python, not only can you call methods on a string, and receive a new string as the response, making them easily chainable, but you can also iterate through a string, as in this example:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">'foo'</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>a.upper()</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-string">'FOO'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span>a.lower()</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-string">'foo'</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> a:</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-meta">... </span>  print(letter)</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-meta">... </span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>f</td><tr><td class="linenos" data-pseudo-content="10"></td><td>o</td><tr><td class="linenos" data-pseudo-content="11"></td><td>o</td></table></code></pre>
<p>A little while back, I read Adam Wathan’s excellent book <em>Refactoring to Collections</em>, which describes how you can use a collection implementation (such as the one included with Laravel) to replace convoluted array manipulation with simpler, chainable calls to a collection object. Using this approach, you can turn something like this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$result = array_filter(</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    array_map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> $item-&gt;get(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }, $items),</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> $item-&gt;bar == <span class="hljs-keyword">true</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>});</td></table></code></pre>
<p>Or, even worse, this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$result1 = array_map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> $item-&gt;get(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}, $items);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$result2 = array_filter($result1, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">return</span> $item-&gt;bar == <span class="hljs-keyword">true</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>});</td></table></code></pre>
<p>Into this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$result = Collection::make($items)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    -&gt;map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> $item-&gt;get(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    })-&gt;filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($item)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">return</span> $item-&gt;bar == <span class="hljs-keyword">true</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    })-&gt;toArray();</td></table></code></pre>
<p>Much cleaner, more elegant, and far easier to understand.</p>
<p>A while back, after some frustration with PHP’s native strings, I started wondering how practical it would be to produce a string implementation that was more like the string objects in languages like Python and Javascript, with inspiration from collection implementations such as that used by Laravel. I soon discovered that it was very practical, and with a bit of work it’s not hard to produce your own, more elegant string class.</p>
<p>The most fundamental functionality required is to be able to create a string object, either by passing a string to the constructor or calling a static method. Our string class should be able to do both:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Str</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">protected</span> $string;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(string $string = <span class="hljs-string">''</span>)</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">$this</span>-&gt;string = $string;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make</span><span class="hljs-params">(string $string)</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>($string);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<h2 id="making-it-iterable">Making it iterable</h2>
<p>To be able to get the length of a string, it needs to implement the <a href="http://php.net/manual/en/class.countable.php"><code>Countable</code></a> interface:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Countable</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Str</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Countable</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">count</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> strlen(<span class="hljs-keyword">$this</span>-&gt;string);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>To access it as an array, it needs to implement the <a href="http://php.net/manual/en/class.arrayaccess.php"><code>ArrayAccess</code></a> interface:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>...</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">ArrayAccess</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Str</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Countable</span>, <span class="hljs-title">ArrayAccess</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetExists</span><span class="hljs-params">($offset)</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;string[$offset]);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span><span class="hljs-params">($offset)</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;string[$offset]) ? <span class="hljs-keyword">$this</span>-&gt;string[$offset] : <span class="hljs-keyword">null</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span><span class="hljs-params">($offset, $value)</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">if</span> (is_null($offset)) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-keyword">$this</span>-&gt;string[] = $value;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-keyword">$this</span>-&gt;string[$offset] = $value;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetUnset</span><span class="hljs-params">($offset)</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">$this</span>-&gt;string = substr_replace(<span class="hljs-keyword">$this</span>-&gt;string, <span class="hljs-string">''</span>, $offset, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}</td></table></code></pre>
<p>And to make it iterable, it needs to implement the <a href="http://php.net/manual/en/class.iterator.php"><code>Iterator</code></a> interface:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Iterator</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Str</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Countable</span>, <span class="hljs-title">ArrayAccess</span>, <span class="hljs-title">Iterator</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">current</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;string[<span class="hljs-keyword">$this</span>-&gt;position];</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">key</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;position;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ++<span class="hljs-keyword">$this</span>-&gt;position;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rewind</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">$this</span>-&gt;position = <span class="hljs-number">0</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">valid</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;string[<span class="hljs-keyword">$this</span>-&gt;position]);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}</td></table></code></pre>
<h2 id="making-it-work-as-a-string">Making it work as a string</h2>
<p>To be useful, it also needs to be possible to actually use it as a string - for instance, you should be able to do this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$foo = Str::make(<span class="hljs-string">'I am the very model of a modern major general'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">echo</span> $foo;</td></table></code></pre>
<p>Fortunately, the <a href="http://php.net/manual/en/language.oop5.magic.php#object.tostring"><code>__toString()</code></a> magic method allows this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;string;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<h2 id="adding-methods">Adding methods</h2>
<p>With that functionality in place, you can then start adding support for the methods you need in your string objects. If you’re looking to be able to use the same functionality as existing PHP methods, you can call those functions inside your methods. However, be sure to return a new instance of your string object from each method - that way, you can continually chain them:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replace</span><span class="hljs-params">($find, $replace)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>(str_replace($find, $replace, <span class="hljs-keyword">$this</span>-&gt;string));</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toUpper</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>(strtoupper(<span class="hljs-keyword">$this</span>-&gt;string));</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toLower</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>(strtolower(<span class="hljs-keyword">$this</span>-&gt;string));</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trim</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>(trim(<span class="hljs-keyword">$this</span>-&gt;string));</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ltrim</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>(ltrim(<span class="hljs-keyword">$this</span>-&gt;string));</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rtrim</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">static</span>(rtrim(<span class="hljs-keyword">$this</span>-&gt;string));</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td></table></code></pre>
<p>Now, you can write something like this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">return</span> Str::make(<span class="hljs-string">'I am the very model of a modern major general  '</span>)</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    -&gt;trim()</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    -&gt;replace(<span class="hljs-string">'modern major general'</span>, <span class="hljs-string">'scientist Salarian'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    -&gt;toLower();</td></table></code></pre>
<p>While you could do this with PHP’s native string functions alone, it would be a lot less elegant. In addition, if you have other, more complex string manipulations that you often do in a particular application, it may make sense to write a method for that so that your string objects can encapsulate that functionality for easier reuse.</p>
<p>As our string objects are iterable, we can also do this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>&gt;&gt;&gt; $foo = Str::make(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td>&gt;&gt;&gt; <span class="hljs-keyword">foreach</span> ($foo <span class="hljs-keyword">as</span> $letter) { <span class="hljs-keyword">echo</span> <span class="hljs-string">"$letter\n"</span>; }</td><tr><td class="linenos" data-pseudo-content="3"></td><td>f</td><tr><td class="linenos" data-pseudo-content="4"></td><td>o</td><tr><td class="linenos" data-pseudo-content="5"></td><td>o</td></table></code></pre>
<p>If you have an application that does some complex string manipulation, having a string utility class like this can make for much more expressive, elegant and easy-to-comprehend code than PHP’s native string functions. If you want to see a working implementation for this, check out my proof of concept collection and string utility library <a href="https://github.com/matthewbdaly/proper">Proper</a>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Forcing SSL in CodeIgniter]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/06/23/forcing-ssl-in-codeigniter/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/06/23/forcing-ssl-in-codeigniter/">
        </link>
        <updated>2018-06-23T12:03:28Z</updated>
        <summary type="html"><![CDATA[<p>I haven’t started a new CodeIgniter project since 2014, and don’t intend to, but on occasion I’ve been asked to do maintenance work on legacy CodeIgniter projects. This week I was asked to help out with a situation where a CodeIgniter site was being migrated to HTTPS and there were issues resulting from the migration.</p>
<p>Back in 2012, when working on my first solo project, I’d built a website using CodeIgniter that used HTTPS, but also needed to support an affiliate marketing system that did not support it, so certain pages had to force HTTP, and others had to force HTTPS, so I’d used the hook system to create hooks to enforce this. This kind of requirement is unlikely to reoccur now because HTTPS is becoming more prevalent, but sometimes it may be easier to enforce HTTPS at application level than in the web server configuration or using htaccess. It’s relatively straightforward to do that in CodeIgniter.</p>
<p>The first step is to create the hook. Save this as <code>application/hooks/ssl.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">force_ssl</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    $CI =&amp; get_instance();</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    $CI-&gt;config-&gt;config[<span class="hljs-string">'base_url'</span>] = str_replace(<span class="hljs-string">'http://'</span>, <span class="hljs-string">'https://'</span>, $CI-&gt;config-&gt;config[<span class="hljs-string">'base_url'</span>]);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">if</span> ($_SERVER[<span class="hljs-string">'SERVER_PORT'</span>] != <span class="hljs-number">443</span>) redirect($CI-&gt;uri-&gt;uri_string());</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-meta">?&gt;</span></td></table></code></pre>
<p>Next, we register the hook. Update <code>application/configs/hooks.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span>  <span class="hljs-keyword">if</span> ( ! defined(<span class="hljs-string">'BASEPATH'</span>)) <span class="hljs-keyword">exit</span>(<span class="hljs-string">'No direct script access allowed'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-comment">/*</td><tr><td class="linenos" data-pseudo-content="3"></td><td>| -------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="4"></td><td>| Hooks</td><tr><td class="linenos" data-pseudo-content="5"></td><td>| -------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="6"></td><td>| This file lets you define "hooks" to extend CI without hacking the core</td><tr><td class="linenos" data-pseudo-content="7"></td><td>| files.  Please see the user guide for info:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>|</td><tr><td class="linenos" data-pseudo-content="9"></td><td>|    http://codeigniter.com/user_guide/general/hooks.html</td><tr><td class="linenos" data-pseudo-content="10"></td><td>|</td><tr><td class="linenos" data-pseudo-content="11"></td><td>*/</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>$hook[<span class="hljs-string">'post_controller_constructor'</span>][] = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                                <span class="hljs-string">'function'</span> =&gt; <span class="hljs-string">'force_ssl'</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                                <span class="hljs-string">'filename'</span> =&gt; <span class="hljs-string">'ssl.php'</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                                <span class="hljs-string">'filepath'</span> =&gt; <span class="hljs-string">'hooks'</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                                );</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-comment">/* End of file hooks.php */</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td><span class="hljs-comment">/* Location: ./application/config/hooks.php */</span></td></table></code></pre>
<p>This tells CodeIgniter that it should looks in the <code>application/hooks</code> directory for a file called <code>ssl.php</code>, and return the function <code>force_ssl</code>.</p>
<p>Finally, we enable hooks. Update <code>application/config/config.php</code>:</p>
<pre><code class="hljs lang-php singleline">$config[<span class="hljs-string">'enable_hooks'</span>] = <span class="hljs-keyword">TRUE</span>;</code></pre>
<p>If you only want to force SSL in production, not development, you may want to amend the <code>ssl.php</code> file to only perform the redirect in non-development environments, perhaps by using an environment variable via DotEnv.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Logging to the ELK stack with Laravel]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/06/03/logging-to-the-elk-stack-with-laravel/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/06/03/logging-to-the-elk-stack-with-laravel/">
        </link>
        <updated>2018-06-03T15:30:54Z</updated>
        <summary type="html"><![CDATA[<p>Logging to text files is the simplest and most common logging setup for web apps, and it works fine for relatively small and simple applications. However, it does have some downsides:</p>
<ul>
<li>It’s difficult to make the log files accessible - normally users have to SSH in to read them.</li>
<li>The tools used to filter and analyse log files have a fairly high technical barrier to access - grep and sed are not exactly easy for non-programmers to pick up, so business information can be hard to get.</li>
<li>It’s hard to visually identify trends in the data.</li>
<li>Log files don’t let you know immediately when something urgent happens</li>
<li>You can’t access logs for different applications through the same interface.</li>
</ul>
<p>For rare, urgent issues where you need to be informed immediately they occur, it’s straightforward to log to an instant messaging solution such as Slack or Hipchat. However, these aren’t easily searchable, and can only be used for the most important errors (otherwise, there’s a risk that important data will be lost in the noise). There are third-party services that allow you to search and filter your logs, but they can be prohibitively expensive.</p>
<p>The <a href="https://www.elastic.co/elk-stack">ELK stack</a> has recently gained a lot of attention as a sophisticated solution for logging application data. It consists of:</p>
<ul>
<li>Logstash for processing log data</li>
<li>Elasticsearch as a searchable storage backend</li>
<li>Kibana as a web interface</li>
</ul>
<p>By making the log data available using a powerful web interface, you can easily expose it to non-technical users. Kibana also comes with powerful tools to aggregate and filter the data. In addition, you can run your own instance, giving you a greater degree of control (as well as possibly being more cost-effective) compared to using a third-party service.</p>
<p>In this post I’ll show you how to configure a Laravel application to log to an instance of the ELK stack. Fortunately, Laravel uses the popular Monolog logging library by default, which is relatively easy to get to work with the ELK stack. First, we need to install support for the GELF logging format:</p>
<pre><code class="hljs lang-bash singleline">$ composer require graylog2/gelf-php</code></pre>
<p>Then, we create a custom logger class:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Logging</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\<span class="hljs-title">Logger</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Monolog</span>\<span class="hljs-title">Handler</span>\<span class="hljs-title">GelfHandler</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Gelf</span>\<span class="hljs-title">Publisher</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Gelf</span>\<span class="hljs-title">Transport</span>\<span class="hljs-title">UdpTransport</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GelfLogger</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * Create a custom Monolog instance.</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     * <span class="hljs-doctag">@param</span>  array  $config</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     * <span class="hljs-doctag">@return</span> \Monolog\Logger</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(array $config)</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        $handler = <span class="hljs-keyword">new</span> GelfHandler(<span class="hljs-keyword">new</span> Publisher(<span class="hljs-keyword">new</span> UdpTransport($config[<span class="hljs-string">'host'</span>], $config[<span class="hljs-string">'port'</span>])));</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Logger(<span class="hljs-string">'main'</span>, [$handler]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>}</td></table></code></pre>
<p>Finally, we configure our application to use this as our custom driver and specify the host and port in <code>config/logging.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-string">'custom'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>            <span class="hljs-string">'driver'</span> =&gt; <span class="hljs-string">'custom'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-string">'via'</span> =&gt; App\Logging\GelfLogger::class,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'host'</span> =&gt; <span class="hljs-string">'127.0.0.1'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'port'</span> =&gt; <span class="hljs-number">12201</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        ],</td></table></code></pre>
<p>You can then set up whatever logging channels you need for your application, and specify whatever log level you feel is appropriate.</p>
<p>Please note that this requires at least Laravel 5.6 - this file doesn’t exist in Laravel 5.5 and earlier, so you may have more work on your hands to integrate it with older versions.</p>
<p>If you already have an instance of the ELK stack set up on a remote server that’s already set up to accept input as GELF, then you should be able to point it at that and you’ll be ready to go. If you just want to try it out, I’ve been using a <a href="https://github.com/deviantony/docker-elk">Docker-based project</a> that makes it straightforward to run the whole stack locally. However, you will need to amend <code>logstash/pipeline/logstash.conf</code> as follows to allow it to accept log data:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>input {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    tcp {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        port =&gt; 5000</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="5"></td><td>   gelf {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>       port =&gt; 12201</td><tr><td class="linenos" data-pseudo-content="7"></td><td>       type =&gt; gelf</td><tr><td class="linenos" data-pseudo-content="8"></td><td>       codec =&gt; "json"</td><tr><td class="linenos" data-pseudo-content="9"></td><td>   }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>## Add your filters / logstash plugins configuration here</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>output {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    elasticsearch {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        hosts =&gt; "elasticsearch:9200"</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>}</td></table></code></pre>
<p>Then you can start it up using the instructions in the repository and it should be ready to go. Now, if you run the following command from Tinker:</p>
<pre><code class="hljs lang-php singleline">Log::info(<span class="hljs-string">'Just testing'</span>);</code></pre>
<p>Then if you access the web interface, you should be able to find that log message without any difficulty.</p>
<p>Now, this only covers the Laravel application logs. You may well want to pass other logs through to Logstash, such as Apache, Nginx or MySQL logs, and a quick Google should be sufficient to find ideas on how you might log for these services. Creating visualisations with Kibana is a huge subject, and the existing documentation covers that quite well, so if you’re interested in learning more about that I’d recommend reading the documentation and having a play with the dashboard.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Full-text search with MariaDB]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/05/13/full-text-search-with-mariadb/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/05/13/full-text-search-with-mariadb/">
        </link>
        <updated>2018-05-13T13:55:42Z</updated>
        <summary type="html"><![CDATA[<p>Recently I had the occasion to check out MariaDB’s implementation of full-text search. As it’s a relatively recent arrival in MySQL and MariaDB, it doesn’t seem to get all that much attention. In this post I’ll show you how to use it, with a few Laravel-specific pointers. We’ll be using the default <code>User</code> model in a new Laravel installation, which has columns for <code>name</code> and <code>email</code>.</p>
<p>Our first task is to create the fulltext index, which is necessary to perform the query. Run the following command:</p>
<pre><code class="hljs lang-sql singleline"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">ADD</span> FULLTEXT (<span class="hljs-keyword">name</span>, email);</code></pre>
<p>As you can see, we can specify multiple columns in our table to index.</p>
<p>If you’re using Laravel, you’ll want to create the following migration for this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddFulltextIndexForUsers</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::statement(<span class="hljs-string">'ALTER TABLE users ADD FULLTEXT(name, email)'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::statement(<span class="hljs-string">'ALTER TABLE users DROP INDEX IF EXISTS name'</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>Note that the index is named after the first field passed to it, so when we drop it we refer to it as <code>name</code>. Then, to actually query the index, you should run a command something like this:</p>
<pre><code class="hljs lang-sql singleline"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">MATCH</span>(<span class="hljs-keyword">name</span>, email) AGAINST (<span class="hljs-string">'jeff'</span> <span class="hljs-keyword">IN</span> <span class="hljs-keyword">NATURAL</span> <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">MODE</span>);</code></pre>
<p>Note that <code>NATURAL LANGUAGE MODE</code> is actually the default, so you can leave it off if you wish. We also have to specify the columns to match against.</p>
<p>If you’re using Laravel, you may want to create a reusable local scope for it:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scopeSearch</span><span class="hljs-params">($query, $search)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">if</span> (!$search) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-keyword">return</span> $query;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> $query-&gt;whereRaw(<span class="hljs-string">'MATCH(name, email) AGAINST (?)'</span>, [$search]);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }</td></table></code></pre>
<p>Then you can call it as follows:</p>
<pre><code class="hljs lang-php singleline">User::search(<span class="hljs-string">'jeff'</span>)-&gt;get();</code></pre>
<p>I personally have noticed that the query using the <code>MATCH</code> keywords seems to be far more performant, with the response time being between five and ten times less than a similar command using <code>LIKE</code>, however this observation isn’t very scientific (plus, we are talking about queries that still run in a fraction of a second). However, if you’re doing a particularly expensive query that currently uses a <code>LIKE</code> statement, it’s possible you may get better results by switching to a <code>MATCH</code> statement. Full-text search probably isn’t all that useful in this context - it’s only once we’re talking about longer text, such as blog posts, that some of the advantages like support for stopwords comes into play.</p>
<p>From what I’ve seen this implementation of full-text search is a lot simpler than in PostgreSQL, which has ups and downs. On the one hand, it’s a lot easier to implement, but conversely it’s less useful - there’s no obvious way to perform a full-text search against joined tables. However, it does seem to be superior to using a <code>LIKE</code> statement, so it’s probably a good fit for smaller sites where something like Elasticsearch would be overkill.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a letter classifier in PHP with Tesseract OCR and PHP ML]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/05/10/building-a-letter-classifier-in-php-with-tesseract-ocr-and-php-ml/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/05/10/building-a-letter-classifier-in-php-with-tesseract-ocr-and-php-ml/">
        </link>
        <updated>2018-05-10T22:50:08Z</updated>
        <summary type="html"><![CDATA[<p>PHP isn’t the first language that springs to mind when it comes to machine learning. However, it is practical to use PHP for machine learning purposes. In this tutorial I’ll show you how to build a pipeline for classifying letters.</p>
<h2 id="the-brief">The brief</h2>
<p>Before I was a web dev, I was a clerical worker for an FTSE-100 insurance company, doing a lot of work that nowadays is possible to automate away, if you know how. When they received a letter or other communication from a client, it would be sent to be scanned on. Once scanned, a human would have to look at it to classify it, eg was it a complaint, a request for information, a request for a quote, or something else, as well as assign it to a policy number. Let’s imagine we’ve been asked to build a proof of concept for automating this process. This is a good example of a real-world problem that machine learning can help with.</p>
<p>As this is a proof of concept we aren’t looking to build a web app for this - for simplicity’s sake this will be a command-line application. Unlike emails, letters don’t come in an easily machine-readable format, so we will be receiving them as PDF files (since they would have been scanned on, this is a reasonable assumption). Feel free to mock up your own example letters using your own classifications, but I will be classifying letters into four groups:</p>
<ul>
<li><strong>Complaints</strong> - letters expressing dissatisfaction</li>
<li><strong>Information requests</strong> - letters requesting general information</li>
<li><strong>Surrender quotes</strong> - letters requesting a surrender quote</li>
<li><strong>Surrender forms</strong> - letters requesting surrender forms</li>
</ul>
<p>Our application will therefore take in a PDF file at one end, and perform the following actions on it:</p>
<ul>
<li>Convert the PDF file to a PNG file</li>
<li>Use OCR (optical character recognition) to convert the letter to plain text</li>
<li>Strip out unwanted whitespace</li>
<li>Extract any visible policy number from the text</li>
<li>Use a machine learning library to classify the letter, having taught it using prior examples</li>
</ul>
<p>Sound interesting? Let’s get started…</p>
<h2 id="introducing-pipelines">Introducing pipelines</h2>
<p>As our application will be carrying out a series of discrete steps on our data, it makes sense to use the pipeline pattern for this project. Fortunately, the PHP League have produced a excellent <a href="http://pipeline.thephpleague.com/">package</a> implementing this. We can therefore create a single class for each step in the process and have it handle that in isolation.</p>
<p>We’ll also use the Symfony Console component to implement our command-line application. For our machine learning library we will be using <a href="https://php-ml.readthedocs.io/en/latest/">PHP ML</a>, which requires PHP 7.1 or greater. For OCR, we will be using <a href="https://github.com/thiagoalessio/tesseract-ocr-for-php">Tesseract</a>, so you will need to install the underlying Tesseract OCR library, as well as support for your language. On Ubuntu you can install these as follows:</p>
<pre><code class="hljs lang-bash singleline">$ sudo apt-get install tesseract-ocr tesseract-ocr-eng</code></pre>
<p>This assumes you are using English, however you should be able to find packages to support many other languages. Finally, we need ImageMagick to be installed in order to convert PDF files to PNG’s.</p>
<p>Your <code>composer.json</code> should look something like this:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"matthewbdaly/letter-classifier"</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Demo of classifying letters in PHP"</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"project"</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-attr">"require"</span>: {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-attr">"league/pipeline"</span>: <span class="hljs-string">"^0.3.0"</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-attr">"thiagoalessio/tesseract_ocr"</span>: <span class="hljs-string">"^2.2"</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-attr">"php-ai/php-ml"</span>: <span class="hljs-string">"^0.6.2"</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-attr">"symfony/console"</span>: <span class="hljs-string">"^4.0"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-attr">"require-dev"</span>: {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-attr">"phpspec/phpspec"</span>: <span class="hljs-string">"^4.3"</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-attr">"psy/psysh"</span>: <span class="hljs-string">"^0.8.17"</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attr">"autoload"</span>: {</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-attr">"psr-4"</span>: {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-attr">"Matthewbdaly\\LetterClassifier\\"</span>: <span class="hljs-string">"src/"</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attr">"license"</span>: <span class="hljs-string">"MIT"</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attr">"authors"</span>: [</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Matthew Daly"</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"matthewbdaly@gmail.com"</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    ]</td><tr><td class="linenos" data-pseudo-content="27"></td><td>}</td></table></code></pre>
<p>Next, let’s write the outline of our command-line client. We’ll load a single class for our processor command. Save this as <code>app</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">#!/usr/bin/env php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/vendor/autoload.php'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Application</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Commands</span>\<span class="hljs-title">Processor</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>$application = <span class="hljs-keyword">new</span> Application();</td><tr><td class="linenos" data-pseudo-content="10"></td><td>$application-&gt;add(<span class="hljs-keyword">new</span> Processor());</td><tr><td class="linenos" data-pseudo-content="11"></td><td>$application-&gt;run();</td></table></code></pre>
<p>Next, we create our command. Save this as <code>src/Commands/Processor.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Commands</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Command</span>\<span class="hljs-title">Command</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Input</span>\<span class="hljs-title">InputInterface</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Output</span>\<span class="hljs-title">OutputInterface</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Input</span>\<span class="hljs-title">InputArgument</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\<span class="hljs-title">Pipeline</span>\<span class="hljs-title">Pipeline</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>\<span class="hljs-title">ConvertPdfToPng</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>\<span class="hljs-title">ReadFile</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>\<span class="hljs-title">Classify</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>\<span class="hljs-title">StripTabs</span>;</td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>\<span class="hljs-title">GetPolicyNumber</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Processor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setName(<span class="hljs-string">'process'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            -&gt;setDescription(<span class="hljs-string">'Processes a file'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            -&gt;setHelp(<span class="hljs-string">'This command processes a file'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            -&gt;addArgument(<span class="hljs-string">'file'</span>, InputArgument::REQUIRED, <span class="hljs-string">'File to process'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(InputInterface $input, OutputInterface $output)</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $file = $input-&gt;getArgument(<span class="hljs-string">'file'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        $pipeline = (<span class="hljs-keyword">new</span> Pipeline)</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            -&gt;pipe(<span class="hljs-keyword">new</span> ConvertPdfToPng)</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            -&gt;pipe(<span class="hljs-keyword">new</span> ReadFile)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            -&gt;pipe(<span class="hljs-keyword">new</span> StripTabs)</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            -&gt;pipe(<span class="hljs-keyword">new</span> GetPolicyNumber)</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            -&gt;pipe(<span class="hljs-keyword">new</span> Classify);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        $response = $pipeline-&gt;process($file);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $output-&gt;writeln(<span class="hljs-string">"Classification is "</span>.$response[<span class="hljs-string">'classification'</span>]);</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        $output-&gt;writeln(<span class="hljs-string">"Policy number is "</span>.$response[<span class="hljs-string">'policy'</span>]);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td>}</td></table></code></pre>
<p>Note how our command accepts the file name as an argument. We then instantiate our pipeline and pass it through a series of classes, each of which has a single role. Finally, we retrieve our response and output it.</p>
<p>With that done, we can move on to implementing our first step. Save this as <code>src/Stages/ConvertPdfToPng.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Imagick</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConvertPdfToPng</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($file)</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        $tmp = tmpfile();</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $uri = stream_get_meta_data($tmp)[<span class="hljs-string">'uri'</span>];</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        $img = <span class="hljs-keyword">new</span> Imagick();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $img-&gt;setResolution(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $img-&gt;readImage($file);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        $img-&gt;setImageDepth(<span class="hljs-number">8</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $img-&gt;setImageFormat(<span class="hljs-string">'png'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        $img-&gt;writeImage($uri);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">return</span> $tmp;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>}</td></table></code></pre>
<p>This stage fetches the file passed through, and converts it into a PNG file, stores it as a temporary file, and returns a reference to it. The output of this stage will then form the input of the next. This is how pipelines work, and it makes it easy to break up a complex process into multiple steps that can be reused in different places, facilitating easier code reuse and making your code simpler to understand and reason about.</p>
<p>Our next step carries out optical character recognition. Save this as <code>src/Stages/ReadFile.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">thiagoalessio</span>\<span class="hljs-title">TesseractOCR</span>\<span class="hljs-title">TesseractOCR</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadFile</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($file)</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        $uri = stream_get_meta_data($file)[<span class="hljs-string">'uri'</span>];</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $ocr = <span class="hljs-keyword">new</span> TesseractOCR($uri);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> $ocr-&gt;lang(<span class="hljs-string">'eng'</span>)-&gt;run();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>}</td></table></code></pre>
<p>As you can see, this accepts the link to the temporary file as an argument, and runs Tesseract on it to retrieve the text. Note that we specify a language of <code>eng</code> - if you want to use a language other than English, you should specify it here.</p>
<p>At this point, we should have some usable text, but there may be unknown amounts of whitespace, so our next step uses a regex to strip them out. Save this as <code>src/Stages/StripTabs.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StripTabs</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($content)</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-keyword">return</span> trim(preg_replace(<span class="hljs-string">'/\s+/'</span>, <span class="hljs-string">' '</span>, $content));</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td></table></code></pre>
<p>With our whitespace issue sorted out, we now need to retrieve the policy number the communication should be filed under. These are generally regular alphanumeric patterns, so regexes are a suitable way of matching them. As this is a proof of concept, we’ll assume a very simple pattern for policy numbers in that they will consist of between seven and nine digits. Save this as <code>src/Stages/GetPolicyNumber.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetPolicyNumber</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">($content)</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        $matches = [];</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $policyNumber = <span class="hljs-string">''</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        preg_match(<span class="hljs-string">'/\d{7,9}/'</span>, $content, $matches);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">if</span> (count($matches)) {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            $policyNumber = $matches[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'content'</span> =&gt; $content,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'policy'</span> =&gt; $policyNumber</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ];</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>}</td></table></code></pre>
<p>Finally, we’re onto the really tough part - using machine learning to classify the letters. Save this as <code>src/Stages/Classify.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">LetterClassifier</span>\<span class="hljs-title">Stages</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">Dataset</span>\<span class="hljs-title">CsvDataset</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">Dataset</span>\<span class="hljs-title">ArrayDataset</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">FeatureExtraction</span>\<span class="hljs-title">TokenCountVectorizer</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">Tokenization</span>\<span class="hljs-title">WordTokenizer</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">CrossValidation</span>\<span class="hljs-title">StratifiedRandomSplit</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">FeatureExtraction</span>\<span class="hljs-title">TfIdfTransformer</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">Metric</span>\<span class="hljs-title">Accuracy</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">Classification</span>\<span class="hljs-title">SVC</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Phpml</span>\<span class="hljs-title">SupportVectorMachine</span>\<span class="hljs-title">Kernel</span>;</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Classify</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">protected</span> $classifier;</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">protected</span> $vectorizer;</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">protected</span> $tfIdfTransformer;</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;dataset = <span class="hljs-keyword">new</span> CsvDataset(<span class="hljs-string">'data/letters.csv'</span>, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;vectorizer = <span class="hljs-keyword">new</span> TokenCountVectorizer(<span class="hljs-keyword">new</span> WordTokenizer());</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">$this</span>-&gt;tfIdfTransformer = <span class="hljs-keyword">new</span> TfIdfTransformer();</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $samples = [];</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;dataset-&gt;getSamples() <span class="hljs-keyword">as</span> $sample) {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>                $samples[] = $sample[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">$this</span>-&gt;vectorizer-&gt;fit($samples);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">$this</span>-&gt;vectorizer-&gt;transform($samples);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">$this</span>-&gt;tfIdfTransformer-&gt;fit($samples);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">$this</span>-&gt;tfIdfTransformer-&gt;transform($samples);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $dataset = <span class="hljs-keyword">new</span> ArrayDataset($samples, <span class="hljs-keyword">$this</span>-&gt;dataset-&gt;getTargets());</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        $randomSplit = <span class="hljs-keyword">new</span> StratifiedRandomSplit($dataset, <span class="hljs-number">0.1</span>);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">$this</span>-&gt;classifier = <span class="hljs-keyword">new</span> SVC(Kernel::RBF, <span class="hljs-number">10000</span>);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-keyword">$this</span>-&gt;classifier-&gt;train($randomSplit-&gt;getTrainSamples(), $randomSplit-&gt;getTrainLabels());</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        $predictedLabels = <span class="hljs-keyword">$this</span>-&gt;classifier-&gt;predict($randomSplit-&gt;getTestSamples());</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Accuracy: '</span>.Accuracy::score($randomSplit-&gt;getTestLabels(), $predictedLabels);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">(array $message)</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        $newSample = [$message[<span class="hljs-string">'content'</span>]];</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-keyword">$this</span>-&gt;vectorizer-&gt;transform($newSample);</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-keyword">$this</span>-&gt;tfIdfTransformer-&gt;transform($newSample);</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        $message[<span class="hljs-string">'classification'</span>] = <span class="hljs-keyword">$this</span>-&gt;classifier-&gt;predict($newSample)[<span class="hljs-number">0</span>];</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-keyword">return</span> $message;</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="52"></td><td>}</td></table></code></pre>
<p>In our constructor, we train up our model by passing our sample data through the following steps:</p>
<ul>
<li>First, we use the token count vectorizer to convert our samples to a vector of token counts - replacing every word with a number and keeping track of how often that word occurs.</li>
<li>Next, we use <code>TfIdfTransformer</code> to get statistics about how important a word is in a document.</li>
<li>Then we instantiate our classifier and train it on a random subset of our data.</li>
<li>Finally, we pass our message to our now-trained classifier and see what it tells us.</li>
</ul>
<p>Now, bear in mind I don’t have a background in machine learning and this is the first time I’ve done anything with machine learning, so I can’t tell you much more than that - if you want to know more I suggest you investigate on your own. In figuring this out I was helped a great deal by <a href="https://www.sitepoint.com/how-to-analyze-tweet-sentiments-with-php-machine-learning/">this article on Sitepoint</a>, so you might want to start there.</p>
<p>The finished application is <a href="https://github.com/matthewbdaly/letter-classifier">on GitHub</a>, and the repository includes a CSV file of training data, as well as the <code>examples</code> folder, which contains some example PDF files. You can run it as follows:</p>
<pre><code class="hljs lang-bash singleline">$ php app process examples/Quote.pdf</code></pre>
<p>I found that once I had trained it up using the CSV data from the repository, it was around 70-80% accurate, which isn’t bad at all considering the comparatively small size of the dataset. If this were genuinely being used in production, there would be an extremely large dataset of historical scanned letters to use for training purposes, so it wouldn’t be unreasonable to expect much better results under those circumstances.</p>
<h2 id="exercises-for-the-reader">Exercises for the reader</h2>
<p>If you want to develop this concept further, here are some ideas:</p>
<ul>
<li>We should be able to correct the model when it’s wrong. Add a separate command to train the model by passing through a file and specifying how it should be categorised, eg <code>php app train File.pdf quote</code>.</li>
<li>Try processing information from different sources. For instance, you could replace the first two stages with a stage that pulls all unread emails from a specified mailbox using PHP’s IMAP support, or fetching data from the Twitter API. Or you could have a telephony service such as Twilio set up as your voicemail, and automatically transcribe them, then pass the text to PHP ML for classification.</li>
<li>If you’re multilingual, you could try adding a step to sort letters by language and have separate models for classifying in each language</li>
</ul>
<h2 id="summary">Summary</h2>
<p>It’s actually quite a sobering thought that <em>already</em> it’s possible to use techniques like these to produce tools that replace people in various jobs, and as the tooling matures more and more tasks involving classification are going to become amenable to automation using machine learning.</p>
<p>This was my first experience with machine learning and it’s been very interesting for me to solve a real-world problem with it. I hope it gives you some ideas about how you could use it too.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Console applications with the Symfony Console component]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/04/29/console-applications-with-the-symfony-console-component/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/04/29/console-applications-with-the-symfony-console-component/">
        </link>
        <updated>2018-04-29T19:59:27Z</updated>
        <summary type="html"><![CDATA[<p>Recently I’ve had the occasion to add a series of console commands to a legacy application. This can be made straightforward by using the Symfony console component. In this post I’ll demonstrate how to write a simple console command for clearing a cache folder.</p>
<p>The first step is to install the Console component:</p>
<pre><code class="hljs lang-bash singleline">$ composer require symfony/console</code></pre>
<p>Then we write the main script for the application. I usually save mine as <code>console</code> - note that we don’t want to have to type out a file extension, so instead we use the shebang:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">#!/user/bin/env php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/vendor/autoload.php'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Application</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>define(<span class="hljs-string">'CONSOLE_ROOT'</span>, <span class="hljs-keyword">__DIR__</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>$app = <span class="hljs-keyword">new</span> Application();</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>$app-&gt;run();</td></table></code></pre>
<p>In this case, I’ve defined <code>CONSOLE_ROOT</code> as the directory in which the console command is run - that way, the commands can use it to refer to the application root.</p>
<p>We can then run our console application as follows:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php console</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Console Tool</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>Usage:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-built_in">command</span> [options] [arguments]</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Options:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  -h, --<span class="hljs-built_in">help</span>            Display this <span class="hljs-built_in">help</span> message</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  -q, --quiet           Do not output any message</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  -V, --version         Display this application version</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      --ansi            Force ANSI output</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      --no-ansi         Disable ANSI output</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  -n, --no-interaction  Do not ask any interactive question</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 <span class="hljs-keyword">for</span> normal output, 2 <span class="hljs-keyword">for</span> more verbose output and 3 <span class="hljs-keyword">for</span> debug</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>Available commands:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-built_in">help</span>  Displays <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> a <span class="hljs-built_in">command</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  list  Lists commands</td></table></code></pre>
<p>This displays the available commands, but you’ll note that there are none except for <code>help</code> and <code>list</code>. We’ll remedy that. First, we’ll register a command:</p>
<pre><code class="hljs lang-php singleline">$app-&gt;add(<span class="hljs-keyword">new</span> App\Console\ClearCacheCommand);</code></pre>
<p>This has to be done in <code>console</code>, after we create <code>$app</code>, but before we run it.</p>
<p>Don’t forget to update the autoload section of your <code>composer.json</code> to register the namespace:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    "autoload": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        "psr-4": {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            "App\\Console\\": "src/Console/"</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    },</td></table></code></pre>
<p>Then create the class for that command. This class must extend <code>Symfony\Component\Console\Command\Command</code>, and must have two methods:</p>
<ul>
<li><code>configure()</code></li>
<li><code>execute()</code></li>
</ul>
<p>In addition, the <code>execute()</code> method must accept two arguments, an instance of <code>Symfony\Component\Console\Input\InputInterface</code>, and an instance of <code>Symfony\Component\Console\Output\OutputInterface</code>. There are used to retrieve input and display output.</p>
<p>Let’s write our command:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Console</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Command</span>\<span class="hljs-title">Command</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Input</span>\<span class="hljs-title">InputInterface</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Output</span>\<span class="hljs-title">OutputInterface</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClearCacheCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configure</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setName(<span class="hljs-string">'cache:clear'</span>)</td><tr><td class="linenos" data-pseudo-content="14"></td><td>             -&gt;setDescription(<span class="hljs-string">'Clears the cache'</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>             -&gt;setHelp(<span class="hljs-string">'This command clears the application cache'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span><span class="hljs-params">(InputInterface $input, OutputInterface $output)</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        $dir = CONSOLE_ROOT.DIRECTORY_SEPARATOR.<span class="hljs-string">'cache'</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">$this</span>-&gt;deleteTree($dir);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $output-&gt;writeln(<span class="hljs-string">'Cache cleared'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    } </td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteTree</span><span class="hljs-params">($dir)</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        $files = array_diff(scandir($dir), <span class="hljs-keyword">array</span>(<span class="hljs-string">'.'</span>,<span class="hljs-string">'..'</span>)); </td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">foreach</span> ($files <span class="hljs-keyword">as</span> $file) { </td><tr><td class="linenos" data-pseudo-content="29"></td><td>            (is_dir(<span class="hljs-string">"$dir/$file"</span>)) ? <span class="hljs-keyword">$this</span>-&gt;deleteTree(<span class="hljs-string">"$dir/$file"</span>) : unlink(<span class="hljs-string">"$dir/$file"</span>); </td><tr><td class="linenos" data-pseudo-content="30"></td><td>        } </td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">return</span> rmdir($dir); </td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>}</td></table></code></pre>
<p>As you can see, in the <code>configure()</code> method, we set the name, description and help text for the command.</p>
<p>The <code>execute()</code> method is where the actual work is done. In this case, we have some code that needs to be called recursively, so we have to pull it out into a private method. Once that’s done we use <code>$output-&gt;writeln()</code> to write a line to the output.</p>
<p>Now, if we run our console task, we should see our new command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php console</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Console Tool</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>Usage:</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-built_in">command</span> [options] [arguments]</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Options:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  -h, --<span class="hljs-built_in">help</span>            Display this <span class="hljs-built_in">help</span> message</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  -q, --quiet           Do not output any message</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  -V, --version         Display this application version</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      --ansi            Force ANSI output</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      --no-ansi         Disable ANSI output</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  -n, --no-interaction  Do not ask any interactive question</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 <span class="hljs-keyword">for</span> normal output, 2 <span class="hljs-keyword">for</span> more verbose output and 3 <span class="hljs-keyword">for</span> debug</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>Available commands:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  <span class="hljs-built_in">help</span>         Displays <span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> a <span class="hljs-built_in">command</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>  list         Lists commands</td><tr><td class="linenos" data-pseudo-content="19"></td><td> cache</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  cache:clear  Clears the cache</td></table></code></pre>
<p>And we can see it in action too:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php console cache:clear</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Cache cleared</td></table></code></pre>
<p>For commands that need to accept additional arguments, you can define them in the <code>configure()</code> method:</p>
<pre><code class="hljs lang-php singleline"><span class="hljs-keyword">$this</span>-&gt;addArgument(<span class="hljs-string">'file'</span>, InputArgument::REQUIRED, <span class="hljs-string">'Which file do you want to delete?'</span>)</code></pre>
<p>Then, you can access it in the <code>execute()</code> method using <code>InputInterface</code>:</p>
<pre><code class="hljs lang-php singleline">$file = $input-&gt;getArgument(<span class="hljs-string">'file'</span>);</code></pre>
<p>This tutorial is just skimming the surface of what you can do with the Symfony Console components - indeed, many other console interfaces, such as Laravel’s Artisan, are built on top of it. If you have a legacy application built in a framework that lacks any sort of console interface, such as CodeIgniter, then you can quite quickly produce basic console commands for working with that application. The <a href="https://symfony.com/doc/current/console.html">documentation is very good</a>, and with a little work you can soon have something up and running.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rendering different views for mobile and desktop clients in Laravel]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/04/22/rendering-different-views-for-mobile-and-desktop-clients-in-laravel/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/04/22/rendering-different-views-for-mobile-and-desktop-clients-in-laravel/">
        </link>
        <updated>2018-04-22T22:50:10Z</updated>
        <summary type="html"><![CDATA[<p>This was a bit of a weird post to write. It started out explaining how I resolved an issue years ago on a CodeIgniter site, but amended to work for Laravel. In the process, I realised it made sense to implement it as middleware, and I ended up pulling it out into <a href="https://github.com/matthewbdaly/laravel-dynamic-serving">a package</a>. However, it’s still useful to understand the concept behind it, even if you prefer to just install the complete package, because your needs might be slightly different to mine.</p>
<p>On web development forums, it’s quite common to see variants of the following question:</p>
<blockquote>
<p>How do I redirect a user on a mobile device to a mobile version of the site?</p>
</blockquote>
<p>It’s quite surprising that this is still an issue that crops up. For many years, it’s been widely accepted that the correct solution for this problem is responsive design. However, there are ways in which this may not be adequate for certain applications. For instance, you may have an application where certain functionality only makes sense in a certain context, or your user interface may need to be optimised for specific environments.</p>
<p>The trouble is that a dedicated mobile site isn’t a good idea either. Among other things, it means that users can’t easily use the same bookmarks between desktop and mobile versions, and can result in at least some of the server-side logic being duplicated.</p>
<p>Fortunately, there is another way - <a href="https://developers.google.com/search/mobile-sites/mobile-seo/dynamic-serving">dynamic serving</a> allows you to render different content based on the user agent. You can also easily enable users to switch between desktop and mobile versions themselves if their client isn’t detected correctly or they just prefer the other one. I’ve implemented this years ago for a CodeIgniter site. Here’s how you might implement it in Laravel, although if you understand the principle behind it, it should be easy to adapt for any other framework.</p>
<p>Don’t try to implement mobile user agent detection yourself. Instead, find an implementation that’s actively maintained and install it with Composer. That way you can be reasonably sure that as new mobile devices come onto the market the package will detect them correctly as long as you keep it up to date. I would be inclined to go for <a href="https://github.com/jenssegers/agent">Agent</a>, since it has Laravel support baked in.</p>
<p>We could just use Agent to serve up different content based on the user agent. However, user agent strings are notoriously unreliable - if a new mobile device appears and it doesn’t show up correctly in Agent, users could find themselves forced to use the wrong UI. Instead, we need to check for a flag in the session that indicates if the session is mobile or not. If it’s not set, we set it based on the user agent. That way, if you need to offer functionality to override the detected session type, you can just update that session variable to correct that elsewhere in the application. I would be inclined to use a button in the footer that makes an AJAX request to toggle the flag, then reloads the page.</p>
<p>You also need to set the HTTP response header <code>Vary: User-Agent</code> to notify clients (including not only search engines, but also proxies at either end of the connection, such as Varnish or Squid) that the response will differ by user agent, in order to prevent users being served the wrong version.</p>
<p>Middleware is the obvious place to do this. Here’s a middleware that sets the session variable and the appropriate response headers:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Jenssegers</span>\<span class="hljs-title">Agent</span>\<span class="hljs-title">Agent</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Session</span>\<span class="hljs-title">Session</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetectMobile</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">protected</span> $agent;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">protected</span> $session;</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Agent $agent, Session $session)</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;agent = $agent;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">$this</span>-&gt;session = $session;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * Handle an incoming request.</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;session-&gt;exists(<span class="hljs-string">'mobile'</span>)) {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;agent-&gt;isMobile() || <span class="hljs-keyword">$this</span>-&gt;agent-&gt;isTablet()) {</td><tr><td class="linenos" data-pseudo-content="32"></td><td>                <span class="hljs-keyword">$this</span>-&gt;session-&gt;put(<span class="hljs-string">'mobile'</span>, <span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            } <span class="hljs-keyword">else</span> {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                <span class="hljs-keyword">$this</span>-&gt;session-&gt;put(<span class="hljs-string">'mobile'</span>, <span class="hljs-keyword">false</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        $response = $next($request);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">return</span> $response-&gt;setVary(<span class="hljs-string">'User-Agent'</span>);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="40"></td><td>}</td></table></code></pre>
<p>Now, you could then work with the session directly to retrieve the <code>mobile</code> flag, but as you may be working in the view, it makes sense to create helpers for this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'is_mobile'</span>)) {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_mobile</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        $session = app()-&gt;make(<span class="hljs-string">'Illuminate\Contracts\Session\Session'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">return</span> $session-&gt;get(<span class="hljs-string">'mobile'</span>) == <span class="hljs-keyword">true</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>}</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'is_desktop'</span>)) {</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_desktop</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $session = app()-&gt;make(<span class="hljs-string">'Illuminate\Contracts\Session\Session'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> $session-&gt;get(<span class="hljs-string">'mobile'</span>) == <span class="hljs-keyword">false</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>}</td></table></code></pre>
<p>Now, if you want to serve up completely different views, you can use these helpers in your controllers. If you instead want to selectively show and hide parts of the UI based on the user agent, you can instead use these in the views to determine what parts of the page should be shown.</p>
<p>Agent offers more functionality than just detecting if a user agent is a mobile or desktop device, and you may find this useful as a starting point for developing middleware for detecting bots, or showing different content to users based on their device type or operating system. If you just need to detect if a user is a mobile or desktop client, this middleware should be sufficient.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Making Wordpress less shit]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/04/12/making-wordpress-less-shit/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/04/12/making-wordpress-less-shit/">
        </link>
        <updated>2018-04-12T22:57:05Z</updated>
        <summary type="html"><![CDATA[<p>I’m not going to sugarcoat it. As a developer, I think Wordpress is shit, and I’m not alone in that opinion. Its code base dates from a time before many of the developments of the last few years that have hugely improved PHP as a language, as well as the surrounding ecosystem such as Composer and PSR-FIG, and it’s likely it couldn’t adopt many of those without making backward-incompatible changes that would affect its own ecosystem of plugins and themes. It actively forces you to write code that is far less elegant and efficient than what you might write with a proper framework such as Laravel, and the quality of many of the plugins and themes around is dire.</p>
<p>Unfortunately, it’s also difficult to avoid. Over a quarter of all websites run Wordpress, and most developers will have to work with it at some point in their careers. However, there are ways that you can improve your experience when working with Wordpress somewhat. In this post I’m going to share some methods you can use to make Wordpress less painful to use.</p>
<p>This isn’t a post about the obvious things like “Use the most recent version of PHP you can”, “Use SSL”, “Install this plugin”, “Use Vagrant/Lando” etc - I’m assuming you already know stuff like that for bog standard Wordpress development. Nor is it about actually developing Wordpress plugins or themes. Instead, this post is about bringing your Wordpress development workflow more into line with how you develop with MVC frameworks like Laravel, so that you have a better experience working with and maintaining Wordpress sites. We can’t solve the fundamental issues with Wordpress, but we can take some steps to make it easier to work with.</p>
<h2 id="use-bedrock">Use Bedrock</h2>
<p><a href="https://roots.io/bedrock/">Bedrock</a> is still Wordpress, but reorganized so that:</p>
<ul>
<li>The Wordpress core, plugins and themes can be managed with Composer for easier updates</li>
<li>The configuration can be done with a <code>.env</code> file that can be kept out of version control, rather than putting it in <code>wp-config.php</code></li>
<li>The web root is isolated to limit access to the files</li>
</ul>
<p>In short, it optimizes Wordpress for how modern developers work. Arguably that’s at the expense of site owners, since it makes it harder for non-developers to manage the site, however for any Wordpress site that’s sufficiently complex to need development work done that’s a trade-off worth making. I’ve been involved in projects where Wordpress got used alongside an MVC framework for some custom functionality, and in my experience it caused a world of problems when updating plugins and themes because version control would get out of sync, so moving that to use Composer to manage them instead would have been a huge win.</p>
<p>Using Bedrock means that if you have a parent theme you use all the time, or custom plugins of your own, you can install them using Composer by adding the Git repositories to your <code>composer.json</code>, making it easier to re-use functionality you’ve already developed. It also makes recovery easier in the event of the site being compromised, because the files outside the vendor directory will be in version control, and you can delete the vendor directory and re-run <code>composer install</code> to replace the rest. By comparison, with a regular Wordpress install, if it’s compromised you can’t always be certain you’ve got all of the files that have been changed. Also, keeping Wordpress up to date becomes a simple matter of running <code>composer update</code> regularly, verifying it hasn’t broken anything, and then deploying it to production.</p>
<p>Bedrock uses <a href="https://wpackagist.org/">WPackagist</a>, which regularly scans the Wordpress Subversion repository for plugins and themes, so at least for plugins and themes published on the Wordpress site, it’s easy to install them. Paid plugins may be more difficult - I’d be inclined to put those in a private Git repository and install them from there, although I’d be interested to know if anyone else uses another method for that.</p>
<h2 id="if-you-can-t-use-bedrock-use-wp-cli">If you can’t use Bedrock, use WP CLI</h2>
<p>If for any reason you can’t use Bedrock for a site, then have a look at <a href="https://wp-cli.org/">WP CLI</a>. On the server, you can use it to install and manage both plugins and themes, as well as the Wordpress core.</p>
<p>It’s arguably even more useful locally, as it can be used to generate scaffolding for plugins, themes (including child themes based on an existing theme), and components such as custom post types or taxonomies. In short, if you do any non-trivial amount of development with Wordpress you’ll probably find a use for it. Even if you can use Bedrock, you’re likely to find WP CLI handy for the scaffolding.</p>
<h2 id="upgrade-the-password-encryption">Upgrade the password encryption</h2>
<p>I said this wouldn’t be about using a particular plugin, but this one is too important. Wordpress’s password hashing still relies on MD5, which is <em>far</em> too weak to be considered safe. Unfortunately, Wordpress still supports PHP versions as old as 5.2, and until they drop it they can’t really switch to something more secure.</p>
<p><a href="https://roots.io/plugins/bcrypt-password/">wp-password-bcrypt</a> overrides the password functionality of Wordpress to use Bcrypt, which is what modern PHP applications use. As a result, the hashes are considerably stronger. Given that Wordpress is a common target for hackers, it’s prudent to ensure your website is as secure as you can possibly make it.</p>
<p>If you use Bedrock, it uses this plugin by default, so it’s already taken care of for you.</p>
<h2 id="use-a-proper-templating-system">Use a proper templating system</h2>
<p>PHP is a weird hybrid of a programming language and a templating system. As such, it’s all too easy to wind up with too much logic in your view layer, so it’s a good idea to use a proper templating system if you can. Unfortunately, Wordpress doesn’t support that out of the box.</p>
<p>However, there are some third-party solutions for this. <a href="https://roots.io/sage/">Sage</a> uses Laravel’s Blade templating system (and also comes with Webpack preconfigured), while <a href="https://www.upstatement.com/timber/">Timber</a> lets you use Twig.</p>
<h2 id="use-the-wordpress-rest-api-for-ajax-where-you-can">Use the Wordpress REST API for AJAX where you can</h2>
<p>Version 4.7 of Wordpress introduced the <a href="https://v2.wp-api.org/">Wordpress REST API</a>, allowing the data to be exposed via RESTful endpoints. As a result, it should now be possible to build more complex and powerful user interfaces for that data. For instance, if you were using Wordpress to build a site for listing items for sale, you could create a single-page web app for the front end using React.js and Redux, and use the API to submit it, then show the submitted items.</p>
<p>I’m not a fan of the idea the Wordpress developers seem to have of trying to make it some kind of all-singing, all-dancing universal platform for the web, and the REST API seems to be part of that idea, but it does make it a lot easier than it was in the past to do something a bit out of the ordinary with Wordpress. In some cases it might be worth using Wordpress as the backend for a <a href="https://en.wikipedia.org/wiki/Headless_CMS">headless CMS</a>, and the REST API makes that a practical approach. For simpler applications that just need to make a few AJAX calls, using the REST API is generally going to be more elegant and practical than any other approach to AJAX with Wordpress. It’s never going to perform as well or be as elegant as a custom-built REST API, but it’s definitely a step forward compared to the hoops you used to have to jump through to handle AJAX requests in Wordpress.</p>
<h2 id="summary">Summary</h2>
<p>Wordpress is, and will remain for the foreseeable future, a pain in the backside to develop for compared to something like Laravel, and I remain completely mystified by the number of people who seem to think it’s the greatest thing since sliced bread. However, it is possible to make things better if you know how - it’s just that some of this stuff seems to be relatively obscure. In particular, discovering Bedrock is potentially game-changing because it makes it so much easier to keep the site under version control.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using stored procedures in your web app]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/03/10/using-stored-procedures-in-your-web-app/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/03/10/using-stored-procedures-in-your-web-app/">
        </link>
        <updated>2018-03-10T15:10:16Z</updated>
        <summary type="html"><![CDATA[<p>In the last few days I’ve done something I’ve never done before, namely written a stored procedure for a web app. Like most web developers, I know enough about SQL to be able to formulate some fairly complex queries, but I hadn’t really touched on control flow functions or stored procedures, and in my experience they tend to be the province of the dedicated database administrator, not us web devs, who will typically delegate more complex functionality to our application code.</p>
<p>In this case, there were a number of factors influencing my decision to use a stored procedure for this:</p>
<ul>
<li>The application was a legacy application which had been worked on by developers of, shall we say, varying skill levels. As a result the database schema was badly designed, with no prospect of changing it without causing huge numbers of breakages</li>
<li>The query in question was used to generate a complex report that was quite time-consuming, therefore the optimisations from using a stored procedure were worthwhile.</li>
<li>The report required that data be grouped by a set of categories which were stored in a separate table, which meant the table had to be pivoted (transformed from rows to columns), resulting in an incredibly complex dynamic query that had to be constructed on the fly by concatenating different SQL strings. In PostgreSQL, this can be done fairly easily using the <code>crosstab</code> function, but MySQL doesn’t have native support for anything like this.</li>
</ul>
<p>Historically, one issue with using stored procedures has been that it kept business logic out of the application code, meaning they are not stored in version control. However, most modern frameworks provide some support for migrations, and since they are intended to be used to make changes to the database, they are the obvious place to define the stored procedure. This particular application was built with an older framework that didn’t come with migrations, so we’d installed <a href="https://phinx.org/">Phinx</a> to handle those for us. Initially, I defined the stored procedure inside a migration that ran a raw query to create the stored procedure, as in this example:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>   $query = <span class="hljs-string">&lt;&lt;&lt;EOF</td><tr><td class="linenos" data-pseudo-content="4"></td><td>CREATE PROCEDURE IF NOT EXISTS foo</td><tr><td class="linenos" data-pseudo-content="5"></td><td>BEGIN</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>   SELECT * FROM foo;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>END</td><tr><td class="linenos" data-pseudo-content="8"></td><td>EOF;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>   <span class="hljs-keyword">$this</span>-&gt;execute($query);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>   <span class="hljs-keyword">$this</span>-&gt;execute(<span class="hljs-string">'DROP PROCEDURE IF EXISTS foo'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>}</td></table></code></pre>
<p>Once this is done, you can then use your framework’s particular support for raw queries to call <code>CALL foo()</code> whenever your stored procedure needs to be executed.</p>
<p>However, we soon ran into an issue. It turns out <code>mysqldump</code> doesn’t export stored procedures by default, so there was a risk that anyone working on the code base might import the database from an SQL file and not get the migrations. I’d used the Symfony Console component to create a simple command-line tool, reminiscent of Laravel’s Artisan, so I used that to create a command to set up the stored procedure, amended the migration to call that command, and placed a check in the application where the procedure was called so that if it was not defined the command would be called and the procedure would be created. In most cases this wouldn’t be an issue.</p>
<p>Having now had experience using stored procedures in a web application, there are a number of issues they raise:</p>
<ul>
<li>It’s hard to make queries flexible, whereas with something like Eloquent it’s straightforward to conditionally apply <code>WHERE</code> statements.</li>
<li>While storing them in migrations is a practical solution, if the database is likely to be imported rather than created from scratch during development it can be problematic.</li>
<li>They aren’t easily portable, not just between database management systems, but between different versions - the production server was using an older version of MySQL, and it failed to create the procedure. It’s therefore good practice for your migrations to check the procedure was created successfully and raise a noisy exception if they failed.</li>
</ul>
<p>Conversely, they do bring certain benefits:</p>
<ul>
<li>For particularly complex transactions that don’t change, such as generating reports, they are a good fit since they reduce the amount of data that needs to be sent to the database and allow the query to be pre-optimised somewhat.</li>
<li>If a particular query is unusually expensive, is called often, and can’t be cached, it may improve performance to make it a stored procedure.</li>
<li>Doing a query in a for loop is usually a very big no-no. However, if there really is no way to avoid it (and this should almost never happen), it would make sense to try to do it in a stored procedure using SQL rather than in application code since that would minimise the overhead.</li>
<li>If multiple applications need to work with the same database, using stored procedures for queries in more than one application removes the need to reimplement or copy over the code for the query in the second application - they can just call the same procedure, and if it needs to be changed it need only be done once.</li>
</ul>
<p>Honestly, I’m not sure I’m ever likely to again come across a scenario where using a stored procedure in a web application would be beneficial, but it’s been very interesting delving into aspects of SQL that I don’t normally touch on and I’ve picked up on some rarely-used SQL statements that I haven’t used before, such as <code>GROUP_CONCAT()</code> and <code>CASE</code>. With the widespread adoption of migrations in most frameworks, I think that the argument that using stored procedures keeps application logic out of version control no longer holds any water, since developers can generally be trusted to store changes to database structure in their migrations and not start messing them around, so the same applies for stored procedures. Report generation seems to be the ideal use case since this invariably involves complex queries that run regularly and don’t change often, and this is where I expect it would be most likely I’d have cause to use them again.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Check your code base is PHP 7 ready with PHP Compatibility]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/02/25/check-your-code-base-is-php-7-ready-with-php-compatibility/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/02/25/check-your-code-base-is-php-7-ready-with-php-compatibility/">
        </link>
        <updated>2018-02-25T17:22:34Z</updated>
        <summary type="html"><![CDATA[<p>I’ve recently started a new job and as part of that I’m working on a rather substantial legacy code base. In fact, it was so legacy that it was still in Subversion - needless to say the very first thing I did was migrate it to Git. One of the jobs on our radar for this code base is to migrate it to from PHP 5.4 to 5.6, and subsequently to PHP 7. I’ve been using it locally in 5.6 without issue so far, but I’ve also been looking around for an automated tool to help catch potential problems.</p>
<p>I recently discovered <a href="https://github.com/wimg/PHPCompatibility">PHP Compatibility</a> which is a set of sniffs for PHP CodeSniffer that can be used to detect code that will be problematic in a particular PHP version. As I use CodeSniffer extensively already, it’s a good fit for my existing toolset.</p>
<p>To install it, add the following dependencies to your <code>composer.json</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    "require-dev": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        "dealerdirect/phpcodesniffer-composer-installer": "^0.4.3",</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        "squizlabs/php_codesniffer": "^2.5",</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        "wimg/php-compatibility": "^8.1"</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    },</td></table></code></pre>
<p>Then update your <code>phpcs.xml</code> to look something like this:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">ruleset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"PHP_CodeSniffer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>The coding standard for my app.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>./<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"np"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">rule</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"PSR2"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">rule</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"PHPCompatibility"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"testVersion"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"7.2-"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">ruleset</span>&gt;</span></td></table></code></pre>
<p>As you can see, it’s possible to use it alongside existing coding standards such as PSR2. Note the <code>testVersion</code> config key - the value specified is the PHP version we’re testing against. Here we’re specifying PHP 7.2.</p>
<p>Obviously, the very best way to guard against breakages in newer versions of PHP is to have a comprehensive test suite, but legacy code bases by definition tend to have little or no tests. By using PHP Compatibility, you should at least be able to catch syntax problems without having to audit the code base manually.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unit testing your Laravel controllers]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/02/25/unit-testing-your-laravel-controllers/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/02/25/unit-testing-your-laravel-controllers/">
        </link>
        <updated>2018-02-25T15:50:44Z</updated>
        <summary type="html"><![CDATA[<p>In <a href="/blog/2018/02/18/put-your-laravel-controllers-on-a-diet/">my previous post</a> I mentioned some strategies for refactoring Laravel controllers to move unnecessary functionality elsewhere. However, I didn’t cover testing them. In this post I will demonstrate the methodology I use for testing Laravel controllers.</p>
<p>Say we have the following method in a controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></span>{    </td><tr><td class="linenos" data-pseudo-content="3"></td><td>        $document = <span class="hljs-keyword">new</span> Document($request-&gt;only([</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'title'</span>, </td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'text'</span>, </td><tr><td class="linenos" data-pseudo-content="6"></td><td>        ]));</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $document-&gt;save();</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        event(<span class="hljs-keyword">new</span> DocumentCreated($document));</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> redirect()-&gt;route(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>}</td></table></code></pre>
<p>This controller method does three things:</p>
<ul>
<li>Return a response</li>
<li>Create a model instance</li>
<li>Fire an event</li>
</ul>
<p>Our tests therefore need to pass it all its external dependencies and check it carries out the required actions.</p>
<p>First we fake the event facade:</p>
<pre><code class="hljs lang-php singleline">    Event::fake();</code></pre>
<p>Next, we create an instance of <code>Illuminate\Http\Request</code> to represent the HTTP request passed to the controller:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    $request = Request::create(<span class="hljs-string">'/store'</span>, <span class="hljs-string">'POST'</span>,[</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-string">'title'</span>     =&gt;     <span class="hljs-string">'foo'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'text'</span>     =&gt;     <span class="hljs-string">'bar'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    ]);</td></table></code></pre>
<p>If you’re using a custom form request class, you should instantiate that in exactly the same way.</p>
<p>Then, instantiate the controller, and call the method, passing it the request object:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    $controller = <span class="hljs-keyword">new</span> MyController();</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    $response = $controller-&gt;store($request);</td></table></code></pre>
<p>You can then test the response from the controller. You can test the status code like this:</p>
<pre><code class="hljs lang-php singleline">    <span class="hljs-keyword">$this</span>-&gt;assertEquals(<span class="hljs-number">302</span>, $response-&gt;getStatusCode());</code></pre>
<p>You may also need to check the content of the response matches what you expect to see, by retrieving <code>$response-&gt;getBody()-&gt;getContent()</code>.</p>
<p>Next, retrieve the newly created model instance, and verify it exists:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    $document = Document::where(<span class="hljs-string">'title'</span>, <span class="hljs-string">'foo'</span>)-&gt;first();</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">$this</span>-&gt;assertNotNull($document);</td></table></code></pre>
<p>You can also use <code>assertEquals()</code> to check the attributes on the model if appropriate. Finally, you check the event was fired:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    Event::assertDispatched(DocumentCreated::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($event)</span> <span class="hljs-title">use</span> <span class="hljs-params">($document)</span> </span>{ </td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-keyword">return</span> $event-&gt;document-&gt;id === $document-&gt;id; </td><tr><td class="linenos" data-pseudo-content="3"></td><td>    });</td></table></code></pre>
<p>This test should not concern itself with any functionality triggered by the event, only that the event gets triggered. The event should have separate unit tests in which the event is triggered, and then the test verifies it carried out the required actions.</p>
<p>Technically, these don’t quite qualify as being unit tests because they hit the database, but they should cover the controller adequately. To make them true unit tests, you’d need to implement the repository pattern for the database queries rather than using Eloquent directly, and mock the repository, so you can assert that the mocked repository receive the right data and have it return the expected response.</p>
<p>Here is how you might do that with Mockery:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$mock = Mockery::mock(<span class="hljs-string">'App\Contracts\Repositories\Document'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$mock-&gt;shouldReceive(<span class="hljs-string">'create'</span>)-&gt;with([</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'title'</span>    =&gt;        <span class="hljs-string">'foo'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-string">'text'</span>    =&gt;        <span class="hljs-string">'bar'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>])-&gt;once()-&gt;andReturn(<span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>$controller = <span class="hljs-keyword">new</span> MyController($mock);</td></table></code></pre>
<p>As long as your controllers are kept as small as possible, it’s generally not too hard to test them. Unfortunately, fat controllers become almost impossible to test, which is another good reason to avoid them.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Put your Laravel controllers on a diet]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/02/18/put-your-laravel-controllers-on-a-diet/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/02/18/put-your-laravel-controllers-on-a-diet/">
        </link>
        <updated>2018-02-18T18:10:10Z</updated>
        <summary type="html"><![CDATA[<p>MVC frameworks are a tremendously useful tool for modern web development. They offer easy ways to carry out common tasks, and enforce a certain amount of structure on a project.</p>
<p>However, that doesn’t mean using them makes you immune to bad practices, and it’s quite easy to wind up falling into certain anti-patterns. Probably the most common is the Fat Controller.</p>
<h2 id="what-is-a-fat-controller-">What is a fat controller?</h2>
<p>When I first started out doing professional web development, CodeIgniter 2 was the first MVC framework I used. While I hadn’t used it before, I was familiar with the general concept of MVC. However, I didn’t appreciate that when referring to the model layer as a place for business logic, that wasn’t necessarily the same thing as the database models.</p>
<p>As such, my controllers became a dumping ground for anything that didn’t fit into the models. If it didn’t interact with the database, I put it in the controller. They quickly became bloated, with many methods running to hundreds of lines of code. The code base became hard to understand, and when I was under the gun on projects I found myself copying and pasting functionality between controllers, making the situation even worse. Not having an experienced senior developer on hand to offer criticism and advice, it was a long time before I realised that this was a problem or how to avoid it.</p>
<h2 id="why-are-fat-controllers-bad-">Why are fat controllers bad?</h2>
<p>Controllers are meant to be simple glue code that receives requests and returns responses. Anything else should be handed off to the model layer. As noted above, however, that’s not the same as putting it in the models. Your model layer can consist of many different classes, not just your Eloquent models, and you should not fall into the trap of thinking your application should consist of little more than models, views and controllers.</p>
<p>Placing business logic in controllers can be bad for many reasons:</p>
<ul>
<li>Code in controllers can be difficult to write automated tests for</li>
<li>Any logic in a controller method may need to be repeated elsewhere if the same functionality is needed for a different route, unless it’s in a private or protected method that is called from elsewhere, in which case it’s very hard to test in isolation</li>
<li>Placing it in the controller makes it difficult to pull out and re-use on a different project</li>
<li>Making your controller methods too large makes them complex and hard to follow</li>
</ul>
<p>As a general rule of thumb, I find that 10 lines of code for any one method for a controller is where it starts getting a bit much. That said, it’s not a hard and fast rule, and for very small projects it may not be worthwhile. But if a project is large and needs to be maintained for any reasonable period of time, you should take the trouble to ensure your controllers are as skinny as is practical.</p>
<p>Nowadays Laravel is my go-to framework and I’ve put together a number of strategies for avoiding the fat controller anti-pattern. Here’s some examples of how I would move various parts of the application out of my controllers.</p>
<h2 id="validation">Validation</h2>
<p>Laravel has a nice, easy way of getting validation out of the controllers. Just create a custom <a href="https://laravel.com/docs/5.6/validation#form-request-validation">form request</a> for your input data, as in this example:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">FormRequest</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FormRequest</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Determine if the user is authorized to make this request.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> bool</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">authorize</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Get the validation rules that apply to the request.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> array</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rules</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'required|email'</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        ];</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}</td></table></code></pre>
<p>Then type-hint the form request in the controller method, instead of <code>Illuminate\Http\Request</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>\<span class="hljs-title">CreateRequest</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(CreateRequest $request)</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-comment">// Process request here..</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>}</td></table></code></pre>
<h2 id="database-access-and-caching">Database access and caching</h2>
<p>For non-trivial applications I normally use <a href="/blog/2017/03/01/decorating-laravel-repositories/">decorated repositories</a> to handle caching and database access in one place. That way my caching and database layers are abstracted out into separate classes, and caching is nearly always handled seamlessly without having to do much work.</p>
<h2 id="complex-object-creation-logic">Complex object creation logic</h2>
<p>If I have a form or API endpoint that needs to:</p>
<ul>
<li>Create more than one object</li>
<li>Transform the incoming data in some way</li>
<li>Or is non-trivial in any other way</li>
</ul>
<p>I will typically pull it out into a separate persister class. First, you should create an interface for this persister class:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Persisters</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Foo</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Create a new Model</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@param</span> array $data</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@return</span> Model</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(array $data)</span></span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     * Update the given Model</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * <span class="hljs-doctag">@param</span> array $data</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@param</span> Model $model</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> Model</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(array $data, Model $model)</span></span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td></table></code></pre>
<p>Then create the persister class itself:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Persisters</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Foo</span> <span class="hljs-title">as</span> <span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Persisters</span>\<span class="hljs-title">Foo</span> <span class="hljs-title">as</span> <span class="hljs-title">FooContract</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">DatabaseManager</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FooContract</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">protected</span> $repository;</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">protected</span> $db;</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(DatabaseManager $db, Repository $repository)</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;db = $db;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">$this</span>-&gt;repository = $repository;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Create a new Model</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@param</span> array $data</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * <span class="hljs-doctag">@return</span> Model</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">(array $data)</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">$this</span>-&gt;db-&gt;beginTransaction();</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        $model = <span class="hljs-keyword">$this</span>-&gt;repository-&gt;create([</td><tr><td class="linenos" data-pseudo-content="33"></td><td>             <span class="hljs-string">'date'</span> =&gt; Carbon::parse($data[<span class="hljs-string">'date'</span>])-&gt;toDayDateTimeString(),</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">$this</span>-&gt;db-&gt;commit();</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-keyword">return</span> $model;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="40"></td><td>     * Update the given Model</td><tr><td class="linenos" data-pseudo-content="41"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     * <span class="hljs-doctag">@param</span> array $data</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     * <span class="hljs-doctag">@param</span> Model $model</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     * <span class="hljs-doctag">@return</span> Model</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(array $data, Model $model)</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-keyword">$this</span>-&gt;db-&gt;beginTransaction();</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        $updatedmodel = <span class="hljs-keyword">$this</span>-&gt;repository-&gt;update([</td><tr><td class="linenos" data-pseudo-content="50"></td><td>             <span class="hljs-string">'date'</span> =&gt; Carbon::parse($data[<span class="hljs-string">'date'</span>])-&gt;toDayDateTimeString(),</td><tr><td class="linenos" data-pseudo-content="51"></td><td>             $model</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-keyword">$this</span>-&gt;db-&gt;commit();</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-keyword">return</span> $updatedmodel;</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="56"></td><td>}</td></table></code></pre>
<p>Then you can set up the persister in a service provider so that type-hinting the interface returns the persister:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>       <span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'App\Contracts\Persisters\Foo'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-string">'App\Persisters\Foo'</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>       });</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}</td></table></code></pre>
<p>This approach means that complex logic, such as creating multiple related objects, can be handled in a consistent way, even if it needs to be called from multiple places.</p>
<h2 id="triggering-actions-as-a-result-of-something">Triggering actions as a result of something</h2>
<p><a href="https://laravel.com/docs/5.6/events">Events</a> are tailor-made for this use case, and Laravel documents them very well, so I won’t repeat it here. Suffice to say, if something needs to happen, but the response sent by the application doesn’t necessarily depend on it returning something immediately, then it’s probably worth considering making it an event. If it’s going to be called from multiple places, it’s even more worthwhile.</p>
<p>For instance, if you have a contact form, it’s worth taking the time to create an event for when a new contact is received, and handle proessing the contact within the listener for that event. Also, doing so means you can queue that event and have it handled outside the context of the application, so that it responds to the user more quickly. If you’re sending an acknowledgement email for a new user registration, you don’t need to wait for that email to be sent before you return the response, so queueing it can improve response times.</p>
<h2 id="interacting-with-third-party-services">Interacting with third-party services</h2>
<p>If you have some code that needs to interact with a third-party service or API, it can get quite complex, especially if you need to process the content in some way. It therefore makes sense to pull that functionality out into a separate class.</p>
<p>For instance, say you have some code in your controller that uses an HTTP client to fetch some data from a third-party API and display it in the view:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>   $data = <span class="hljs-keyword">$this</span>-&gt;client-&gt;get(<span class="hljs-string">'http://api.com/api/items'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>   $items = [];</td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-keyword">foreach</span> ($data <span class="hljs-keyword">as</span> $k =&gt; $v) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>         $item = [</td><tr><td class="linenos" data-pseudo-content="7"></td><td>           <span class="hljs-string">'name'</span> =&gt; $v[<span class="hljs-string">'name'</span>],</td><tr><td class="linenos" data-pseudo-content="8"></td><td>              <span class="hljs-string">'description'</span> =&gt; $v[<span class="hljs-string">'data'</span>][<span class="hljs-string">'description'</span>],</td><tr><td class="linenos" data-pseudo-content="9"></td><td>              <span class="hljs-string">'tags'</span> =&gt; $v[<span class="hljs-string">'data'</span>][<span class="hljs-string">'metadata'</span>][<span class="hljs-string">'tags'</span>]</td><tr><td class="linenos" data-pseudo-content="10"></td><td>         ];</td><tr><td class="linenos" data-pseudo-content="11"></td><td>         $items[] = $item;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>   }</td><tr><td class="linenos" data-pseudo-content="13"></td><td>   <span class="hljs-keyword">return</span> view(<span class="hljs-string">'template'</span>, [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>       <span class="hljs-string">'items'</span> =&gt; $items</td><tr><td class="linenos" data-pseudo-content="15"></td><td>   ]);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>This is a very small example (and a lot simpler than most real-world instances of this issue), but it illustrates the principle. Not only does this code bloat the controller, it might also be used elsewhere in the application, and we don’t want to copy and paste it elsewhere - therefore it makes sense to extract it to a service class.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Services</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-title">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">ClientInterface</span> <span class="hljs-title">as</span> <span class="hljs-title">GuzzleClient</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Api</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>   <span class="hljs-keyword">protected</span> $client;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(GuzzleClient $client)</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>   </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      <span class="hljs-keyword">$this</span>-&gt;client = $client;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>   }</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetch</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      $data = <span class="hljs-keyword">$this</span>-&gt;client-&gt;get(<span class="hljs-string">'http://api.com/api/items'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      $items = [];</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      <span class="hljs-keyword">foreach</span> ($data <span class="hljs-keyword">as</span> $k =&gt; $v) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>         $item = [</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'name'</span> =&gt; $v[<span class="hljs-string">'name'</span>],</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-string">'description'</span> =&gt; $v[<span class="hljs-string">'data'</span>][<span class="hljs-string">'description'</span>],</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-string">'tags'</span> =&gt; $v[<span class="hljs-string">'data'</span>][<span class="hljs-string">'metadata'</span>][<span class="hljs-string">'tags'</span>]</td><tr><td class="linenos" data-pseudo-content="25"></td><td>         ];</td><tr><td class="linenos" data-pseudo-content="26"></td><td>         $items[] = $item;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      <span class="hljs-keyword">return</span> $items;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}</td></table></code></pre>
<p>Our controller can then type-hint the service and refactor that functionality out of the method:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(App\Services\Api $api)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">$this</span>-&gt;api = $api;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>}</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>   $items = <span class="hljs-keyword">$this</span>-&gt;api-&gt;fetch();</td><tr><td class="linenos" data-pseudo-content="9"></td><td>   <span class="hljs-keyword">return</span> view(<span class="hljs-string">'template'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>       <span class="hljs-string">'items'</span> =&gt; $items</td><tr><td class="linenos" data-pseudo-content="11"></td><td>   ]);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>}</td></table></code></pre>
<h2 id="including-common-variables-in-the-view">Including common variables in the view</h2>
<p>If data is needed in more than one view (eg show the user’s name on every page when logged in), consider using <a href="https://laravel.com/docs/5.6/views#view-composers">view composers</a> to retrieve this data rather than fetching them in the controller. That way you’re not having to repeat that logic in more than one place.</p>
<h2 id="formatting-content-for-display">Formatting content for display</h2>
<p>Logically this belongs in the view layer, so you should <a href="/blog/2018/01/09/creating-laravel-helpers/">write a helper</a> to handle things like formatting dates. For more complex stuff, such as formatting HTML, you should be doing this in Blade (or another templating system, if you’re using one) - for instance, when generating an HTML table, you should consider <a href="https://laravel.com/docs/5.6/blade#rendering-views-for-collections">using a view partial</a> to loop through them. For particularly tricky functionality, you have the option of <a href="https://laravel.com/docs/5.6/blade#extending-blade">writing a custom Blade directive</a>.</p>
<p>The same applies for rendering other content - for rendering JSON you should consider using <a href="https://laravel.com/docs/5.6/eloquent-resources">API resources</a> or <a href="https://fractal.thephpleague.com/">Fractal</a> to get any non-trivial logic for your API responses out of the controller. Blade templates can also work for non-HTML content such as XML.</p>
<h2 id="anything-else-">Anything else…</h2>
<p>These examples are largely to get you started, and there will be occasions where something doesn’t fall into any of the above categories. However, the same principle applies. Your controllers should stick to just receiving requests and sending responses, and anything else should normally be deferred to other classes.</p>
<p>Fat controllers make developer’s lives very difficult, and if you want your code base to be easily maintainable, you should be willing to refactor them ruthlessly. Any functionality you can pull out of the controller becomes easier to reuse and test, and as long as you name your classes and methods sensibly, they’re easier to understand.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Lando as an alternative to Vagrant]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/02/04/using-lando-as-an-alternative-to-vagrant/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/02/04/using-lando-as-an-alternative-to-vagrant/">
        </link>
        <updated>2018-02-04T00:12:16Z</updated>
        <summary type="html"><![CDATA[<p>Although Vagrant is very useful for ensuring consistency between development environments, it’s quite demanding on system resources. Running a virtual machine introduces quite a bit of overhead, and it can be troublesome to provision.</p>
<p>This week I was introduced to <a href="https://docs.devwithlando.io/">Lando</a> as an alternative to Vagrant. Rather than running a virtual machine like Vagrant does by default, Lando instead spins up Docker containers for the services you need, meaning it has considerably less overhead than Vagrant. It also includes presets for a number of frameworks and CMS’s, including:</p>
<ul>
<li>Drupal 7</li>
<li>Drupal 8</li>
<li>Wordpress</li>
<li>Laravel</li>
</ul>
<p>Considering that Vagrant needs quite a bit of boilerplate to set up the server for different types of projects, this gives Lando an obvious advantage. The only issue I’ve had with it is that it’s been unreliable when I’ve had to use it on Windows, which I don’t do much anyway.</p>
<h2 id="getting-started">Getting started</h2>
<p>Lando requires that you have Docker installed. Once that’s done you can download and install it fro the website. Then you can run <code>lando init</code> to set it up:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ lando init</td><tr><td class="linenos" data-pseudo-content="2"></td><td>? What recipe <span class="hljs-keyword">do</span> you want to use? wordpress</td><tr><td class="linenos" data-pseudo-content="3"></td><td>? Where is your webroot relative to the init destination? .</td><tr><td class="linenos" data-pseudo-content="4"></td><td>? What <span class="hljs-keyword">do</span> you want to call this app? wp-site</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>NOW WE<span class="hljs-string">'RE COOKING WITH FIRE!!!</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Your app has been initialized!</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Go to the directory where your app was initialized and run</td><tr><td class="linenos" data-pseudo-content="10"></td><td>`lando start` to get rolling.</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>Check the LOCATION printed below if you are unsure where to go.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Here are some vitals:</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td> NAME      wp-site                                               </td><tr><td class="linenos" data-pseudo-content="17"></td><td> LOCATION  /home/matthew/Projects/wp-site                        </td><tr><td class="linenos" data-pseudo-content="18"></td><td> RECIPE    wordpress                                             </td><tr><td class="linenos" data-pseudo-content="19"></td><td> DOCS      https://docs.devwithlando.io/tutorials/wordpress.html </span></td></table></code></pre>
<p>Here I’ve chosen the <code>wordpress</code> recipe, in the current directory, with the name <code>wp-site</code>. This generates the following file as <code>.lando.yml</code>:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-symbol">name:</span> wp-site</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-symbol">recipe:</span> wordpress</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-symbol">config:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-symbol">  webroot:</span> .</td></table></code></pre>
<p>Then, if we run <code>lando start</code>, it will set up the required services:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ lando start</td><tr><td class="linenos" data-pseudo-content="2"></td><td>landoproxyhyperion5000gandalfedition_proxy_1 is up-to-date</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Creating network <span class="hljs-string">"wpsite_default"</span> with the default driver</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Creating volume <span class="hljs-string">"wpsite_appserver"</span> with default driver</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Creating volume <span class="hljs-string">"wpsite_data"</span> with default driver</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Creating volume <span class="hljs-string">"wpsite_data_database"</span> with default driver</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Creating wpsite_appserver_1 ... </td><tr><td class="linenos" data-pseudo-content="8"></td><td>Creating wpsite_database_1 ... </td><tr><td class="linenos" data-pseudo-content="9"></td><td>Creating wpsite_database_1</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Creating wpsite_appserver_1 ... <span class="hljs-keyword">done</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                                 Dload  Upload   Total   Spent    Left  Speed</td><tr><td class="linenos" data-pseudo-content="13"></td><td>100 4454k  100 4454k    0     0  3288k      0  0:00:01  0:00:01 --:--:-- 3290k</td><tr><td class="linenos" data-pseudo-content="14"></td><td>OS:     Linux 4.13.0-32-generic <span class="hljs-comment">#35-Ubuntu SMP Thu Jan 25 09:13:46 UTC 2018 x86_64</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>Shell:  </td><tr><td class="linenos" data-pseudo-content="16"></td><td>PHP binary:     /usr/<span class="hljs-built_in">local</span>/bin/php</td><tr><td class="linenos" data-pseudo-content="17"></td><td>PHP version:    7.1.13</td><tr><td class="linenos" data-pseudo-content="18"></td><td>php.ini used:   </td><tr><td class="linenos" data-pseudo-content="19"></td><td>WP-CLI root dir:        phar://wp-cli.phar</td><tr><td class="linenos" data-pseudo-content="20"></td><td>WP-CLI vendor dir:      phar://wp-cli.phar/vendor</td><tr><td class="linenos" data-pseudo-content="21"></td><td>WP_CLI phar path:       /tmp</td><tr><td class="linenos" data-pseudo-content="22"></td><td>WP-CLI packages dir:</td><tr><td class="linenos" data-pseudo-content="23"></td><td>WP-CLI global config:   </td><tr><td class="linenos" data-pseudo-content="24"></td><td>WP-CLI project config:  </td><tr><td class="linenos" data-pseudo-content="25"></td><td>WP-CLI version: 1.5.0</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>BOOMSHAKALAKA!!!</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>Your app has started up correctly.</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Here are some vitals:</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td> APPSERVER URLS  https://localhost:32802</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                 http://localhost:32803</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                 http://wp-site.lndo.site</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                 https://wp-site.lndo.site</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td></table></code></pre>
<p>Note the <code>APPSERVER URLS</code> section - the site can be accessed locally via HTTP or HTTPS. For this recipe, it also installs WP CLI.</p>
<p>If we run <code>docker ps</code>, we can see that it’s running three Docker containers:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                                               NAMES</td><tr><td class="linenos" data-pseudo-content="2"></td><td>2e920e152091        devwithlando/php:7.1-apache   <span class="hljs-string">"/lando-entrypoint.s…"</span>   16 minutes ago      Up 16 minutes       0.0.0.0:32803-&gt;80/tcp, 0.0.0.0:32802-&gt;443/tcp                       wpsite_appserver_1</td><tr><td class="linenos" data-pseudo-content="3"></td><td>82ea60b1214f        mysql:latest                  <span class="hljs-string">"/lando-entrypoint.s…"</span>   16 minutes ago      Up 16 minutes       0.0.0.0:32801-&gt;3306/tcp                                             wpsite_database_1</td><tr><td class="linenos" data-pseudo-content="4"></td><td>e51d831199d7        traefik:1.3-alpine            <span class="hljs-string">"/lando-entrypoint.s…"</span>   About an hour ago   Up About an hour    0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:58086-&gt;8080/tcp   landoproxyhyperion5000gandalfedition_proxy_1</td></table></code></pre>
<p>Apache lives in one container, MySQL in another, while the third runs Traefik, a lightweight load balancer, which listens on port 80. Traefik does the work of redirecting HTTP requests to the right place.</p>
<p>As I’ve been unhappy with the amount of resources Vagrant uses for a while, and I usually run Ubuntu (making using Docker straightforward), I’m planning on using Lando extensively in future. It’s lighter and faster to set up, and has sane defaults for most of the frameworks and CMS’s I use regularly, making it generally quicker and easier to work with.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I deploy Laravel apps]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/29/how-i-deploy-laravel-apps/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/29/how-i-deploy-laravel-apps/">
        </link>
        <updated>2018-01-29T22:00:35Z</updated>
        <summary type="html"><![CDATA[<p>A while back I provided details of the web server setup I used for Django applications. Nowadays I tend to use Laravel most of the time, so I thought I’d share an example of the sort of setup I use to deploy that.</p>
<h2 id="server-os">Server OS</h2>
<p>As before I generally prefer Debian Stable where possible. If that’s not possible for any reason then the current Ubuntu LTS is an acceptable substitute.</p>
<h2 id="web-server">Web server</h2>
<p>My usual web server these days is Nginx with PHP 7 or better via FPM. I generally use HTTP2 where possible, with SSL via Let’s Encrypt.</p>
<p>Here’s my typical Nginx config:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">fastcgi_cache_path</span> /etc/nginx/cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=my-app:<span class="hljs-number">100m</span> inactive=<span class="hljs-number">60m</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attribute">fastcgi_cache_key</span> <span class="hljs-string">"<span class="hljs-variable">$scheme</span><span class="hljs-variable">$request_method</span><span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attribute">add_header</span> Content-Security-Policy <span class="hljs-string">"default-src 'self'; script-src 'self'; img-src 'self' https://placehold.it; style-src 'self' https://fonts.googleapis.com ; font-src 'self' https://themes.googleusercontent.com; frame-src 'none'; object-src 'none'"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attribute">server_name</span> my-app.domain;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">include</span> snippets/ssl-my-app.domain.conf;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">include</span> snippets/ssl-params.conf;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">fastcgi_param</span> HTTP_PROXY <span class="hljs-string">""</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">root</span> /var/www/my-app.domain/current/public;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">server_name</span> my-app.domain;</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm-my-app.sock;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-attribute">fastcgi_index</span> index.php;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-attribute">fastcgi_cache</span> my-app;</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-attribute">fastcgi_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">60m</span>;</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.well-known</span> {</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-attribute">allow</span> all;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:manifest|appcache|html?|xml|json)$</span> {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-attribute">expires</span> -<span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-attribute">gzip_types</span> application/json text/xml application/xml;</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:rss|atom)$</span> {</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1h</span>;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public"</span>;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-attribute">gzip_types</span> application/xml+rss;</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$</span> {</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1M</span>;</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public"</span>;</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:css|js)$</span> {</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public"</span>;</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-attribute">gzip_types</span> text/css application/javascript text/javascript;</td><tr><td class="linenos" data-pseudo-content="76"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="77"></td><td>}</td></table></code></pre>
<p>The times for FastCGI caching tend to vary in practice - sometimes it’s not appropriate to use it all, while for others it can be cached for some time.</p>
<p>It’s generally fairly safe to cache CSS and JS for a long time with a Laravel app if you’re using Mix to version those assets, so I feel comfortable caching them for a year. Images are a bit dicier, but still don’t change often so a month seems good enough.</p>
<p>I’ll typically give each application its own pool, which means copying the file at <code>/etc/php/7.0/fpm/pool.d/www.conf</code> to another file in the same directory, amending the pool name and path to set a new location for the socket, and then restarting Nginx and PHP-FPM. Here are the fields that should be changed:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>; Start a new pool named 'www'.</td><tr><td class="linenos" data-pseudo-content="2"></td><td>; the variable $pool can be used in any directive and will be replaced by the</td><tr><td class="linenos" data-pseudo-content="3"></td><td>; pool name ('www' here)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>[my-app.domain]</td><tr><td class="linenos" data-pseudo-content="5"></td><td>...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>listen = /var/run/php/php7.0-fpm-my-app.sock</td></table></code></pre>
<h2 id="database">Database</h2>
<p>I’m a fan of PostgreSQL - it’s stricter than MySQL/MariaDB, and has some very useful additional field types, so where possible I prefer to use it over MySQL or MariaDB.</p>
<h2 id="cache-and-session-backend">Cache and session backend</h2>
<p>Redis is my usual choice here - I make heavy use of cache tags so I need a backend for the cache that supports them, and Memcached doesn’t seem to have as much inertia as Redis these days. Neither needs much in the way of configuration, but you can get a slight speed boost by using phpiredis.</p>
<h2 id="queue">Queue</h2>
<p>I sometimes use Redis for this too, but it can be problematic if you’re using Redis as the queue and broadcast backend, so these days I’m more likely to use Beanstalk and keep Redis for other stuff. I use Supervisor for running the queue worker, and this is an example of the sort of configuration I would use:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">[program:laravel-worker]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">process_name</span>=%(program_name)s_%(process_num)<span class="hljs-number">02</span>d</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">command</span>=php /var/www/artisan queue:work --sleep=<span class="hljs-number">3</span> --tries=<span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">user</span>=www-data</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-attr">numprocs</span>=<span class="hljs-number">8</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-attr">stdout_logfile</span>=/var/log/worker.log</td></table></code></pre>
<p>This is fairly standard for Laravel applications.</p>
<h2 id="scheduler">Scheduler</h2>
<p>I often make use of the Laravel scheduled tasks system. Here’s the typical cron job that would be used for that:</p>
<pre><code class="hljs lang-cron singleline"><span class="hljs-bullet">* </span><span class="hljs-bullet">* *</span> <span class="hljs-bullet">* *</span> php /var/www/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</code></pre>
<p>Again, this is standard for Laravel applications. It runs the scheduler every minute, and the scheduler then determines if it needs to do something.</p>
<h2 id="provisioning">Provisioning</h2>
<p>To set all this up, I’ll generally use Ansible. In addition to this, I’ll generally also set up fail2ban to block various attacks via both HTTP and SSH.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why the speed of your MVC framework is usually a red herring]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/28/why-the-speed-of-your-mvc-framework-is-usually-a-red-herring/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/28/why-the-speed-of-your-mvc-framework-is-usually-a-red-herring/">
        </link>
        <updated>2018-01-28T20:20:03Z</updated>
        <summary type="html"><![CDATA[<p>Skim through any programming-related forum and you’ll often find statements along the lines of the following:</p>
<ul>
<li>“I chose Lumen for my website because the benchmarks show it’s faster than Laravel”</li>
<li>“I’m using raw queries because they’re faster than using an ORM”</li>
<li>“I wrote the site in pure PHP to avoid the overhead of a framework”</li>
</ul>
<p>Making my web apps performant is something I care deeply about. Yet every time I see something like this I cringe. Why? Because statements like these are full of wild misconceptions about the real performance bottlenecks in modern web applications. I don’t blame framework vendors for publishing benchmarks of their applications, since the performance of web apps <em>is</em> a big issue, but they are often misleading even when they’re correct, and it’s all too easy for inexperienced developers to think that performance is a matter of picking the fastest framework, rather than following a methodology of identifying and dealing with performance bottlenecks.</p>
<p>In this post I’ll explain why the performance of the framework, while not a non-issue, should come way down the list of factors involved in choosing a framework (or not to use one at all), behind functionality and developer productivity, and how many other factors not related to the choice of framework are involved.</p>
<h2 id="benchmarks-don-t-include-real-world-optimisations">Benchmarks don’t include real-world optimisations</h2>
<p>When benchmarking a number of frameworks together, you’ll typically be testing some fairly basic behaviour such as rendering a view, and maybe making a database query. It’s rare for them to also include things such as caching queries or sending the correct HTTP caching headers.</p>
<p>Also, it’s quite common for the party creating the benchmark to have their own preference they’re more familiar with, in which case they’ll have a better idea of how to optimise that one. If they don’t know how to optimise all of them to the same extent, the end results is going to be biased. For example, in the case of Laravel, running <code>php artisan optimize</code> can significantly improve application performance by caching large chunks of the application.</p>
<p>In addition, the configuration for the web server is quite likely to be suboptimal compared to a production server. For instance, they may not have the opcode cache installed, or Nginx may not set the right headers on static assets. Under these circumstances the benchmarks are very likely to be misleading. Ultimately, if you chose to completely rewrite an entire application from scratch in a new framework to claw back a few milliseconds, how do you know you’ll actually see that translate into better performance in production for your particular use case?</p>
<p>And if you’re even <em>considering</em> running a supposedly performance-critical application on shared hosting, you should hang your head in shame…</p>
<h2 id="your-from-scratch-implementation-of-functionality-is-probably-slower-than-an-existing-one">Your from-scratch implementation of functionality is probably slower than an existing one</h2>
<p>If you’re building some functionality from scratch instead of using an off-the-shelf library on the basis of performance, just stop. Existing libraries have usually had a great deal of attention already, should have working test suites, and depending on how active the developer community around them is, they may well have found and resolved the most egregious performance bottlenecks. Yours, on the other hand, will be new, untested, and could easily have serious bottlenecks if you haven’t profiled it extensively. It’s therefore very, very unlikely that you’ll be able to produce something more performant than the existing solutions, unless those existing solutions are old, barely maintained ones.</p>
<p>The <em>only</em> time this might be worthwhile is if all the existing implementations have boatloads of functionality, and you only need a small portion of that functionality. Even then, you should consider if it’s worth your while for a tiny speed boost. Or if you want to write a new library for it, go ahead - just don’t kid yourself about it being for the sake of performance.</p>
<h2 id="smaller-frameworks-are-faster-because-they-do-less">Smaller frameworks are faster because they do less</h2>
<p>Microframeworks such as Lumen <em>are</em> generally faster (at least in the artificial world of benchmarks), but that’s because they leave out functionality that’s not necessary for their targeted use case. Lumen is aimed at building microservices, and it leaves out things like templating, file handling, and other functionality not focused solely on building microservices. That means it’s less useful for other use cases. Any code that gets added to the application will make it marginally slower just by virtue of being there.</p>
<p>Under these circumstances it’s blindingly obvious that the framework that has to do less setup (eg instantiate fewer services, perform less operations on the request and response), is nearly always going to respond faster, regardless of suitability for more complex work.</p>
<p>If you start building a site with Lumen, but then discover that you need some functionality that Laravel has and Lumen doesn’t, you have two choices:</p>
<ul>
<li>Switch to Laravel</li>
<li>Add that functionality to your application (either through additional packages or rolling it yourself)</li>
</ul>
<p>I’ve often had plans to use Lumen for a project in the past, but then discovered that it would benefit from some of Laravel’s functionality. Under those circumstances I’ve switched straight over to Laravel - my time is too valuable to my employer to waste reimplementing functionality Laravel already has, and that functionality will inevitably have some overhead. Put it this way - I do a lot of Phonegap work, so building APIs is a big part of what I do, but I’ve only ever finished one project using Lumen (a push notification microservice). Every other time, sooner or later I’ve run into a situation where the additional functionality of Laravel would be useful and switched over.</p>
<p>There are occasions when a lighter framework like Lumen makes sense, but only when I simply don’t need the additional functionality of Laravel. It just doesn’t make sense to go for Lumen and then start adding functionality Laravel already has - any new implementation isn’t likely to be as solid, well-tested and performant as Laravel’s implementation.</p>
<h2 id="framework-performance-is-often-less-relevant-if-you-re-using-varnish">Framework performance is often less relevant if you’re using Varnish</h2>
<p>In my experience, if you have a site or API that is under heavy load, then if it’s possible to use Varnish with it, that will have a far more significant effect on performance than switching between PHP frameworks.</p>
<p>Because Varnish sits in front of your web server, when you’re serving cached content, anything after Varnish is completely irrelevant to the performance- it won’t hit the backend again until the cached content has expired. Varnish is effectively a key-value store, and is written in C, so it’s far more performant than just about any backend in any framework you could possibly write. And it’s configurable enough that with sufficient experience it can usually be helpful for most applications.</p>
<p>Varnish isn’t appropriate for every use case, and it doesn’t help with uncached requests (except by reducing the load on the application) but where high performance is necessary it can be a very big help indeed. The speed boost from having Varnish in front of your site and properly configured dwarfs any boost of a few milliseconds from switching PHP framework.</p>
<p>There are other HTTP caching servers available too - for instance, it’s possible to use Nginx as a web cache, and Cloudflare is a hosted service that offers similar performance benefits. Regardless, the same applies - if you can handle a request using the caching server rather than the application behind it, the performance will be immensely better, without having to change your application code.</p>
<h2 id="orm-vs-raw-queries-is-a-drop-in-the-ocean">ORM vs raw queries is a drop in the ocean</h2>
<p>There will always be <em>some</em> overhead from using any ORM. However, this is nearly always so minor as to be a non-issue.</p>
<p>For example, while there might be some slight performance increase from writing raw SQL instead of using an ORM, it’s generally dwarfed by the cost of making the query in the first place. You can get a far, far bigger improvement in performance by efficiently caching the responses than by rewriting ORM queries in raw SQL.</p>
<p>An ORM does make certain types of slow inefficient queries more likely, as well as making “hidden” queries (such as in Laravel when it fetches the user from the session), but that’s something that can be resolved by using a profiler like Clockwork to identify the slow or unnecessary queries and refactoring them. Most ORM’s have tools to handle things like the N+1 problem - for instance, Eloquent has the <code>with()</code> method to eager-load related tables, which is generally a lot more convenient than explicitly writing a query to do the eager-loading for you.</p>
<p>Using an ORM also comes with significant benefits to developers:</p>
<ul>
<li>It’s generally easier to express relations between tables</li>
<li>It helps avoid the mental context switch between PHP and SQL</li>
<li>It does a lot of the work of sanitizing data for you</li>
<li>It helps make your application portable between different databases (eg so you can run your tests using an in-memory SQLite database but use MySQL in production)</li>
<li>Where you have logic that can’t be expressed using the ORM, it’s generally easy to drop down to writing raw SQL for that part</li>
</ul>
<p>In my experience, querying the database is almost always the single biggest bottleneck (the only other thing that can be as bad is if you’re making requests to a slow third-party API), and any overhead from the ORM is a drop in the ocean in comparison. If you have a slow query in a web application, then rewriting it as a raw query is probably the very last thing you should consider doing, after:</p>
<ul>
<li>Refactoring the query or queries to be more efficient/remove unnecessary queries</li>
<li>Making sure the appropriate indices are set on your database</li>
<li>Caching the responses</li>
</ul>
<p>Caching in particular is quite hard to do - it’s difficult to come up with a reliable and reusable strategy for caching responses without serving stale content, but once you can do so, it makes a huge difference to application performance.</p>
<p>Writing all your queries as raw queries is a micro-optimisation - it’s a lot of work for not that much payback, and it’s hardly ever worth the bother. Even if you have a single, utterly horrendous query or set of queries that has a huge overhead, there are better ways to deal with it - under those circumstances I’d be inclined to create a stored procedure in a migration and call that rather than making the query directly.</p>
<h2 id="summary">Summary</h2>
<p>So to sum it up, if someone tells you you should use framework X because it’s faster than framework Y, they might be <em>somewhat</em> right, but that misses the point completely. Benchmarks are so artificial as to be almost useless for determining how your production code will perform. Any half-decent framework will give you the tools you need to optimise performance, and your use of those tools will have a far, far more signficant effect on the response time of your application than picking between different frameworks. I’ve never found a single MVC framework whose core is slow enough that I can’t make it fast enough with the capabilities provided.</p>
<p>Also, considering that these days server hardware is dirt cheap (at time of writing US$5 gets you a Digital Ocean droplet with 1GB of RAM for a month), whereas developers are far, far more expensive, it’s more cost effective to optimise for the <em>developer’s time</em>, not server time, so it makes sense to pick a framework that makes <em>you</em> productive, not one that makes the <em>application</em> productive. That’s no excuse for slow, shitty applications, but when all else fails, spinning up additional servers is a far more cost-effective solution than spending days on end rewriting your entire application in a different framework that benchmarks show might perform better by a few milliseconds.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploying your Laravel application with Deployer]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/22/deploying-your-laravel-application-with-deployer/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/22/deploying-your-laravel-application-with-deployer/">
        </link>
        <updated>2018-01-22T12:00:14Z</updated>
        <summary type="html"><![CDATA[<p>Deployment processes have a nasty tendency to be a mish-mash of cobbled-together scripts or utilities in many web shops, with little or no consistency in practice between them. As a result, it’s all too easy for even the most experienced developer to mess up a deployment.</p>
<p>I personally have used all kinds of bodged-together solutions. For a while I used Envoy scripts to deploy my Laravel apps, but then there was an issue with the SSH library in PHP 7 that made it impractical to use it. Then I adopted Fabric, which I’d used before for deploying Django apps and will do fine for deploying PHP apps too, but it wasn’t much more sophisticated than using shell scripts for deployment purposes. There are third-party services like Deploybot, but these are normally quite expensive for what they are.</p>
<p>A while back I heard of <a href="https://deployer.org/">Deployer</a>, but I didn’t have the opportunity to try it until recently on a personal project as I was working somewhere that had its own in-house deployment process. It’s a PHP-specific deployment tool with recipes for deploying applications built with various frameworks and CMS’s, including Laravel, Symfony, CodeIgniter and Drupal.</p>
<h2 id="installing-deployer">Installing Deployer</h2>
<p>Deployer is installed as a <code>.phar</code> file, much like you would with Composer:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ curl -LO https://deployer.org/deployer.phar</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mv deployer.phar /usr/<span class="hljs-built_in">local</span>/bin/dep</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ chmod +x /usr/<span class="hljs-built_in">local</span>/bin/dep</td></table></code></pre>
<p>With that done, you should be able to run the following command in your project’s directory to create a Deployer script:</p>
<pre><code class="hljs lang-bash singleline">$ dep init</code></pre>
<p>In response, you should see a list of project types:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  Welcome to the Deployer config generator  </td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td> This utility will walk you through creating a deploy.php file.</td><tr><td class="linenos" data-pseudo-content="6"></td><td> It only covers the most common items, and tries to guess sensible defaults.</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td> Press ^C at any time to quit.</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td> Please select your project <span class="hljs-built_in">type</span> [Common]:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  [0] Common</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  [1] Laravel</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  [2] Symfony</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  [3] Yii</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  [4] Yii2 Basic App</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  [5] Yii2 Advanced App</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  [6] Zend Framework</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  [7] CakePHP</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  [8] CodeIgniter</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  [9] Drupal</td><tr><td class="linenos" data-pseudo-content="21"></td><td> &gt;</td></table></code></pre>
<p>Here I chose Laravel as I was deploying a Laravel project. I was then prompted for the repository URL - this will be filled in with the origin remote if the current folder is already a Git repository:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Repository [git@gitlab.com:Group/Project.git]:</td><tr><td class="linenos" data-pseudo-content="2"></td><td> &gt; </td></table></code></pre>
<p>You’ll also see a message about contributing anonymous usage data. After answering this, the file <code>deploy.php</code> will be generated:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Deployer</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">require</span> <span class="hljs-string">'recipe/laravel.php'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Configuration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>set(<span class="hljs-string">'repository'</span>, <span class="hljs-string">'git@gitlab.com:Group/Project.git'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>set(<span class="hljs-string">'git_tty'</span>, <span class="hljs-keyword">true</span>); <span class="hljs-comment">// [Optional] Allocate tty for git on first deployment</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>add(<span class="hljs-string">'shared_files'</span>, []);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>add(<span class="hljs-string">'shared_dirs'</span>, []);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>add(<span class="hljs-string">'writable_dirs'</span>, []);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">// Hosts</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>host(<span class="hljs-string">'project.com'</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    -&gt;stage(<span class="hljs-string">'production'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    -&gt;set(<span class="hljs-string">'deploy_path'</span>, <span class="hljs-string">'/var/www/project.com'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>host(<span class="hljs-string">'beta.project.com'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    -&gt;stage(<span class="hljs-string">'beta'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    -&gt;set(<span class="hljs-string">'deploy_path'</span>, <span class="hljs-string">'/var/www/project.com'</span>);  </td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-comment">// Tasks</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>desc(<span class="hljs-string">'Restart PHP-FPM service'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>task(<span class="hljs-string">'php-fpm:restart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment">// The user must have rights for restart service</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// /etc/sudoers: username ALL=NOPASSWD:/bin/systemctl restart php-fpm.service</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    run(<span class="hljs-string">'sudo systemctl restart php-fpm.service'</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});</td><tr><td class="linenos" data-pseudo-content="34"></td><td>after(<span class="hljs-string">'deploy:symlink'</span>, <span class="hljs-string">'php-fpm:restart'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td><span class="hljs-comment">// [Optional] if deploy fails automatically unlock.</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>after(<span class="hljs-string">'deploy:failed'</span>, <span class="hljs-string">'deploy:unlock'</span>);</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td><span class="hljs-comment">// Migrate database before symlink new release.</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>before(<span class="hljs-string">'deploy:symlink'</span>, <span class="hljs-string">'artisan:migrate'</span>);</td></table></code></pre>
<p>By default it has two hosts, <code>beta</code> and <code>production</code>, and you can refer to them by these names. You can also add or remove hosts, and amend the existing ones. Note the deploy path as well - this sets the place where the application gets deployed to.</p>
<p>Note that it’s set up to expect the server to be using PHP-FPM and Nginx by default, so if you’re using Apache you may need to amend the command to restart the server. Also, note that if like me you’re using PHP 7 on a distro like Debian that also has PHP 5 around, you’ll probably need to change the references to <code>php-fpm</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>desc(<span class="hljs-string">'Restart PHP-FPM service'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td>task(<span class="hljs-string">'php-fpm:restart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// The user must have rights for restart service</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment">// /etc/sudoers: username ALL=NOPASSWD:/bin/systemctl restart php-fpm.service</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    run(<span class="hljs-string">'sudo systemctl restart php7.0-fpm.service'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>});</td><tr><td class="linenos" data-pseudo-content="7"></td><td>after(<span class="hljs-string">'deploy:symlink'</span>, <span class="hljs-string">'php-fpm:restart'</span>);</td></table></code></pre>
<p>You will also need to make sure the <code>acl</code> package is installed - on Debian and Ubuntu you can install it as follows:</p>
<pre><code class="hljs lang-bash singleline">$ sudo apt-get install acl</code></pre>
<p>Now, the recipe for deploying a Laravel app will include the following:</p>
<ul>
<li>Pulling from the Git remote</li>
<li>Updating any Composer dependencies to match <code>composer.json</code></li>
<li>Running the migrations</li>
<li>Optimizing the application</li>
</ul>
<p>In addition, one really great feature Deployer offers is rollbacks. Rather than checking out your application directly into the project root you specify, it numbers each release and deploys it in a separate folder, before symlinking that folder to the project root as <code>current</code>. That way, if a release cannot be deployed successfully, rather than leaving your application in an unfinished state, Deployer will symlink the previous version so that you still have a working version of your application.</p>
<p>If you have configured Deployer for that project, you can deploy using the following command where <code>production</code> is the name of the host you’re deploying to:</p>
<pre><code class="hljs lang-bash singleline">$ dep deploy production</code></pre>
<p>The output will look something like this:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>✔ Executing task deploy:prepare</td><tr><td class="linenos" data-pseudo-content="2"></td><td>✔ Executing task deploy:lock</td><tr><td class="linenos" data-pseudo-content="3"></td><td>✔ Executing task deploy:release</td><tr><td class="linenos" data-pseudo-content="4"></td><td>➤ Executing task deploy:update_code</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Counting objects: 761, <span class="hljs-keyword">done</span>.</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Compressing objects: 100% (313/313), <span class="hljs-keyword">done</span>.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Writing objects: 100% (761/761), <span class="hljs-keyword">done</span>.</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Total 761 (delta 384), reused 757 (delta 380)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Connection to linklater.shellshocked.info closed.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>✔ Ok</td><tr><td class="linenos" data-pseudo-content="11"></td><td>✔ Executing task deploy:shared</td><tr><td class="linenos" data-pseudo-content="12"></td><td>✔ Executing task deploy:vendors</td><tr><td class="linenos" data-pseudo-content="13"></td><td>✔ Executing task deploy:writable</td><tr><td class="linenos" data-pseudo-content="14"></td><td>✔ Executing task artisan:storage:link</td><tr><td class="linenos" data-pseudo-content="15"></td><td>✔ Executing task artisan:view:clear</td><tr><td class="linenos" data-pseudo-content="16"></td><td>✔ Executing task artisan:cache:clear</td><tr><td class="linenos" data-pseudo-content="17"></td><td>✔ Executing task artisan:config:cache</td><tr><td class="linenos" data-pseudo-content="18"></td><td>✔ Executing task artisan:optimize</td><tr><td class="linenos" data-pseudo-content="19"></td><td>✔ Executing task artisan:migrate</td><tr><td class="linenos" data-pseudo-content="20"></td><td>✔ Executing task deploy:symlink</td><tr><td class="linenos" data-pseudo-content="21"></td><td>✔ Executing task php-fpm:restart</td><tr><td class="linenos" data-pseudo-content="22"></td><td>✔ Executing task deploy:unlock</td><tr><td class="linenos" data-pseudo-content="23"></td><td>✔ Executing task cleanup</td><tr><td class="linenos" data-pseudo-content="24"></td><td>✔ Executing task success</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Successfully deployed!</td></table></code></pre>
<p>As you can see, we first of all lock the application and pull the latest version from the Git remote. Next we copy the files shared between releases (eg the <code>.env</code> file, the <code>storage/</code> directory etc), update the dependencies, and make sure the permissions are correct. Next we link the storage, clear all the cached content, optimize our app, and migrate the database, before we set up the symlink. Finally we restart the web server and unlock the application.</p>
<p>In the event you discover a problem after deploy and need to rollback manually, you can do so with the following command:</p>
<pre><code class="hljs lang-bash singleline">$ dep rollback production</code></pre>
<p>That makes it easy to ensure that in the event of something going wrong, you can quickly switch back to an earlier version with zero downtime.</p>
<p>Deployer has made deployments a lot less painful for me than any other solution I’ve tried. The support for rollbacks means that if something goes wrong it’s trivial to switch back to an earlier revision.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating a caching user provider for Laravel]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/12/creating-a-caching-user-provider-for-laravel/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/12/creating-a-caching-user-provider-for-laravel/">
        </link>
        <updated>2018-01-12T13:16:51Z</updated>
        <summary type="html"><![CDATA[<p>If you have a Laravel application that requires users to log in and you use Clockwork or Laravel DebugBar to examine the queries that take place, you’ll probably notice a query that fetches the user model occurs quite a lot. This is because the user’s ID gets stored in the session, and is then used to retrieve the model.</p>
<p>This query is a good candidate for caching because not only is that query being made often, but it’s also not something that changes all that often. If you’re careful, it’s quite easy to set your application up to cache the user without having to worry about invalidating the cache.</p>
<p>Laravel allows you to define your own user providers in order to fetch the user’s details. These must implement <code>Illuminate\Contracts\Auth\UserProvider</code> and must return a user model from the identifier provided. Out of the box it comes with two implementations, <code>Illuminate\Auth\EloquentUserProvider</code> and <code>Illuminate\Auth\DatabaseUserProvider</code>, with the former being the default. Our caching user provider can extend the Eloquent one as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Auth</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">EloquentUserProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Hashing</span>\<span class="hljs-title">Hasher</span> <span class="hljs-title">as</span> <span class="hljs-title">HasherContract</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingUserProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EloquentUserProvider</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * The cache instance.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@var</span> Repository</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">protected</span> $cache;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Create a new database user provider.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Contracts\Hashing\Hasher  $hasher</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@param</span>  string  $model</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@param</span>  Repository  $cache</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(HasherContract $hasher, $model, Repository $cache)</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">$this</span>-&gt;hasher = $hasher;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * Retrieve a user by their unique identifier.</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     * <span class="hljs-doctag">@param</span>  mixed  $identifier</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Contracts\Auth\Authenticatable|null</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retrieveById</span><span class="hljs-params">($identifier)</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-keyword">$this</span>-&gt;getModel())-&gt;remember(<span class="hljs-string">'user_by_id_'</span>.$identifier, <span class="hljs-number">60</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($identifier)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::retrieveById($identifier);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="45"></td><td>}</td></table></code></pre>
<p>Note that we override the constructor to accept a cache instance as well as the other arguments. We also override the <code>retrieveById()</code> method to wrap a call to the parent’s implementation inside a callback that caches the response. I usually tag anything I cache with the model name, but if you need to use a cache backend that doesn’t support tagging this may not be an option. Our cache key also includes the identifier so that it’s unique to that user.</p>
<p>We then need to add our user provider to the auth service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Gate</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Providers</span>\<span class="hljs-title">AuthServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">CachingUserProvider</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Auth</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * Register any authentication / authorization services.</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;registerPolicies();</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        Auth::provider(<span class="hljs-string">'caching'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app, array $config)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CachingUserProvider(</td><tr><td class="linenos" data-pseudo-content="23"></td><td>                $app-&gt;make(<span class="hljs-string">'Illuminate\Contracts\Hashing\Hasher'</span>),</td><tr><td class="linenos" data-pseudo-content="24"></td><td>                $config[<span class="hljs-string">'model'</span>],</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                $app-&gt;make(<span class="hljs-string">'Illuminate\Contracts\Cache\Repository'</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            );</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>Note here that we call this provider <code>caching</code>, and we pass it the hasher, the model name, and an instance of the cache. Then, we need to update <code>config/auth.php</code> to use this provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-string">'providers'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-string">'users'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-string">'driver'</span> =&gt; <span class="hljs-string">'caching'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'model'</span> =&gt; App\Eloquent\Models\User::class,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    ],</td></table></code></pre>
<p>The only issue now is that our user models will continue to be cached, even when they are updated. To be able to flush the cache, we can create a model event that fires whenever the user model is updated:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Models</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Notifications</span>\<span class="hljs-title">Notifiable</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">UserAmended</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">protected</span> $dispatchesEvents = [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-string">'saved'</span> =&gt; UserAmended::class,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-string">'deleted'</span> =&gt; UserAmended::class,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-string">'restored'</span> =&gt; UserAmended::class,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="18"></td><td>}</td></table></code></pre>
<p>This will call the <code>UserAmended</code> event when a user model is created, updated, deleted or restored. Then we can define that event:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">Channel</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">PrivateChannel</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">PresenceChannel</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">Dispatchable</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">InteractsWithSockets</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">ShouldBroadcast</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAmended</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, <span class="hljs-title">InteractsWithSockets</span>, <span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Create a new event instance.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $model)</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td>}</td></table></code></pre>
<p>Note our event contains an instance of the user model. Then we set up a listener to do the work of clearing the cache:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Listeners</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">InteractsWithQueue</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">ShouldQueue</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">UserAmended</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClearUserId</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * Create the event listener.</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Repository $cache)</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * Handle the event.</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * <span class="hljs-doctag">@param</span>  object  $event</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(UserAmended $event)</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(get_class($event-&gt;model))-&gt;forget(<span class="hljs-string">'user_by_id_'</span>.$event-&gt;model-&gt;id);</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>Here, we get the user model’s class again, and clear the cache entry for that user model.</p>
<p>Finally, we hook up the event and listener in the event service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Event</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Providers</span>\<span class="hljs-title">EventServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * The event listener mappings for the application.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@var</span> array</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">protected</span> $listen = [</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-string">'App\Events\UserAmended'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'App\Listeners\ClearUserId'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * Register any events for your application.</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">parent</span>::boot();</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>With that done, our user should be cached after the first load, and flushed when the model is amended.</p>
<h2 id="handling-eager-loaded-data">Handling eager-loaded data</h2>
<p>It may be that you’re pulling in additional data from the user model in your application, such as roles, permissions, or a separate profile model. Under those circumstances it makes sense to treat that data in the same way by eager-loading it along with your user model.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Auth</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">EloquentUserProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Hashing</span>\<span class="hljs-title">Hasher</span> <span class="hljs-title">as</span> <span class="hljs-title">HasherContract</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingUserProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EloquentUserProvider</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * The cache instance.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@var</span> Repository</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">protected</span> $cache;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Create a new database user provider.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Contracts\Hashing\Hasher  $hasher</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@param</span>  string  $model</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@param</span>  Repository  $cache</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(HasherContract $hasher, $model, Repository $cache)</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">$this</span>-&gt;hasher = $hasher;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * Retrieve a user by their unique identifier.</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     * <span class="hljs-doctag">@param</span>  mixed  $identifier</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Contracts\Auth\Authenticatable|null</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retrieveById</span><span class="hljs-params">($identifier)</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-keyword">$this</span>-&gt;getModel())-&gt;remember(<span class="hljs-string">'user_by_id_'</span>.$identifier, <span class="hljs-number">60</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($identifier)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="42"></td><td>          $model = <span class="hljs-keyword">$this</span>-&gt;createModel();</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          <span class="hljs-keyword">return</span> $model-&gt;newQuery()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            -&gt;with(<span class="hljs-string">'roles'</span>, <span class="hljs-string">'permissions'</span>, <span class="hljs-string">'profile'</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            -&gt;where($model-&gt;getAuthIdentifierName(), $identifier)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>            -&gt;first();</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="49"></td><td>}</td></table></code></pre>
<p>Because we need to amend the query itself, we can’t just defer to the parent implementation like we did above and must instead copy it over and amend it to eager-load the data.</p>
<p>You’ll also need to set up model events to clear the cache whenever one of the related fields is updated, but it should be fairly straightforward to do so.</p>
<h2 id="summary">Summary</h2>
<p>Fetching a user model (and possibly some relations) on every page load while logged in can be a bit much, and it makes sense to cache as much as you can without risking serving stale data. Using this technique you can potentially cache a lot of repetitive, unnecessary queries and make your application faster.</p>
<p>This technique will also work in cases where you’re using other methods of maintaining user state, such as JWT, as long as you’re making use of a guard for authentication purposes, since all of these guards will still be using the same user provider. In fact, I first used this technique on a REST API that used JWT for authentication, and it’s worked well in that case.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding OpenSearch support to your site]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/10/adding-opensearch-support-to-your-site/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/10/adding-opensearch-support-to-your-site/">
        </link>
        <updated>2018-01-10T22:07:27Z</updated>
        <summary type="html"><![CDATA[<p>For the uninitiated, OpenSearch is the technology that lets you enter a site’s URL, and then press Tab to start searching on that site - you can see it in action on this site. It’s really useful, and quite easy to implement if you know how.</p>
<p>OpenSearch relies on having a particular XML file available. Here’s the <code>opensearch.xml</code> file for this site:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">OpenSearchDescription</span> <span class="hljs-attr">xmlns:moz</span>=<span class="hljs-string">"http://www.mozilla.org/2006/browser/search/"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>   <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://a9.com/-/spec/opensearch/1.1/"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">ShortName</span>&gt;</span>matthewdaly.co.uk<span class="hljs-tag">&lt;/<span class="hljs-name">ShortName</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span>Search matthewdaly.co.uk<span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">InputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">InputEncoding</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">Url</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/html"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-attr">template</span>=<span class="hljs-string">"http://www.google.com/search?q={searchTerms}&amp;amp;sitesearch=matthewdaly.co.uk"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">OpenSearchDescription</span>&gt;</span></td></table></code></pre>
<p>In this case, as this site uses a static site generator I can’t really do the search on the site, so it’s handed off to a Google site-specific search, but the principle is the same. The three relevant fields are as follows:</p>
<ul>
<li><code>ShortName</code> - The short name of the site (this should usually just be the domain name)</li>
<li><code>Description</code> - A human-readable description such as <code>Search mysite.com</code></li>
<li><code>Url</code> - Specifies the HTTP method that should be used to search (<code>GET</code> or <code>POST</code>), and a template for the URL. The search is automatically inserted where <code>{searchTerms}</code> appears</li>
</ul>
<p>A more typical example of the <code>Url</code> field might be as follows:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">Url</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/html"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>      <span class="hljs-attr">template</span>=<span class="hljs-string">"http://www.example.com/search?q={searchTerms}"</span>/&gt;</span></td></table></code></pre>
<p>Normally you will be pointing the template to your site’s own search page. Note that OpenSearch doesn’t actually do any searching itself - it just tells your browser where to send your search request.</p>
<p>With that file saved as <code>opensearch.xml</code>, all you have to do is add it to the <code>&lt;head&gt;</code> in your HTML:</p>
<pre><code class="hljs lang-html singleline">&lt;link <span class="hljs-attribute">href</span>=<span class="hljs-string">"/opensearch.xml"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-string">"search"</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">"Search title"</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">"application/opensearchdescription+xml"</span>&gt;</code></pre>
<p>And that should be all you need to do to get OpenSearch working.</p>
<p>For Laravel sites, I’ve recently created a <a href="https://github.com/matthewbdaly/laravel-opensearch">package for implementing Opensearch</a> that should help as well. With that you need only install the package, and set the fields in the config to point at your existing search page, in order to get OpenSearch working.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Easy repositories and decorators with Laravel Repositories]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/10/easy-repositories-and-decorators-with-laravel-repositories/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/10/easy-repositories-and-decorators-with-laravel-repositories/">
        </link>
        <updated>2018-01-10T12:22:44Z</updated>
        <summary type="html"><![CDATA[<p>Creating repositories for your Laravel models, as well as creating caching decorators for them, is a useful way of not only implementing caching in your web app, but decoupling the application from a specific ORM. Unfortunately, it can involve writing a fair amount of boilerplate code.</p>
<p><a href="https://github.com/matthewbdaly/laravel-repositories">Laravel Repositories</a> is a set of base classes and interfaces for creating repositories and decorators in your application. It consists of:</p>
<ul>
<li>A generic interface for repositories</li>
<li>A base repository that implements the interface and can be extended for your own repositories</li>
<li>A base decorator that also implements the interface and can similarly be extended</li>
</ul>
<p>By using these, not only are you able to implement caching quickly and easily for most use cases, but you can easily extend the base classes to add additional methods for your use case. By creating new interfaces that extend the base interface, then having your repositories extend the repository and decorator, you can minimise the amount of work required to set up new repositories.</p>
<p>The main interface used is <code>Matthewbdaly\LaravelRepositories\Repositories\Interfaces\AbstractRepositoryInterface</code>, and your interfaces should extend this. Your decorators should extend <code>Matthewbdaly\LaravelRepositories\Repositories\Decorators\BaseDecorator</code>, and your repositories should extend <code>Matthewbdaly\LaravelRepositories\Repositories\Base</code>. Then, if you add any additional methods to your interface and ensure your repository and decorator implement that interface, it should be straightforward to type-hint the interface and get back the decorated repository, which will handle caching for you.</p>
<p>To be able to type-hint the repositories, you need to set them up in a service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(<span class="hljs-string">'App\Repositories\Interfaces\ExampleRepositoryInterface'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            $baseRepo = <span class="hljs-keyword">new</span> \App\Repositories\EloquentExampleRepository(<span class="hljs-keyword">new</span> \App\Example);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            $cachingRepo = <span class="hljs-keyword">new</span> \App\Repositories\Decorators\ExampleDecorator($baseRepo, <span class="hljs-keyword">$this</span>-&gt;app[<span class="hljs-string">'cache.store'</span>]);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-keyword">return</span> $cachingRepo;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>Also, note that the cache backend used must be one that supports tags, such as Redis or Memcached. Data is cached using a tag derived from the model name. This also means you have to be careful when eager-loading relations, as the data will be cached under the main model’s name, not that of the relation. You may want to set up separate model events to flush those tags when the related field is updated.</p>
]]></summary>
    </entry>
</feed>
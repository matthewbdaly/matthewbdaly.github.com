<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id></id>
    <title>Matthew Daly&apos;s Blog</title>
    <updated>2018-02-18T12:15:38Z</updated>
    <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
    <author>
        <name>Matthew Daly</name>
        <email>matthew@matthewdaly.co.uk</email>
        <uri>https://matthewdaly.co.uk</uri>
    </author>
    <link rel="alternate" href="https://matthewdaly.co.uk"/>
    <subtitle>I&apos;m a web developer in Norfolk. This is my blog...</subtitle>
    <rights>Matthew Daly 2018</rights>
    <entry>
        <title type="html"><![CDATA[Using Lando as an alternative to Vagrant]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/02/04/using-lando-as-an-alternative-to-vagrant/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/02/04/using-lando-as-an-alternative-to-vagrant/">
        </link>
        <updated>2018-02-04T00:12:16Z</updated>
        <summary type="html"><![CDATA[<p>Although Vagrant is very useful for ensuring consistency between development environments, it’s quite demanding on system resources. Running a virtual machine introduces quite a bit of overhead, and it can be troublesome to provision.</p>
<p>This week I was introduced to <a href="https://docs.devwithlando.io/">Lando</a> as an alternative to Vagrant. Rather than running a virtual machine like Vagrant does by default, Lando instead spins up Docker containers for the services you need, meaning it has considerably less overhead than Vagrant. It also includes presets for a number of frameworks and CMS’s, including:</p>
<ul>
<li>Drupal 7</li>
<li>Drupal 8</li>
<li>Wordpress</li>
<li>Laravel</li>
</ul>
<p>Considering that Vagrant needs quite a bit of boilerplate to set up the server for different types of projects, this gives Lando an obvious advantage. The only issue I’ve had with it is that it’s been unreliable when I’ve had to use it on Windows, which I don’t do much anyway.</p>
<h2 id="getting-started">Getting started</h2>
<p>Lando requires that you have Docker installed. Once that’s done you can download and install it fro the website. Then you can run <code>lando init</code> to set it up:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ lando init</td><tr><td class="linenos" data-pseudo-content="2"></td><td>? What recipe <span class="hljs-keyword">do</span> you want to use? wordpress</td><tr><td class="linenos" data-pseudo-content="3"></td><td>? Where is your webroot relative to the init destination? .</td><tr><td class="linenos" data-pseudo-content="4"></td><td>? What <span class="hljs-keyword">do</span> you want to call this app? wp-site</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>NOW WE<span class="hljs-string">'RE COOKING WITH FIRE!!!</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Your app has been initialized!</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>Go to the directory where your app was initialized and run</td><tr><td class="linenos" data-pseudo-content="10"></td><td>`lando start` to get rolling.</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>Check the LOCATION printed below if you are unsure where to go.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Here are some vitals:</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td> NAME      wp-site                                               </td><tr><td class="linenos" data-pseudo-content="17"></td><td> LOCATION  /home/matthew/Projects/wp-site                        </td><tr><td class="linenos" data-pseudo-content="18"></td><td> RECIPE    wordpress                                             </td><tr><td class="linenos" data-pseudo-content="19"></td><td> DOCS      https://docs.devwithlando.io/tutorials/wordpress.html</span></td></table></code></pre>
<p>Here I’ve chosen the <code>wordpress</code> recipe, in the current directory, with the name <code>wp-site</code>. This generates the following file as <code>.lando.yml</code>:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-symbol">name:</span> wp-site</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-symbol">recipe:</span> wordpress</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-symbol">config:</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-symbol">  webroot:</span> .</td></table></code></pre>
<p>Then, if we run <code>lando start</code>, it will set up the required services:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ lando start</td><tr><td class="linenos" data-pseudo-content="2"></td><td>landoproxyhyperion5000gandalfedition_proxy_1 is up-to-date</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Creating network <span class="hljs-string">"wpsite_default"</span> with the default driver</td><tr><td class="linenos" data-pseudo-content="4"></td><td>Creating volume <span class="hljs-string">"wpsite_appserver"</span> with default driver</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Creating volume <span class="hljs-string">"wpsite_data"</span> with default driver</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Creating volume <span class="hljs-string">"wpsite_data_database"</span> with default driver</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Creating wpsite_appserver_1 ... </td><tr><td class="linenos" data-pseudo-content="8"></td><td>Creating wpsite_database_1 ... </td><tr><td class="linenos" data-pseudo-content="9"></td><td>Creating wpsite_database_1</td><tr><td class="linenos" data-pseudo-content="10"></td><td>Creating wpsite_appserver_1 ... <span class="hljs-keyword">done</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                                 Dload  Upload   Total   Spent    Left  Speed</td><tr><td class="linenos" data-pseudo-content="13"></td><td>100 4454k  100 4454k    0     0  3288k      0  0:00:01  0:00:01 --:--:-- 3290k</td><tr><td class="linenos" data-pseudo-content="14"></td><td>OS:     Linux 4.13.0-32-generic <span class="hljs-comment">#35-Ubuntu SMP Thu Jan 25 09:13:46 UTC 2018 x86_64</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>Shell:  </td><tr><td class="linenos" data-pseudo-content="16"></td><td>PHP binary:     /usr/<span class="hljs-built_in">local</span>/bin/php</td><tr><td class="linenos" data-pseudo-content="17"></td><td>PHP version:    7.1.13</td><tr><td class="linenos" data-pseudo-content="18"></td><td>php.ini used:   </td><tr><td class="linenos" data-pseudo-content="19"></td><td>WP-CLI root dir:        phar://wp-cli.phar</td><tr><td class="linenos" data-pseudo-content="20"></td><td>WP-CLI vendor dir:      phar://wp-cli.phar/vendor</td><tr><td class="linenos" data-pseudo-content="21"></td><td>WP_CLI phar path:       /tmp</td><tr><td class="linenos" data-pseudo-content="22"></td><td>WP-CLI packages dir:</td><tr><td class="linenos" data-pseudo-content="23"></td><td>WP-CLI global config:   </td><tr><td class="linenos" data-pseudo-content="24"></td><td>WP-CLI project config:  </td><tr><td class="linenos" data-pseudo-content="25"></td><td>WP-CLI version: 1.5.0</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>BOOMSHAKALAKA!!!</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>Your app has started up correctly.</td><tr><td class="linenos" data-pseudo-content="30"></td><td>Here are some vitals:</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td> APPSERVER URLS  https://localhost:32802</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                 http://localhost:32803</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                 http://wp-site.lndo.site</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                 https://wp-site.lndo.site</td></table></code></pre>
<p>Note the <code>APPSERVER URLS</code> section - the site can be accessed locally via HTTP or HTTPS. For this recipe, it also installs WP CLI.</p>
<p>If we run <code>docker ps</code>, we can see that it’s running three Docker containers:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS                                                               NAMES</td><tr><td class="linenos" data-pseudo-content="2"></td><td>2e920e152091        devwithlando/php:7.1-apache   <span class="hljs-string">"/lando-entrypoint.s…"</span>   16 minutes ago      Up 16 minutes       0.0.0.0:32803-&gt;80/tcp, 0.0.0.0:32802-&gt;443/tcp                       wpsite_appserver_1</td><tr><td class="linenos" data-pseudo-content="3"></td><td>82ea60b1214f        mysql:latest                  <span class="hljs-string">"/lando-entrypoint.s…"</span>   16 minutes ago      Up 16 minutes       0.0.0.0:32801-&gt;3306/tcp                                             wpsite_database_1</td><tr><td class="linenos" data-pseudo-content="4"></td><td>e51d831199d7        traefik:1.3-alpine            <span class="hljs-string">"/lando-entrypoint.s…"</span>   About an hour ago   Up About an hour    0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:58086-&gt;8080/tcp   landoproxyhyperion5000gandalfedition_proxy_1</td></table></code></pre>
<p>Apache lives in one container, MySQL in another, while the third runs Traefik, a lightweight load balancer, which listens on port 80. Traefik does the work of redirecting HTTP requests to the right place.</p>
<p>As I’ve been unhappy with the amount of resources Vagrant uses for a while, and I usually run Ubuntu (making using Docker straightforward), I’m planning on using Lando extensively in future. It’s lighter and faster to set up, and has sane defaults for most of the frameworks and CMS’s I use regularly, making it generally quicker and easier to work with.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I deploy Laravel apps]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/29/how-i-deploy-laravel-apps/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/29/how-i-deploy-laravel-apps/">
        </link>
        <updated>2018-01-29T22:00:35Z</updated>
        <summary type="html"><![CDATA[<p>A while back I provided details of the web server setup I used for Django applications. Nowadays I tend to use Laravel most of the time, so I thought I’d share an example of the sort of setup I use to deploy that.</p>
<h2 id="server-os">Server OS</h2>
<p>As before I generally prefer Debian Stable where possible. If that’s not possible for any reason then the current Ubuntu LTS is an acceptable substitute.</p>
<h2 id="web-server">Web server</h2>
<p>My usual web server these days is Nginx with PHP 7 or better via FPM. I generally use HTTP2 where possible, with SSL via Let’s Encrypt.</p>
<p>Here’s my typical Nginx config:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">fastcgi_cache_path</span> /etc/nginx/cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=my-app:<span class="hljs-number">100m</span> inactive=<span class="hljs-number">60m</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attribute">fastcgi_cache_key</span> <span class="hljs-string">"<span class="hljs-variable">$scheme</span><span class="hljs-variable">$request_method</span><span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>"</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attribute">add_header</span> Content-Security-Policy <span class="hljs-string">"default-src 'self'; script-src 'self'; img-src 'self' https://placehold.it; style-src 'self' https://fonts.googleapis.com ; font-src 'self' https://themes.googleusercontent.com; frame-src 'none'; object-src 'none'"</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attribute">server_name</span> my-app.domain;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">include</span> snippets/ssl-my-app.domain.conf;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attribute">include</span> snippets/ssl-params.conf;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attribute">fastcgi_param</span> HTTP_PROXY <span class="hljs-string">""</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attribute">root</span> /var/www/my-app.domain/current/public;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attribute">server_name</span> my-app.domain;</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm-my-app.sock;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-attribute">fastcgi_index</span> index.php;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-attribute">fastcgi_cache</span> my-app;</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-attribute">fastcgi_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">60m</span>;</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.well-known</span> {</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-attribute">allow</span> all;</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:manifest|appcache|html?|xml|json)$</span> {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-attribute">expires</span> -<span class="hljs-number">1</span>;</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-attribute">gzip_types</span> application/json text/xml application/xml;</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:rss|atom)$</span> {</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1h</span>;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public"</span>;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-attribute">gzip_types</span> application/xml+rss;</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="62"></td><td></td><tr><td class="linenos" data-pseudo-content="63"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$</span> {</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1M</span>;</td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public"</span>;</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* \.(?:css|js)$</span> {</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">"public"</span>;</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-attribute">gzip_types</span> text/css application/javascript text/javascript;</td><tr><td class="linenos" data-pseudo-content="76"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="77"></td><td>}</td></table></code></pre>
<p>The times for FastCGI caching tend to vary in practice - sometimes it’s not appropriate to use it all, while for others it can be cached for some time.</p>
<p>It’s generally fairly safe to cache CSS and JS for a long time with a Laravel app if you’re using Mix to version those assets, so I feel comfortable caching them for a year. Images are a bit dicier, but still don’t change often so a month seems good enough.</p>
<p>I’ll typically give each application its own pool, which means copying the file at <code>/etc/php/7.0/fpm/pool.d/www.conf</code> to another file in the same directory, amending the pool name and path to set a new location for the socket, and then restarting Nginx and PHP-FPM. Here are the fields that should be changed:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>; Start a new pool named 'www'.</td><tr><td class="linenos" data-pseudo-content="2"></td><td>; the variable $pool can be used in any directive and will be replaced by the</td><tr><td class="linenos" data-pseudo-content="3"></td><td>; pool name ('www' here)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>[my-app.domain]</td><tr><td class="linenos" data-pseudo-content="5"></td><td>...</td><tr><td class="linenos" data-pseudo-content="6"></td><td>listen = /var/run/php/php7.0-fpm-my-app.sock</td></table></code></pre>
<h2 id="database">Database</h2>
<p>I’m a fan of PostgreSQL - it’s stricter than MySQL/MariaDB, and has some very useful additional field types, so where possible I prefer to use it over MySQL or MariaDB.</p>
<h2 id="cache-and-session-backend">Cache and session backend</h2>
<p>Redis is my usual choice here - I make heavy use of cache tags so I need a backend for the cache that supports them, and Memcached doesn’t seem to have as much inertia as Redis these days. Neither needs much in the way of configuration, but you can get a slight speed boost by using phpiredis.</p>
<h2 id="queue">Queue</h2>
<p>I sometimes use Redis for this too, but it can be problematic if you’re using Redis as the queue and broadcast backend, so these days I’m more likely to use Beanstalk and keep Redis for other stuff. I use Supervisor for running the queue worker, and this is an example of the sort of configuration I would use:</p>
<pre><code class="hljs lang-ini"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">[program:laravel-worker]</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-attr">process_name</span>=%(program_name)s_%(process_num)<span class="hljs-number">02</span>d</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-attr">command</span>=php /var/www/artisan queue:work --sleep=<span class="hljs-number">3</span> --tries=<span class="hljs-number">3</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-attr">user</span>=www-data</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-attr">numprocs</span>=<span class="hljs-number">8</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-attr">stdout_logfile</span>=/var/log/worker.log</td></table></code></pre>
<p>This is fairly standard for Laravel applications.</p>
<h2 id="scheduler">Scheduler</h2>
<p>I often make use of the Laravel scheduled tasks system. Here’s the typical cron job that would be used for that:</p>
<pre><code class="hljs lang-cron singleline"><span class="hljs-bullet">* </span><span class="hljs-bullet">* *</span> <span class="hljs-bullet">* *</span> php /var/www/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</code></pre>
<p>Again, this is standard for Laravel applications. It runs the scheduler every minute, and the scheduler then determines if it needs to do something.</p>
<h2 id="provisioning">Provisioning</h2>
<p>To set all this up, I’ll generally use Ansible. In addition to this, I’ll generally also set up fail2ban to block various attacks via both HTTP and SSH.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why the speed of your MVC framework is usually a red herring]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/28/why-the-speed-of-your-mvc-framework-is-usually-a-red-herring/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/28/why-the-speed-of-your-mvc-framework-is-usually-a-red-herring/">
        </link>
        <updated>2018-01-28T20:20:03Z</updated>
        <summary type="html"><![CDATA[<p>Skim through any programming-related forum and you’ll often find statements along the lines of the following:</p>
<ul>
<li>“I chose Lumen for my website because the benchmarks show it’s faster than Laravel”</li>
<li>“I’m using raw queries because they’re faster than using an ORM”</li>
<li>“I wrote the site in pure PHP to avoid the overhead of a framework”</li>
</ul>
<p>Making my web apps performant is something I care deeply about. Yet every time I see something like this I cringe. Why? Because statements like these are full of wild misconceptions about the real performance bottlenecks in modern web applications. I don’t blame framework vendors for publishing benchmarks of their applications, since the performance of web apps <em>is</em> a big issue, but they are often misleading even when they’re correct, and it’s all too easy for inexperienced developers to think that performance is a matter of picking the fastest framework, rather than following a methodology of identifying and dealing with performance bottlenecks.</p>
<p>In this post I’ll explain why the performance of the framework, while not a non-issue, should come way down the list of factors involved in choosing a framework (or not to use one at all), behind functionality and developer productivity, and how many other factors not related to the choice of framework are involved.</p>
<h2 id="benchmarks-don-t-include-real-world-optimisations">Benchmarks don’t include real-world optimisations</h2>
<p>When benchmarking a number of frameworks together, you’ll typically be testing some fairly basic behaviour such as rendering a view, and maybe making a database query. It’s rare for them to also include things such as caching queries or sending the correct HTTP caching headers.</p>
<p>Also, it’s quite common for the party creating the benchmark to have their own preference they’re more familiar with, in which case they’ll have a better idea of how to optimise that one. If they don’t know how to optimise all of them to the same extent, the end results is going to be biased. For example, in the case of Laravel, running <code>php artisan optimize</code> can significantly improve application performance by caching large chunks of the application.</p>
<p>In addition, the configuration for the web server is quite likely to be suboptimal compared to a production server. For instance, they may not have the opcode cache installed, or Nginx may not set the right headers on static assets. Under these circumstances the benchmarks are very likely to be misleading. Ultimately, if you chose to completely rewrite an entire application from scratch in a new framework to claw back a few milliseconds, how do you know you’ll actually see that translate into better performance in production for your particular use case?</p>
<p>And if you’re even <em>considering</em> running a supposedly performance-critical application on shared hosting, you should hang your head in shame…</p>
<h2 id="your-from-scratch-implementation-of-functionality-is-probably-slower-than-an-existing-one">Your from-scratch implementation of functionality is probably slower than an existing one</h2>
<p>If you’re building some functionality from scratch instead of using an off-the-shelf library on the basis of performance, just stop. Existing libraries have usually had a great deal of attention already, should have working test suites, and depending on how active the developer community around them is, they may well have found and resolved the most egregious performance bottlenecks. Yours, on the other hand, will be new, untested, and could easily have serious bottlenecks if you haven’t profiled it extensively. It’s therefore very, very unlikely that you’ll be able to produce something more performant than the existing solutions, unless those existing solutions are old, barely maintained ones.</p>
<p>The <em>only</em> time this might be worthwhile is if all the existing implementations have boatloads of functionality, and you only need a small portion of that functionality. Even then, you should consider if it’s worth your while for a tiny speed boost. Or if you want to write a new library for it, go ahead - just don’t kid yourself about it being for the sake of performance.</p>
<h2 id="smaller-frameworks-are-faster-because-they-do-less">Smaller frameworks are faster because they do less</h2>
<p>Microframeworks such as Lumen <em>are</em> generally faster (at least in the artificial world of benchmarks), but that’s because they leave out functionality that’s not necessary for their targeted use case. Lumen is aimed at building microservices, and it leaves out things like templating, file handling, and other functionality not focused solely on building microservices. That means it’s less useful for other use cases. Any code that gets added to the application will make it marginally slower just by virtue of being there.</p>
<p>Under these circumstances it’s blindingly obvious that the framework that has to do less setup (eg instantiate fewer services, perform less operations on the request and response), is nearly always going to respond faster, regardless of suitability for more complex work.</p>
<p>If you start building a site with Lumen, but then discover that you need some functionality that Laravel has and Lumen doesn’t, you have two choices:</p>
<ul>
<li>Switch to Laravel</li>
<li>Add that functionality to your application (either through additional packages or rolling it yourself)</li>
</ul>
<p>I’ve often had plans to use Lumen for a project in the past, but then discovered that it would benefit from some of Laravel’s functionality. Under those circumstances I’ve switched straight over to Laravel - my time is too valuable to my employer to waste reimplementing functionality Laravel already has, and that functionality will inevitably have some overhead. Put it this way - I do a lot of Phonegap work, so building APIs is a big part of what I do, but I’ve only ever finished one project using Lumen (a push notification microservice). Every other time, sooner or later I’ve run into a situation where the additional functionality of Laravel would be useful and switched over.</p>
<p>There are occasions when a lighter framework like Lumen makes sense, but only when I simply don’t need the additional functionality of Laravel. It just doesn’t make sense to go for Lumen and then start adding functionality Laravel already has - any new implementation isn’t likely to be as solid, well-tested and performant as Laravel’s implementation.</p>
<h2 id="framework-performance-is-often-less-relevant-if-you-re-using-varnish">Framework performance is often less relevant if you’re using Varnish</h2>
<p>In my experience, if you have a site or API that is under heavy load, then if it’s possible to use Varnish with it, that will have a far more significant effect on performance than switching between PHP frameworks.</p>
<p>Because Varnish sits in front of your web server, when you’re serving cached content, anything after Varnish is completely irrelevant to the performance- it won’t hit the backend again until the cached content has expired. Varnish is effectively a key-value store, and is written in C, so it’s far more performant than just about any backend in any framework you could possibly write. And it’s configurable enough that with sufficient experience it can usually be helpful for most applications.</p>
<p>Varnish isn’t appropriate for every use case, and it doesn’t help with uncached requests (except by reducing the load on the application) but where high performance is necessary it can be a very big help indeed. The speed boost from having Varnish in front of your site and properly configured dwarfs any boost of a few milliseconds from switching PHP framework.</p>
<p>There are other HTTP caching servers available too - for instance, it’s possible to use Nginx as a web cache, and Cloudflare is a hosted service that offers similar performance benefits. Regardless, the same applies - if you can handle a request using the caching server rather than the application behind it, the performance will be immensely better, without having to change your application code.</p>
<h2 id="orm-vs-raw-queries-is-a-drop-in-the-ocean">ORM vs raw queries is a drop in the ocean</h2>
<p>There will always be <em>some</em> overhead from using any ORM. However, this is nearly always so minor as to be a non-issue.</p>
<p>For example, while there might be some slight performance increase from writing raw SQL instead of using an ORM, it’s generally dwarfed by the cost of making the query in the first place. You can get a far, far bigger improvement in performance by efficiently caching the responses than by rewriting ORM queries in raw SQL.</p>
<p>An ORM does make certain types of slow inefficient queries more likely, as well as making “hidden” queries (such as in Laravel when it fetches the user from the session), but that’s something that can be resolved by using a profiler like Clockwork to identify the slow or unnecessary queries and refactoring them. Most ORM’s have tools to handle things like the N+1 problem - for instance, Eloquent has the <code>with()</code> method to eager-load related tables, which is generally a lot more convenient than explicitly writing a query to do the eager-loading for you.</p>
<p>Using an ORM also comes with significant benefits to developers:</p>
<ul>
<li>It’s generally easier to express relations between tables</li>
<li>It helps avoid the mental context switch between PHP and SQL</li>
<li>It does a lot of the work of sanitizing data for you</li>
<li>It helps make your application portable between different databases (eg so you can run your tests using an in-memory SQLite database but use MySQL in production)</li>
<li>Where you have logic that can’t be expressed using the ORM, it’s generally easy to drop down to writing raw SQL for that part</li>
</ul>
<p>In my experience, querying the database is almost always the single biggest bottleneck (the only other thing that can be as bad is if you’re making requests to a slow third-party API), and any overhead from the ORM is a drop in the ocean in comparison. If you have a slow query in a web application, then rewriting it as a raw query is probably the very last thing you should consider doing, after:</p>
<ul>
<li>Refactoring the query or queries to be more efficient/remove unnecessary queries</li>
<li>Making sure the appropriate indices are set on your database</li>
<li>Caching the responses</li>
</ul>
<p>Caching in particular is quite hard to do - it’s difficult to come up with a reliable and reusable strategy for caching responses without serving stale content, but once you can do so, it makes a huge difference to application performance.</p>
<p>Writing all your queries as raw queries is a micro-optimisation - it’s a lot of work for not that much payback, and it’s hardly ever worth the bother. Even if you have a single, utterly horrendous query or set of queries that has a huge overhead, there are better ways to deal with it - under those circumstances I’d be inclined to create a stored procedure in a migration and call that rather than making the query directly.</p>
<h2 id="summary">Summary</h2>
<p>So to sum it up, if someone tells you you should use framework X because it’s faster than framework Y, they might be <em>somewhat</em> right, but that misses the point completely. Benchmarks are so artificial as to be almost useless for determining how your production code will perform. Any half-decent framework will give you the tools you need to optimise performance, and your use of those tools will have a far, far more signficant effect on the response time of your application than picking between different frameworks. I’ve never found a single MVC framework whose core is slow enough that I can’t make it fast enough with the capabilities provided.</p>
<p>Also, considering that these days server hardware is dirt cheap (at time of writing US$5 gets you a Digital Ocean droplet with 1GB of RAM for a month), whereas developers are far, far more expensive, it’s more cost effective to optimise for the <em>developer’s time</em>, not server time, so it makes sense to pick a framework that makes <em>you</em> productive, not one that makes the <em>application</em> productive. That’s no excuse for slow, shitty applications, but when all else fails, spinning up additional servers is a far more cost-effective solution than spending days on end rewriting your entire application in a different framework that benchmarks show might perform better by a few milliseconds.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploying your Laravel application with Deployer]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/22/deploying-your-laravel-application-with-deployer/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/22/deploying-your-laravel-application-with-deployer/">
        </link>
        <updated>2018-01-22T12:00:14Z</updated>
        <summary type="html"><![CDATA[<p>Deployment processes have a nasty tendency to be a mish-mash of cobbled-together scripts or utilities in many web shops, with little or no consistency in practice between them. As a result, it’s all too easy for even the most experienced developer to mess up a deployment.</p>
<p>I personally have used all kinds of bodged-together solutions. For a while I used Envoy scripts to deploy my Laravel apps, but then there was an issue with the SSH library in PHP 7 that made it impractical to use it. Then I adopted Fabric, which I’d used before for deploying Django apps and will do fine for deploying PHP apps too, but it wasn’t much more sophisticated than using shell scripts for deployment purposes. There are third-party services like Deploybot, but these are normally quite expensive for what they are.</p>
<p>A while back I heard of <a href="https://deployer.org/">Deployer</a>, but I didn’t have the opportunity to try it until recently on a personal project as I was working somewhere that had its own in-house deployment process. It’s a PHP-specific deployment tool with recipes for deploying applications built with various frameworks and CMS’s, including Laravel, Symfony, CodeIgniter and Drupal.</p>
<h2 id="installing-deployer">Installing Deployer</h2>
<p>Deployer is installed as a <code>.phar</code> file, much like you would with Composer:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ curl -LO https://deployer.org/deployer.phar</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mv deployer.phar /usr/<span class="hljs-built_in">local</span>/bin/dep</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ chmod +x /usr/<span class="hljs-built_in">local</span>/bin/dep</td></table></code></pre>
<p>With that done, you should be able to run the following command in your project’s directory to create a Deployer script:</p>
<pre><code class="hljs lang-bash singleline">$ dep init</code></pre>
<p>In response, you should see a list of project types:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  Welcome to the Deployer config generator  </td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td> This utility will walk you through creating a deploy.php file.</td><tr><td class="linenos" data-pseudo-content="6"></td><td> It only covers the most common items, and tries to guess sensible defaults.</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td> Press ^C at any time to quit.</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td> Please select your project <span class="hljs-built_in">type</span> [Common]:</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  [0] Common</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  [1] Laravel</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  [2] Symfony</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  [3] Yii</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  [4] Yii2 Basic App</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  [5] Yii2 Advanced App</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  [6] Zend Framework</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  [7] CakePHP</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  [8] CodeIgniter</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  [9] Drupal</td><tr><td class="linenos" data-pseudo-content="21"></td><td> &gt;</td></table></code></pre>
<p>Here I chose Laravel as I was deploying a Laravel project. I was then prompted for the repository URL - this will be filled in with the origin remote if the current folder is already a Git repository:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Repository [git@gitlab.com:Group/Project.git]:</td><tr><td class="linenos" data-pseudo-content="2"></td><td> &gt;</td></table></code></pre>
<p>You’ll also see a message about contributing anonymous usage data. After answering this, the file <code>deploy.php</code> will be generated:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Deployer</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">require</span> <span class="hljs-string">'recipe/laravel.php'</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-comment">// Configuration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>set(<span class="hljs-string">'repository'</span>, <span class="hljs-string">'git@gitlab.com:Group/Project.git'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>set(<span class="hljs-string">'git_tty'</span>, <span class="hljs-keyword">true</span>); <span class="hljs-comment">// [Optional] Allocate tty for git on first deployment</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>add(<span class="hljs-string">'shared_files'</span>, []);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>add(<span class="hljs-string">'shared_dirs'</span>, []);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>add(<span class="hljs-string">'writable_dirs'</span>, []);</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-comment">// Hosts</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>host(<span class="hljs-string">'project.com'</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    -&gt;stage(<span class="hljs-string">'production'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    -&gt;set(<span class="hljs-string">'deploy_path'</span>, <span class="hljs-string">'/var/www/project.com'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>host(<span class="hljs-string">'beta.project.com'</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    -&gt;stage(<span class="hljs-string">'beta'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    -&gt;set(<span class="hljs-string">'deploy_path'</span>, <span class="hljs-string">'/var/www/project.com'</span>);  </td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td><span class="hljs-comment">// Tasks</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>desc(<span class="hljs-string">'Restart PHP-FPM service'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>task(<span class="hljs-string">'php-fpm:restart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment">// The user must have rights for restart service</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">// /etc/sudoers: username ALL=NOPASSWD:/bin/systemctl restart php-fpm.service</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    run(<span class="hljs-string">'sudo systemctl restart php-fpm.service'</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});</td><tr><td class="linenos" data-pseudo-content="34"></td><td>after(<span class="hljs-string">'deploy:symlink'</span>, <span class="hljs-string">'php-fpm:restart'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td><span class="hljs-comment">// [Optional] if deploy fails automatically unlock.</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>after(<span class="hljs-string">'deploy:failed'</span>, <span class="hljs-string">'deploy:unlock'</span>);</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td><span class="hljs-comment">// Migrate database before symlink new release.</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>before(<span class="hljs-string">'deploy:symlink'</span>, <span class="hljs-string">'artisan:migrate'</span>);</td></table></code></pre>
<p>By default it has two hosts, <code>beta</code> and <code>production</code>, and you can refer to them by these names. You can also add or remove hosts, and amend the existing ones. Note the deploy path as well - this sets the place where the application gets deployed to.</p>
<p>Note that it’s set up to expect the server to be using PHP-FPM and Nginx by default, so if you’re using Apache you may need to amend the command to restart the server. Also, note that if like me you’re using PHP 7 on a distro like Debian that also has PHP 5 around, you’ll probably need to change the references to <code>php-fpm</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>desc(<span class="hljs-string">'Restart PHP-FPM service'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td>task(<span class="hljs-string">'php-fpm:restart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-comment">// The user must have rights for restart service</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-comment">// /etc/sudoers: username ALL=NOPASSWD:/bin/systemctl restart php-fpm.service</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    run(<span class="hljs-string">'sudo systemctl restart php7.0-fpm.service'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>});</td><tr><td class="linenos" data-pseudo-content="7"></td><td>after(<span class="hljs-string">'deploy:symlink'</span>, <span class="hljs-string">'php-fpm:restart'</span>);</td></table></code></pre>
<p>You will also need to make sure the <code>acl</code> package is installed - on Debian and Ubuntu you can install it as follows:</p>
<pre><code class="hljs lang-bash singleline">$ sudo apt-get install acl</code></pre>
<p>Now, the recipe for deploying a Laravel app will include the following:</p>
<ul>
<li>Pulling from the Git remote</li>
<li>Updating any Composer dependencies to match <code>composer.json</code></li>
<li>Running the migrations</li>
<li>Optimizing the application</li>
</ul>
<p>In addition, one really great feature Deployer offers is rollbacks. Rather than checking out your application directly into the project root you specify, it numbers each release and deploys it in a separate folder, before symlinking that folder to the project root as <code>current</code>. That way, if a release cannot be deployed successfully, rather than leaving your application in an unfinished state, Deployer will symlink the previous version so that you still have a working version of your application.</p>
<p>If you have configured Deployer for that project, you can deploy using the following command where <code>production</code> is the name of the host you’re deploying to:</p>
<pre><code class="hljs lang-bash singleline">$ dep deploy production</code></pre>
<p>The output will look something like this:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>✔ Executing task deploy:prepare</td><tr><td class="linenos" data-pseudo-content="2"></td><td>✔ Executing task deploy:lock</td><tr><td class="linenos" data-pseudo-content="3"></td><td>✔ Executing task deploy:release</td><tr><td class="linenos" data-pseudo-content="4"></td><td>➤ Executing task deploy:update_code</td><tr><td class="linenos" data-pseudo-content="5"></td><td>Counting objects: 761, done.</td><tr><td class="linenos" data-pseudo-content="6"></td><td>Compressing objects: 100% (313/313), done.</td><tr><td class="linenos" data-pseudo-content="7"></td><td>Writing objects: 100% (761/761), done.</td><tr><td class="linenos" data-pseudo-content="8"></td><td>Total 761 (delta 384), reused 757 (delta 380)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>Connection to linklater.shellshocked.info closed.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>✔ Ok</td><tr><td class="linenos" data-pseudo-content="11"></td><td>✔ Executing task deploy:shared</td><tr><td class="linenos" data-pseudo-content="12"></td><td>✔ Executing task deploy:vendors</td><tr><td class="linenos" data-pseudo-content="13"></td><td>✔ Executing task deploy:writable</td><tr><td class="linenos" data-pseudo-content="14"></td><td>✔ Executing task artisan:storage:link</td><tr><td class="linenos" data-pseudo-content="15"></td><td>✔ Executing task artisan:view:clear</td><tr><td class="linenos" data-pseudo-content="16"></td><td>✔ Executing task artisan:cache:clear</td><tr><td class="linenos" data-pseudo-content="17"></td><td>✔ Executing task artisan:config:cache</td><tr><td class="linenos" data-pseudo-content="18"></td><td>✔ Executing task artisan:optimize</td><tr><td class="linenos" data-pseudo-content="19"></td><td>✔ Executing task artisan:migrate</td><tr><td class="linenos" data-pseudo-content="20"></td><td>✔ Executing task deploy:symlink</td><tr><td class="linenos" data-pseudo-content="21"></td><td>✔ Executing task php-fpm:restart</td><tr><td class="linenos" data-pseudo-content="22"></td><td>✔ Executing task deploy:unlock</td><tr><td class="linenos" data-pseudo-content="23"></td><td>✔ Executing task cleanup</td><tr><td class="linenos" data-pseudo-content="24"></td><td>✔ Executing task success</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Successfully deployed!</td></table></code></pre>
<p>As you can see, we first of all lock the application and pull the latest version from the Git remote. Next we copy the files shared between releases (eg the <code>.env</code> file, the <code>storage/</code> directory etc), update the dependencies, and make sure the permissions are correct. Next we link the storage, clear all the cached content, optimize our app, and migrate the database, before we set up the symlink. Finally we restart the web server and unlock the application.</p>
<p>In the event you discover a problem after deploy and need to rollback manually, you can do so with the following command:</p>
<pre><code class="hljs lang-bash singleline">$ dep rollback production</code></pre>
<p>That makes it easy to ensure that in the event of something going wrong, you can quickly switch back to an earlier version with zero downtime.</p>
<p>Deployer has made deployments a lot less painful for me than any other solution I’ve tried. The support for rollbacks means that if something goes wrong it’s trivial to switch back to an earlier revision.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating a caching user provider for Laravel]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/12/creating-a-caching-user-provider-for-laravel/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/12/creating-a-caching-user-provider-for-laravel/">
        </link>
        <updated>2018-01-12T13:16:51Z</updated>
        <summary type="html"><![CDATA[<p>If you have a Laravel application that requires users to log in and you use Clockwork or Laravel DebugBar to examine the queries that take place, you’ll probably notice a query that fetches the user model occurs quite a lot. This is because the user’s ID gets stored in the session, and is then used to retrieve the model.</p>
<p>This query is a good candidate for caching because not only is that query being made often, but it’s also not something that changes all that often. If you’re careful, it’s quite easy to set your application up to cache the user without having to worry about invalidating the cache.</p>
<p>Laravel allows you to define your own user providers in order to fetch the user’s details. These must implement <code>Illuminate\Contracts\Auth\UserProvider</code> and must return a user model from the identifier provided. Out of the box it comes with two implementations, <code>Illuminate\Auth\EloquentUserProvider</code> and <code>Illuminate\Auth\DatabaseUserProvider</code>, with the former being the default. Our caching user provider can extend the Eloquent one as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Auth</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">EloquentUserProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Hashing</span>\<span class="hljs-title">Hasher</span> <span class="hljs-title">as</span> <span class="hljs-title">HasherContract</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingUserProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EloquentUserProvider</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * The cache instance.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@var</span> Repository</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">protected</span> $cache;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Create a new database user provider.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Contracts\Hashing\Hasher  $hasher</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@param</span>  string  $model</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@param</span>  Repository  $cache</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(HasherContract $hasher, $model, Repository $cache)</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">$this</span>-&gt;hasher = $hasher;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * Retrieve a user by their unique identifier.</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     * <span class="hljs-doctag">@param</span>  mixed  $identifier</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Contracts\Auth\Authenticatable|null</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retrieveById</span><span class="hljs-params">($identifier)</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-keyword">$this</span>-&gt;getModel())-&gt;remember(<span class="hljs-string">'user_by_id_'</span>.$identifier, <span class="hljs-number">60</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($identifier)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::retrieveById($identifier);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="45"></td><td>}</td></table></code></pre>
<p>Note that we override the constructor to accept a cache instance as well as the other arguments. We also override the <code>retrieveById()</code> method to wrap a call to the parent’s implementation inside a callback that caches the response. I usually tag anything I cache with the model name, but if you need to use a cache backend that doesn’t support tagging this may not be an option. Our cache key also includes the identifier so that it’s unique to that user.</p>
<p>We then need to add our user provider to the auth service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Gate</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Providers</span>\<span class="hljs-title">AuthServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">CachingUserProvider</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Auth</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * Register any authentication / authorization services.</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;registerPolicies();</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        Auth::provider(<span class="hljs-string">'caching'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($app, array $config)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CachingUserProvider(</td><tr><td class="linenos" data-pseudo-content="23"></td><td>                $app-&gt;make(<span class="hljs-string">'Illuminate\Contracts\Hashing\Hasher'</span>),</td><tr><td class="linenos" data-pseudo-content="24"></td><td>                $config[<span class="hljs-string">'model'</span>],</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                $app-&gt;make(<span class="hljs-string">'Illuminate\Contracts\Cache\Repository'</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            );</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>Note here that we call this provider <code>caching</code>, and we pass it the hasher, the model name, and an instance of the cache. Then, we need to update <code>config/auth.php</code> to use this provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-string">'providers'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-string">'users'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-string">'driver'</span> =&gt; <span class="hljs-string">'caching'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'model'</span> =&gt; App\Eloquent\Models\User::class,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    ],</td></table></code></pre>
<p>The only issue now is that our user models will continue to be cached, even when they are updated. To be able to flush the cache, we can create a model event that fires whenever the user model is updated:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Models</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Notifications</span>\<span class="hljs-title">Notifiable</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">User</span> <span class="hljs-title">as</span> <span class="hljs-title">Authenticatable</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">UserAmended</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Authenticatable</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">Notifiable</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">protected</span> $dispatchesEvents = [</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-string">'saved'</span> =&gt; UserAmended::class,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-string">'deleted'</span> =&gt; UserAmended::class,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-string">'restored'</span> =&gt; UserAmended::class,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="18"></td><td>}</td></table></code></pre>
<p>This will call the <code>UserAmended</code> event when a user model is created, updated, deleted or restored. Then we can define that event:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">Channel</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">PrivateChannel</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">PresenceChannel</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">Dispatchable</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">InteractsWithSockets</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">ShouldBroadcast</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAmended</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, <span class="hljs-title">InteractsWithSockets</span>, <span class="hljs-title">SerializesModels</span>;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Create a new event instance.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $model)</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td>}</td></table></code></pre>
<p>Note our event contains an instance of the user model. Then we set up a listener to do the work of clearing the cache:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Listeners</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">InteractsWithQueue</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">ShouldQueue</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Events</span>\<span class="hljs-title">UserAmended</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClearUserId</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * Create the event listener.</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Repository $cache)</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * Handle the event.</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * <span class="hljs-doctag">@param</span>  object  $event</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(UserAmended $event)</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(get_class($event-&gt;model))-&gt;forget(<span class="hljs-string">'user_by_id_'</span>.$event-&gt;model-&gt;id);</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>Here, we get the user model’s class again, and clear the cache entry for that user model.</p>
<p>Finally, we hook up the event and listener in the event service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Event</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Providers</span>\<span class="hljs-title">EventServiceProvider</span> <span class="hljs-title">as</span> <span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * The event listener mappings for the application.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@var</span> array</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">protected</span> $listen = [</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-string">'App\Events\UserAmended'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'App\Listeners\ClearUserId'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * Register any events for your application.</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">parent</span>::boot();</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>With that done, our user should be cached after the first load, and flushed when the model is amended.</p>
<h2 id="handling-eager-loaded-data">Handling eager-loaded data</h2>
<p>It may be that you’re pulling in additional data from the user model in your application, such as roles, permissions, or a separate profile model. Under those circumstances it makes sense to treat that data in the same way by eager-loading it along with your user model.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Auth</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">EloquentUserProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Hashing</span>\<span class="hljs-title">Hasher</span> <span class="hljs-title">as</span> <span class="hljs-title">HasherContract</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingUserProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EloquentUserProvider</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * The cache instance.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@var</span> Repository</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">protected</span> $cache;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Create a new database user provider.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Contracts\Hashing\Hasher  $hasher</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@param</span>  string  $model</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@param</span>  Repository  $cache</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(HasherContract $hasher, $model, Repository $cache)</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">$this</span>-&gt;hasher = $hasher;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * Retrieve a user by their unique identifier.</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     * <span class="hljs-doctag">@param</span>  mixed  $identifier</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Contracts\Auth\Authenticatable|null</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">retrieveById</span><span class="hljs-params">($identifier)</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-keyword">$this</span>-&gt;getModel())-&gt;remember(<span class="hljs-string">'user_by_id_'</span>.$identifier, <span class="hljs-number">60</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($identifier)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="42"></td><td>          $model = <span class="hljs-keyword">$this</span>-&gt;createModel();</td><tr><td class="linenos" data-pseudo-content="43"></td><td>          <span class="hljs-keyword">return</span> $model-&gt;newQuery()</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            -&gt;with(<span class="hljs-string">'roles'</span>, <span class="hljs-string">'permissions'</span>, <span class="hljs-string">'profile'</span>)</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            -&gt;where($model-&gt;getAuthIdentifierName(), $identifier)</td><tr><td class="linenos" data-pseudo-content="46"></td><td>            -&gt;first();</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="49"></td><td>}</td></table></code></pre>
<p>Because we need to amend the query itself, we can’t just defer to the parent implementation like we did above and must instead copy it over and amend it to eager-load the data.</p>
<p>You’ll also need to set up model events to clear the cache whenever one of the related fields is updated, but it should be fairly straightforward to do so.</p>
<h2 id="summary">Summary</h2>
<p>Fetching a user model (and possibly some relations) on every page load while logged in can be a bit much, and it makes sense to cache as much as you can without risking serving stale data. Using this technique you can potentially cache a lot of repetitive, unnecessary queries and make your application faster.</p>
<p>This technique will also work in cases where you’re using other methods of maintaining user state, such as JWT, as long as you’re making use of a guard for authentication purposes, since all of these guards will still be using the same user provider. In fact, I first used this technique on a REST API that used JWT for authentication, and it’s worked well in that case.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding OpenSearch support to your site]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/10/adding-opensearch-support-to-your-site/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/10/adding-opensearch-support-to-your-site/">
        </link>
        <updated>2018-01-10T22:07:27Z</updated>
        <summary type="html"><![CDATA[<p>For the uninitiated, OpenSearch is the technology that lets you enter a site’s URL, and then press Tab to start searching on that site - you can see it in action on this site. It’s really useful, and quite easy to implement if you know how.</p>
<p>OpenSearch relies on having a particular XML file available. Here’s the <code>opensearch.xml</code> file for this site:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">OpenSearchDescription</span> <span class="hljs-attr">xmlns:moz</span>=<span class="hljs-string">"http://www.mozilla.org/2006/browser/search/"</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>   <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://a9.com/-/spec/opensearch/1.1/"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">ShortName</span>&gt;</span>matthewdaly.co.uk<span class="hljs-tag">&lt;/<span class="hljs-name">ShortName</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">Description</span>&gt;</span>Search matthewdaly.co.uk<span class="hljs-tag">&lt;/<span class="hljs-name">Description</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">InputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">InputEncoding</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">Url</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/html"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>      <span class="hljs-attr">template</span>=<span class="hljs-string">"http://www.google.com/search?q={searchTerms}&amp;amp;sitesearch=matthewdaly.co.uk"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">OpenSearchDescription</span>&gt;</span></td></table></code></pre>
<p>In this case, as this site uses a static site generator I can’t really do the search on the site, so it’s handed off to a Google site-specific search, but the principle is the same. The three relevant fields are as follows:</p>
<ul>
<li><code>ShortName</code> - The short name of the site (this should usually just be the domain name)</li>
<li><code>Description</code> - A human-readable description such as <code>Search mysite.com</code></li>
<li><code>Url</code> - Specifies the HTTP method that should be used to search (<code>GET</code> or <code>POST</code>), and a template for the URL. The search is automatically inserted where <code>{searchTerms}</code> appears</li>
</ul>
<p>A more typical example of the <code>Url</code> field might be as follows:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>   <span class="hljs-tag">&lt;<span class="hljs-name">Url</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/html"</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>      <span class="hljs-attr">template</span>=<span class="hljs-string">"http://www.example.com/search?q={searchTerms}"</span>/&gt;</span></td></table></code></pre>
<p>Normally you will be pointing the template to your site’s own search page. Note that OpenSearch doesn’t actually do any searching itself - it just tells your browser where to send your search request.</p>
<p>With that file saved as <code>opensearch.xml</code>, all you have to do is add it to the <code>&lt;head&gt;</code> in your HTML:</p>
<pre><code class="hljs lang-html singleline">&lt;link href=<span class="hljs-string">"/opensearch.xml"</span> <span class="hljs-keyword">rel</span>=<span class="hljs-string">"search"</span> title=<span class="hljs-string">"Search title"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"application/opensearchdescription+xml"</span>&gt;</code></pre>
<p>And that should be all you need to do to get OpenSearch working.</p>
<p>For Laravel sites, I’ve recently created a <a href="https://github.com/matthewbdaly/laravel-opensearch">package for implementing Opensearch</a> that should help as well. With that you need only install the package, and set the fields in the config to point at your existing search page, in order to get OpenSearch working.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Easy repositories and decorators with Laravel Repositories]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/10/easy-repositories-and-decorators-with-laravel-repositories/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/10/easy-repositories-and-decorators-with-laravel-repositories/">
        </link>
        <updated>2018-01-10T12:22:44Z</updated>
        <summary type="html"><![CDATA[<p>Creating repositories for your Laravel models, as well as creating caching decorators for them, is a useful way of not only implementing caching in your web app, but decoupling the application from a specific ORM. Unfortunately, it can involve writing a fair amount of boilerplate code.</p>
<p><a href="https://github.com/matthewbdaly/laravel-repositories">Laravel Repositories</a> is a set of base classes and interfaces for creating repositories and decorators in your application. It consists of:</p>
<ul>
<li>A generic interface for repositories</li>
<li>A base repository that implements the interface and can be extended for your own repositories</li>
<li>A base decorator that also implements the interface and can similarly be extended</li>
</ul>
<p>By using these, not only are you able to implement caching quickly and easily for most use cases, but you can easily extend the base classes to add additional methods for your use case. By creating new interfaces that extend the base interface, then having your repositories extend the repository and decorator, you can minimise the amount of work required to set up new repositories.</p>
<p>The main interface used is <code>Matthewbdaly\LaravelRepositories\Repositories\Interfaces\AbstractRepositoryInterface</code>, and your interfaces should extend this. Your decorators should extend <code>Matthewbdaly\LaravelRepositories\Repositories\Decorators\BaseDecorator</code>, and your repositories should extend <code>Matthewbdaly\LaravelRepositories\Repositories\Base</code>. Then, if you add any additional methods to your interface and ensure your repository and decorator implement that interface, it should be straightforward to type-hint the interface and get back the decorated repository, which will handle caching for you.</p>
<p>To be able to type-hint the repositories, you need to set them up in a service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(<span class="hljs-string">'App\Repositories\Interfaces\ExampleRepositoryInterface'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            $baseRepo = <span class="hljs-keyword">new</span> \App\Repositories\EloquentExampleRepository(<span class="hljs-keyword">new</span> \App\Example);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            $cachingRepo = <span class="hljs-keyword">new</span> \App\Repositories\Decorators\ExampleDecorator($baseRepo, <span class="hljs-keyword">$this</span>-&gt;app[<span class="hljs-string">'cache.store'</span>]);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-keyword">return</span> $cachingRepo;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>Also, note that the cache backend used must be one that supports tags, such as Redis or Memcached. Data is cached using a tag derived from the model name. This also means you have to be careful when eager-loading relations, as the data will be cached under the main model’s name, not that of the relation. You may want to set up separate model events to flush those tags when the related field is updated.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating Laravel Helpers]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/09/creating-laravel-helpers/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/09/creating-laravel-helpers/">
        </link>
        <updated>2018-01-09T17:26:26Z</updated>
        <summary type="html"><![CDATA[<p>Although helpers are an important part of Laravel, the documentation doesn’t really touch on creating them. Fortunately, doing so it fairly easy.</p>
<p>Here I’m building a helper for formatting dates for the HTML5 <code>datetime-local</code> form input. First we define the helper function in <code>app\Helpers.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'format_date'</span>)) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format_date</span><span class="hljs-params">(string $date)</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> Carbon::parse($date, config(<span class="hljs-string">'app.timezone'</span>))-&gt;format(<span class="hljs-string">'Y-m-d\TH:i:s'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}</td></table></code></pre>
<p>Then we create a service provider to load them:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelperServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap the application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register the application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">require_once</span> app_path() . <span class="hljs-string">'/Helpers.php'</span>;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>Finally,we register the service provider in <code>config/app.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-string">'providers'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>       ...</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        App\Providers\HelperServiceProvider::class,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>   ],</td></table></code></pre>
<p>Of course, once you have this all set up for one helper, it’s easy to add more because they can all go in <code>app/Helpers.php</code>.</p>
<p>Creating your own helpers is a good way of refactoring unwanted logic out of your Blade templates or controllers and making it more reusable and maintainable, particularly for things like formatting dates or strings.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting the type of an unsupported Postgres field in Laravel]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/08/getting-the-type-of-an-unsupported-postgres-field-in-laravel/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/08/getting-the-type-of-an-unsupported-postgres-field-in-laravel/">
        </link>
        <updated>2018-01-08T14:00:15Z</updated>
        <summary type="html"><![CDATA[<p>Today I’ve been working on a generic, reusable Laravel admin interface, loosely inspired by the Django admin, that dynamically picks up the field types and generates an appropriate input field accordingly.</p>
<p>One problem I’ve run into is that getting a representation of a database table’s fields relies on <code>doctrine/dbal</code>, and its support for the more unusual PostgreSQL field types is spotty at best. I’ve been testing it out on a Laravel-based blogging engine, which has full-text search using the <code>TSVECTOR</code> field type, which isn’t supported, and it threw a nasty <code>Unknown database type tsvector requested</code> error.</p>
<p>Fortunately, it’s possible to register custom field type mappings easily enough. In this case we can safely treat a <code>TSVECTOR</code> field as a string` type anyway, so we can map it to the string type. We can do so in the boot method of a service provider:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Register the TSVECTOR column</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $conn = <span class="hljs-keyword">$this</span>-&gt;app-&gt;make(<span class="hljs-string">'Illuminate\Database\ConnectionInterface'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        $conn-&gt;getDoctrineSchemaManager()</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            -&gt;getDatabasePlatform()</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            -&gt;registerDoctrineTypeMapping(<span class="hljs-string">'tsvector'</span>, <span class="hljs-string">'string'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>       <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>We register a Doctrine type mapping that maps the <code>tsvector</code> type to a string. Now Doctrine will just treat it as a string.</p>
<p>We can then retrieve the field types as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        $table = <span class="hljs-keyword">$this</span>-&gt;model-&gt;getTable();</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        $fields = array_values(Schema::getColumnListing($table));</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        $fielddata = [];</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">foreach</span> ($fields <span class="hljs-keyword">as</span> $field){</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-keyword">if</span> ($field != <span class="hljs-string">'id'</span> &amp;&amp; $field != <span class="hljs-string">'created_at'</span> &amp;&amp; $field != <span class="hljs-string">'updated_at'</span> &amp;&amp; $field != <span class="hljs-string">'deleted_at'</span>) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>                <span class="hljs-keyword">try</span> {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                    $fielddata[$field] = Schema::getColumnType($table, $field);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                } <span class="hljs-keyword">catch</span> (\<span class="hljs-keyword">Exception</span> $e) {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                    $fielddata[$field] = <span class="hljs-string">'unknown'</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        }</td></table></code></pre>
<p>Note that we specifically don’t want to retrieve the ID or timestamps, so we exclude them - the user should never really have the need to update them manually. We fetch the table from the model and then call <code>Schema::getColumnListing()</code> to retrieve a list of fields for that table. Finally we call <code>Schema::getColumnType()</code> to actually get the type of each column.</p>
<p>Now, I suspect the performance of this admin interface is going to be inferior to a more specific one because it has to retrieve the fields all the time, but that’s not the point here - with a non-user facing admin interface, performance isn’t quite as much of an issue. For the same reason the admin doesn’t do any caching at all. It’s still useful under certain circumstances to be able to reverse-engineer the table structure and render an appropriate form dynamically.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating an Artisan task to set up a user account]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/08/creating-an-artisan-task-to-set-up-a-user-account/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/08/creating-an-artisan-task-to-set-up-a-user-account/">
        </link>
        <updated>2018-01-08T12:52:39Z</updated>
        <summary type="html"><![CDATA[<p>When working with any Laravel application that implements authentication, you’ll need to set up a user account to be able to work with it. One way of doing that is to add a user in a seeder, but that’s only really suitable if every user is going to use the same details.</p>
<p>Instead, you may want to create an Artisan command to set up the user account. Here’s an example of a command that does that:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Commands</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Command</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateUser</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * The name and signature of the console command.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">'create:user'</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     * The console command description.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">protected</span> $description = <span class="hljs-string">'Creates a single user'</span>;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * Create a new command instance.</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">parent</span>::__construct();</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     * Execute the console command.</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment">// Get user model from config</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        $model = config(<span class="hljs-string">'auth.providers.users.model'</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td></td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment">// Let user know what this will do</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-keyword">$this</span>-&gt;info(<span class="hljs-string">'I\'ll ask you for the details I need to set up the user'</span>);</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-comment">// Get username</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        $name = <span class="hljs-keyword">$this</span>-&gt;ask(<span class="hljs-string">'Please provide the username'</span>);</td><tr><td class="linenos" data-pseudo-content="49"></td><td></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-comment">// Get email</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        $email = <span class="hljs-keyword">$this</span>-&gt;ask(<span class="hljs-string">'Please provide the email address'</span>);</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        <span class="hljs-comment">// Get password</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        $password = <span class="hljs-keyword">$this</span>-&gt;secret(<span class="hljs-string">'Please provide the password'</span>);</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-comment">// Create model</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>        $user = <span class="hljs-keyword">new</span> $model;</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        $user-&gt;name = $name;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        $user-&gt;email = $email;</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        $user-&gt;password = Hash::make($password);</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        $user-&gt;save();</td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-keyword">$this</span>-&gt;info(<span class="hljs-string">'User saved'</span>);</td><tr><td class="linenos" data-pseudo-content="63"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="64"></td><td>}</td></table></code></pre>
<p>We fetch the user model from the config, before asking the user for the data we need. Then we insert it into the database and confirm it to the user.</p>
<p>Then we just need to register the command in <code>App\Console\Kernel.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">protected</span> $commands = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        \App\Console\Commands\CreateUser::class,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    ];</td></table></code></pre>
<p>And we can run our command with <code>php artisan create:user</code>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding comments to models in Laravel]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/07/adding-comments-to-models-in-laravel/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/07/adding-comments-to-models-in-laravel/">
        </link>
        <updated>2018-01-07T17:21:50Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/matthewbdaly/laravel-comments">Laravel Comments</a> is a package I recently released that allows you to add comments to any model in your application. Possible models you could use it to enable comments on might include:</p>
<ul>
<li>Blog posts</li>
<li>Forum posts</li>
<li>Issues on an issue tracker</li>
</ul>
<p>It’s loosely inspired by Django’s comments system.</p>
<h2 id="installation">Installation</h2>
<p>Run this command to install it:</p>
<pre><code class="hljs lang-bash singleline">$ composer require matthewbdaly/laravel-comments</code></pre>
<p>You will also need to run <code>php artisan migrate</code> to create the appropriate tables.</p>
<h2 id="making-a-model-commentable">Making a model commentable</h2>
<p>Add the following trait to a model to make it commentable:</p>
<pre><code class="hljs lang-php singleline">Matthewbdaly\LaravelComments\Eloquent\Traits\Commentable</code></pre>
<p>The comments table uses a polymorphic relation, so it should be possible to attach it to pretty much any model. The model should now have a <code>comments</code> relation, allowing you to get the comments for a model instance.</p>
<h2 id="displaying-the-comments">Displaying the comments</h2>
<p>Obviously you can just render the comments in a view you can create yourself, but it’s usually going to be more convenient to use the existing view, even if just as a starting point, which includes the ability to submit new comments and flag existing ones. Include it in your views as follows:</p>
<pre><code class="hljs lang-php singleline">@<span class="hljs-keyword">include</span>(<span class="hljs-string">'comments::comments'</span>, [<span class="hljs-string">'parent'</span> =&gt; $post])</code></pre>
<p>The argument passed to <code>parent</code> should be the model instance for which you want to display the comments form. Obviously, you can easily override this to use your own custom form instead.</p>
<p>The package also contains the following views:</p>
<ul>
<li><code>comments::commentsubmitted</code></li>
<li><code>comments::flagsubmitted</code></li>
</ul>
<p>These are basically just acknowledgement screens for when a comment has been submitted or flagged, and you’ll probably want to override them.</p>
<p>The package also has its own routes and controller included for submitting comments and flags.</p>
<h2 id="using-the-models-directly">Using the models directly</h2>
<p>Of course there’s nothing stopping you creating your own routes and controllers for creating, viewing and flagging comments, and if, for instance, you wish to build a REST API that allows for adding comments to objects you can just use these models directly:</p>
<ul>
<li><code>Matthewbdaly\LaravelComments\Eloquent\Models\Comment</code></li>
<li><code>Matthewbdaly\LaravelComments\Eloquent\Models\Comment\Flag</code></li>
</ul>
<p>I recommend that you use my repositories, which are as follows:</p>
<ul>
<li><code>Matthewbdaly\LaravelComments\Contracts\Repositories\Comment</code></li>
<li><code>Matthewbdaly\LaravelComments\Contracts\Repositories\Comment\Flag</code></li>
</ul>
<p>These use <code>matthewbdaly/laravel-repositories</code> and so implement caching on the decorated repository, making it simple to ensure your models get cached appropriately. However, they aren’t compulsory.</p>
<h2 id="events">Events</h2>
<p>You can set up listeners for the following events:</p>
<ul>
<li><code>Matthewbdaly\LaravelComments\Events\CommentReceived</code></li>
</ul>
<p>Fired when a new comment is submitted. The package does not include any kind of validation of comments, so you can instead listen for this event and implement your own functionality to validate them (eg, check it with Akismet, check for links). That way you can easily customise how it handles potentially spammy comments for your own particular use case.</p>
<ul>
<li><code>Matthewbdaly\LaravelComments\Events\CommentFlagged</code></li>
</ul>
<p>This event indicates that a comment has been flagged for moderator attention. You can use this event to send whatever notification is most appropriate (eg, email, Slack, SMS).</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[More tricks for speeding up your Laravel test suite]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/07/more-tricks-for-speeding-up-your-laravel-test-suite/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/07/more-tricks-for-speeding-up-your-laravel-test-suite/">
        </link>
        <updated>2018-01-07T16:32:03Z</updated>
        <summary type="html"><![CDATA[<p>When you first start doing test-driven development with Laravel, it can be quite hard to produce a test suite that runs quickly enough. The first time I used Laravel for a large project, I had a test suite that at one time, took over seven minutes to run, which was pretty awful considering that the ideal time for a test suite to take to run is no more than ten seconds.</p>
<p>Fortunately, with experience you can pick up some techniques which can quite drastically speed up your test suite. Here are some of the ones I’ve learned that can be useful.</p>
<p>Note that some of these are contradictory, and what works for one use case won’t necessarily work for another, so my advice is to try these and see what makes a difference for your use case.</p>
<h2 id="reduce-the-cost-of-hashing">Reduce the cost of hashing</h2>
<p>Inside the <code>createApplication()</code> method of <code>tests\CreatesApplication.php</code>, place the following statement:</p>
<pre><code class="hljs lang-php singleline">        Hash::setRounds(<span class="hljs-number">4</span>);</code></pre>
<p>This makes hashing passwords quicker and less demanding, and since you don’t care about the security of a password in a test, you’re not losing out in any way by doing so.</p>
<p>This, by itself, can <em>massively</em> reduce the time taken by your test suite - your mileage may vary, but I’ve personally seen it cut to a third of the previous time by using this. In fact, it’s recently been added to Laravel by default.</p>
<h2 id="if-you-re-creating-a-lot-of-fixtures-for-tests-do-so-in-a-transaction">If you’re creating a lot of fixtures for tests, do so in a transaction</h2>
<p>Sometimes, your application requires a lot of data to be added to the database just to be usable, and it’s quite common to use seeders for this purpose. However, it can take some time to insert a lot of data, especially if it has to be re-run for every test. If you do have to insert a lot of data before a test, you can cut down the time substantially by wrapping the seeder calls in a transaction:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">DB</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Model::unguard();</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        DB::beginTransaction();</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(GroupTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(UserTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(ProjectTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        DB::commit();</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        Model::reguard();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td>}</td><tr><td class="linenos" data-pseudo-content="27"></td><td>`</td></table></code></pre>
<p>I’ve personally seen this trick cut the insert time by over half, every single time the database is seeded. If you don’t have much data to insert, it may not help, but for large amounts of data it can make a big difference.</p>
<h2 id="if-a-lot-of-tests-need-the-same-data-migrate-and-seed-it-first-then-wrap-the-tests-in-transactions-and-roll-them-back-afterwards">If a lot of tests need the same data, migrate and seed it first, then wrap the tests in transactions and roll them back afterwards</h2>
<p>If multiple tests need to work with the same dataset, you should consider running the migrations and seeders before the first test, and then wrapping each test inside a transaction. That way the data will only be inserted once, and will be rolled back to that initial good state after each test.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> $migrated = <span class="hljs-keyword">false</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">parent</span>::setUp();</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        DB::beginTransaction();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        DB::rollback();</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">parent</span>::tearDown();</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUpBeforeClass</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">self</span>::$migrated) {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            Artisan::call(<span class="hljs-string">'migrate:fresh'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            Artisan::call(<span class="hljs-string">'db:seed'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-keyword">self</span>::$migrated = <span class="hljs-keyword">true</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    }</td></table></code></pre>
<p>Using something like this instead of one of the existing testing traits may be a better fit under those circumstances. However, if your application uses transactions for some functionality this might cause problems.</p>
<h2 id="don-t-create-a-full-instance-of-the-laravel-application-unless-you-have-to">Don’t create a full instance of the Laravel application unless you have to</h2>
<p>Not every test requires that you instantiate the full Laravel application, and doing so slows your tests down. If you don’t absolutely need the full application instantiated in the test, consider having your test inherit from the below simple test case class instead:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Mockery</span>\<span class="hljs-title">Adapter</span>\<span class="hljs-title">Phpunit</span>\<span class="hljs-title">MockeryPHPUnitIntegration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span> <span class="hljs-title">as</span> <span class="hljs-title">BaseTestCase</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleTestCase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTestCase</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">MockeryPHPUnitIntegration</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td></table></code></pre>
<p>For properly isolated unit tests, using this base class instead can have a noticeable effect on performance.</p>
<h2 id="if-you-can-use-an-in-memory-sqlite-database-for-testing">If you can, use an in-memory SQLite database for testing</h2>
<p>This isn’t an option if you’re relying on the features of another database, but if it is, this is usually the fastest way to go. Configure it as follows in <code>phpunit.xml</code>:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_CONNECTION"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlite"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_DATABASE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">":memory:"</span>/&gt;</span></td></table></code></pre>
<h2 id="use-the-new-refresh-database-trait">Use the new Refresh Database trait</h2>
<pre><code class="hljs lang-php singleline">   <span class="hljs-keyword">use</span> <span class="hljs-title">RefreshDatabase</span>;</code></pre>
<p>This testing trait is generally more efficient than migrating down and up, because it empties the database afterwards rather than stepping through the changes of each migration. If you have a non-trivial number of migrations, it will almost certainly be quicker than migrating down, then back up for the next test.</p>
<h2 id="mock-what-you-can-t-control">Mock what you can’t control</h2>
<p>You should never, ever be making calls to external APIs in your test suite, because you can’t control whether those external API’s work - if a third-party API goes down, you may get a failed test run even if your application is working perfectly, not to mention it will add the time taken to send the request and receive a response to the test time. Instead, mock the calls to the third-party API.</p>
<h2 id="for-large-applications-consider-moving-parts-into-a-separate-package">For large applications, consider moving parts into a separate package</h2>
<p>If you have a particularly large application, it’s worth considering moving parts of it out into standalone packages and requiring them using Composer’s support for private Git repositories. That way, those packages can have their own test suites, and the main application’s test suite can cover the remaining functionality.</p>
<p>For instance, it’s fairly straightforward to pull out your models and migrations and put them in a separate package, and the tests for them can go with them to that package.</p>
<p>You should also consider whether parts of your application would be useful as standalone packages, and if so pull them out along with their tests. That way, not only are you making your test suite quicker, but you’re also saving yourself work by creating a reusable solution for a problem you might encounter again in the future.</p>
<h2 id="turn-off-xdebug">Turn off XDebug</h2>
<p>XDebug has a horrendous effect on the performance of the test suite. Turn it off unless you need it to generate test coverage. Better yet, set up continuous integration and have that generate the coverage for you.</p>
<h2 id="summary">Summary</h2>
<p>When you first start using Laravel, it can be hard to keep your test suite lean, and the longer a test suite takes to run, the less likely it is to actually get run regularly. To practice TDD properly, your test suite should not take long enough that your mind starts to wander, and ten seconds is a good target to aim for in this regard - you need to be able to run it several times a minute without problem. Obviously things like having a faster computer or an SSD will help, but there’s a lot you can do to make your test suite more efficient, even when running on a quite basic machine.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding dynamic flat pages to your Laravel app]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/03/adding-dynamic-flat-pages-to-your-laravel-app/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/03/adding-dynamic-flat-pages-to-your-laravel-app/">
        </link>
        <updated>2018-01-03T11:49:11Z</updated>
        <summary type="html"><![CDATA[<p>Most web apps have at least some need for some additional flat pages, for purposes such as:</p>
<ul>
<li>Terms and conditions</li>
<li>Cookie/privacy policy</li>
<li>FAQ</li>
</ul>
<p>You can of course hard-code this content in a view file, but if this content is likely to change often it may be useful to give the site owners the capability to manage this themselves.</p>
<p><a href="https://github.com/matthewbdaly/laravel-flatpages">Laravel Flatpages</a> is a package I wrote that adds a flatpage model, controller and view to your application. It’s loosely inspired by Django’s flatpages app. Using it, you can quickly and easily build a very simple brochure-style CMS. Each page contains fields for the title, content, slug, and an optional template field that specifies which view to use.</p>
<p>Note that it doesn’t include any kind of admin functionality, so you’ll need to add this yourself or find a package for it. It uses my <a href="http://github.com/matthewbdaly/laravel-repositories">repositories package</a> to access the database, and this has caching built in, so when you create, update or delete a flatpage, you should either resolve <code>Matthewbdaly\LaravelFlatpages\Contracts\Repositories\Flatpage</code> and use the methods on that to make the changes (in which case the appropriate caches should be flushed automatically), or flush the cache. It also requires a cache backend that supports tags, such as Memcached or Redis.</p>
<p>It does not include routing in the package itself because I couldn’t find a way to guarantee that it would always be the last route, so instead you should put this in your <code>routes/web.php</code> and make sure it’s always the last route:</p>
<pre><code class="hljs lang-php singleline">Route::get(<span class="hljs-string">'{path}'</span>, <span class="hljs-string">'\Matthewbdaly\LaravelFlatpages\Http\Controllers\FlatpageController@page'</span>);</code></pre>
<p>Otherwise you could wind up with problems. The reason for that is that it has to check the path against the slugs of the flat pages in the database, and if it doesn’t find any it raises a 404.</p>
<p>Or, if you prefer, you can use the middleware at <code>Matthewbdaly\LaravelFlatpages\Http\Middleware\FlatpageMiddleware</code>, which may be more convenient in many case. This should be added as the last global middleware in <code>app\Http\Kernel.php</code>.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Laravel package boilerplate]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/02/a-laravel-package-boilerplate/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/02/a-laravel-package-boilerplate/">
        </link>
        <updated>2018-01-02T12:12:15Z</updated>
        <summary type="html"><![CDATA[<p>The second package I’ve been working on recently is <a href="https://github.com/matthewbdaly/laravel-package-boilerplate">Laravel Package Boilerplate</a>. It’s a basic starter boilerplate for building your own Laravel packages.</p>
<p>It’s not meant to be installed as a project dependency. Instead, run the following command to create a new project boilerplate with it:</p>
<pre><code class="hljs lang-bash singleline">composer create-project --prefer-dist matthewbdaly/laravel-package-boilerplate &lt;YOUR_NEW_PACKAGE_DIRECTORY&gt;</code></pre>
<p>This will create a new folder that includes a <code>src</code> folder containing a service provider, and a <code>tests</code> folder containing a preconfigured base test case, as well as a simple test case for tests that don’t need the full application instantiated, in order to help keep your test suite as fast as possible.</p>
<p>In addition, it includes configuration files for:</p>
<ul>
<li>PHPUnit</li>
<li>PHP CodeSniffer</li>
<li>Travis CI</li>
</ul>
<p>That way you can start your project off the right way with very little effort.</p>
<p>I’ve also added my Artisan Standalone project as a dependency - that way you can access any Artisan commands you need to generate files you need as follows:</p>
<pre><code class="hljs lang-bash singleline">$ vendor/bin/artisan</code></pre>
<p>Hopefully this package should make it a lot easier to create new Laravel packages in future.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using Artisan from standalone Laravel packages]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/02/using-artisan-from-standalone-laravel-packages/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/02/using-artisan-from-standalone-laravel-packages/">
        </link>
        <updated>2018-01-02T12:01:10Z</updated>
        <summary type="html"><![CDATA[<p>Recently I’ve been building and publishing a significant number of Laravel packages, and I thought I’d share details of some of them over the next few days.</p>
<p><a href="https://github/com/matthewbdaly/artisan-standalone">Artisan Standalone</a> is a package that, when installed in a standalone Laravel package (eg, not in an actual Laravel install, but in a package that you’re building that is intended for use with Laravel), allows you to use Artisan. It’s intended largely to make it quicker and easier to build functionality as separate packages by giving you access to the same generator commands as you have when working with a Laravel application. It came about largely from a need to scratch my own itch, as when building packages I was having to either run Artisan commands in a Laravel app and move them over, or copy them from existing files, which was obviously a pain in the proverbial.</p>
<p>You can install it with the following command:</p>
<pre><code class="hljs lang-bash singleline">$ composer require --dev matthewbdaly/artisan-standalone</code></pre>
<p>Once it’s installed, you can access Artisan as follows:</p>
<pre><code class="hljs lang-bash singleline">$ vendor/bin/artisan</code></pre>
<p>Note that it doesn’t explicitly include Laravel as a dependency - you’ll need to add that in the parent package to pull in the libraries it needs (which you should be doing anyway). It’s possible that there are some commands that won’t work in this context, but they’re almost certainly ones you won’t need here, such as the <code>migrate</code> command. As far as I can tell the generator commands, which are the only ones we’re really interested in here, all work OK.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating Artisan tasks that generate files]]></title>
        <id>https://matthewdaly.co.uk/blog/2018/01/01/creating-artisan-tasks-that-generate-files/</id>
        <link href="https://matthewdaly.co.uk/blog/2018/01/01/creating-artisan-tasks-that-generate-files/">
        </link>
        <updated>2018-01-01T16:06:21Z</updated>
        <summary type="html"><![CDATA[<p>While the documentation for creating Artisan tasks is generally pretty good, it doesn’t really touch on creating tasks that generate new files. The only way to figure it out was to go digging through the source code. In this case, I was building an Artisan command to create Fractal transformers as part of a package I’m working on.</p>
<p>There’s a specialised class for generating files at <code>Illuminate\Console\GeneratorCommand</code>, which your command class should extend instead of <code>Illuminate\Console\Command</code>. In addition to the usual properties such as the signature and description, you also need to specify <code>$type</code> to give the type of class being generated. Also, note that the constructor is different, so if you use <code>php artisan make:console</code> to create the boilerplate for this command, you’ll need to delete the constructor.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">MyPackage</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Commands</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">GeneratorCommand</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Input</span>\<span class="hljs-title">InputArgument</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransformerMakeCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GeneratorCommand</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * The name and signature of the console command.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">protected</span> $signature = <span class="hljs-string">'make:transformer {name : The required name of the transformer class}'</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     * The console command description.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">protected</span> $description = <span class="hljs-string">'Create a Fractal transformer'</span>;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * The type of class being generated.</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">protected</span> $type = <span class="hljs-string">'Fractal transformer'</span>;</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     * Get the stub file for the generator.</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * <span class="hljs-doctag">@return</span> string</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStub</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/stubs/transformer.stub'</span>;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     * Get the console command arguments.</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     * <span class="hljs-doctag">@return</span> array</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getArguments</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="49"></td><td>            [<span class="hljs-string">'name'</span>, InputArgument::REQUIRED, <span class="hljs-string">'The name of the command.'</span>],</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        ];</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="54"></td><td>     * Get the default namespace for the class.</td><tr><td class="linenos" data-pseudo-content="55"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="56"></td><td>     * <span class="hljs-doctag">@param</span>  string  $rootNamespace</td><tr><td class="linenos" data-pseudo-content="57"></td><td>     * <span class="hljs-doctag">@return</span> string</td><tr><td class="linenos" data-pseudo-content="58"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDefaultNamespace</span><span class="hljs-params">($rootNamespace)</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-keyword">return</span> $rootNamespace.<span class="hljs-string">'\Transformers'</span>;</td><tr><td class="linenos" data-pseudo-content="62"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="63"></td><td>}</td></table></code></pre>
<p>Note the <code>getDefaultNamespace()</code> method. If your class will live directly under the <code>app</code> folder this is not necessary. Otherwise, it needs to return the root namespace, with the folder structure you want after it. Here my class will live under <code>app\Transformers</code>, so I’ve set it to reflect that.</p>
<p>Also, note the <code>getStub()</code> method. This tells Artisan that it should use the specified stub file as the basis for our class. Below you’ll find the stub file I used for my transformer:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">DummyNamespace</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">MyPackage</span>\<span class="hljs-title">Transformers</span>\<span class="hljs-title">BaseTransformer</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DummyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTransformer</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transform</span><span class="hljs-params">(Model $model)</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">'id'</span>            =&gt; (int) $model-&gt;id,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        ];</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>Note that the <code>DummyNamespace</code> and <code>DummyClass</code> fields will be overwritten with the correct values.</p>
<p>Once this Artisan command is registered in the usual way, you can then run it as follows:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan make:transformer Example</code></pre>
<p>And it will generate a boilerplate class something like this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Transformers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">MyPackage</span>\<span class="hljs-title">Transformers</span>\<span class="hljs-title">BaseTransformer</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTransformer</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transform</span><span class="hljs-params">(Model $model)</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">'id'</span>            =&gt; (int) $model-&gt;id,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        ];</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>You can then replace the model with your own one as necessary, and add any further content to this class.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using UUIDs as primary keys with Laravel and PostgreSQL]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/12/29/using-uuids-as-primary-keys-with-laravel-and-postgresql/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/12/29/using-uuids-as-primary-keys-with-laravel-and-postgresql/">
        </link>
        <updated>2017-12-29T18:01:04Z</updated>
        <summary type="html"><![CDATA[<p>For many applications, using UUID’s as the primary keys on a database table can make a lot of sense. For mobile or offline apps, in particular, they mean you can create new objects locally and assign them a primary key without having to worry about it colliding with another object that was created in the meantime once it gets synchronised to the server. Also, they are less informative to nefarious users - an autoincrementing value in a URL tells a user that that value is the primary key, and means the app may potentially allow gathering of information via user enumeration (eg calling <code>/api/v1/users/1</code>, <code>/api/v1/users/2</code> etc).</p>
<p>It’s fairly straightforward to use UUID’s as primary keys on your models when using PostgreSQL. First, you need to set up your migrations to use the <code>uuid-ossp</code> extension and set up the <code>id</code> field as both a UUID and the primary key. You also need to set a default value manually so that if it’s left empty it will generate a UUID for it.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>DB::statement(<span class="hljs-string">'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Schema::create(<span class="hljs-string">'items'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    $table-&gt;uuid(<span class="hljs-string">'id'</span>)-&gt;primary();</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    $table-&gt;text(<span class="hljs-string">'text'</span>)-&gt;nullable();</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="6"></td><td>});</td><tr><td class="linenos" data-pseudo-content="7"></td><td>DB::statement(<span class="hljs-string">'ALTER TABLE items ALTER COLUMN id SET DEFAULT uuid_generate_v4();'</span>);</td></table></code></pre>
<p>Then, in the model definition, you need to tell Laravel to cast the <code>id</code> field to a string, and explicitly set the primary key to <code>id</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">protected</span> $casts = [</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'id'</span> =&gt; <span class="hljs-string">'string'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">protected</span> $primaryKey = <span class="hljs-string">"id"</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>}</td></table></code></pre>
<p>Once this is done, the model should generate the primary keys for you as usual, except as UUID’s. If your application needs to accept UUID primary keys that were created offline, such as in a mobile app, you will probably want to add the <code>id</code> field to the <code>$fillable</code> array on the model to allow this.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Full text search with Laravel and PostgreSQL]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/12/02/full-text-search-with-laravel-and-postgresql/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/12/02/full-text-search-with-laravel-and-postgresql/">
        </link>
        <updated>2017-12-02T23:30:44Z</updated>
        <summary type="html"><![CDATA[<p>I’ve touched on <a href="/blog/2017/10/03/simple-fuzzy-search-with-laravel-and-postgresql/">using PostgreSQL to implement fuzzy search with Laravel before</a>, but another type of search that PostgreSQL can handle fairly easily is full-text search. Here I’ll show you how to use it in a Laravel application.</p>
<p>An obvious use case for this kind of search is a personal blogging engine. It’s unlikely something like this is going to have enough content for it to be worth using a heavier solution like Elasticsearch, but a <code>LIKE</code> or <code>ILIKE</code> statement doesn’t really cut it either, so Postgres’s full text search is a good fit. Below you’ll see a Laravel migration for the blog posts table:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePostsTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'posts'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'title'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;datetime(<span class="hljs-string">'pub_date'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            $table-&gt;text(<span class="hljs-string">'text'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            $table-&gt;string(<span class="hljs-string">'slug'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $table-&gt;integer(<span class="hljs-string">'author_id'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        DB::statement(<span class="hljs-string">"ALTER TABLE posts ADD COLUMN searchtext TSVECTOR"</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::statement(<span class="hljs-string">"UPDATE posts SET searchtext = to_tsvector('english', title || '' || text)"</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        DB::statement(<span class="hljs-string">"CREATE INDEX searchtext_gin ON posts USING GIN(searchtext)"</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        DB::statement(<span class="hljs-string">"CREATE TRIGGER ts_searchtext BEFORE INSERT OR UPDATE ON posts FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('searchtext', 'pg_catalog.english', 'title', 'text')"</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        DB::statement(<span class="hljs-string">"DROP TRIGGER IF EXISTS tsvector_update_trigger ON posts"</span>);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        DB::statement(<span class="hljs-string">"DROP INDEX IF EXISTS searchtext_gin"</span>);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        DB::statement(<span class="hljs-string">"ALTER TABLE posts DROP COLUMN searchtext"</span>);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        Schema::dropIfExists(<span class="hljs-string">'posts'</span>);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="43"></td><td>}</td></table></code></pre>
<p>Note that after we create the basic layout of our <code>posts</code> table, we then have to drop down to raw DB statements to achieve the next steps:</p>
<ul>
<li>We add a column called <code>searchtext</code> with a type of <code>TSVECTOR</code> (unfortunately Laravel doesn’t have a convenient method to create this column type, so we need to do it with a raw statement). This column will hold our searchable document.</li>
<li>We use the <code>to_tsvector()</code> method to generate a document on each row that combines the title and text fields and store it in the <code>searchtext</code> column. Note also that we specify the language as the first argument. This is because Postgres’s full text search understands so-called “stopwords”, which are words that are so common as to not be worth bothering with at all, such as “the” - these will obviously differ between languages, so it’s prudent to explicitly state this so Postgres knows what stopwords to expect.</li>
<li>We create a <code>GIN</code> index on the <code>posts</code> table using our new <code>searchtext</code> column.</li>
<li>Finally we create a trigger which, when the table is amended, regenerates the search text.</li>
</ul>
<p>With that done, we can now look at actually performing a full-text search. To facilitate easy re-use, we’ll create a local scope on our <code>Post</code> model. If you haven’t used scopes in Laravel before, they essentially allow you to break queries into reusable chunks. In this case, we expect our scope to receive two arguments, the query instance (which is passed through automatically), and the search text:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">protected</span> $fillable = [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-string">'title'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-string">'pub_date'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-string">'text'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-string">'slug'</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-string">'author_id'</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scopeSearch</span><span class="hljs-params">($query, $search)</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">if</span> (!$search) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-keyword">return</span> $query;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">return</span> $query-&gt;whereRaw(<span class="hljs-string">'searchtext @@ to_tsquery(\'english\', ?)'</span>, [$search])</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            -&gt;orderByRaw(<span class="hljs-string">'ts_rank(searchtext, to_tsquery(\'english\', ?)) DESC'</span>, [$search]);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}</td></table></code></pre>
<p>If <code>$search</code> is empty, we just return the query object as is. Otherwise, we first of all construct a <code>WHERE</code> clause that matches our search text against the <code>searchtext</code> column. Note the syntax used here:</p>
<pre><code class="hljs lang-sql singleline">searchtext @@ to_tsquery('english', 'foo')</code></pre>
<p>We use the <code>to_tsquery()</code> method to match our text against our search document. As before, note that we specify the language.</p>
<p>Finally, we specify an order - we want the highest ranked matches to appear first, and this section of the query does that:</p>
<pre><code class="hljs lang-sql singleline">ts_rank(searchtext, to_tsquery('english', 'foo')) DESC</code></pre>
<p>Here we use <code>ts_rank()</code> to ensure we get our results in the appropriate order. Note that for both queries, we passed the arguments through as parameterized queries, rather than constructing a raw string - we have to watch out for SQL injection when we’re writing raw queries, but we can use PDO’s parameterized queries from Eloquent in a raw statement, which makes things a bit easier.</p>
<p>Now we can call our new search scope as follows:</p>
<pre><code class="hljs lang-php singleline">$posts = Post::search($search)-&gt;get();</code></pre>
<p>Because the scope receives and returns a query builder instance, you can continue to add the rest of your query, or paginate it, as necessary:</p>
<pre><code class="hljs lang-php singleline">$posts = Post::search($search)-&gt;where(<span class="hljs-string">'draft'</span>, <span class="hljs-keyword">false</span>)-&gt;simplePaginate(<span class="hljs-number">5</span>);</code></pre>
<p>If you’re working in a language that makes heavy use of accents, such as French, you might also want to install the <code>unaccent</code> extension (you can do this in the migration with <code>CREATE EXTENSION unaccent</code>). Then, any time we call <code>to_tsvector()</code>, you should pass any strings through the <code>unaccent()</code> method to strip out the accents.</p>
<h2 id="do-we-need-the-migrations-">Do we need the migrations?</h2>
<p>Technically, we could do without the additional changes to the database structure - we could create a document on the fly inside a subquery and use that to query against, which would look something like this in SQL:</p>
<pre><code class="hljs lang-sql"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">SELECT</span> *</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">FROM</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>  (<span class="hljs-keyword">SELECT</span> *,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>          to_tsvector(<span class="hljs-string">'english'</span>, posts.title) || to_tsvector(<span class="hljs-string">'english'</span>, posts.text) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">document</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>   <span class="hljs-keyword">FROM</span> <span class="hljs-string">"posts"</span>) <span class="hljs-keyword">search</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">WHERE</span> search.document @@ to_tsquery(<span class="hljs-string">'Redis'</span>)</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ts_rank(search.document, to_tsquery(<span class="hljs-string">'english'</span>, <span class="hljs-string">'Redis'</span>)) <span class="hljs-keyword">DESC</span>;</td></table></code></pre>
<p>However, the performance is likely to be significantly worse using this approach as it has to recreate the document, and doesn’t have an existing index to query against. It’s also a pig to write something like this with an ORM.</p>
<p>I’m currently working on a more generic solution for implementing full text search with Postgres and Laravel, however so far it looks like that solution will not only be considerably more complex than this (consistently producing a suitable query for unknown data is rather fiddly), but you can’t create a column for the vector ahead of time, meaning the query will be slower. This approach, while it requires more work than simply installing a package, is not terribly hard to implement on a per-model basis and is easy to customise for your use case.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a postcode lookup client with HTTPlug and PHPSpec]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/11/28/building-a-postcode-lookup-client-with-httplug-and-phpspec/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/11/28/building-a-postcode-lookup-client-with-httplug-and-phpspec/">
        </link>
        <updated>2017-11-28T11:40:39Z</updated>
        <summary type="html"><![CDATA[<p>While PHPUnit is my normal go-to PHP testing framework, for some applications I find <a href="http://www.phpspec.net/en/stable/">PHPSpec</a> superior, in particular REST API clients. I’ve found that it makes for a better flow when doing test-driven development, because it makes it very natural to write a test first, then run it, then make the test pass.</p>
<p>In this tutorial I’ll show you how to build a lookup API client for UK postcodes. In the process of doing so, we’ll use PHPSpec to drive our development process. We’ll also use <a href="http://docs.php-http.org/en/latest/httplug/tutorial.html">HTTPlug</a> as our underlying HTTP library. The advantage of this over using something like Guzzle is that we give library users the freedom to choose the HTTP library they feel is most appropriate to their situation.</p>
<h2 id="background">Background</h2>
<p>If you’re unfamiliar with it, the UK postcode system is our equivalent of a zip code in the US, but with two major differences:</p>
<ul>
<li>The codes themselves are alphanumeric instead of numeric, with the first part including one or two letters usually (but not always) derived from the nearest large town or city (eg L for Liverpool, B for Birmingham, OX for Oxford), or for London, based on the part of the city (eg NW for the north-west of London)</li>
<li>A full postcode is in two parts (eg NW1 8TQ), and the first part narrows the location down to a similar area to a US-style zip code, while the second part usually narrows it down to a street (although sometimes large organisations that receive a lot of mail will have a postcode to themselves).</li>
</ul>
<p>This means that if you have someone’s postcode and house name or address, you can use those details to look up the rest of their address details. This obviously makes it easier for users to fill out a form, such as when placing an order on an e-commerce site - you can just request those two details and then autofill the rest from them.</p>
<p>Unfortunately, it’s not quite that simple. The data is owned by Royal Mail, and they charge through the nose for access to the raw data, which places this data well outside the budgets of many web app developers. Fortunately, <a href="https://ideal-postcodes.co.uk/">Ideal Postcodes</a> offer a REST API for querying this data. It’s not free, but at 2.5p per request it’s not going to break the bank unless used excessively, and they offer some dummy postcodes that are free to query, which is perfectly fine for testing.</p>
<p>For those of you outside the UK, this may not be of much immediate use, but the underlying principles will still be useful, and you can probably build a similar client for your own nation’s postal code system. For instance, there’s a <a href="https://www.zipcodeapi.com/API">Zipcode API</a> that those of you in the US can use, and if you understand what’s going on here it shouldn’t be hard to adapt it to work with that. If you do produce a similar client for your country’s postal code system, submit a pull request to update the README with a link to it and I’ll include it.</p>
<h2 id="setting-up">Setting up</h2>
<p>First we’ll create a <code>composer.json</code> to specify our dependencies:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"matthewbdaly/postcode-client"</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attr">"description"</span>: <span class="hljs-string">"A postcode lookup client."</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"library"</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-attr">"keywords"</span>: [<span class="hljs-string">"postcode"</span>],</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attr">"require"</span>: {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-attr">"psr/http-message"</span>: <span class="hljs-string">"^1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-attr">"php-http/client-implementation"</span>: <span class="hljs-string">"^1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-attr">"php-http/httplug"</span>: <span class="hljs-string">"^1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-attr">"php-http/message-factory"</span>: <span class="hljs-string">"^1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-attr">"php-http/discovery"</span>: <span class="hljs-string">"^1.0"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attr">"require-dev"</span>: {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-attr">"psy/psysh"</span>: <span class="hljs-string">"^0.8.0"</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-attr">"phpspec/phpspec"</span>: <span class="hljs-string">"^3.2"</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-attr">"squizlabs/php_codesniffer"</span>: <span class="hljs-string">"^2.7"</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-attr">"php-http/mock-client"</span>: <span class="hljs-string">"^1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-attr">"php-http/message"</span>: <span class="hljs-string">"^1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-attr">"guzzlehttp/psr7"</span>: <span class="hljs-string">"^1.0"</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attr">"license"</span>: <span class="hljs-string">"MIT"</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attr">"authors"</span>: [</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        {</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Matthew Daly"</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"matthewbdaly@gmail.com"</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    ],</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attr">"autoload"</span>: {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-attr">"psr-4"</span>: {</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-attr">"Matthewbdaly\\Postcode\\"</span>: <span class="hljs-string">"src/"</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>}</td></table></code></pre>
<p>Note that we don’t install an actual HTTPlug client, other than the mock one, which is only useful for testing. This is deliberate - we’re giving developers working with this library the choice of working with whatever HTTP client they see fit. We do use the Guzzle PSR7 library, but that’s just for the PSR7 library.</p>
<p>Then we install our dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ composer install</code></pre>
<p>We also need to tell PHPSpec what our namespace will be. Save this as <code>phpspec.yml</code>:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-symbol">suites:</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-symbol">    test_suite:</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-symbol">        namespace:</span> Matthewbdaly\Postcode</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-symbol">        psr4_prefix:</span> Matthewbdaly\Postcode</td></table></code></pre>
<p>Don’t forget to update the namespace in both files to whatever you’re using, which should have a vendor name and a package name.</p>
<p>With that done, it’s time to introduce the next component.</p>
<h2 id="introducing-httplug">Introducing HTTPlug</h2>
<p>In the past I’ve usually used either Curl or Guzzle to carry out HTTP requests. However, the problem with this approach is that you’re forcing whoever uses your library to use whatever HTTP client, and whatever version of that client, that you deem appropriate. If they’re also using another library that someone else has written and they made different choices, you could have problems.</p>
<p>HTTPlug is an excellent way of solving this problem. By requiring only an interface and not a concrete implementation, using HTTPlug means that you can specify that the consumer of the library must provide a suitable implementation of that library, but leave the choice of implementation up to them. This means that they can choose whatever implementation best fits their use case. There are <a href="http://docs.php-http.org/en/latest/clients.html">adapters for many different clients</a>, so it’s unlikely that they won’t be able to find one that meets their needs.</p>
<p>In addition, HTTPlug provides the means to automatically determine what HTTP client to use, so that if one is not explicitly provided, it can be resolved without any action on the part of the developer. As long as a suitable HTTP adapter is installed, it will be used.</p>
<h2 id="getting-started">Getting started</h2>
<p>One advantage of PHPSpec is that it will automatically generate much of the boilerplate for our client and specs. To create our client spec, run this command:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec desc Matthewbdaly/Postcode/Client</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Specification <span class="hljs-keyword">for</span> Matthewbdaly\Postcode\Client created <span class="hljs-keyword">in</span> /home/matthew/Projects/postcode-client/spec/ClientSpec.php.</td></table></code></pre>
<p>Now that we have a spec for our client, we can generate the client itself:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                    </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  11  - it is initializable</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      class Matthewbdaly\Postcode\Client does not exist.</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                                      100%                                       1</td><tr><td class="linenos" data-pseudo-content="7"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="8"></td><td>1 example (1 broken)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>14ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Do you want me to create `Matthewbdaly\Postcode\Client` <span class="hljs-keyword">for</span> you?              </td><tr><td class="linenos" data-pseudo-content="13"></td><td>                                                                         [Y/n] </td><tr><td class="linenos" data-pseudo-content="14"></td><td>y</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Class Matthewbdaly\Postcode\Client created <span class="hljs-keyword">in</span> /home/matthew/Projects/postcode-client/src/Client.php.</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                                      100%                                       1</td><tr><td class="linenos" data-pseudo-content="18"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="19"></td><td>1 example (1 passed)</td><tr><td class="linenos" data-pseudo-content="20"></td><td>16ms</td></table></code></pre>
<p>You will need to enter <code>Y</code> when prompted. We now have an empty class for our client.</p>
<p>Next, we need to make sure that the constructor for our client accepts two parameters:</p>
<ul>
<li>The HTTP client</li>
<li>A message factory instance, which is used to create the request</li>
</ul>
<p>Amend <code>spec/ClientSpec.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">spec</span>\<span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Client</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">PhpSpec</span>\<span class="hljs-title">ObjectBehavior</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Prophecy</span>\<span class="hljs-title">Argument</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Http</span>\<span class="hljs-title">Client</span>\<span class="hljs-title">HttpClient</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">MessageFactory</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientSpec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ObjectBehavior</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">let</span> <span class="hljs-params">(HttpClient $client, MessageFactory $messageFactory)</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;beConstructedWith($client, $messageFactory);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">it_is_initializable</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">$this</span>-&gt;shouldHaveType(Client::class);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td>}</td></table></code></pre>
<p>Note the use of the <code>let()</code> method here. This lets us specify how the object is constructed, with the <code>beConstructedWith()</code> method. Also, note that <code>$this</code> refers not to the test, but to the object being tested - this takes a bit of getting used to if you’re used to working with PHPUnit.</p>
<p>Also, note that the objects passed through are not actual instances of those objects - instead they are mocks created automatically by PHPSpec. This makes mocking extremely easy, and you can easily set up your own expectations on those mock objects in the test. If you want to use a real object, you can instantiate it in the spec as usual. If we need any other mocks, we can typehint them in our method in exactly the same way.</p>
<p>If we once again use <code>vendor/bin/phpspec run</code> we can now generate a constructor:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                    </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  18  - it is initializable</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      method Matthewbdaly\Postcode\Client::__construct not found.</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                                      100%                                       1</td><tr><td class="linenos" data-pseudo-content="7"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="8"></td><td>1 example (1 broken)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>281ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Do you want me to create `Matthewbdaly\Postcode\Client::__construct()` <span class="hljs-keyword">for</span>    </td><tr><td class="linenos" data-pseudo-content="13"></td><td>  you?                                                                          </td><tr><td class="linenos" data-pseudo-content="14"></td><td>                                                                         [Y/n] </td><tr><td class="linenos" data-pseudo-content="15"></td><td>y</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Method Matthewbdaly\Postcode\Client::__construct() has been created.</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>                                      100%                                       1</td><tr><td class="linenos" data-pseudo-content="19"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="20"></td><td>1 example (1 passed)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>50ms</td></table></code></pre>
<p>This will only create a placeholder for the constructor. You need to populate it yourself, so update <code>src/Client.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Http</span>\<span class="hljs-title">Client</span>\<span class="hljs-title">HttpClient</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Http</span>\<span class="hljs-title">Discovery</span>\<span class="hljs-title">HttpClientDiscovery</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">MessageFactory</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Http</span>\<span class="hljs-title">Discovery</span>\<span class="hljs-title">MessageFactoryDiscovery</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(HttpClient $client = null, MessageFactory $messageFactory = null)</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;client = $client ?: HttpClientDiscovery::find();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;messageFactory = $messageFactory ?: MessageFactoryDiscovery::find();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>}</td></table></code></pre>
<p>A little explanation is called for here. We need two arguments in our construct:</p>
<ul>
<li>An instance of <code>Http\Client\HttpClient</code> to send the request</li>
<li>An instance of <code>Http\Message\MessageFactory</code> to create the request</li>
</ul>
<p>However, we don’t want to force the user to create one. Therefore if they are not set, we use <code>Http\Discovery\HttpClientDiscovery</code> and <code>Http\Discovery\MessageFactoryDiscovery</code> to create them for us.</p>
<p>If we re-run PHPSpec, it should now pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>                                      100%                                       1</td><tr><td class="linenos" data-pseudo-content="3"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>1 example (1 passed)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>31ms</td></table></code></pre>
<p>Next, we want to have a method for retrieving the endpoint. Add the following method to <code>spec/ClientSpec.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">it_can_retrieve_the_base_url</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">$this</span>-&gt;getBaseUrl()-&gt;shouldReturn(<span class="hljs-string">'https://api.ideal-postcodes.co.uk/v1/postcodes/'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    }</td></table></code></pre>
<p>Here we’re asserting that fetching the base URL returns the given result. Note how much simpler and more intuitive this syntax is than PHPUnit would be:</p>
<pre><code class="hljs lang-php singleline"><span class="hljs-keyword">$this</span>-&gt;assertEquals(<span class="hljs-string">'https://api.ideal-postcodes.co.uk/v1/postcodes/'</span>, $client-&gt;getBaseUrl());</code></pre>
<p>Running the tests again should prompt us to create the boilerplate for the new method:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  23  - it can retrieve the base url</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      method Matthewbdaly\Postcode\Client::getBaseUrl not found.</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                  50%                                     50%                    2</td><tr><td class="linenos" data-pseudo-content="7"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="8"></td><td>2 examples (1 passed, 1 broken)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>40ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Do you want me to create `Matthewbdaly\Postcode\Client::getBaseUrl()` <span class="hljs-keyword">for</span>     </td><tr><td class="linenos" data-pseudo-content="13"></td><td>  you?                                                                          </td><tr><td class="linenos" data-pseudo-content="14"></td><td>                                                                         [Y/n] </td><tr><td class="linenos" data-pseudo-content="15"></td><td>y</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Method Matthewbdaly\Postcode\Client::getBaseUrl() has been created.</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="19"></td><td>  23  - it can retrieve the base url</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      expected <span class="hljs-string">"https://api.ideal-postcod..."</span>, but got null.</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>                  50%                                     50%                    2</td><tr><td class="linenos" data-pseudo-content="23"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="24"></td><td>2 examples (1 passed, 1 failed)</td><tr><td class="linenos" data-pseudo-content="25"></td><td>72ms</td></table></code></pre>
<p>Now we need to update that method to work as expected:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">protected</span> $baseUrl = <span class="hljs-string">'https://api.ideal-postcodes.co.uk/v1/postcodes/'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>     ...</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBaseUrl</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;baseUrl;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td></table></code></pre>
<p>This should make the tests pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>                                      100%                                       2</td><tr><td class="linenos" data-pseudo-content="3"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>2 examples (2 passed)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>34ms</td></table></code></pre>
<p>Next, we need to be able to get and set the API key. Add the following to <code>spec/ClientSpec.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">it_can_get_and_set_the_key</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">$this</span>-&gt;getKey()-&gt;shouldReturn(<span class="hljs-keyword">null</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setKey(<span class="hljs-string">'foo'</span>)-&gt;shouldReturn(<span class="hljs-keyword">$this</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">$this</span>-&gt;getKey()-&gt;shouldReturn(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }</td></table></code></pre>
<p>Note that we expect <code>$this-&gt;setKey(&#39;foo&#39;)</code> to return <code>$this</code>. This is an example of a <em>fluent</em> interface - by returning an instance of the object, it enables methods to be chained, eg <code>$client-&gt;setKey(&#39;foo&#39;)-&gt;get()</code>. Obviously it won’t work for anything that has to return a value, but it’s a useful way of making your classes more intuitive to use.</p>
<p>Next, run the tests again and agree to the prompts as before:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  28  - it can get and <span class="hljs-built_in">set</span> the key</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      method Matthewbdaly\Postcode\Client::getKey not found.</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                         66%                                     33%             3</td><tr><td class="linenos" data-pseudo-content="7"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="8"></td><td>3 examples (2 passed, 1 broken)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>51ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  Do you want me to create `Matthewbdaly\Postcode\Client::getKey()` <span class="hljs-keyword">for</span> you?    </td><tr><td class="linenos" data-pseudo-content="13"></td><td>                                                                         [Y/n] </td><tr><td class="linenos" data-pseudo-content="14"></td><td>y</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Method Matthewbdaly\Postcode\Client::getKey() has been created.</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="18"></td><td>  28  - it can get and <span class="hljs-built_in">set</span> the key</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      method Matthewbdaly\Postcode\Client::<span class="hljs-built_in">set</span>Key not found.</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>                         66%                                     33%             3</td><tr><td class="linenos" data-pseudo-content="22"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="23"></td><td>3 examples (2 passed, 1 broken)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>43ms</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>  Do you want me to create `Matthewbdaly\Postcode\Client::<span class="hljs-built_in">set</span>Key()` <span class="hljs-keyword">for</span> you?    </td><tr><td class="linenos" data-pseudo-content="28"></td><td>                                                                         [Y/n] </td><tr><td class="linenos" data-pseudo-content="29"></td><td>y</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  Method Matthewbdaly\Postcode\Client::<span class="hljs-built_in">set</span>Key() has been created.</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="33"></td><td>  28  - it can get and <span class="hljs-built_in">set</span> the key</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      expected [obj:Matthewbdaly\Postcode\Client], but got null.</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>                         66%                                     33%             3</td><tr><td class="linenos" data-pseudo-content="37"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="38"></td><td>3 examples (2 passed, 1 failed)</td><tr><td class="linenos" data-pseudo-content="39"></td><td>52ms</td></table></code></pre>
<p>Next, add our getter and setter for the key, as well as declaring the property <code>$key</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">protected</span> $key;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKey</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;key;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setKey</span><span class="hljs-params">(string $key)</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">$this</span>-&gt;key = $key;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }</td></table></code></pre>
<p>That should make the tests pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>                                      100%                                       3</td><tr><td class="linenos" data-pseudo-content="3"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>3 examples (3 passed)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>38ms</td></table></code></pre>
<p>With that done, our final task is to be able to handle sending requests. Add the following imports at the top of <code>spec/ClientSpec.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">RequestInterface</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ResponseInterface</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">StreamInterface</span>;</td></table></code></pre>
<p>And add the following method at the bottom of the same file:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">it_can_send_the_request</span><span class="hljs-params">(HttpClient $client, MessageFactory $messageFactory, RequestInterface $request, ResponseInterface $response, StreamInterface $stream)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-keyword">$this</span>-&gt;beConstructedWith($client, $messageFactory);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setKey(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        $data = json_encode([</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'result'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="7"></td><td>                <span class="hljs-string">"postcode"</span> =&gt; <span class="hljs-string">"SW1A 2AA"</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>                <span class="hljs-string">"postcode_inward"</span> =&gt; <span class="hljs-string">"2AA"</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>                <span class="hljs-string">"postcode_outward"</span> =&gt; <span class="hljs-string">"SW1A"</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                <span class="hljs-string">"post_town"</span> =&gt; <span class="hljs-string">"LONDON"</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                <span class="hljs-string">"dependant_locality"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                <span class="hljs-string">"double_dependant_locality"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                <span class="hljs-string">"thoroughfare"</span> =&gt; <span class="hljs-string">"Downing Street"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                <span class="hljs-string">"dependant_thoroughfare"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                <span class="hljs-string">"building_number"</span> =&gt; <span class="hljs-string">"10"</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                <span class="hljs-string">"building_name"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>                <span class="hljs-string">"sub_building_name"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>                <span class="hljs-string">"po_box"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>                <span class="hljs-string">"department_name"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>                <span class="hljs-string">"organisation_name"</span> =&gt; <span class="hljs-string">"Prime Minister &amp; First Lord Of The Treasury"</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>                <span class="hljs-string">"udprn"</span> =&gt; <span class="hljs-number">23747771</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>                <span class="hljs-string">"umprn"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>                <span class="hljs-string">"postcode_type"</span> =&gt; <span class="hljs-string">"L"</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>                <span class="hljs-string">"su_organisation_indicator"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>                <span class="hljs-string">"delivery_point_suffix"</span> =&gt; <span class="hljs-string">"1A"</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                <span class="hljs-string">"line_1"</span> =&gt; <span class="hljs-string">"Prime Minister &amp; First Lord Of The Treasury"</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>                <span class="hljs-string">"line_2"</span> =&gt; <span class="hljs-string">"10 Downing Street"</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>                <span class="hljs-string">"line_3"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>                <span class="hljs-string">"premise"</span> =&gt; <span class="hljs-string">"10"</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>                <span class="hljs-string">"longitude"</span> =&gt; <span class="hljs-number">-0.127695242183412</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>                <span class="hljs-string">"latitude"</span> =&gt; <span class="hljs-number">51.5035398826274</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>                <span class="hljs-string">"eastings"</span> =&gt; <span class="hljs-number">530047</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                <span class="hljs-string">"northings"</span> =&gt; <span class="hljs-number">179951</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>                <span class="hljs-string">"country"</span> =&gt; <span class="hljs-string">"England"</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>                <span class="hljs-string">"traditional_county"</span> =&gt; <span class="hljs-string">"Greater London"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>                <span class="hljs-string">"administrative_county"</span> =&gt; <span class="hljs-string">""</span>,</td><tr><td class="linenos" data-pseudo-content="37"></td><td>                <span class="hljs-string">"postal_county"</span> =&gt; <span class="hljs-string">"London"</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>                <span class="hljs-string">"county"</span> =&gt; <span class="hljs-string">"London"</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>            ]</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        $messageFactory-&gt;createRequest(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'https://api.ideal-postcodes.co.uk/v1/postcodes/SW1A%202AA?api_key=foo'</span>, [], <span class="hljs-keyword">null</span>, <span class="hljs-string">'1.1'</span>)-&gt;willReturn($request);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        $client-&gt;sendRequest($request)-&gt;willReturn($response);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        $response-&gt;getStatusCode()-&gt;willReturn(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        $response-&gt;getBody()-&gt;willReturn($stream);</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        $stream-&gt;getContents()-&gt;willReturn($data);</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'SW1A 2AA'</span>)-&gt;shouldBeLike(json_decode($data, <span class="hljs-keyword">true</span>));</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    }</td></table></code></pre>
<p>This test is by far the biggest so far, so it merits some degree of explanation.</p>
<p>Note that we don’t make a real HTTP request against the API. This may sound strange, but bear with me. We have no control whatsoever over that API, and it could in theory become inaccessible or be subject to breaking changes at any time. We also don’t want to be shelling out for a paid service just to test our API client works. All we can do is test that our implementation will send the request we expect it to send - we don’t want our test suite reporting a bug when the API goes down.</p>
<p>We therefore typehint not just the dependencies for the constructor, but a request, response and stream instance. We mock our our responses from those instances using the <code>willReturn()</code> method, so we have complete control over what we pass to our client. That way we can return any appropriate response or throw any exception we deem fit to test the behaviour under those circumstances. For the message factory, we specify what arguments it should receive to create the request, and return our mocked-out request object.</p>
<p>Also, note we use <code>shouldBeLike()</code> to verify the response - this is effectively using the <code>==</code> operator, whereas <code>shouldBe()</code> uses the <code>===</code> operator, making it stricter.</p>
<p>Let’s run the tests, and don’t forget the prompt:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-number">38</span>  - it can send the request</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      method Matthewbdaly\Postcode\Client::get not found.</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                            <span class="hljs-number">75</span>%                                     <span class="hljs-number">25</span>%          <span class="hljs-number">4</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-number">1</span> specs</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-number">4</span> examples (<span class="hljs-number">3</span> passed, <span class="hljs-number">1</span> broken)</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-number">55</span>ms</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-keyword">Do</span> you want me to create `Matthewbdaly\Postcode\Client::get()` <span class="hljs-keyword">for</span> you?       </td><tr><td class="linenos" data-pseudo-content="13"></td><td>                                                                         [Y/n] </td><tr><td class="linenos" data-pseudo-content="14"></td><td>y</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  Method Matthewbdaly\Postcode\Client::get() has been created.</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-number">38</span>  - it can send the request</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      expected [<span class="hljs-keyword">array</span>:<span class="hljs-number">1</span>], but got <span class="hljs-keyword">null</span>.</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>                            <span class="hljs-number">75</span>%                                     <span class="hljs-number">25</span>%          <span class="hljs-number">4</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td><span class="hljs-number">1</span> specs</td><tr><td class="linenos" data-pseudo-content="23"></td><td><span class="hljs-number">4</span> examples (<span class="hljs-number">3</span> passed, <span class="hljs-number">1</span> failed)</td><tr><td class="linenos" data-pseudo-content="24"></td><td><span class="hljs-number">56</span>ms</td></table></code></pre>
<p>Now we can implement the <code>get()</code> method:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">(string $postcode)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        $url = <span class="hljs-keyword">$this</span>-&gt;getBaseUrl() . rawurlencode($postcode) . <span class="hljs-string">'?'</span> . http_build_query([</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'api_key'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;getKey()</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        $request = <span class="hljs-keyword">$this</span>-&gt;messageFactory-&gt;createRequest(</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'GET'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            $url,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            [],</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">null</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'1.1'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;client-&gt;sendRequest($request);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $data = json_decode($response-&gt;getBody()-&gt;getContents(), <span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">return</span> $data;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td></table></code></pre>
<p>We first build up our URL, before using the message factory to create a request object. We then pass the built request to our client to send, before decoding the response into the format we want.</p>
<p>This should make our tests pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>                                      100%                                       4</td><tr><td class="linenos" data-pseudo-content="3"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>4 examples (4 passed)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>307ms</td></table></code></pre>
<p>Our client now works, but there are a couple of situations we need to account for. First, the API will raise a 402 if you make a request for a real postcode without having paid. We need to catch this and throw an exception. Add this to <code>spec/ClientSpec.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">PaymentRequired</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">it_throws_an_exception_if_payment_required</span><span class="hljs-params">(HttpClient $client, MessageFactory $messageFactory, RequestInterface $request, ResponseInterface $response, StreamInterface $stream)</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">$this</span>-&gt;beConstructedWith($client, $messageFactory);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setKey(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        $messageFactory-&gt;createRequest(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'https://api.ideal-postcodes.co.uk/v1/postcodes/SW1A%202AA?api_key=foo'</span>, [], <span class="hljs-keyword">null</span>, <span class="hljs-string">'1.1'</span>)-&gt;willReturn($request);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $client-&gt;sendRequest($request)-&gt;willReturn($response);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        $response-&gt;getStatusCode()-&gt;willReturn(<span class="hljs-number">402</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">$this</span>-&gt;shouldThrow(PaymentRequired::class)-&gt;duringGet(<span class="hljs-string">'SW1A 2AA'</span>);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    }</td></table></code></pre>
<p>With that done, run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                      </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  87  - it throws an exception <span class="hljs-keyword">if</span> payment required</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      expected exception of class <span class="hljs-string">"Matthewbdaly\Postcode\Exc..."</span>, but got</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      [exc:Prophecy\Exception\Call\UnexpectedCallException(<span class="hljs-string">"Method call:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        - getBody()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      on Double\ResponseInterface\P15 was not expected, expected calls were:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        - getStatusCode()"</span>)].</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>                              80%                                     20%        5</td><tr><td class="linenos" data-pseudo-content="11"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="12"></td><td>5 examples (4 passed, 1 failed)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>130ms</td></table></code></pre>
<p>Let’s amend the client to throw this exception:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">PaymentRequired</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">(string $postcode)</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $url = <span class="hljs-keyword">$this</span>-&gt;getBaseUrl() . rawurlencode($postcode) . <span class="hljs-string">'?'</span> . http_build_query([</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'api_key'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;getKey()</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $request = <span class="hljs-keyword">$this</span>-&gt;messageFactory-&gt;createRequest(</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'GET'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            $url,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            [],</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-keyword">null</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'1.1'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;client-&gt;sendRequest($request);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">if</span> ($response-&gt;getStatusCode() == <span class="hljs-number">402</span>) {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> PaymentRequired;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $data = json_decode($response-&gt;getBody()-&gt;getContents(), <span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">return</span> $data;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td></table></code></pre>
<p>And let’s re-run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                    </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  87  - it throws an exception <span class="hljs-keyword">if</span> payment required</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      expected exception of class <span class="hljs-string">"Matthewbdaly\Postcode\Exc..."</span>, but got [obj:Error] with the</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      message: <span class="hljs-string">"Class 'Matthewbdaly\Postcode\Exceptions\PaymentRequired' not found"</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>                              80%                                     20%        5</td><tr><td class="linenos" data-pseudo-content="8"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="9"></td><td>5 examples (4 passed, 1 failed)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>389ms</td></table></code></pre>
<p>It fails now because the exception doesn’t exist. Let’s create it at <code>src/Exceptions/PaymentRequired.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Exceptions</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentRequired</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">Exception</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td></table></code></pre>
<p>That should be enough to make our tests pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>                                      100%                                       5</td><tr><td class="linenos" data-pseudo-content="3"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>5 examples (5 passed)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>89ms</td></table></code></pre>
<p>We also need to raise an exception when the postcode is not found, which raises a 404 error. Add the following spec:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">PostcodeNotFound</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">it_throws_an_exception_if_postcode_not_found</span><span class="hljs-params">(HttpClient $client, MessageFactory $messageFactory, RequestInterface $request, ResponseInterface $response, StreamInterface $stream)</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">$this</span>-&gt;beConstructedWith($client, $messageFactory);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">$this</span>-&gt;setKey(<span class="hljs-string">'foo'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        $messageFactory-&gt;createRequest(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'https://api.ideal-postcodes.co.uk/v1/postcodes/SW1A%202AA?api_key=foo'</span>, [], <span class="hljs-keyword">null</span>, <span class="hljs-string">'1.1'</span>)-&gt;willReturn($request);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        $client-&gt;sendRequest($request)-&gt;willReturn($response);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        $response-&gt;getStatusCode()-&gt;willReturn(<span class="hljs-number">404</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>        <span class="hljs-keyword">$this</span>-&gt;shouldThrow(PostcodeNotFound::class)-&gt;duringGet(<span class="hljs-string">'SW1A 2AA'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }</td></table></code></pre>
<p>Run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Matthewbdaly/Postcode/Client                                                    </td><tr><td class="linenos" data-pseudo-content="3"></td><td>  98  - it throws an exception <span class="hljs-keyword">if</span> postcode not found</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      expected exception of class <span class="hljs-string">"Matthewbdaly\Postcode\Exc..."</span>, but got</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      [exc:Prophecy\Exception\Call\UnexpectedCallException(<span class="hljs-string">"Method call:</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        - getBody()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      on Double\ResponseInterface\P20 was not expected, expected calls were:</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        - getStatusCode()"</span>)].</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>                                83%                                     16%      6</td><tr><td class="linenos" data-pseudo-content="11"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="12"></td><td>6 examples (5 passed, 1 failed)</td><tr><td class="linenos" data-pseudo-content="13"></td><td>538ms</td></table></code></pre>
<p>This time we’ll create the exception class before updating the client. Create the following class at <code>src/Exceptions/PostcodeNotFound.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Exceptions</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="6"></td><td> * Postcode not found exception</td><tr><td class="linenos" data-pseudo-content="7"></td><td> *</td><tr><td class="linenos" data-pseudo-content="8"></td><td> */</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostcodeNotFound</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">Exception</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td></table></code></pre>
<p>And update the client:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">Postcode</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">PostcodeNotFound</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    ...</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">(string $postcode)</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        $url = <span class="hljs-keyword">$this</span>-&gt;getBaseUrl() . rawurlencode($postcode) . <span class="hljs-string">'?'</span> . http_build_query([</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'api_key'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;getKey()</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        $request = <span class="hljs-keyword">$this</span>-&gt;messageFactory-&gt;createRequest(</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'GET'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            $url,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            [],</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-keyword">null</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">'1.1'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;client-&gt;sendRequest($request);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">if</span> ($response-&gt;getStatusCode() == <span class="hljs-number">402</span>) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> PaymentRequired;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">if</span> ($response-&gt;getStatusCode() == <span class="hljs-number">404</span>) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> PostcodeNotFound;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $data = json_decode($response-&gt;getBody()-&gt;getContents(), <span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">return</span> $data;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td></table></code></pre>
<p>Re-run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpspec run</td><tr><td class="linenos" data-pseudo-content="2"></td><td>                                      100%                                       6</td><tr><td class="linenos" data-pseudo-content="3"></td><td>1 specs</td><tr><td class="linenos" data-pseudo-content="4"></td><td>6 examples (6 passed)</td><tr><td class="linenos" data-pseudo-content="5"></td><td>103ms</td></table></code></pre>
<p>And our API client is feature complete! You can find the source code of the finished client <a href="https://github.com/matthewbdaly/postcode-client">here</a>.</p>
<h2 id="summary">Summary</h2>
<p>Personally, I find that while PHPSpec isn’t appropriate for every use case, it’s particularly handy for API clients and it’s generally my go-to testing solution for them. It handles producing a lot of the boilerplate for me, and it results in a much better workflow for test-driven development as it makes it very natural to write the test first, then make it pass.</p>
<p>HTTPlug has been a revelation for me. While it takes a bit of getting used to if you’re used to something like Guzzle, it means that you’re giving consumers of your library the freedom to choose the HTTP client of their choice, meaning they don’t have to fight with several different libraries requiring different versions of Guzzle. It also allows for easy resolution of the HTTP client, rather than having to explicitly pass through an instance when instantiating your client. I’m planning to use it extensively in the future.</p>
]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating custom assertions with PHPUnit]]></title>
        <id>https://matthewdaly.co.uk/blog/2017/11/16/creating-custom-assertions-with-phpunit/</id>
        <link href="https://matthewdaly.co.uk/blog/2017/11/16/creating-custom-assertions-with-phpunit/">
        </link>
        <updated>2017-11-16T15:15:50Z</updated>
        <summary type="html"><![CDATA[<p>Today I’ve been working on a library I’m building for making it easier to build RESTful API’s with Laravel. It uses an abstract RESTful controller, which inherits from the default Laravel controller, and I wanted to verify that the instantiated controller includes all the traits from the base controller.</p>
<p>However, there was a problem. The only practical way to verify that a class includes a trait is with the <code>class_uses()</code> function, but this doesn’t work if the class inherits from a parent that includes these traits. As the class is abstract, it can’t be instantiated directly, so you must either create a dummy class just for testing that extends it, or mock the class, and that means that <code>class_uses()</code> won’t work. As a result, I needed to first get the parent class, then call <code>class_uses()</code> on that, which is possible, but a bit verbose to do repeatedly for several tests.</p>
<p>Fortunately it’s quite easy to create your own custom assertions in PHPUnit. I started out by setting up the test with the assertion I wanted to have:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\<span class="hljs-title">Unit</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\<span class="hljs-title">TestCase</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Mockery</span> <span class="hljs-title">as</span> <span class="hljs-title">m</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestfulControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testTraits</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        $controller = m::mock(<span class="hljs-string">'Matthewbdaly\Harmony\Http\Controllers\RestfulController'</span>)-&gt;makePartial();</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertParentHasTrait(<span class="hljs-string">'Illuminate\Foundation\Bus\DispatchesJobs'</span>, $controller);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertParentHasTrait(<span class="hljs-string">'Illuminate\Foundation\Validation\ValidatesRequests'</span>, $controller);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertParentHasTrait(<span class="hljs-string">'Illuminate\Foundation\Auth\Access\AuthorizesRequests'</span>, $controller);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>}</td></table></code></pre>
<p>Actually implementing the assertion is fairly straightforward. You simply add the assertion as a method on the base test case you’re using. and accept whatever arguments are required, plus a final argument of <code>$message = &#39;&#39;</code>. Then you call <code>self::assertThat()</code>, as demonstrated below:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assertParentHasTrait</span><span class="hljs-params">($trait, $class, $message = <span class="hljs-string">''</span>)</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        $parent = get_parent_class($class);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        $traits = class_uses($parent);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">self</span>::assertThat(in_array($trait, $traits), <span class="hljs-keyword">self</span>::isTrue(), $message);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }</td></table></code></pre>
<p>In this case we’re asserting that the specified trait appears in the list of traits on the parent class. Note the use of <code>self::isTrue()</code> - this just verifies that the response is truthy.</p>
<p>Using this method it’s quite easy to create custom assertions, which can help make your tests less verbose and easier to read.</p>
]]></summary>
    </entry>
</feed>
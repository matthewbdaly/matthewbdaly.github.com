<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk</link>
        <description>I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Wed, 20 Feb 2019 21:38:10 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2019</copyright>
        <item>
            <title><![CDATA[Searching content with Fuse.js]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/20/searching-content-with-fuse-dot-js/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/20/searching-content-with-fuse-dot-js/</guid>
            <pubDate>Wed, 20 Feb 2019 17:25:58 GMT</pubDate>
            <description><![CDATA[<p>Search is a problem I’m currently taking a big interest in. The legacy project I maintain has an utterly abominable search facility, one that I’m eager to replace with something like Elasticsearch. But smaller sites that are too small for Elasticsearch to be worth the bother can still benefit from having a decent search implementation. Despite some recent improvements, relational databases aren’t generally that good a fit for search  because they don’t really understand the concept of relevance - you can’t easily order something by how good a match it is, and your database may not deal with fuzzy matching well.</p>
<p>I’m currently working on a small flat-file CMS as a personal project. It’s built with PHP, but it’s intended to be as simple as possible, with no database, no caching service, and certainly no search service, so it needs something small and simple, but still effective for search.</p>
<p>In the past I’ve used Lunr.js on my own site, and it works very well for this use case. However, it’s problematic for this case as the index needs to be generated in Javascript on the server side, and adding Node.js to the stack for a flat-file PHP CMS is not really an option. What I needed was something where I could generate the index in any language I chose, load it via AJAX, and search it on the client side. I recently happened to stumble across <a href="https://fusejs.io/">Fuse.js</a>, which was pretty much exactly what I was after.</p>
<p>Suppose we have the following index:</p>
<pre><code class="lang-json">[  
   {  
      &quot;title&quot;:&quot;About me&quot;,
      &quot;path&quot;:&quot;about/&quot;
   },
   {  
      &quot;title&quot;:&quot;Meet the team&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/&quot;
   },
   {  
      &quot;title&quot;:&quot;Alice&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/alice/&quot;
   },
   {  
      &quot;title&quot;:&quot;Bob&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/bob/&quot;
   },
   {  
      &quot;title&quot;:&quot;Chris&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/chris/&quot;
   },
   {  
      &quot;title&quot;:&quot;Home&quot;,
      &quot;path&quot;:&quot;index/&quot;
   }
]
</code></pre>
<p>This index can be generated in any way you see fit. In this case, the page content is stored in Markdown files with YAML front matter, so I wrote a Symfony console command which gets all the Markdown files in the content folder, parses them to get the titles, and retrieves the path. You could also retrieve other items in front matter such as categories or tags, and the page content, and include that in the index. The data then gets converted to JSON and saved to the index file. As you can see, there’s nothing special about this JSON - these two fields happen to be the ones I’ve chosen.</p>
<p>Now we can load the JSON file via AJAX, and pass it to a new Fuse instance. You can search the index using the <code>.search()</code> method, as shown below:</p>
<pre><code class="lang-javascript">import Fuse from &#39;fuse.js&#39;;
window.$ = window.jQuery = require(&#39;jquery&#39;);

$(document).ready(function () {
  window.$.getJSON(&#39;/storage/index.json&#39;, function (response) {
    const fuse = new Fuse(response, {
      keys: [&#39;title&#39;],
      shouldSort: true
    });
    $(&#39;#search&#39;).on(&#39;keyup&#39;, function () {
      let result = fuse.search($(this).val());

      // Output it
      let resultdiv = $(&#39;ul.searchresults&#39;);
      if (result.length === 0) {
        // Hide results
        resultdiv.hide();
      } else {
        // Show results
        resultdiv.empty();
        for (let item in result.slice(0,4)) {
          let searchitem = &#39;&lt;li&gt;&lt;a href=&quot;/&#39; + result[item].path + &#39;&quot;&gt;&#39; + result[item].title + &#39;&lt;/a&gt;&lt;/li&gt;&#39;;
          resultdiv.append(searchitem);
        }
        resultdiv.show();
      }
    });
  });
});
</code></pre>
<p>The really great thing about Fuse.js is that it can search just about any JSON content, making it extremely flexible. For a site with a MySQL database, you could generate the JSON from one or more tables in the database, cache it in Redis or Memcached indefinitely until such time as the content changes again, and only regenerate it then, making for an extremely efficient client-side search that doesn’t need to hit the database during normal operation. Or you could generate it from static files, as in this example. It also means the backend language is not an issue, since you can easily generate the JSON file in PHP, Javascript, Python or any other language.</p>
<p>As you can see, it’s pretty straightforward to use Fuse.js to create a working search field out of the box, but the website lists a number of options allowing you to customise the search for your particular use case, and I’d recommend looking through these if you’re planning on using it on a project.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Higher-order components in React]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/16/higher-order-components-in-react/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/16/higher-order-components-in-react/</guid>
            <pubDate>Sat, 16 Feb 2019 19:00:30 GMT</pubDate>
            <description><![CDATA[<p>In the last few weeks I’ve been working on a big rebuild of the homepage of the legacy application I maintain. As I’ve been slowly transitioning it to use React on the front end, I used that, and it’s by far the largest React project I’ve worked on to date. This has pushed me to use some more advanced React techniques I hadn’t touched on before. I’ve also had to create some different components that have common functionality.</p>
<p>React used to use mixins to share common functionality, but the consensus is now that <a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">mixins are considered harmful</a>, so they have been removed. Instead, developers are encouraged to create higher-order components to contain the shared functionality.</p>
<p>A higher-order component is a function that accepts a React component as an argument, and then returns another component that wraps the provided one. The shared functionality is defined inside the wrapping component, and so any state or methods defined in the wrapping component can then be passed as props into the wrapped one, as in this simple example:</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;

export default function hocExample(WrappedComponent) {
  class hocExample extends Component {
    constructor(props) {
      this.state = {
        foo: false
      };
      this.doStuff = this.doStuff.bind(this);
    }
    doStuff() {
      this.setState({
        foo: true
      });
    }
    render() {
      return (
        &lt;WrappedComponent foo={this.state.foo} doStuff={this.doStuff} /&gt;
      );
    }
  }
  return hocExample;
}
</code></pre>
<p>If you’ve been working with React for a while, even if you haven’t written a higher-order component, you’ve probably used one. For instance, <code>withRouter()</code> from <code>react-router</code> is a good example of a higher-order component that forms part of an existing library.</p>
<h1 id="a-real-world-example">A real-world example</h1>
<p>A very common use case I’ve come across is handling a click outside of a component. For instance, if you have a sidebar or popup component, it’s common to want to close it when the user clicks outside the component. As such, it’s worth taking the time to refactor it to make it reusable.</p>
<p>In principle you can achieve this on any component as follows:</p>
<ul>
<li>The component should accept two props - an <code>active</code> prop that denotes whether the component is active or not, and an <code>onClickOutside()</code> prop method that is called on a click outside</li>
<li>On mount, an event listener should be added to the document to listen for <code>mousedown</code> events, and it should be removed on unmount</li>
<li>When the event listener is fired, it should use a ref on the component to determine if the ref contains the event target. If so, and the status is active, the <code>onClickOutside()</code> method should be called</li>
</ul>
<p>Moving this to a higher order component makes a couple of issues slightly more complex, but not very. We can’t easily get a ref of the wrapped component, so I had to resort to using <code>ReactDOM.findDOMNode()</code> instead, which is potentially a bit dodgy as they’re talking about deprecating that.</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;
import { findDOMNode } from &#39;react-dom&#39;;

export default function clicksOutside(WrappedComponent) {
  class clicksOutside extends Component {
    constructor(props) {
      super(props);
      this.setWrapperRef = this.setWrapperRef.bind(this);
      this.handleClickOutside = this.handleClickOutside.bind(this);
    }
    componentDidMount() {
      document.addEventListener(&#39;mousedown&#39;, this.handleClickOutside);
    }
    componentWillUnmount() {
      document.removeEventListener(&#39;mousedown&#39;, this.handleClickOutside);
    }
    setWrapperRef(node) {
      this.wrapperRef = node;
    }
    handleClickOutside(event) {
      const {target} = event;
      if (this.wrapperRef &amp;&amp; target instanceof Node) {
        const ref = findDOMNode(this.wrapperRef);
        if (ref &amp;&amp; !ref.contains(target) &amp;&amp; this.props.active === true) {
          this.props.onClickOutside();
        }
      }
    }
    render() {
      return (
        &lt;WrappedComponent {...this.props} ref={this.setWrapperRef} /&gt;
      );
    }
  };
  return clicksOutside;
}
</code></pre>
<p>Now we can use this as follows:</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Sidebar from &#39;./src/Components/Sidebar&#39;;
import clicksOutside from &#39;./src/Components/clicksOutside&#39;;

const SidebarComponent = clicksOutside(Sidebar);

function handleClickOutside() {
  alert(&#39;You have clicked outside&#39;);
}

ReactDOM.render(
  &lt;SidebarComponent 
    links={links} 
    active={true} 
    onClickOutside={handleClickOutside} 
  /&gt;,
  document.getElementById(&#39;root&#39;)
);
</code></pre>
<p>Higher order components sound a lot harder than they actually are. In reality, they’re actually quite simple to implement, but I’m not sure the <a href="https://reactjs.org/docs/higher-order-components.html">documentation</a> is necessarily the best example to use since it’s a bit on the complex side.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating your own dependency injection container in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/02/creating-your-own-dependency-injection-container-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/02/creating-your-own-dependency-injection-container-in-php/</guid>
            <pubDate>Sat, 02 Feb 2019 20:45:52 GMT</pubDate>
            <description><![CDATA[<p>Dependency injection can be a difficult concept to understand in the early stages. Even when you’re using it all the time, it can often seem like magic. However, it’s really not all that complicated once you actually get into the nuts and bolts of it, and building your own container is a good way to learn more about how it works and how to use it.</p>
<p>In this tutorial, I’ll walk you through creating a simple, minimal dependency injection container, using PHPSpec as part of a TDD workflow. While the end result isn’t necessarily something I’d be happy using in a production environment, it’s sufficient to understand the basic concept and make it feel less like a black box. Our container will be called Ernie (if you want to know why, it’s a reference to a 90’s era video game that had a character based on Eric Cantona called Ernie Container).</p>
<p>The first thing we need to do is set up our dependencies. Our container will implement PSR-11, so we need to include the interface that defines that. We’ll also use PHP CodeSniffer to ensure code quality, and PHPSpec for testing. Your <code>composer.json</code> should look something like this:</p>
<pre><code class="lang-json">{
    &quot;name&quot;: &quot;matthewbdaly/ernie&quot;,
    &quot;description&quot;: &quot;Simple DI container&quot;,
    &quot;type&quot;: &quot;library&quot;,
    &quot;require-dev&quot;: {
        &quot;squizlabs/php_codesniffer&quot;: &quot;^3.3&quot;,
        &quot;phpspec/phpspec&quot;: &quot;^5.0&quot;,
        &quot;psr/container&quot;: &quot;^1.0&quot;
    },
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;authors&quot;: [
        {
            &quot;name&quot;: &quot;Matthew Daly&quot;,
            &quot;email&quot;: &quot;450801+matthewbdaly@users.noreply.github.com&quot;
        }
    ],
    &quot;require&quot;: {},
    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;Matthewbdaly\\Ernie\\&quot;: &quot;src/&quot;
        }
    }
}
</code></pre>
<p>We also need to put this in our <code>phpspec.yml</code> file:</p>
<pre><code class="lang-yml">suites:
    test_suite:
        namespace: Matthewbdaly\Ernie
        psr4_prefix: Matthewbdaly\Ernie
</code></pre>
<p>With that done, we can start working on our implementation.</p>
<h1 id="creating-the-exceptions">Creating the exceptions</h1>
<p>The PSR-11 specification defines two interfaces for exceptions, which we will implement before actually moving on to the container itself. The first of these is <code>Psr\Container\ContainerExceptionInterface</code>. Run the following command to create a basic spec for the exception:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Exceptions/ContainerException
</code></pre>
<p>The generated specification for it at <code>spec/Exceptions/ContainerExceptionSpec.php</code> will look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\ContainerException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(ContainerException::class);
    }
}
</code></pre>
<p>This is not sufficient for our needs. Our exception must also implement two interfaces:</p>
<ul>
<li><code>Throwable</code></li>
<li><code>Psr\Container\ContainerExceptionInterface</code></li>
</ul>
<p>The former can be resolved by inheriting from <code>Exception</code>, while the latter doesn’t require any additional methods. Let’s expand our spec to check for these:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie\Exceptions;

use Matthewbdaly\Ernie\Exceptions\ContainerException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(ContainerException::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerExceptionInterface&#39;);
    }

    function it_implements_throwable()
    {
        $this-&gt;shouldImplement(&#39;Throwable&#39;);
    }
}
</code></pre>
<p>Now run the spec and PHPSpec will generate the boilerplate exception for you:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Exceptions/ContainerException                                
  11  - it is initializable
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

Matthewbdaly/Ernie/Exceptions/ContainerException                                  
  16  - it implements interface
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  21  - it implements throwable
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

                                      100%                                       3
1 specs
3 examples (3 broken)
23ms


  Do you want me to create `Matthewbdaly\Ernie\Exceptions\ContainerException`   
  for you?                                                                      
                                                                         [Y/n]
y
Class Matthewbdaly\Ernie\Exceptions\ContainerException created in /home/matthew/Projects/ernie-clone/src/Exceptions/ContainerException.php.

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  16  - it implements interface
      expected an instance of Psr\Container\ContainerExceptionInterface, but got
      [obj:Matthewbdaly\Ernie\Exceptions\ContainerException].

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  21  - it implements throwable
      expected an instance of Throwable, but got
      [obj:Matthewbdaly\Ernie\Exceptions\ContainerException].

            33%                                     66%                          3
1 specs
3 examples (1 passed, 2 failed)
36ms
</code></pre>
<p>It’s failing, but we expect that. We need to update our exception to extend the base PHP exception, and implement <code>Psr\Container\ContainerExceptionInterface</code>. Let’s do that now:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie\Exceptions;

use Psr\Container\ContainerExceptionInterface;
use Exception;

class ContainerException extends Exception implements ContainerExceptionInterface
{
}
</code></pre>
<p>Let’s re-run the spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
                                      100%                                       3
1 specs
3 examples (3 passed)
24ms
</code></pre>
<p>The second exception we need to implement is <code>Psr\Container\NotFoundExceptionInterface</code> and it’s a similar story. Run the following command to create the spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Exceptions/NotFoundException
</code></pre>
<p>Again, the spec needs to be amended to verify that it’s a throwable and implements the required interface:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie\Exceptions;

use Matthewbdaly\Ernie\Exceptions\NotFoundException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class NotFoundExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(NotFoundException::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\NotFoundExceptionInterface&#39;);
    }

    function it_implements_throwable()
    {
        $this-&gt;shouldImplement(&#39;Throwable&#39;);
    }
}
</code></pre>
<p>For the sake of brevity I’ve left out the output, but if you run <code>vendor/bin/phpspec run</code> you’ll see it fail due to the fact that the generated class doesn’t implement the required interfaces. Amend <code>src/Exceptions/NotFoundException</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie\Exceptions;

use Psr\Container\NotFoundExceptionInterface;
use Exception;

class NotFoundException extends Exception implements NotFoundExceptionInterface
{
}
</code></pre>
<p>Running <code>vendor/bin/phpspec run</code> should now see it pass. Now let’s move on to the container class…</p>
<h1 id="building-the-container">Building the container</h1>
<p>Run the following command to create the container spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Container
</code></pre>
<p>However, the default generated spec isn’t sufficient. We need to check it implements the required interface:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\Container;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Container::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerInterface&#39;);
    }
}
</code></pre>
<p>Now, if we run PHPSpec, we’ll generate our class:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  11  - it is initializable
      class Matthewbdaly\Ernie\Container does not exist.

Matthewbdaly/Ernie/Container                                                      
  16  - it implements interface
      class Matthewbdaly\Ernie\Container does not exist.

                            75%                                     25%          8
3 specs
8 examples (6 passed, 2 broken)
404ms


  Do you want me to create `Matthewbdaly\Ernie\Container` for you?              
                                                                         [Y/n] 
y
Class Matthewbdaly\Ernie\Container created in /home/matthew/Projects/ernie-clone/src/Container.php.

Matthewbdaly/Ernie/Container                                                      
  16  - it implements interface
      expected an instance of Psr\Container\ContainerInterface, but got
      [obj:Matthewbdaly\Ernie\Container].

                                 87%                                     12%     8
3 specs
8 examples (7 passed, 1 failed)
40ms
</code></pre>
<p>Now, as we can see, this class doesn’t implement the interface. Let’s remedy that:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;

class Container implements ContainerInterface
{
}
</code></pre>
<p>Now, if we run the tests, they should fail because the class needs to add the required methods:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
✘ Fatal error happened while executing the following 
    it is initializable 
    Class Matthewbdaly\Ernie\Container contains 2 abstract methods and must therefore be declared abstract or implement the remaining methods (Psr\Container\ContainerInterface::get, Psr\Container\ContainerInterface::has) in /home/matthew/Projects/ernie-clone/src/Container.php on line 7 
</code></pre>
<p>If you use an editor or IDE that allows you to implement an interface automatically, you can run it to add the required methods. I use PHPActor with Neovim, and used the option in the Transform menu to implement the contract:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;

class Container implements ContainerInterface
{
    /**
     * {@inheritDoc}
     */
    public function get($id)
    {
    }

    /**
     * {@inheritDoc}
     */
    public function has($id)
    {
    }
}
</code></pre>
<p>Running <code>vendor/bin/phpspec run</code> should now make the spec pass, but the methods don’t actually do anything yet. If you read the spec for PSR-11, you’ll see that <code>has()</code> returns a boolean to indicate whether a class can be instantiated or not, while <code>get()</code> will either return an instance of the specified class, or throw an exception. We will add specs that check that built-in classes can be returned by both, and unknown classes display the expected behaviour. We’ll do both at once, because in both cases, the functionality to actually resolve the required class will be deferred to a single resolver method, and these methods will not do all that much as a result:</p>
<pre><code class="lang-php">    function it_has_simple_classes()
    {
        $this-&gt;has(&#39;DateTime&#39;)-&gt;shouldReturn(true);
    }

    function it_does_not_have_unknown_classes()
    {
        $this-&gt;has(&#39;UnknownClass&#39;)-&gt;shouldReturn(false);
    }

    function it_can_get_simple_classes()
    {
        $this-&gt;get(&#39;DateTime&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_returns_not_found_exception_if_class_cannot_be_found()
    {
        $this-&gt;shouldThrow(&#39;Matthewbdaly\Ernie\Exceptions\NotFoundException&#39;)
            -&gt;duringGet(&#39;UnknownClass&#39;);
    }
</code></pre>
<p>These tests verify that:</p>
<ul>
<li><code>has()</code> returns <code>true</code> when called with the always-present <code>DateTime</code> class</li>
<li><code>has()</code> returns <code>false</code> for the undefined <code>UnknownClass</code></li>
<li><code>get()</code> successfully instantiates an instance of <code>DateTime</code></li>
<li><code>get()</code> throws an exception if you try to instantiate the undefined <code>UnknownClass</code></li>
</ul>
<p>Running the specs will raise errors:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                      
  21  - it has simple classes
      expected true, but got null.

Matthewbdaly/Ernie/Container                                                    
  26  - it does not have unknown classes
      expected false, but got null.

Matthewbdaly/Ernie/Container                                                    
  31  - it can get simple classes
      expected an instance of DateTime, but got null.

Matthewbdaly/Ernie/Container                                                    
  36  - it returns not found exception if class cannot be found
      expected to get exception / throwable, none got.

                         66%                                     33%             12
3 specs
12 examples (8 passed, 4 failed)
98ms
</code></pre>
<p>Let’s populate these empty methods:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;
use Matthewbdaly\Ernie\Exceptions\NotFoundException;
use ReflectionClass;
use ReflectionException;

class Container implements ContainerInterface
{
    /**
     * {@inheritDoc}
     */
    public function get($id)
    {
        $item = $this-&gt;resolve($id);
        return $this-&gt;getInstance($item);
    }

    /**
     * {@inheritDoc}
     */
    public function has($id)
    {
        try {
            $item = $this-&gt;resolve($id);
        } catch (NotFoundException $e) {
            return false;
        }
        return $item-&gt;isInstantiable();
    }

    private function resolve($id)
    {
        try {
            return (new ReflectionClass($id));
        } catch (ReflectionException $e) {
            throw new NotFoundException($e-&gt;getMessage(), $e-&gt;getCode(), $e);
        }
    }

    private function getInstance(ReflectionClass $item)
    {
        return $item-&gt;newInstance();
    }
}
</code></pre>
<p>As you can see, both the <code>has()</code> and <code>get()</code> methods need to resolve a string ID to an actual class, so that common functionality is stored in a private method called <code>resolve()</code>. This uses the <a href="http://php.net/manual/en/book.reflection.php">PHP Reflection API</a> to resolve the class name to an actual class. We pass the string ID into a constructor of <code>ReflectionClass</code>, and the <code>resolve()</code> method will either return the created instance of <code>ReflectionClass</code>, or throw an exception.</p>
<p>For the uninitiated, <code>ReflectionClass</code> allows you to reflect on the object whose fully qualified class name is passed to the constructor, in order to interact with that class programmatically. The methods we will use include:</p>
<ul>
<li><code>isInstantiable</code> - confirms whether or not the class can be instantiated (for instance, traits and abstract classes can’t)</li>
<li><code>newInstance</code> - creates a new instance of the item in question, as long as it has no dependencies in the constructor</li>
<li><code>newInstanceArgs</code> - creates a new instance, using the arguments passed in</li>
<li><code>getConstructor</code> - allows you to get information about the constructor</li>
</ul>
<p>The Reflection API is pretty comprehensive, and I would recommend reading the documentation linked to above if you want to know more.</p>
<p>For the <code>has()</code> method, we check that the resolved class is instantiable, and return the result of that. For the <code>get()</code> method, we use <code>getInstance()</code> to instantiate the item and return that, throwing an exception if that fails.</p>
<h1 id="registering-objects">Registering objects</h1>
<p>In its current state, the container doesn’t allow you to set an item. To be useful, we need to be able to specify that an interface or string should be resolved to a given class, or for cases where we need to pass in scalar parameters, such as a database object, to specify how a concrete instance of that class should be instantiated. To that end, we’ll create a new <code>set()</code> public method that will allow a dependency to be set. Here are the revised specs including this:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\Container;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;
use DateTime;

class ContainerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Container::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerInterface&#39;);
    }

    function it_has_simple_classes()
    {
        $this-&gt;has(&#39;DateTime&#39;)-&gt;shouldReturn(true);
    }

    function it_does_not_have_unknown_classes()
    {
        $this-&gt;has(&#39;UnknownClass&#39;)-&gt;shouldReturn(false);
    }

    function it_can_get_simple_classes()
    {
        $this-&gt;get(&#39;DateTime&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_returns_not_found_exception_if_class_cannot_be_found()
    {
        $this-&gt;shouldThrow(&#39;Matthewbdaly\Ernie\Exceptions\NotFoundException&#39;)
            -&gt;duringGet(&#39;UnknownClass&#39;);
    }

    function it_can_register_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve)-&gt;shouldReturn($this);
    }

    function it_can_resolve_registered_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }

    function it_can_resolve_registered_invokable()
    {
        $toResolve = new class {
            public function __invoke() {
                return new DateTime;
            }
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_can_resolve_registered_callable()
    {
        $toResolve = function () {
            return new DateTime;
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_can_resolve_if_registered_dependencies_instantiable()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;has(&#39;Foo\Bar&#39;)-&gt;shouldReturn(true);
    }
}
</code></pre>
<p>This needs to handle quite a few scenarios, so there are several tests we have in place. These verify that:</p>
<ul>
<li>The <code>set()</code> method returns an instance of the container class, to allow for method chaining</li>
<li>When a dependency is set, calling <code>get()</code> returns an instance of that class</li>
<li>When a concrete class that has the <code>__invoke()</code> magic method set is passed to <code>set()</code>, it is invoked and the response returned.</li>
<li>When the value passed through is a callback, the callback is resolved and the response returned</li>
<li>When a dependency is set, calling <code>has()</code> for it returns the right value</li>
</ul>
<p>Note that we use anonymous classes for testing - I’ve written about these before and they’re very useful in this context because they allow us to create a simple class inline for testing purposes.</p>
<p>Running the specs should result in us being prompted to generate the <code>set()</code> method, and failing afterwards:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  42  - it can register dependencies
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  49  - it can resolve registered dependencies
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  57  - it can resolve registered invokable
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  68  - it can resolve registered callable
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  77  - it can resolve if registered dependencies instantiable
      method Matthewbdaly\Ernie\Container::set not found.

                          70%                                     29%            17
3 specs
17 examples (12 passed, 5 broken)
316ms

  Do you want me to create `Matthewbdaly\Ernie\Container::set()` for you?       
                                                                         [Y/n]
y
  Method Matthewbdaly\Ernie\Container::set() has been created.

Matthewbdaly/Ernie/Container                                                    
  42  - it can register dependencies
      expected [obj:Matthewbdaly\Ernie\Container], but got null.

Matthewbdaly/Ernie/Container                                                    
  49  - it can resolve registered dependencies
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  57  - it can resolve registered invokable
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  68  - it can resolve registered callable
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  77  - it can resolve if registered dependencies instantiable
      expected true, but got false.

                          70%                              11%        17%        17
3 specs
17 examples (12 passed, 2 failed, 3 broken)
90ms
</code></pre>
<p>First, we need to set up the <code>set()</code> method properly, and define a property to contain the stored services:</p>
<pre><code class="lang-php">    private $services = [];

    public function set(string $key, $value)
    {
        $this-&gt;services[$key] = $value;
        return $this;
    }
</code></pre>
<p>This fixes the first spec, but the resolver needs to be amended to handle cases where the ID is set manually:</p>
<pre><code class="lang-php">    private function resolve($id)
    {
        try {
            $name = $id;
            if (isset($this-&gt;services[$id])) {
                $name = $this-&gt;services[$id];
                if (is_callable($name)) {
                    return $name();
                }
            }
            return (new ReflectionClass($name));
        } catch (ReflectionException $e) {
            throw new NotFoundException($e-&gt;getMessage(), $e-&gt;getCode(), $e);
        }
    }
</code></pre>
<p>This will allow us to resolve classes set with <code>set()</code>. However, we also want to resolve any callables, such as callbacks or classes that implement the <code>__invoke()</code> magic method, which means that sometimes <code>resolve()</code> will return the result of the callable instead of an instance of <code>ReflectionClass</code>. Under those circumstances we should return the item directly:</p>
<pre><code class="lang-php">    public function get($id)
    {
        $item = $this-&gt;resolve($id);
        if (!($item instanceof ReflectionClass)) {
            return $item;
        }
        return $this-&gt;getInstance($item);
    }
</code></pre>
<p>Note that because the <code>__invoke()</code> method is automatically called in any concrete class specified in the second argument to <code>set()</code>, it’s only possible to resolve classes that define an <code>__invoke()</code> method if they are passed in as string representations. The following PsySh session should make it clear what this means:</p>
<pre><code class="lang-php">&gt;&gt;&gt; use Matthewbdaly\Ernie\Container;
&gt;&gt;&gt; $c = new Container;
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; class TestClass { public function __invoke() { return &quot;Called&quot;; }}
&gt;&gt;&gt; $c-&gt;get(&#39;TestClass&#39;);
=&gt; TestClass {#2319}
&gt;&gt;&gt; $c-&gt;set(&#39;Foo\Bar&#39;, &#39;TestClass&#39;);
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; $c-&gt;get(&#39;Foo\Bar&#39;);
=&gt; TestClass {#2309}
&gt;&gt;&gt; $c-&gt;set(&#39;Foo\Bar&#39;, new TestClass);
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; $c-&gt;get(&#39;Foo\Bar&#39;);
=&gt; &quot;Called&quot;
</code></pre>
<p>As you can see, if we pass in the fully qualified class name of a class that defines an <code>__invoke()</code> method, it can be resolved as expected. However, if we pass a concrete instance of it to <code>set()</code>, it will be called and will return the response from that. This may not be the behaviour you want for your own container.</p>
<p>According to <a href="https://github.com/thephpleague/container/issues/113">this issue on the PHP League’s Container implementation</a>, it was also an issue for them, so seeing as this is just a toy example I’m not going to lose any sleep over it. Just something to be aware of if you use this post as the basis for writing your own container.</p>
<h1 id="resolving-dependencies">Resolving dependencies</h1>
<p>One thing is missing from our container. Right now it should be able to instantiate pretty much any class that has no dependencies, but these are quite firmly in the minority. To be useful, a container should be able to resolve all of the dependencies for a class automatically.</p>
<p>Let’s add a spec for that:</p>
<pre><code class="lang-php">    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
</code></pre>
<p>Here we have to be a bit crafty. Anonymous classes are defined and instantiated at the same time, so we can’t pass it in as an anonymous class in the test. Instead, we call the anonymous class and get its name, then set that as the second argument to <code>set()</code>. Then we can verify that the returned object is an instance of the same class.</p>
<p>Running this throws an error:</p>
<pre><code class="lang-php">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  86  - it can resolve dependencies
      exception [err:ArgumentCountError(&quot;Too few arguments to function class@anonymous::__construct(), 0 passed and exactly 1 expected&quot;)] has been thrown.

                                    94%                                          18
3 specs
18 examples (17 passed, 1 broken)
60ms
</code></pre>
<p>This is expected. Our test class accepts an instance of <code>DateTime</code> in the constructor as a mandatory dependency, so instantiating it fails. We need to update the <code>getInstance()</code> method so that it can handle pulling in any dependencies:</p>
<pre><code class="lang-php">    private function getInstance(ReflectionClass $item)
    {
        $constructor = $item-&gt;getConstructor();
        if (is_null($constructor) || $constructor-&gt;getNumberOfRequiredParameters() == 0) {
            return $item-&gt;newInstance();
        }
        $params = [];
        foreach ($constructor-&gt;getParameters() as $param) {
            if ($type = $param-&gt;getType()) {
                $params[] = $this-&gt;get($type-&gt;getName());
            }
        }
        return $item-&gt;newInstanceArgs($params);
    }
</code></pre>
<p>Here, we use the Reflection API to get the constructor. If there’s no constructor, or it has no required parameters, we just return a new instance of the reflected class as before.</p>
<p>Otherwise, we loop through the required parameters. For each parameter, we get the string representation of the type specified for that parameter, and retrieve an instance of it from the container. Afterwards, we use those parameters to instantiate the object.</p>
<p>Let’s run the specs again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
                                      100%                                       18
3 specs
18 examples (18 passed)
51ms
</code></pre>
<p>Our container is now complete. We can:</p>
<ul>
<li>Resolve simple classes out of the box</li>
<li>Set arbitrary keys to resolve to particular classes, or the result of callables, so as to enable mapping interfaces to concrete implementations, or resolve classes that require specific non-object parameters, such as PDO</li>
<li>Resolve complex classes with multiple dependencies</li>
</ul>
<p>Not too bad for just over 100 lines of PHP…</p>
<h1 id="final-thoughts">Final thoughts</h1>
<p>As I’ve said, this is a pretty minimal example of a dependency injection container, and I wouldn’t advise using this in production when there are so many existing, mature solutions available. I have no idea how the performance would stack up against existing solutions, or whether there are any issues with it, and quite frankly that’s besides the point - this is intended as a learning exercise to understand how dependency injection containers in general work, not as an actual useful piece of code for production. If you want an off-the-shelf container, I’d point you in the direction of <code>league/container</code>, which has served me well.</p>
<p>You can find the code for this tutorial on <a href="https://github.com/matthewbdaly/ernie">GitHub</a>, so if you have any problems, you should take a look there to see where the problem lies. Of course, if you go on to create your own kick-ass container based on this, do let me know!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding query objects]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/27/understanding-query-objects/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/27/understanding-query-objects/</guid>
            <pubDate>Sun, 27 Jan 2019 23:10:39 GMT</pubDate>
            <description><![CDATA[<p>The project I’ve been maintaining for the last year has inherited a rather dubious database structure that would currently be very difficult to refactor, which also makes many queries more convoluted than they should be. At present, I’m involved in building a whole new home page, which has necessitated adding some new queries. Since some of these involve carrying out unions between several similar tables (that should have been one table, grr…), they can involve some quite large chunks for each query.</p>
<p>As a result, it’s made sense to break those queries down further. Since Zend 1 doesn’t have anything analogous to scopes in Eloquent, I don’t really have an easy way to break these queries up in the models (and I’m trying to get the query logic out of the models at present anyway), so I opted to make them into query objects instead, which is a pattern I hadn’t used before (but probably should have).</p>
<p>A query object is pretty much what it says on the tin - it’s a PHP object that executes a single, very specific query. This may seem like overkill, but it’s only really useful for the most complex and convoluted of queries. It can accept parameters, as you’d expect, and some parts of the query may be optional based on that, but fundamentally it should build and run only one single query.</p>
<p>In this post I’ll go through how you might create one, how it relates to the repository pattern, and when to create one.</p>
<h1 id="creating-a-query-object-class">Creating a query object class</h1>
<p>I’m a big fan of the <code>__invoke()</code> magic method in PHP. For the uninitiated, it lets you instantiate the class, and then use it in the same way you would a function, making it very useful for callbacks. This also brings some other advantages:</p>
<ul>
<li>Unlike with a function, you can create private methods to do other parts of the work, making it easier to understand the main method.</li>
<li>It can have a constructor, and can therefore both accept dependencies via the constructor, and be instantiated via dependency injection, simplifying setup and testing when compared to using a callback.</li>
<li>Since <code>__invoke()</code> is an innate part of the PHP language, it makes more sense for classes that have a single responsibility to use that method name to do that, rather than picking something like <code>handle()</code> or <code>run()</code>.</li>
</ul>
<p>As a result, my query objects generally use the <code>__invoke()</code> method to trigger the query.</p>
<p>Since Zend 1 is no longer supported, I won’t bother displaying how I’d write the query in that specific context. I have yet to use this pattern with Laravel, but if I did, it would look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Queries;

use Illuminate\Database\DatabaseManager;

final class DashboardItems
{
    protected $db;

    public function __construct(DatabaseManager $db)
    {
        $this-&gt;db = $db;
    }

    public function __invoke(int $days = 7)
    {
        return $this-&gt;fooTable()
            -&gt;union($this-&gt;barTable())
            -&gt;whereRaw(&#39;start_date &gt;= (NOW() - INTERVAL ? DAY)&#39;, [$days]);
            -&gt;get();
    }

    private function fooTable()
    {
        return $this-&gt;db-&gt;table(&#39;foo&#39;)
            -&gt;where(&#39;type&#39;, &#39;=&#39;, &#39;fooType&#39;);
    }

    private function barTable(int $days)
    {
        return $this-&gt;db-&gt;table(&#39;bar&#39;)
            -&gt;where(&#39;type&#39;, &#39;=&#39;, &#39;barType&#39;);
    }
}
</code></pre>
<p>Note that we break each one of the tables we want to perform a <code>UNION</code> on into a private method. This is probably the biggest advantage of query objects - it lets you break particularly unwieldy queries up into logical steps, making them more readable. You could do this by adding private methods on a repository class too, but I’d be reluctant to add private methods to a repository that were only used in one query - to my mind, a query object is a better home for that.</p>
<h1 id="what-about-repositories-">What about repositories?</h1>
<p>I regularly use the repository pattern in my code bases, whether that’s for Laravel projects or the current Zend 1-based legacy project. It’s an ongoing effort to refactor it so that all the queries are called from repository classes, leaving the models to act as containers for the data. So how do query objects fit in here?</p>
<p>It’s important to note that while a repository represents all queries relating to a table, a query object represents only a single query, and so the repository should still be the place where the query is called from. However, the repository should just defer the actual querying to the query object. The relevant parts of the application structure for my current application look a bit like this:</p>
<pre><code class="lang-bash">└── app
    ├── Queries
    │   └── DashboardItems.php
    └── Repositories
        └── DashboardRepository.php
</code></pre>
<p>And the repository might call the query object as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Repositories;

use App\Queries\DashboardItems;

final class DashboardRepository
{
    public static function dashboardItems(int $days = 7)
    {
        $query = new DashboardItems;
        return $query($days);
    }
}
</code></pre>
<p>At present my repositories all use static methods as I’m still in the process of migrating the queries over to the repository classes. That also means I can’t easily use dependency injection. For a Laravel application, a similar call might look like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Repositories;

use App\Queries\DashboardItems;

final class DashboardRepository
{
    protected $dashboardQuery;

    public function __construct(DashboardItems $dashboardQuery)
    {
        $this-&gt;dashboardQuery = $dashboardQuery;
    }

    public function dashboardItems(int $days = 7)
    {
        return $this-&gt;dashboardQuery($days);
    }
}
</code></pre>
<p>The only real difference is that we can instantiate the query object out of the container, simplifying setup.</p>
<h1 id="when-to-use-query-objects">When to use query objects</h1>
<p>I think it probably goes without saying, but it should be a rare query that actually needs to be implemented as a query object, especially if you’re using an ORM like Eloquent that provides features like scopes, and as yet I only have two using this pattern, as well as two others that were implemented as “reporter” classes, but could be query objects instead. So far, my experience has been that the sort of queries that are large enough to be worth considering include:</p>
<ul>
<li>Queries that generate reports, particularly if they have various options</li>
<li>Queries that use unions, as in the above example, since it makes sense to use a private method to fetch each table</li>
<li>Queries with multiple complex joins</li>
</ul>
<p>Smaller queries will typically fit happily inside a single method in your repository classes. If that’s the case, then they can live there without trouble. However, if you have a query that’s becoming too big to fit inside a single method, rather than adding private methods to your repository class, it may make more sense to refactor it out into a query object in its own right. You can still call it via the same method on your repository class, but the repository can just defer to the query object. As I usually use decorators to cache the responses from my repository classes anyway, then it makes sense to stick with this approach to keep caching consistent too.</p>
<p>Query objects only really offer any value for particularly large queries. However, they can be invaluable in those circumstances. By enabling you to break those big queries up into a series of steps, they help make them easier to understand.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Writing a custom sniff for PHP CodeSniffer]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/</guid>
            <pubDate>Sun, 13 Jan 2019 18:50:45 GMT</pubDate>
            <description><![CDATA[<p>I’ve recently come around to the idea that <a href="https://matthiasnoback.nl/2018/09/final-classes-by-default-why/">in PHP all classes should be final by default</a>, and have started doing so as a matter of course. However, when you start doing something like this it’s easy to miss a few files that haven’t been updated, or forget to do it, so I wanted a way to detect PHP classes that are not set as either abstract or final, and if possible, set them as final automatically. I’ve mentioned before that I use PHP CodeSniffer extensively, and that has the capability to both find and resolve deviations from a coding style, so last night I started looking into the possibility of creating a coding standard for this. It took a little work to understand how to do this so I thought I’d use this sniff as a simple example.</p>
<p>The first part is to set out the directory structure. There’s a very specific layout you have to follow for PHP CodeSniffer:</p>
<ul>
<li>The folder for the standard must have the name of the standard, and be in the source folder set by Composer (in this case, <code>src/AbstractOrFinalClassesOnly</code>.</li>
<li>This folder must contain a <code>ruleset.xml</code> file defining the name and description of the standard, and any other required content.</li>
<li>Any defined sniffs must be in a <code>Sniffs</code> folder.</li>
</ul>
<p>The <code>ruleset.xml</code> file was fairly simple in this case, as this is a very simple standard:</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;ruleset name=&quot;AbstractOrFinalClassesOnly&quot;&gt;
    &lt;description&gt;Checks all classes are marked as either abstract or final.&lt;/description&gt;
&lt;/ruleset&gt;
</code></pre>
<p>The sniff is intended to do the following:</p>
<ul>
<li>Check all classes have either the <code>final</code> keyword or the <code>abstract</code> keyword set</li>
<li>When running the fixer, make all classes without the <code>abstract</code> keyword final</li>
</ul>
<p>First of all, our class must implement the interface <code>PHP_CodeSniffer\Sniffs\Sniff</code>, which requires the following methods:</p>
<pre><code class="lang-php">    public function register(): array;

    public function process(File $file, $position): void;
</code></pre>
<p>Note that <code>File</code> here is an instance of <code>PHP_CodeSniffer\Files\File</code>. The first method registers the code the sniff should operate on. Here we’re only interested in classes, so we return an array containing <code>T_CLASS</code>. This is defined in the <a href="https://secure.php.net/manual/en/tokens.php">list of parser tokens used by PHP</a>, and represents classes and objects:</p>
<pre><code class="lang-php">    public function register(): array
    {
        return [T_CLASS];
    }
</code></pre>
<p>For the <code>process()</code> method, we receive two arguments, the file itself, and the position. We need to keep a record of the tokens we check for, so we do so in a private property:</p>
<pre><code class="lang-php">    private $tokens = [
        T_ABSTRACT,
        T_FINAL,
    ];
</code></pre>
<p>Then, we need to find the error:</p>
<pre><code class="lang-php">        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
        }
</code></pre>
<p>We use <code>$file</code> to get the token before <code>class</code>, and pass the <code>$tokens</code> property as a list of acceptable values. If the preceding token is not either <code>abstract</code> or <code>final</code>, we add a fixable error. The first argument is the string error message, the second is the location, and the third is the class of the sniff that has failed.</p>
<p>That will catch the issue, but won’t actually fix it. To do that, we need to get the fixer from the file object, and call its <code>addContent()</code> method to add the <code>final</code> keyword. We amend <code>process()</code> to extract the fixer, add it as a property, and then call the <code>fix()</code> method when we come across a fixable error:</p>
<pre><code class="lang-php">    public function process(File $file, $position): void
    {
        $this-&gt;fixer = $file-&gt;fixer;
        $this-&gt;position = $position;

        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
            $this-&gt;fix();
        }
    }
</code></pre>
<p>Then we define the <code>fix()</code> method:</p>
<pre><code class="lang-php">    private function fix(): void
    {
        $this-&gt;fixer-&gt;addContent($this-&gt;position - 1, &#39;final &#39;);
    }
</code></pre>
<p>Here’s the finished class:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types=1);

namespace Matthewbdaly\AbstractOrFinalClassesOnly\Sniffs;

use PHP_CodeSniffer\Sniffs\Sniff;
use PHP_CodeSniffer\Files\File;

/**
 * Sniff for catching classes not marked as abstract or final
 */
final class AbstractOrFinalSniff implements Sniff
{
    private $tokens = [
        T_ABSTRACT,
        T_FINAL,
    ];

    private $fixer;

    private $position;

    public function register(): array
    {
        return [T_CLASS];
    }

    public function process(File $file, $position): void
    {
        $this-&gt;fixer = $file-&gt;fixer;
        $this-&gt;position = $position;

        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
            $this-&gt;fix();
        }
    }

    private function fix(): void
    {
        $this-&gt;fixer-&gt;addContent($this-&gt;position - 1, &#39;final &#39;);
    }
}
</code></pre>
<p>I’ve made the resulting standard <a href="https://github.com/matthewbdaly/abstract-or-final-sniff">available via Github</a>.</p>
<p>This is a bit rough and ready and I’ll probably refactor it a bit when I have time. In addition, it’s not quite displaying the behaviour I want as it should, since ideally it should only be looking for the <code>abstract</code> and <code>final</code> keywords in classes that implement an interface. However, it’s proven fairly easy to create this sniff, except for the fact I had to go rooting around various tutorials that weren’t all that clear. Hopefully this example is a bit simpler and easier to follow.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[You don't need that module package]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/03/you-dont-need-that-module-package/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/03/you-dont-need-that-module-package/</guid>
            <pubDate>Thu, 03 Jan 2019 23:55:49 GMT</pubDate>
            <description><![CDATA[<p>Lately I’ve seen a number of Laravel packages being posted on places like Reddit that offer ways to make your project more modular by letting you break their classes out of the usual structure and place them in a separate folder called something like <code>packages/</code> or <code>modules/</code>. However, these packages are completely redundant, and it requires very little work to achieve the same thing with Composer alone. In addition, much of it is not specific to Laravel and can also be applied to any other framework that uses Composer.</p>
<p>There are two main approaches I’m aware of - keeping it in a single project, and moving the modules to separate Composer packages.</p>
<h1 id="single-project">Single project</h1>
<p>Suppose we have a brand new Laravel project with the namespace left as the default <code>App</code>. This is what the <code>autoload</code> section of the <code>composer.json</code> file will look like:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;App\\&quot;: &quot;app/&quot;
        },
        &quot;classmap&quot;: [
            &quot;database/seeds&quot;,
            &quot;database/factories&quot;
        ]
    },
</code></pre>
<p>Composer allows for numerous ways to autoload classes and you can add additional namespaces as you wish. Probably the best approach is to use PSR-4 autoloading, as in this example:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;App\\&quot;: &quot;app/&quot;,
            &quot;Packages\\&quot;: &quot;packages&quot;
        },
        &quot;classmap&quot;: [
            &quot;database/seeds&quot;,
            &quot;database/factories&quot;
        ]
    },
</code></pre>
<p>Now, if you put the model <code>Post.php</code> in the folder, <code>packages/Blog/Models/</code>, then this will map to the namespace <code>Packages\Blog\Models\Post</code>, and if you set the namespace to this in the file, and run <code>composer dump-autoload</code>, you should be able to import it from that namespace without trouble. As with the <code>App\</code> namespace, because it’s using PSR-4 you’re only specifying the top-level namespace and the folders and files underneath have to mirror the namespace, so for instance, <code>Packages\Foo\Bar</code> maps to <code>packages/Foo/Bar.php</code>. If for some reason PSR-4 autoloading doesn’t map well to what you want to do, then there are other methods you can use - refer to the <a href="https://getcomposer.org/doc/04-schema.md#autoload">relevant section of the Composer documentation</a> for the other methods available.</p>
<p>The controllers are the toughest part, because by default Laravel’s routing works on the assumption that the controllers are all under the <code>App\Http\Controllers</code> namespace, so you can shorten the namespace used. There are two ways around this I’m aware of. One is to specify the full namespace when referencing each controller:</p>
<pre><code class="lang-php">Route::get(&#39;/&#39;, &#39;\App\Modules\Http\Controllers\FooController@index&#39;);
</code></pre>
<p>The other option is to update the <code>RouteServiceProvider.php</code>‘s namespace property. It defaults to this:</p>
<pre><code class="lang-php">protected $namespace = &#39;App\Http\Controllers&#39;;
</code></pre>
<p>If there’s a more convenient namespace you want to place all your controllers under, then you can replace this, and it will become the default namespace applied in your route files.</p>
<p>Other application components such as migrations, routes and views can be loaded from a service provider very easily. Just create a service provider for your module, register it in <code>config/app.php</code>, and set up the <code>boot()</code> method to load whichever components you want from the appropriate place, as in this example:</p>
<pre><code class="lang-php">        $this-&gt;loadMigrationsFrom(__DIR__.&#39;/../database/migrations&#39;);
        $this-&gt;loadRoutesFrom(__DIR__.&#39;/../routes.php&#39;);
        $this-&gt;loadViewsFrom(__DIR__.&#39;/../views&#39;, &#39;comments&#39;);
</code></pre>
<h1 id="separate-packages">Separate packages</h1>
<p>The above approach works particularly well in the initial stages of a project, when you may need to jump around a lot to edit different parts of the project. However, later on, once many parts of the project have stabilised, it may make more sense to pull the modules out into separate repositories and use Composer to pull them in as dependencies, using its support for private repositories. I’ve also often taken this approach right from the start without issue.</p>
<p>This approach has a number of advantages. It makes it easier to reuse parts of the project in other projects if need be. Also, if you put your tests in the packages containing the components they test, it means that rather than running one monolithic test suite for the whole project, you can instead run each module’s tests each time you change it, and limit the test suite of the main project to those integration and acceptance tests that verify the whole thing, along with any unit tests for code that remains in the main repository, resulting in quicker test runs.</p>
<p>Don’t get me wrong, making your code more modular is definitely a good thing and I’m wholly in favour of it. However, it only takes a little knowledge of Composer to be able to achieve this without any third party package at all, which is good because you’re no longer dependent on a package that may at any time fall behind the curve or be abandoned.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Why bad code is bad]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/02/why-bad-code-is-bad/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/02/why-bad-code-is-bad/</guid>
            <pubDate>Wed, 02 Jan 2019 23:00:50 GMT</pubDate>
            <description><![CDATA[<p>This may sound a little trite, but why is it bad to write bad code?</p>
<p>Suppose you’re a client, or a line manager for a team of developers. You work with developers regularly, but when they say that a code base is bad, what are the consequences of that, and how can you justify spending time and money to fix it? I’ve often heard the refrain “If it works, it doesn’t matter”, which may have a grain of truth, but is somewhat disingenuous. In this post, I’ll explain some of the consequences when your code base is bad. It can be hard to put a definitive price tag on the costs associated with delivering bad code, but this should give some idea of the sort of issues you should take into account.</p>
<h1 id="bad-code-kills-developer-productivity">Bad code kills developer productivity</h1>
<p>Bad code is harder to understand, navigate and reason about than good code. Developers are not superhuman, and we can only hold so much in our heads at one time, which is why many of the principles behind a clean and maintainable code base can essentially be boiled down to “break it into bite-sized chunks so developers can understand each one in isolation before seeing how they fit together”.</p>
<p>If one particular class or function gets too big and starts doing too much, it quickly becomes very, very hard to get your head around what that code does. Developers typically have to build a mental model of how a class or function works before they can use it effectively, and the smaller and simpler you can keep each unit of code, the less time and effort it takes to do so. The mark of a skilled developer is not the complexity of their code bases, but their simplicity - they’ve learned to make their code as small, simple, and readable as possible. A clean and well laid-out code base makes it easy for developers to get into the mental state called “flow” that is significantly more productive.</p>
<p>In addition, if an application doesn’t conform to accepted conventions in some way, such as using inappropriate HTTP verbs (eg <code>GET</code> to change the state of something), then quite apart from the fact that it won’t play well with proxy servers, it imposes an additional mental load on developers by forcing them to drop a reasonable set of assumptions about how the application works. If the application used the correct HTTP verbs, experienced developers would know without being told that to create a new report, you’d send a <code>POST</code> request to the <code>reports</code> API endpoint.</p>
<p>During the initial stages of a project, functionality can be delivered quite quickly, but if the code quality is poor, then over time developer velocity can decrease. Ensuring a higher quality code base helps to maintain velocity at a consistent level as it gets bigger. This also means estimates will be more accurate, so if you quote a given number of hours for a feature, you’re more likely to deliver inside that number of hours.</p>
<h1 id="bad-code-is-bad-for-developer-welfare">Bad code is bad for developer welfare</h1>
<p>A code base that’s repetitive, badly organised, overly complex and hard to read is a recipe for stressed developers, making burnout more likely. If a developer suffers burnout, their productivity will drop substantially.</p>
<p>In the longer term, if developer burnout isn’t managed correctly, it could easily increase developer turnover as stressed developers quit. It’s also harder to recruit new developers if they’re faced with the prospect of dealing with a messy, stressful code base.</p>
<h1 id="bad-code-hampers-your-ability-to-pivot">Bad code hampers your ability to pivot</h1>
<p>If the quality of your code base is poor, it can mean that if functionality needs to be changed or added, then more work is involved. Repetitive code can mean something has to be updated in more than one place, and if it becomes too onerous, it can make it too time-consuming or expensive to justify the changes.</p>
<h1 id="bad-code-may-threaten-the-long-term-viability-of-your-project">Bad code may threaten the long-term viability of your project</h1>
<p>One thing that is certain in our industry is that things change. Libraries, languages and frameworks are constantly being updated, and sometimes there will be potentially breaking changes to some of these. On occasion, a library or framework will be discontinued, making it necessary to migrate to a replacement.</p>
<p>Bad code is often tightly coupled to a particular framework or library, and sometimes even to a particular version, making it harder to migrate if it becomes necessary. If a project was written with a language or framework version that had a serious issue, and was too tightly coupled to migrate to a newer version, it might be too risky to keep it running, or it might be necessary to run an insecure application in spite of the risks it posed.</p>
<h1 id="bad-code-is-more-brittle">Bad code is more brittle</h1>
<p>A poor code base will break, a lot, and often in ways that are clearly visible to end users. Duplicate code makes it easy to miss cases where something needs to be updated in more than one place, and if the code base lacks tests, a serious error may not be noticed for a long time, especially if it’s something comparatively subtle.</p>
<h1 id="bad-code-is-hard-if-not-impossible-to-write-automated-tests-for">Bad code is hard, if not impossible, to write automated tests for</h1>
<p>If a particular class or function does too much, it becomes <em>much</em> harder to write automated tests for it because there are more variables going in and more expected outcomes. A sufficiently messy code base may only really be testable by automating the browser, which tends to be very slow and brittle, making test-driven development impractical. Manual testing is no substitute for a proper suite of automated tests, since it’s slower, less consistent and not repeatable in the same way, and it’s only sufficient by itself for the most trivial of web apps.</p>
<h1 id="bad-code-is-often-insecure">Bad code is often insecure</h1>
<p>A bad code base may inadvertently expose user’s data, or be at risk from all kinds of attacks such as cross-site scripting and SQL injection attacks that can also potentially expose too much data.</p>
<p>For any business with EU-based users, the risks of exposing user’s data are very serious. Under the GDPR, there’s a potential fine of up to &euro;20 million, or 4% of turnover. That’s potentially an existential risk for many companies.</p>
<p>In addition, a bad code base is often more vulnerable to denial-of-service attacks. If it has poor or no caching, excessive queries, or inefficient queries, then every time a page loads it will carry out more queries than a more optimised site would. Given the same server specs, the inefficient site will be overwhelmed quicker than the efficient one.</p>
<h1 id="summary">Summary</h1>
<p>It’s all too easy to focus solely on delivering a working product and not worry about the quality of the code base when time spent cleaning it up doesn’t pay the bills, and it can be hard to justify the cost of cleaning it up later to clients.</p>
<p>There are tools you can use to help keep up code quality, such as linters and static analysers, and it’s never a bad idea to investigate the ones available for the language(s) you work in. For best results they should form part of your continuous integration pipeline, so you can monitor changes over time and prompt developers who check in problematic code to fix the issues. Code reviews are another good way to avoid bad code, since they allow developers to find problematic code and offer more elegant solutions.</p>
<p>I’m not suggesting that a code base that has a few warts has no value, or that you should sink huge amounts of developer time into refactoring messy code when money is tight, as commercial concerns do have to come first. But a bad code base does cause serious issues that have financial implications, and it’s prudent to recognise the problems it could cause, and take action to resolve them, or better yet, prevent them occurring in the first place.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Improving search in Vim and Neovim with FZF and Ripgrep]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/12/27/improving-search-in-vim-and-neovim-with-fzf-and-ripgrep/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/12/27/improving-search-in-vim-and-neovim-with-fzf-and-ripgrep/</guid>
            <pubDate>Thu, 27 Dec 2018 18:37:09 GMT</pubDate>
            <description><![CDATA[<p>A while back I was asked to make some changes to a legacy project that was still using Subversion. This was troublesome because my usual method of searching in files is to use Tim Pope’s Fugitive Vim plugin as a frontend for <code>git grep</code>, and so it would be harder than usual to navigate the project. I therefore started looking around for alternative search systems, and one combination that kept on coming up was FZF and Ripgrep, so I decided to give them a try. FZF is a fuzzy file finder, written in Go, while Ripgrep is an extremely fast grep, written in Rust, that respects gitignore rules by default. Both have proven so useful they’re now a permanent part of my setup.</p>
<p>On Mac OS X, both are available via Homebrew, so they’re easy to install. On Ubuntu, Ripgrep is in the repositories, but FZF isn’t, so it was necessary to install it in my home directory. There’s a <a href="https://github.com/junegunn/fzf.vim">Vim plugin for FZF and Ripgrep integration</a>, which, since I use vim-plugged, I could install by adding the following to my <code>init.vim</code>, then running <code>PlugUpdate</code> from Neovim:</p>
<pre><code class="lang-viml">&quot; Search
Plug &#39;~/.fzf&#39;
Plug &#39;junegunn/fzf.vim&#39;
</code></pre>
<p>The plugin exposes a number of commands that are very useful, and I’ll go through the ones I use most often:</p>
<ul>
<li><code>:Files</code> is for finding files by name. I used to use Ctrl-P for this, but FZF is so much better and quicker that I ditched Ctrl-P almost immediately (though you can map <code>:Files</code> to it if you want to use the same key).</li>
<li><code>:Rg</code> uses Ripgrep to search for content in files, so you can search for a specific string. This makes it an excellent replacement for the <code>Ggrep</code> command from Fugitive.</li>
<li><code>:Snippets</code> works with Ultisnips to provide a filterable list of available snippets you can insert, making it much more useful</li>
<li><code>:Tags</code> allows you to filter and search tags in the project as a whole</li>
<li><code>:BTags</code> does the same, but solely in the current buffer</li>
<li><code>:Lines</code> allows you to find lines in the project and navigate to them.</li>
<li><code>:BLines</code> does the same, but solely in the current buffer.</li>
</ul>
<p>In addition to being useful in Neovim, FZF can also be helpful in Bash. You can use <code>Ctrl-T</code> to find file paths, and it enhances the standard <code>Ctrl-R</code> history search, making it faster and more easily navigable. The performance of both is also excellent - they work very fast, even on the very large legacy project I maintain, or on slower machines, and I never find myself waiting for them to finish. Both tools have quickly become an indispensible part of my workflow.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Decorating service classes]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/12/06/decorating-service-classes/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/12/06/decorating-service-classes/</guid>
            <pubDate>Thu, 06 Dec 2018 18:34:16 GMT</pubDate>
            <description><![CDATA[<p>I’ve written before about using decorators to extend the functionality of existing classes, in the context of the repository pattern when working with Eloquent. However, the same practice is applicable in many other contexts.</p>
<p>Recently, I was asked to add RSS feeds to the home page of the legacy project that is my main focus these days. The resulting service class looked something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Services;

use Rss\Feed\Reader;
use App\Contracts\Services\FeedFetcher;

class RssFetcher implements FeedFetcher
{
    public function fetch($url)
    {
        return Reader::import($url);
    }
}
</code></pre>
<p>In accordance with the principle of loose coupling, I also created an interface for it:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Contracts\Services;

interface FeedFetcher
{
    public function fetch($url);
}
</code></pre>
<p>I was recently able to add dependency injection to the project using PHP-DI, so now I can inject an instance of the feed fetcher into the controller by typehinting the interface and having it resolve to the <code>RssFetcher</code> class.</p>
<p>However, there was an issue. I didn’t want the application to make multiple HTTP requests to fetch those feeds every time the page loads. At the same time, it was also a bit much to have a scheduled task running to fetch those feeds and store them in the database, since many times that would be unnecessary. The obvious solution was to cache the feed content for a specified length of time, in this case five minutes.</p>
<p>I <em>could</em> have integrated the caching into the service class itself, but that wasn’t the best practice, because it would be tied to that implementation. If in future we needed to switch to a different feed handler, we’d have to re-implement the caching functionality. So I decided it made sense to decorate the service class.</p>
<p>The decorator class implemented the same interface as the feed fetcher, and accepted another instance of that interface in the constructor, along with a PSR6-compliant caching library. It looked something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Services;

use App\Contracts\Services\FeedFetcher;
use Psr\Cache\CacheItemPoolInterface;

class FetcherCachingDecorator implements FeedFetcher
{
    protected $fetcher;

    protected $cache;

    public function __construct(FeedFetcher $fetcher, CacheItemPoolInterface $cache)
    {
        $this-&gt;fetcher = $fetcher;
        $this-&gt;cache = $cache;
    }

    public function fetch($url)
    {
        $item = $this-&gt;cache-&gt;getItem(&#39;feed_&#39;.$url);
        if (!$item-&gt;isHit()) {
            $item-&gt;set($this-&gt;fetcher-&gt;fetch($url));
            $this-&gt;cache-&gt;save($item);
        }
        return $item-&gt;get();
    }
}
</code></pre>
<p>Now, when you instantiate the feed fetcher, you wrap it in the decorator as follows:</p>
<pre><code class="lang-php">&lt;?php

$fetcher = new FetcherCachingDecorator(
        new App\Services\RssFetcher,
        $cache
);
</code></pre>
<p>As you can see, this solves our problem quite nicely. By wrapping our feed fetcher in this decorator, we keep the caching layer completely separate from any one implementation of the fetcher, so in the event we need to swap the current one out for another implementation, we don’t have to touch the caching layer at all. As long as we’re using dependency injection to resolve this interface, we’re only looking at a little more code to instantiate it.</p>
<p>In addition, this same approach can be applied for other purposes, and you can wrap the service class as many times as necessary. For instance, if we wanted to log all the responses we got, we could write a logging decorator something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Services;

use App\Contracts\Services\FeedFetcher;
use Psr\Log\LoggerInterface;

class FeedLoggingDecorator implements FeedFetcher
{
    protected $fetcher;

    protected $logger;

    public function __construct(FeedFetcher $fetcher, LoggerInterface $logger)
    {
        $this-&gt;fetcher = $fetcher;
        $this-&gt;logger = $logger;
    }

    public function fetch($url)
    {
        $response = $this-&gt;fetcher-&gt;fetch($url);
        $this-&gt;logger-&gt;info($response);
        return $response;
    }
}
</code></pre>
<p>The same idea can be applied to an API client. For instance, say we have the following interface for an API client:</p>
<pre><code class="lang-php">&lt;?php

namespace Foo\Bar\Contracts;

use Foo\Bar\Objects\Item;
use Foo\Bar\Objects\ItemCollection;

interface Client
{
    public function getAll(): ItemCollection;

    public function find(int $id): Item;

    public function create(array $data): Item;

    public function update(int $id, array $data): Item;

    public function delete(int $id);
}
</code></pre>
<p>Now, of course any good API client should respect HTTP headers and use those to do some caching itself, but depending on the use case, you may also want to cache these requests yourself. For instance, if the only changes to the entities stored by the third party API will be ones you’ve made, or they don’t need to be 100% up to date, you may be better off caching those responses before they reach the actual API client. Under those circumstances, you might write a decorator like this to do the caching:</p>
<pre><code class="lang-php">&lt;?php

namespace Foo\Bar\Services;

use Foo\Bar\Contracts\Client;
use Psr\Cache\CacheItemPoolInterface;

class CachingDecorator implements Client
{
    protected $client;

    protected $cache;

    public function __construct(Client $client, CacheItemPoolInterface $cache)
    {
        $this-&gt;client = $client;
        $this-&gt;cache = $cache;
    }

    public function getAll(): ItemCollection
    {
        $item = $this-&gt;cache-&gt;getItem(&#39;item_all&#39;);
        if (!$item-&gt;isHit()) {
            $item-&gt;set($this-&gt;client-&gt;getAll());
            $this-&gt;cache-&gt;save($item);
        }
        return $item-&gt;get();
    }

    public function find(int $id): Item
    {
        $item = $this-&gt;cache-&gt;getItem(&#39;item_&#39;.$id);
        if (!$item-&gt;isHit()) {
            $item-&gt;set($this-&gt;client-&gt;find($id));
            $this-&gt;cache-&gt;save($item);
        }
        return $item-&gt;get();

    }

    public function create(array $data): Item
    {
        $this-&gt;cache-&gt;clear();
        return $this-&gt;client-&gt;create($data);
    }

    public function update(int $id, array $data): Item
    {
        $this-&gt;cache-&gt;clear();
        return $this-&gt;client-&gt;update($id, $data);
    }

    public function delete(int $id)
    {
        $this-&gt;cache-&gt;clear();
        return $this-&gt;client-&gt;delete($id);
    }
}
</code></pre>
<p>Any methods that change the state of the data on the remote API will clear the cache, while any that fetch data will first check the cache, only explicitly fetching data from the API when the cache is empty, and caching it again. I won’t go into how you might write a logging decorator for this, but it should be straightforward to figure out for yourself.</p>
<p>The decorator pattern is a very powerful way of adding functionality to a class without tying it to a specific implementation. If you’re familiar with how middleware works, decorators work in a very similar fashion in that you can wrap your service in as many layers as you wish in order to accomplish specific tasks, and they adhere to the single responsibility principle by allowing you to use different decorators for different tasks.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Simplify your tests with anonymous classes]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/20/simplify-your-tests-with-anonymous-classes/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/20/simplify-your-tests-with-anonymous-classes/</guid>
            <pubDate>Sat, 20 Oct 2018 13:48:05 GMT</pubDate>
            <description><![CDATA[<p>Anonymous classes were added in PHP7, but so far I haven’t made all that much use of them. However, recently I’ve been working on building a simple dependency injection container for learning purposes. This uses the PHP Reflection API to determine how to resolve dependencies. For instance, if it’s asked for a class for which one of the dependencies required by the constructor is an instance of the <code>DateTime</code> class, it should create an instance, and then pass it into the constructor automatically when instantiating the class. Then it should return the newly created class.</p>
<p>Mocking isn’t really a suitable approach for this use case because the container needs to return a concrete class instance to do its job properly. You could just create a series of fixture classes purely for testing purposes, but that would mean either defining more than one class in a file (violating PSR-2), or defining a load of fixture classes in separate files, meaning you’d have to write a lot of boilerplate, and you’d have to move between several different files to understand what’s going on in the test.</p>
<p>Anonymous classes allow you a means to write simple classes for tests inline, as in this example for retrieving a very basic class. The tests use PHPSpec:</p>
<pre><code class="lang-php7">&lt;?php

namespace spec\Vendor\Package;

use Vendor\Package\MyClass;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;
use DateTime;

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_registered_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
}
</code></pre>
<p>You can also define your own methods inline. Here we implement the <code>invoke()</code> magic method so that the class is a callable:</p>
<pre><code class="lang-php7">&lt;?php

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_registered_invokable()
    {
        $toResolve = new class {
            public function __invoke() {
                return new DateTime;
            }
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }
}
</code></pre>
<p>You can also define a constructor. Here, we’re getting the class name of a newly created anonymous class that accepts an instance of <code>DateTime</code> as an argument to the constructor. Then, we can resolve a new instance out of the container:</p>
<pre><code class="lang-php7">&lt;?php

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
}
</code></pre>
<p>For classes that will extend an existing class or implement an interface, you can define those inline too. Or you can include a trait:</p>
<pre><code class="lang-php7">&lt;?php

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) extends Foo implements Bar {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }

            use MyTrait;
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
}
</code></pre>
<p>In cases where the functionality is contained in a trait or abstract class, and you might need to add little or no additional functionality, this is a lot less verbose than creating a class the conventional way.</p>
<p>None of this is stuff you can’t do without anonymous classes, but by defining these sort of disposable fixture classes inline in your tests, you’re writing the minimum amount of code necessary to implement your test, and it’s logical to define it inline since it’s only ever used in the tests. One thing to bear in mind is that anonymous classes are created and instantiated at the same time, so you can’t easily create a class and then instantiate an instance of it separately. However, you can instantiate one, then use the <code>get_class()</code> function to get its class name and use that to resolve it, which worked well for my use case.</p>
<p>Another use case for anonymous classes is testing traits or abstract classes. I generally use Mockery as my mocking solution with PHPUnit tests, but I’ve sometimes missed the <code>getMockForTrait()</code> method from PHPUnit. However, another option is to instantiate an anonymous class that includes that trait for testing purposes:</p>
<pre><code class="lang-php7">&lt;?php

$item = new class() {
    use MyTrait;
};
</code></pre>
<p>This way, your test class is as minimal as possible, and you can test the trait/abstract class in a fairly isolated fashion.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Adding React to a legacy project]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/16/adding-react-to-a-legacy-project/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/16/adding-react-to-a-legacy-project/</guid>
            <pubDate>Tue, 16 Oct 2018 08:00:29 GMT</pubDate>
            <description><![CDATA[<p>The project I’m currently working on is a textbook example of what happens when a project uses jQuery when it really ought to use a proper Javascript framework, or it starts out just using jQuery and grows out of all proportion. It’s also not helped by the fact that historically it’s just been worked on when new functionality needs to be added, meaning that rather than refactoring the code base, it’s been copied-and-pasted. As a result, there’s lots of repetitive code in desparate need of refactoring, and huge reams of horrible jQuery spaghetti code.</p>
<p>When I first took over responsibility for the project, I integrated Laravel Mix into it so that I had the means to refactor some of the common functionality into separate files and require them during the build process, as well as use ES6. However, this was only the first step, as it didn’t sort out the fundamental problem of repetitive boilerplate code being copied and pasted. What I needed was a refactor to use something more opinionated. As it happened, I was asked to add a couple of modals to the admin, and since the modals were one of the worst parts of the admin in terms of repetitive code, they were a strong candidate for implementing using a more suitable library.</p>
<p>I looked at a few options:</p>
<ul>
<li>I’ve used Angular 1 quite successfully in the past, but I didn’t really want to use a framework that was being killed off, and it would be difficult to retrofit into a legacy application</li>
<li>Angular 2+ is actively maintained, but it would again be difficult to retrofit it into a legacy application. In addition, the need for TypeScript would make it problematic.</li>
<li>Vue was a possibility, but it did a bit too much for this use case, and it wasn’t all that clear how to retrofit it to an existing application</li>
</ul>
<p>Eventually, I settled on React.js, for the following reasons:</p>
<ul>
<li>It has a preset in Laravel Mix, making it easy to get started with it.</li>
<li>It has a very limited target - React is closely focused on the view layer, dealing only with rendering and event handling, so it does just what I needed in this case.</li>
<li>It has a strong record of use with legacy applications - after all, it was created by Facebook and they added it incrementally.</li>
<li>It’s easy to test - Jest’s snapshot tests make it easy to verify the rendered content hasn’t changed, and using Enzyme it’s straightforward to test interactions with the component</li>
<li>Higher order components provide a straightforward way to share functionality between components, which I needed to allow different modals to deal with another modal in the same way.</li>
<li>By creating a series of components for common user interface elements, I could then re-use those components in future work, saving time and effort.</li>
</ul>
<p>However, it wasn’t entirely clear how I might go about integrating React into a legacy application. In the end, I managed to figure out an approach which worked.</p>
<p>Normally, I would create a single root for my application, something like this:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./components/App&#39;;

ReactDOM.render(
    &lt;App /&gt;,
    document.getElementById(&#39;root&#39;)
);
</code></pre>
<p>However, that wasn’t an option here. The existing modals were using jQuery and Bootstrap, and the new modals had to work with them. I therefore needed to have only certain parts of the UI managed with React, and the rest wouldn’t be touched. Here’s an example of how I rendered the modal in the end:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import higherOrderComponent from &#39;./components/higherOrderComponent&#39;;
import modalComponent from &#39;./components/modalComponent&#39;;

const Modal = higherOrderComponent(modalComponent);
window.componentWrapper = ReactDOM.render(
  &lt;Modal /&gt;,
  document.getElementById(&#39;modalTarget&#39;)
);

window.componentWrapper.setState({
  foo: &#39;bar&#39;
});
</code></pre>
<p>By extracting the duplicate functionality into a higher order component, I could easily wrap the new modals in that component and share that functionality between the modals. I could then render each component in a different target element, and assign it to a variable in the <code>window</code> namespace. The div with a ID of <code>modalTarget</code> needed to be added in the appropriate place, but otherwise the HTML didn’t need to be touched, since the required markup was in the React component instead.</p>
<p>Then, when I needed to change a value int the statee of the component, I could just call <code>window.componentWrapper.setState({})</code>, passing through the values to set, and these would propogate down to the child components as usual. I could also render multiple different modal components on the page, and refer to each one separately in order to set the state.</p>
<p>This isn’t an approach I’d recommend on a greenfield project - state isn’t really something you should be setting from outside a component like this, and normally I wouldn’t do it. However, it seemed to be the easiest way for this particular use case. Over time I’ll port more and more of the UI over to React, and eventually it won’t be necessary as I’ll be storing the application state in something like Redux.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Do you still need jQuery?]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/11/do-you-still-need-jquery/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/11/do-you-still-need-jquery/</guid>
            <pubDate>Thu, 11 Oct 2018 08:21:58 GMT</pubDate>
            <description><![CDATA[<p>There was a time not so long ago when jQuery was ubiquitous. It was used on almost every website as a matter of course, to the point that many HTML boilerplates included a reference to the CDN.</p>
<p>However, more and more I think it’s probably unnecessary for two main use cases:</p>
<h2 id="jquery-is-probably-unnecessary-for-many-web-apps-with-simple-javascript">jQuery is probably unnecessary for many web apps with simple Javascript</h2>
<p>When jQuery first appeared, IE6 was commonplace, and browser API’s were notoriously inconsistent. jQuery was very useful in ironing out those inconsistencies and helping to make the developer’s experience a bit better.</p>
<p>Nowadays, that’s no longer the case. Internet Explorer is on its way out, with IE11 being the only version still supported by Microsoft, and it’s becoming increasingly hard to justify support for older versions, especially with mobile browsers forming a bigger than ever chunk of the market. We’ll probably need to continue supporting IE11 for a good long while, and possibly IE10 for some time too, but these aren’t anything like as bad to work with as IE6. It’s worth noting that newer versions of jQuery are also dropping support for these older browsers, so in many ways it actually does less than it used to.</p>
<p><a href="http://lmgtfy.com/?q=do+you+still+need+jquery">This is the usual thrust of articles on whether you should still be using jQuery</a> so I’m not going to go over this matter , but for many smaller web apps, jQuery is no longer necessary, and a lot of developers have a tendency to keep using it when it’s probably not required.</p>
<h2 id="jquery-is-insufficient-for-web-apps-with-complex-javascript">jQuery is insufficient for web apps with complex Javascript</h2>
<p>Nowadays, there’s a lot of web applications that have moved big chunks of functionality from the server side to the client side. Beyond a certain (and quite small) level of complexity, jQuery just doesn’t do enough to cut it. For me personally, the nature of the projects I work on means that this is a far, far bigger issue than the first one.</p>
<p>I used to work predominantly with Phonegap, which meant that a lot of functionality traditionally done on the server side had to be moved to the client side, and for that jQuery was never sufficient. My first Phonegap app started out using jQuery, but it quickly became obvious that it was going to be problematic. It wound up as a huge mass of jQuery callbacks and Handlebars templates, which was almost impossible to test and hard to maintain. Given this experience, I resolved to switch to a full-fledged Javascript framework next time I built a mobile app, and for the next one I chose Backbone.js, which still used jQuery as a dependency, but made things more maintainable by giving a structure that it didn’t have before, which was the crucial difference.</p>
<p>The more modern generation of Javascript frameworks such as Vue and React, go further in making jQuery redundant. Both of these implement a so-called Virtual DOM, which is used to calculate the minimum changes required to re-render the element in question. Subsequently using jQuery to mutate the DOM would cause problems because it would get out of sync with the Virtual DOM - in fact, in order to get a jQuery plugin working in the context of a React component, you have to actively prevent React from touching the DOM, thereby losing most of the benefits of using React in the first place. You usually see better results from using a React component designed for that purpose (or writing one, which React makes surprisingly simple), than from trying to shoehorn a jQuery plugin into it.</p>
<p>They also make a lot of things that jQuery does trivially easy - for instance, if you want to conditionally show and hide content in a React component, it’s just a case of building it to hide that content based on a particular value in the props or state, or filtering a list is just a case of applying a filter to the array containing the data and setting the state as appropriate.</p>
<p>In short, for single-page web apps or other ones with a lot of Javascript, you should look at other solutions first, and not just blithely assume jQuery will be up to the task. It’s technically possible to build this sort of web app using jQuery, but it’s apt to turn into a morass of spaghetti code unless approached with a great deal of discipline, one that sadly many developers don’t have, and it doesn’t exactly make it easy to promote code reuse. These days, I prefer React for complex web apps, because it makes it extremely intuitive to break my user interface up into reusable components, and test them individually. Using React would be overkill on brochure-style sites (unless you wanted to build it with something like Gatsby), but for more complex apps it’s often a better fit than jQuery.</p>
<h2 id="so-when-should-you-use-jquery-">So when should you use jQuery?</h2>
<p>In truth, I’m finding it harder and harder to justify using it at all on new builds. I use it on my personal site because that’s built on Bootstrap 3 and so depends on jQuery, but for bigger web apps I’m generally finding myself moving to React, which renders it not just unnecessary for DOM manipulation, but counter-productive to use it. Most of what I do is big enough to justify something like React, and it generally results in code that is more declarative, easier to test and reason about, and less repetitive. Using jQuery for an application like this is probably a bad idea, because it’s difficult (not impossible, mind, if you follow some of the advice <a href="https://learn.jquery.com/code-organization/">here</a>, use a linter and consider using a proper client-side templating system alongside jQuery) to build an elegant and maintainable Javascript-heavy application.</p>
<p>As a rule of thumb, I find anything which is likely to require more than a few hundred lines of Javascript to be written, is probably complex enough that jQuery isn’t sufficient, and I should instead consider something like React.</p>
<p>I doubt it’d be worth the bother of ripping jQuery out of a legacy application and rewriting the whole thing to not require it, but for new builds I would think very hard about:</p>
<ul>
<li>Whether jQuery is sufficient, or you’d be better off using something like React, Vue or Angular</li>
<li>If it is sufficient, whether it’s actually necessary</li>
</ul>
<p>In all honesty, I don’t think using it when it’s technically not necessary is as much of a big deal as the issue of using it when it’s not really sufficient. Yes, dowloading a library you technically don’t need for a page is a bad practice, and it does make your site slower and harder for users on slow mobile connections, but there are ways to mitigate that such as CDN’s, caching and minification. If you build a web app using jQuery alone when React, Vue or Angular would be more suitable, you’re probably going to have to write a lot more code that will be difficult to maintain, test and understand. Things like React were created to solve the problems that arose when developers built complex client-side applications with jQuery, and are therefore a good fit for bigger applications. The complex setup does mean they have a threshold below which it’s not worth the bother of using them, but past that threshold they result in better, more maintainable, more testable and more reusable code.</p>
<h2 id="now-react-is-cool-you-hate-jquery-you-hipster-">Now React is cool, you hate jQuery, you hipster…</h2>
<p>Don’t be a prat. Bitter experience has taught me that for a lot of my own personal use cases, jQuery is insufficient. It doesn’t suck, it’s just insufficient. If for your use case, jQuery <em>is</em> sufficient, then that’s fine. All I’m saying is that when a web app becomes sufficiently complex, jQuery can begin to cause more problems than it solves, and that for a sufficiently complex web app you should consider other solutions.</p>
<p>I currently maintain a legacy application that includes thousands of lines of Javascript. Most of it is done with jQuery and some plugins, and it’s resulted in some extremely repetitive jQuery callbacks that are hard to maintain and understand, and impossible to test. Recently I was asked to add a couple of modals to the admin interface, and rather than continuing to add them using jQuery and adding more spaghetti code, I instead opted to build them with React. During the process of building the first modal, I produced a number of components for different elements of the UI. Then, when I built the second one, I refactored those components to be more generic, and moved some common functionality into a higher-order component so that it could be reused. Now, if I need to add another modal, it will be trivial because I already have those components available, and I can just create a new component for the modal, import those components that I need, wrap it in the higher-order component if necessary, and that’s all. I can also easily test those components in isolation. In short, I’ve saved myself some work in the long run by writing it to use a library that was a better fit.</p>
<p>It’s not like using jQuery inevitably results in unmaintainable code, but it does require a certain amount of discipline to avoid it. A more opinionated library such as React makes it far, far harder to create spaghetti code, and makes code reuse natural in a way that jQuery doesn’t.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[An approach to writing golden master tests for PHP web applications]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/08/an-approach-to-writing-golden-master-tests-for-php-web-applications/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/08/an-approach-to-writing-golden-master-tests-for-php-web-applications/</guid>
            <pubDate>Mon, 08 Oct 2018 10:20:53 GMT</pubDate>
            <description><![CDATA[<p>Apologies if some of the spelling or formatting on this post is off - I wrote it on a long train journey down to London, with sunlight at an inconvenient angle.</p>
<p>Recently I had to carry out some substantial changes to the legacy web app I maintain as the lion’s share of my current job. The client has several channels that represent different parts of the business that would expect to see different content on the home page, and access to content is limited first by channel, and then by location. The client wanted an additional channel added. Due to bad design earlier in the application’s lifetime that isn’t yet practical to refactor away, each type of location has its own model, so it was necessary to add a new location model. It also had to work seamlessly, in the same way as the other location types. Unfortunately, these branch types didn’t use polymorphism, and instead used large switch statements, and it wasn’t practical to refactor all that away in one go. This was therefore quite a high-risk job, especially considering the paucity of tests on a legacy code base.</p>
<p>I’d heard of the concept of a <em>golden master test</em> before. If you haven’t heard of it before, the idea is that it works by running a process, capturing the output, and then comparing the output of that known good version against future runs. It’s very much a test of last resort since, in the context of a web app, it’s potentially very brittle since it depends on the state of the application remaining the same between runs to avoid false positives. I needed a set of simple “snapshot tests”, similar to how snapshot testing works with Jest, to catch unexpected breakages in a large number of pages, and this approach seemed to fit the bill. Unfortunately, I hadn’t been able to find a good example of how to do this for PHP applications, so it took a while to figure out something that worked.</p>
<p>Here is an example base test case I used for this approach:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests;

use PHPUnit_Framework_TestCase as BaseTestCase;
use Behat\Mink\Driver\GoutteDriver;
use Behat\Mink\Session;

class GoldenMasterTestCase extends BaseTestCase
{
    protected $driver;

    protected $session;

    protected $baseUrl = &#39;http://localhost:8000&#39;;

    protected $snapshotDir = &quot;tests/snapshots/&quot;;

    public function setUp()
    {
        $this-&gt;driver = new GoutteDriver();
        $this-&gt;session = new Session($this-&gt;driver);
    }

    public function tearDown()
    {
        $this-&gt;session = null;
        $this-&gt;driver = null;
    }

    public function loginAs($username, $password)
    {
        $this-&gt;session-&gt;visit($this-&gt;baseUrl.&#39;/login&#39;);
        $page = $this-&gt;session-&gt;getPage();
        $page-&gt;fillField(&quot;username&quot;, $username);
        $page-&gt;fillField(&quot;password&quot;, $password);
        $page-&gt;pressButton(&quot;Sign In&quot;);
        return $this;
    }

    public function goto($path)
    {
        $this-&gt;session-&gt;visit($this-&gt;baseUrl.$path);
        $this-&gt;assertNotEquals(404, $this-&gt;session-&gt;getStatusCode());
        return $this;
    }

    public function saveHtml()
    {
        if (!$this-&gt;snapshotExists()) {
            $this-&gt;saveSnapshot();
        }
        return $this;
    }

    public function assertSnapshotsMatch()
    {
        $path = $this-&gt;getPath();
        $newHtml = $this-&gt;processHtml($this-&gt;getHtml());
        $oldHtml = $this-&gt;getOldHtml();
        $diff = &quot;&quot;;
        if (function_exists(&#39;xdiff_string_diff&#39;)) {
            $diff = xdiff_string_diff($oldHtml, $newHtml);
        }
        $message = &quot;The path $path does not match the snapshot\n$diff&quot;;
        self::assertThat($newHtml == $oldHtml, self::isTrue(), $message);
    }

    protected function getHtml()
    {
        return $this-&gt;session-&gt;getPage()-&gt;getHtml();
    }

    protected function getPath()
    {
        $url = $this-&gt;session-&gt;getCurrentUrl();
        $path = parse_url($url, PHP_URL_PATH);
        $query = parse_url($url, PHP_URL_QUERY);
        $frag = parse_url($url, PHP_URL_FRAGMENT);
        return $path.$query.$frag;
    }

    protected function getEscapedPath()
    {
        return $this-&gt;snapshotDir.str_replace(&#39;/&#39;, &#39;_&#39;, $this-&gt;getPath()).&#39;.snap&#39;;
    }

    protected function snapshotExists()
    {
        return file_exists($this-&gt;getEscapedPath());
    }

    protected function processHtml($html)
    {
        return preg_replace(&#39;/&lt;input type=&quot;hidden&quot;[^&gt;]+\&gt;/i&#39;, &#39;&#39;, $html);
    }

    protected function saveSnapshot()
    {
        $html = $this-&gt;processHtml($this-&gt;getHtml());
        file_put_contents($this-&gt;getEscapedPath(), $html);
    }

    protected function getOldHtml()
    {
        return file_get_contents($this-&gt;getEscapedPath());
    }
}
</code></pre>
<p>Because this application is built with Zend 1 and doesn’t have an easy way to get the HTML response without actually running the application, I was forced to use an actual HTTP client to fetch the content while the web server is running. I’ve used Mink together with Behat many times in the past, and the Goutte driver is fast and doesn’t rely on Javascript, so that was the best bet for a simple way of retrieving the HTML. Had I been taking this approach with a Laravel application, I could have populated the testing database with a common set of fixtures, and passed a request object through the application and captured the response object’s output rather than using an HTTP client, thereby eliminating the need to run a web server and making the tests faster and less brittle.</p>
<p>Another issue was CSRF handling. A CSRF token is, by definition, generated randomly each time the page is loaded, and so it broke those pages that had forms with CSRF tokens. The solution I came up with was to strip out the hidden input fields.</p>
<p>When each page is tested, the first step is to fetch the content of that page. The test case then checks to see if there’s an existing snapshot. If not, the content is saved as a new snapshot file. Otherwise, the two snapshots are compared, and the test fails if they do not match.</p>
<p>Once that base test case was in place, it was then straightforward to extend it to test multiple pages. I wrote one test to check pages that did not require login, and another to check pages that did require login, and the paths for those pages were passed through using a data provider method, as shown below:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\GoldenMaster;

use Tests\GoldenMasterTestCase;

class GoldenMasterTest extends GoldenMasterTestCase
{
    /**
     * @dataProvider nonAuthDataProvider
     */
    public function testNonAuthPages($data)
    {
        $this-&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function nonAuthDataProvider()
    {
        return [
            [&#39;/login&#39;],
        ];
    }

    /**
     * @dataProvider dataProvider
     */
    public function testPages($data)
    {
        $this-&gt;loginAs(&#39;foo&#39;, &#39;bar&#39;)
            -&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function dataProvider()
    {
        return [
            [&#39;/foo&#39;],
            [&#39;/bar&#39;],
        ];
    }
}
</code></pre>
<p>Be warned, this is <em>not</em> an approach I would advocate as a matter of course, and it should only ever be a last resort as an alternative to onerous manual testing for things that can’t be tested in their current form. It’s extremely brittle, and I’ve had to deal with a lot of false positives, although that would be easier if I could populate a testing database beforehand and use that as the basis of the tests. It’s also very slow, with each test taking three or four seconds to run, although again this would be less of an issue if I could pass through a request object and get the response HTML directly. Nonetheless, I’ve found it to be a useful technique as a test of last resort for legacy applications.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding the pipeline pattern]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/05/understanding-the-pipeline-pattern/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/05/understanding-the-pipeline-pattern/</guid>
            <pubDate>Fri, 05 Oct 2018 18:36:16 GMT</pubDate>
            <description><![CDATA[<p>In a previous post, I used the pipeline pattern to demonstrate processing letters using optical recognition and machine learning. The pipeline pattern is something I’ve found very useful in recent months. For a sequential series of tasks, this approach can make your code easier to understand by allowing you to break it up into simple, logical steps which are easy to test and understand individually. If you’re familiar with pipes and redirection in Unix, you’ll be aware of how you can chain together multiple, relatively simple commands to carry out some very complex transformations on data.</p>
<p>A few months back, I was asked to build a webhook for a Facebook lead form at work. One of my colleagues was having to manually export CSV data from Facebook for the data, and then import it into a MySQL database and a Campaign Monitor mailing list, which was an onerous task, so they asked me to look at more automated solutions. I wound up building a webhook with Lumen that would go through the following steps:</p>
<ul>
<li>Get the lead ID’s from the webhook</li>
<li>Pull the leads from the Facebook API using those ID’s</li>
<li>Process the raw data into a more suitable format</li>
<li>Save the data to the database</li>
<li>Push the data to Campaign Monitor</li>
</ul>
<p>Since this involved a number of discrete steps, I chose to implement each step as a separate stage. That way, each step was easy to test in isolation, and it was easily reusable. As it turned out, this approach saved us because Facebook needed to approve this app (and ended up rejecting it - their documentation at the time wasn’t clear on implementing server-to-server apps, making it hard to meet their guidelines), so we needed an interim solution. I instead wrote an Artisan task for importing the file from a CSV, which involved the following steps:</p>
<ul>
<li>Read the rows from the CSV file</li>
<li>Format the CSV data into the desired format</li>
<li>Save the data to the database</li>
<li>Push the data to Campaign Monitor</li>
</ul>
<p>This meant that two of the existing steps could be reused, as is, without touching the code or tests. I just added two new classes to read the data and format the data, and the Artisan command, which simply called the various pipeline stages, <em>and that was all</em>. In this post, I’ll demonstrate how I implemented this.</p>
<p>While there is more than one implementation of this available, and it wouldn’t be hard to roll your own, I generally use the PHP League’s <a href="https://pipeline.thephpleague.com/">Pipeline package</a>, since it’s simple, solid and well-tested. Let’s say our application has three steps:</p>
<ul>
<li>Format the request data</li>
<li>Save the data</li>
<li>Push it to a third party service.</li>
</ul>
<p>We therefore need to write a stage for each step in the process. Each one must be a callable, such as a closure, a callback, or a class that implements the <code>__invoke()</code> magic method. I usually go for the latter as it allows you to more easily inject dependencies into the stage via its constructor, making it easier to use and test. Here’s what our first stage might look like:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Stages;

use Illuminate\Support\Collection;

class FormatData
{
    public function __invoke(Collection $data): Collection
    {
        return $data-&gt;map(function ($item) {
            return [
                &#39;name&#39; =&gt; $item-&gt;fullname,
                &#39;email&#39; =&gt; $item-&gt;email
            ];
        });
    }
}
</code></pre>
<p>This class does nothing more than receive a collection, and format the data as expected. We could have it accept a request object instead, but I opted not to because I felt it made more sense to pass the data in as a collection so it’s not tied to an HTTP request. That way, it can also handle data passed through from a CSV file using an Artisan task, and the details of how it receives the data in the first place are deferred to the class that calls the pipeline in the first place. Note this stage also returns a collection, for handling by the next step:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Stages;

use App\Lead;
use Illuminate\Support\Collection;

class SaveData
{
    public function __invoke(Collection $data): Collection
    {
        return $data-&gt;map(function ($item) {
            $lead = new Lead;
            $lead-&gt;name = $item-&gt;name;
            $lead-&gt;email = $item-&gt;email;
            $lead-&gt;save();
            return $lead;
        }
    }
}
</code></pre>
<p>This step saves each lead as an Eloquent model, and returns a collection of the saved models, which are passed to the final step:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Stages;

use App\Contracts\Services\MailingList;
use Illuminate\Support\Collection;

class AddDataToList
{
    protected $list;

    public function __construct(MailingList $list)
    {
        $this-&gt;list = $list;
    }

    public function __invoke(Collection $data)
    {
        return $data-&gt;each(function ($item) {
            $this-&gt;list-&gt;add([
                &#39;name&#39; =&gt; $item-&gt;name,
                &#39;email&#39; =&gt; $item-&gt;email
            ]);
        });
    }
}
</code></pre>
<p>This step uses a wrapper class for a mailing service, which is passed through as a dependency in the constructor. The <code>__invoke()</code> method then loops through each Eloquent model and uses it to fetch the data, which is then added to the list. With our stages complete, we can now put them together in our controller:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Stages\FormatData;
use App\Stages\SaveData;
use App\Stages\AddDataToList;
use League\Pipeline\Pipeline;
use Illuminate\Support\Collection;

class WebhookController extends Controller
{
    public function store(Request $request, Pipeline $pipeline, FormatData $formatData, SaveData $savedata, AddDataToList $addData)
    {
        try {
            $data = Collection::make($request-&gt;get(&#39;data&#39;));
            $pipe = $pipeline-&gt;pipe($formatData)
                -&gt;pipe($saveData)
                -&gt;pipe($addData);
            $pipe-&gt;process($data);
        } catch (\Exception $e) {
            // Handle exception
        }
    }
}
</code></pre>
<p>As mentioned above, we extract the request data (assumed to be an array of data for a webhook), and convert it into a collection. Then, we put together our pipeline. Note that we use dependency injection to fetch the steps - feel free to use method or constructor injection as appropriate. We instantiate our pipeline, and call the <code>pipe()</code> method multiple times to add new stages.</p>
<p>Finally we pass the data through to our pipe for processing by calling the <code>process()</code> method, passing in the initial data. Note that we can wrap the whole thing in a <code>try...catch</code> statement to handle exceptions, so if something happens that would mean we would want to cease processing at that point, we can throw an exception in the stage and handle it outside the pipeline.</p>
<p>This means that our controller is kept very simple. It just gets the data as a collection, then puts the pipeline together and passes the data through. If we subsequently had to write an Artisan task to do something similar from the command line, we could fetch the data via a CSV reader class, and then pass it to the same pipeline. If we needed to change the format of the initial data, we could replace the <code>FormatData</code> class with a single separate class with very little trouble.</p>
<p>Another thing you can do with the League pipeline package, but I haven’t yet had the occasion to try, is use <code>League\Pipeline\PipelineBuilder</code> to build pipelines in a more dynamic fashion. You can make steps conditional, as in this example:</p>
<pre><code class="lang-php">&lt;?php

use League\Pipeline\PipelineBuilder;

$builder = (new PipelineBuilder)
    -&gt;add(new FormatData);
if ($data[&#39;type&#39;] = &#39;foo&#39;) {
    $builder-&gt;add(new HandleFooType);
}
$builder-&gt;add(new SaveData);
$pipeline = $builder-&gt;build();
$pipeline-&gt;process($data);
</code></pre>
<p>The pipeline pattern isn’t appropriate for every situation, but for anything that involves a set of operations on the same data, it makes a lot of sense, and can make it easy to break larger operations into smaller steps that are easier to understand, test, and re-use.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Replacing switch statements with polymorphism in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/03/replacing-switch-statements-with-polymorphism-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/03/replacing-switch-statements-with-polymorphism-in-php/</guid>
            <pubDate>Wed, 03 Oct 2018 22:07:33 GMT</pubDate>
            <description><![CDATA[<p>For the last few months, I’ve been making a point of picking up on certain antipatterns, and ways to avoid or remove them. One I’ve seen a lot recently is unnecessary large switch-case or if-else statements. For instance, here is a simplified example of one of these, which renders links to different objects:</p>
<pre><code class="lang-php">&lt;?php

switch ($item-&gt;getType()) {
    case &#39;audio&#39;:
        $media = new stdClass;
        $media-&gt;type = &#39;audio&#39;;
        $media-&gt;duration = $item-&gt;getLength();
        $media-&gt;name = $item-&gt;getName();
        $media-&gt;url = $item-&gt;getUrl();
    case &#39;video&#39;:
        $media = new stdClass;
        $media-&gt;type = &#39;video&#39;;
        $media-&gt;duration = $item-&gt;getVideoLength();
        $media-&gt;name = $item-&gt;getTitle();
        $media-&gt;url = $item-&gt;getUrl();
}
return &#39;&lt;a href=&quot;&#39;.$media-&gt;url.&#39;&quot; class=&quot;&#39;.$media-&gt;type.&#39;&quot; data-duration=&quot;&#39;.$media-&gt;duration.&#39;&quot;&gt;&#39;.$media-&gt;name.&#39;&lt;/a&gt;&#39;;
</code></pre>
<p>There are a number of problems with this, most notably the fact that it’s doing a lot of work to try and create a new set of objects that behave consistently. Instead, your objects should be polymorphic - in other words, you should be able to treat the original objects the same.</p>
<p>While strictly speaking you don’t need one, it’s a good idea to create an interface that defines the required methods. That way, you can have those objects implement that interface, and be certain that they have all the required methods:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Contracts;

interface MediaItem
{
    public function getLength(): int;

    public function getName(): string;

    public function getType(): string;

    public function getUrl(): string;
}
</code></pre>
<p>Then, you need to implement that interface in your objects. It doesn’t matter if the implementations are different, as long as the methods exist. That way, objects can define how they return a particular value, which is simpler and more logical than defining it in a large switch-case statement elsewhere. It also helps to prevent duplication. Here’s what the audio object might look like:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Models;

use App\Contracts\MediaItem;

class Audio implements MediaItem
{
    public function getLength(): int
    {
        return $this-&gt;length;
    }

    public function getName(): string
    {
        return $this-&gt;name;
    }

    public function getType(): string
    {
        return $this-&gt;type;
    }

    public function getUrl(): string
    {
        return $this-&gt;url;
    }
}
</code></pre>
<p>And here’s a similar example of the video object:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Models;

use App\Contracts\MediaItem;

class Video implements MediaItem
{
    public function getLength(): int
    {
        return $this-&gt;getVideoLength();
    }

    public function getName(): string
    {
        return $this-&gt;getTitle();
    }

    public function getType(): string
    {
        return $this-&gt;type;
    }

    public function getUrl(): string
    {
        return $this-&gt;url;
    }
}
</code></pre>
<p>With that done, the code to render the links can be greatly simplified:</p>
<pre><code class="lang-php">&lt;?php
return &#39;&lt;a href=&quot;&#39;.$item-&gt;getUrl().&#39;&quot; class=&quot;&#39;.$item-&gt;getType().&#39;&quot; data-duration=&quot;&#39;.$item-&gt;getLength().&#39;&quot;&gt;&#39;.$media-&gt;getName().&#39;&lt;/a&gt;&#39;;
</code></pre>
<p>Because we can use the exact same methods and get consistent responses, yet also allow for the different implementations within the objects, this approach allows for much more elegant and readable code. Different objects can be treated in the same way without the need for writing extensive if or switch statements.</p>
<p>I haven’t had the occasion to do so, but in theory this approach is applicable in other languages, such as Javascript or Python (although these languages don’t have the concept of interfaces). Since discovering the swtch statement antipattern and how to replace it with polymorphism, I’ve been able to remove a lot of overly complex code.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Career direction after seven years]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/09/25/career-direction-after-seven-years/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/09/25/career-direction-after-seven-years/</guid>
            <pubDate>Tue, 25 Sep 2018 21:03:29 GMT</pubDate>
            <description><![CDATA[<p>Earlier this month, I passed the seven year anniversary of starting my first web dev job. That job never really worked out, for various reasons, but since then I’ve had an interesting time of it. I’ve diversified into app development via Phonegap, and I’ve worked with frameworks that didn’t exist when I first started. So it seems a good opportunity to take stock and think about where I want to head next.</p>
<p>Sometimes these posts are where someone announces they’re leaving their current role, but that’s not the case here - I’m pretty happy where I am right now. I am maintaining a legacy project, but I do feel like I’m making a difference and it’s slowly becoming more pleasant to work with, and I’m learning a lot about applying design patterns, so I think where I am right now is a good place for me. However, it’s a useful exercise to think about what I want to do, where I want to concentrate my efforts, and what I want to learn about.</p>
<p>So, here are my thoughts about where I want to go in future:</p>
<ul>
<li>I really enjoy working with React, and I want to do so much more than I have in the past, possibly including React Native. Ditto with Redux.</li>
<li>Much as I love Django, it’s unlikely I’ll be using it again in the future, as it’s simply not in much demand where I live. In 2015, I was working at a small agency with a dev team of three, including me, and it became apparent that we needed to standardise on a single framework. I’d been using CodeIgniter on and off for several years, but it was tired and dated, yet I couldn’t justify using Django because no-one else was familiar with Python, so we settled on Laravel. Ever since, Laravel has been my go-to framework - Django does some things better (Django REST Framework remains the best way I’ve ever found to create a REST API), but Laravel does enough stuff well enough that I can use it for most things I need, so it’s a good default option.</li>
<li>I <em>really</em> don’t want to work with Wordpress often, and if I do, I’d feel a lot better about it if I used Bedrock. Just churning out boilerplate sites is anathema to me - I’d much rather do something more interesting, even if it were paid worse.</li>
<li>PHP is actually pretty nice these days (as long as you’re not dealing with a legacy application), and I generally don’t mind working with it, as long as it’s fairly modern.</li>
<li>I enjoy mentoring and coaching others, and I’d like to do that a lot more often than I have been doing. Mentoring and coaching is a big part of being a senior developer, since a good mentor can quickly bring inexperienced developers up to a much higher standard, and hugely reduces the amount of horrible legacy code that needs to be maintained. I was without an experienced mentor for much of my career, and in retrospect it held me back - having someone around to teach me about TDD and design patterns earlier would have helped no end. Also, I find it the single most rewarding part of my job.</li>
<li>I have absolutely no desire whatsoever to go into management, or leave coding behind in any way, shape or form. I’ve heard it said before that Microsoft have two separate career tracks for developers, one through people management, the other into a software architect role, and were I there, I would definitely opt for the latter.</li>
<li>I’m now less interested in learning new frameworks or languages than I am in picking up and applying new design patterns, and avoiding antipatterns - they’re the best way to improve your code quality. I’ve learned the hard way that the hallmark of a skilled developer’s code is not the complexity, but the simplicity - I can now recognise the convoluted code I wrote earlier in my career as painful to maintain, and can identify it in legacy projects.</li>
<li>I’ve always used linters and other code quality tools, and I’m eager to evangelise their usage.</li>
<li>I’ve been a proponent of TDD for several years now, and that’s going to continue - I’ve not only seen how many things it catches when you have tests, but also how painful it is when you have a large legacy project with no tests at all, and I’m absolutely staggered that anyone ever continues to write non-trivial production code without any sort of tests.</li>
<li>I want to understand the frameworks I use at a deeper level - it’s all too easy to just treat them as magic, when there are huge benefits to understanding how your framework works under the bonnet, and how to swap out the framework’s functionality for alternative implementations.</li>
<li>I’d like to get involved in more IoT-related projects - guess the 3 Raspberry Pi’s and the Arduino I have gathering dust at home need to get some more use…</li>
<li>Chat interfaces are interesting - I built an Alexa skill recently, which was fun and useful, and I’d like to do stuff like that more often.</li>
</ul>
<p>So, after seven years, that’s where I see myself going in future. I think I’m in a good place to do that right now, and I’ll probably stay where I am for a good long while yet. The first seven years of my web dev career have been interesting, and I’m eager to see what the next seven bring.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[How I'm refactoring a Zend 1 legacy project]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/09/24/how-i&apos;m-refactoring-a-zend-1-legacy-project/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/09/24/how-i&apos;m-refactoring-a-zend-1-legacy-project/</guid>
            <pubDate>Mon, 24 Sep 2018 21:30:46 GMT</pubDate>
            <description><![CDATA[<p>In my current job I’ve been maintaining and developing a Zend 1 legacy project for the best part of a year. It has to be said, it’s the worst code base I have ever seen, with textbook examples of many antipatterns, spaghetti jQuery, copy-pasted code and overly complex methods. It’s a fairly typical example of a project built on an older MVC framework by inexperienced developers (I’ve been responsible for building similar things in my CodeIgniter days).</p>
<p>In this article I’ll go through some of the steps I’ve taken to help bring this legacy project under control. Not all of them are complete as at time of writing, but they’ve all helped to make this decidedly crappy project somewhat better. In working with this legacy project, I’ve found Paul Jones’ book <em>Modernizing Legacy Applications in PHP</em> to be very useful, and if you’re working on a similar legacy project, I highly recommend investing in a copy. I’ve also found <a href="https://sourcemaking.com/">Sourcemaking</a> to be a useful resource in identifying antipatterns in use, refactoring strategies, and applicable design patterns.</p>
<h1 id="moving-to-git">Moving to Git</h1>
<p>When I first started working on the project, the repository was in Subversion, and was absolutely colossal - checking it out took two hours! Needless to say, my first action was to migrate it to Git. I used <a href="https://john.albin.net/git/convert-subversion-to-git">this post</a> as a guide, and it was pretty straightforward, but took all of my first day.</p>
<h1 id="adding-migrations">Adding migrations</h1>
<p>The next job involved making some changes to the database. Unfortunately, Zend 1 doesn’t include migrations, and no-one had added a third party solution. I therefore did some research and wound up stumbling across <a href="https://phinx.org/">Phinx</a>, which is a standalone migration package with a command-line runner. Using that, it was straightforward to start adding migrations to make any necessary changes to the database structure and fixtures.</p>
<h1 id="moving-dependencies-to-composer">Moving dependencies to Composer</h1>
<p>The project was using Composer, but only to a limited degree - the framework itself was in the <code>library/</code> folder, and several other dependencies were also stored here. The <code>vendor/</code> directory was also checked into version control. I therefore took the vendor folder out of Git, and added <code>zendframework/zendframework1</code> as a dependency. This drastically reduced the size of the repository.</p>
<h1 id="cleaning-up-commented-code">Cleaning up commented code</h1>
<p>There was an awful lot of commented code. Some of it was even commented out incorrectly (PHP code commented out with HTML comments). I’m of the school of thought that commented code is best deleted without a second thought, since it can be retrieved from version control, and it can be confusing, so I’ve been removing any commented code I come across.</p>
<h1 id="refactoring-duplicate-code">Refactoring duplicate code</h1>
<p>One of the biggest problems with the code base was the high level of duplication - a lot of code, particularly in the view layer, had been copied and pasted around. Running PHPCPD on the repository showed that, not including the views, around 12% of the code base was copied-and-pasted, which is a horrific amount. I therefore started aggressively refactoring duplicate code out into helpers and traits. As at today, the amount of duplication excluding the views is around 2.6%, which is obviously a big improvement.</p>
<h1 id="refactoring-object-creation-code-into-persisters">Refactoring object creation code into persisters</h1>
<p>There was some extremely complex code for creating and updating various objects that was jammed into the controllers, and involved a lot of duplicate code. I’ve used dedicated persister classes in the past with great effect, so I pulled that code out into persisters to centralise the logic about the creation of different objects. It’s still a lot more convoluted than I’d like, but at least now it’s out of the controllers and can be tested to some extent.</p>
<h1 id="creating-repositories">Creating repositories</h1>
<p>One of the most problematic parts of the code base is the models. Whoever was responsible for them couldn’t seem to decide whether they represented a single domain object, or a container for methods for getting those objects, so both responsibilities were mixed up in the same class. This means you had to instantiate an object, then use it to call one of the methods to get another instance of that object, as in this example:</p>
<pre><code class="lang-php">$media = new Application_Model_Media;
$media = $media-&gt;find(1);
</code></pre>
<p>I’ve therefore resolved to pull those methods out into separate repository classes, leaving the models as pure domain objects. Unfortunately, the lack of dependency injection makes it problematic to instantiate the repositories. For that reason, right now the repositories only implement static methods - it’s not ideal, but it’s better than what we have now.</p>
<p>I started out by creating interfaces for the methods I wanted to migrate, and had the models implement them. Then, I moved those methods from the model to the repository classes and amended all references to them, before removing the interfaces from the models. Now, a typical find request looks like this:</p>
<pre><code class="lang-php">$media = App\Repository\Media::find(1);
</code></pre>
<p>It’s not done yet, but over half of them have been migrated.</p>
<p>Once that’s done, I’ll then be in a position to look at refactoring the logic in the models to make them easier to work with - right now each model has dedicated setters and getters (as well as some horrific logic to populate them), and I’m considering amending them to allow access to the properties via the <code>__get()</code> and <code>__set()</code> magic methods. Another option is to consider migrating the database layer to Doctrine, since that way we can reuse the getters and setters, but I haven’t yet made a firm decision about that.</p>
<h1 id="adding-tests">Adding tests</h1>
<p>The poor design of this application makes it difficult to test, so right now the coverage is poor. I’ve been using Behat to produce a basic set of acceptance tests for some of the most fundamental functionality, but they’re brittle and can be broken by database changes. I’ve also added some (even more brittle) golden master tests using a technique I’ll mention in a later blog post. I have got unit tests for three of the persister classes and some utility classes I’ve added, but nowhere near the level I want.</p>
<h1 id="refactoring-code-out-of-the-fat-controllers">Refactoring code out of the fat controllers</h1>
<p>Fat controllers are an antipattern I’ve seen, and indeed been responsible for myself, in the past, and this project has them in spades - running PHP Mess Detector on them is pretty sobering. The overwhelming majority of the code base is concentrated in the controllers, and it’s going to take a long time to refactor it into other classes.</p>
<p>Zend 1 does have the concept of controller helpers, and that’s been useful for removing some duplicate code, while more shared code has been refactored out into traits. In addition, the utilities I’ve added include a Laravel-style collection class, and using that I’ve been able to refactor a lot of quite complex array handling into much simpler chained collection handling. However, this is still going to take a lot of effort.</p>
<h1 id="adding-events">Adding events</h1>
<p>The lack of a decent event system caused particular problems when I was asked to add tracking of when a user views certain resources, so I used the <a href="http://event.thephpleague.com/2.0/">PHP League’s Event package</a> for this. I’ve started moving some other functionality to event listeners too, but this is another thing that will take a long time.</p>
<h1 id="refactoring-the-front-end">Refactoring the front end</h1>
<p>Like many legacy projects, the front end is a horrible mess of jQuery spaghetti code, with some Handlebars templates thrown in here and there for good measure. It’s easily complex enough that it would benefit from a proper front-end framework, but a full rewrite is out of the question.</p>
<p>I was recently asked to add two new modals in the admin interface, and decided that it was worth taking a new approach rather than adding yet more jQuery spaghetti. Angular 1 is on its way out, so that wasn’t an option, and Angular 2+ would necessitate using Typescript, which would likely be problematic in the context of a legacy app, as well as the complexity being an issue. Vue was a possibility, but I always feel like Vue tries to do too much. Instead, I decided to go for React, because:</p>
<ul>
<li>I’ve always enjoyed working with React, even though I haven’t had much chance to do so in the past.</li>
<li>We’re using Laravel Mix for processing the CSS and JS files (it can be used on non-Laravel projects), and it has a preset for React</li>
<li>React is well-suited to being added incrementally to existing projects without the need for a full rewrite (after all, it works for Facebook…), so it was straightforward to do a single modal with it</li>
<li>It’s easy to test - you can use snapshot tests to check it remains consistent, and using Enzyme it’s straightforward to navigate the rendered component for other tests</li>
</ul>
<p>Both modals turned out very well, and went live recently. The first one took a fair while to write, and then when I wrote the second one, I had to spend some time making the sub-components more generic and pulling some functionality out into a higher order component, but now that that’s done it should be straightforward to write more.</p>
<p>In the longer term I plan to migrate more and more of the admin to React over time. The front end also has a new home page on the cards, and the plan is to use React for that too. Once the whole UI is using React, that will have eliminated most, if not all, of the problems with duplicate code in the view layer, as well as allowing for eventually turning the application into a single-page web app.</p>
<h1 id="upgrading-the-php-version-and-migrating-to-a-new-server">Upgrading the PHP version and migrating to a new server</h1>
<p>When I started work on the project, it was running on an old server running PHP 5.4, but there were plans to migrate to a new server running PHP 5.6. The lack of tests made it difficult to verify it wouldn’t break in 5.6, but using PHP Compatibility and CodeSniffer I was able to find most of the problems. I ran it on PHP 5.6 locally during development so that any new development would be done on a more modern version. In the end, the migration to the new server was fairly seamless.</p>
<p>We will have to consider migrating to a newer PHP version again, since 5.6 is no longer supported as at the end of this year, but it may be too risky for now.</p>
<h1 id="namespacing-the-code">Namespacing the code</h1>
<p>As Zend 1 predates PHP namespaces, the code wasn’t namespaced. This is something I do plan to remedy - the form and model classes should be straightforward to namespace, but the controllers are a bit more problematic. I’m waiting on completing the repositories before I look at this.</p>
<h1 id="adding-psr-3-logging">Adding PSR-3 logging</h1>
<p>The existing logging solution was not all that great. It had drivers for several different logging solutions, but nothing terribly modern - one was for the now-discontinued Firebug extension for Firefox. However, it was fairly similar to PSR-3, so it wasn’t too much work to replace it. I installed Monolog, and amended the bootstrap file to store that as the logger in the Zend registry - that way, we could set up many different handlers. I now have it logging to a dedicated Slack channel when an error occurs in staging or production, which makes it much easier to detect problems. This would also make it easy to set up many other logging handlers, such as the ELK stack.</p>
<h1 id="debugging">Debugging</h1>
<p><a href="https://underground.works/clockwork/">Clockwork</a> is my usual PHP debugging solution, and the absence of support for it in Zend 1 made it difficult to work with. Fortunately, it’s quite straightforward to implement your own <a href="https://underground.works/clockwork/extending-data-sources?#content">data sources</a> for Clockwork. I set it up to use the aforementioned logger as a data source, as well as the <a href="https://framework.zend.com/manual/1.12/en/zend.db.profiler.html">Zend 1 profiler</a>. I also added a data source for the events implementation, and added a global <code>clock()</code> helper function, as well as one for the Symfony VarDumper component. Together these give me a reasonably good debugging experience.</p>
<h1 id="adding-console-commands">Adding console commands</h1>
<p>I’ve mentioned before that I’ve been using Symfony’s console component a lot lately, and this project is why. Zend 1 does not come with any sort of console task runner, and we needed an easy way to carry out certain tasks, such as:</p>
<ul>
<li>Setting up a stored procedure</li>
<li>Anonymizing user data with Faker</li>
<li>Regenerating durations for audio and video files</li>
</ul>
<p>In addition, I wanted a Laravel Tinker-style interactive shell. I was able to accomplish this with PsySh and the console components. For legacy projects that lack a console task runner, it’s worth considering adding one.</p>
<h1 id="configuration">Configuration</h1>
<p>The configuration system in Zend 1 is downright painful - it requires that you define multiple environments in there. I have integrated DotEnv, but only part of the configuration has been migrated over, so there’s still plenty of work there.</p>
<h1 id="what-s-left-to-do">What’s left to do</h1>
<p>The code base is in a much better state than it was, but there’s still an awful lot to do. Zend 1 does apparently still work with PHP 7.1, but not with 7.2, so at some point we’ll likely need to leave Zend 1 behind entirely. This process has already started with us ditching Zend_Log for Monolog, and over time I plan to replace the various components of Zend 1 with other packages, either ones from newer versions of Zend Framework, or elsewhere. While there are many articles about migrating Zend 1 to later versions, very few of them actually seem to go into much detail - certainly nothing as useful as a step-by-step guide.</p>
<p>The database layer is particularly bad, and refactoring some of the methods into repository classes is only the first step in bringing that under control. Once that’s finished, I’m going to start going through the models and seeing if any more methods would make more sense as static methods on the repository, and possibly rename some of them. Then, we can think about the possibility of either incrementally migrating to another database interface (either a newer version of Zend DB, or Doctrine), or refactoring the existing models to have less boilerplate by using magic methods instead of getters and setters.</p>
<p>Dependency injection is a must at some point, but isn’t practical right now - Zend 1 controllers implement an interface that defines the constructor arguments, so you can’t pass in any additional parameters, so that will need to wait until the controllers no longer use Zend 1. I have been using the Zend Registry as a poor man’s DI container, since it allows sharing of a single object throughout the application, but it’s not a good solution in the long term.</p>
<p>The routing is also painful - Zend 1’s routes are all stored in the bootstrap file. I’d prefer to use something like <code>league/route</code>, which would allow for handling different HTTP methods to the same route using different controller methods, making it easier to separate out handling of GET and POST requests.</p>
<p>I also want at some point to set up a queue system for processing video and audio content - at present it’s handled by running a shell command from PHP, which means you can’t easily get feedback if something goes wrong. Migrating that to a queue system, backed with something like Redis, would help a great deal.</p>
<h1 id="share-your-stories">Share your stories</h1>
<p>I’d love to hear any similar stories about refactoring legacy applications - how you’ve solved various problems with those legacy apps (or how you’d solve the ones I’ve had), tools you’ve used, and so on. Feel free to provide details in the comments.</p>
<p>A legacy project like this can be very frustrating to work with, but it can also feel quite rewarding to bring it under control over a period of time. My experience has been that you get the best results by working in small, regular steps, and over time your experience working with the code base will improve.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Mutation testing with Infection]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/09/13/mutation-testing-with-infection/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/09/13/mutation-testing-with-infection/</guid>
            <pubDate>Thu, 13 Sep 2018 19:10:09 GMT</pubDate>
            <description><![CDATA[<p>Writing automated tests is an excellent way of catching bugs during development and maintenance of your application, not to mention the other benefits. However, it’s hard to gauge the quality of your tests, particularly when you first start out. Coverage will give you a good idea of what code was actually run during the test, but it won’t tell you if the test itself actually tests anything worthwhile.</p>
<p><a href="https://infection.github.io/">Infection</a> is a mutation testing framework. The documentation defines mutation testing as follows:</p>
<blockquote>
<p>Mutation testing involves modifying a program in small ways. Each mutated version is called a Mutant. To assess the quality of a given test set, these mutants are executed against the input test set to see if the seeded faults can be detected. If mutated program produces failing tests, this is called a killed mutant. If tests are green with mutated code, then we have an escaped mutant.</p>
</blockquote>
<p>Infection works by running the test suite, carrying out a series of mutations on the source code in order to try to break the tests, and then collecting the results. The actual mutations carried out are not random - there is a set of mutations that get carried out every time, so results should be consistent. Ideally, all mutants should be killed by your tests - escaped mutants can indicate that either the line of mutated code is not tested, or the tests for that line are not very useful.</p>
<p>I decided to add mutation testing to my <a href="https://github.com/matthewbdaly/laravel-cart">Laravel shopping cart package</a>. In order to use Infection, you need to be able to generate code coverage, which means having either XDebug or phpdbg installed. Once Infection is installed (refer to the documentation for this), you can run this command in the project directory to configure it:</p>
<pre><code class="lang-bash">$ infection
</code></pre>
<p>Infection defaults to using PHPUnit for the tests, but it also supports PHPSpec. If you’re using PHPSpec, you will need to specify the testing framework like this:</p>
<pre><code class="lang-bash">$ infection --test-framework=phpspec
</code></pre>
<p>Since PHPSpec doesn’t support code coverage out of the box, you’ll need to install a package for that - I used <code>leanphp/phpspec-code-coverage</code>.</p>
<p>On first run, you’ll be prompted to create a configuration file. Your source directory should be straightforward to set up, but at the next step, if your project uses interfaces in the source directory, you should exclude them. The rest of the defaults should be fine.</p>
<p>I found that the first run gave a large number of uncovered results, but the second and later ones were more consistent - not sure if it’s an issue with my setup or not. Running it gave me this:</p>
<pre><code class="lang-bash">$ infection
You are running Infection with xdebug enabled.
    ____      ____          __  _
   /  _/___  / __/__  _____/ /_(_)___  ____ 
   / // __ \/ /_/ _ \/ ___/ __/ / __ \/ __ \
 _/ // / / / __/  __/ /__/ /_/ / /_/ / / / /
/___/_/ /_/_/  \___/\___/\__/_/\____/_/ /_/

    0 [&gt;---------------------------] &lt; 1 secRunning initial test suite...

PHPUnit version: 6.5.13

   27 [============================] 3 secs

Generate mutants...

Processing source code files: 5/5
Creating mutated files and processes: 43/43
.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out

...................MMM...M.......M.........          (43 / 43)

43 mutations were generated:
      38 mutants were killed
       0 mutants were not covered by tests
       5 covered mutants were not detected
       0 errors were encountered
       0 time outs were encountered

Metrics:
         Mutation Score Indicator (MSI): 88%
         Mutation Code Coverage: 100%
         Covered Code MSI: 88%

Please note that some mutants will inevitably be harmless (i.e. false positives).

Time: 21s. Memory: 12.00MB
</code></pre>
<p>Our test run shows 5 escaped mutants, and the remaining 38 were killed. We can view the results by looking at the generated <code>infection-log.txt</code>:</p>
<pre><code class="lang-txt">Escaped mutants:
================


1) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:132    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
-                if ($item[&#39;qty&#39;] &gt; 0) {
+                if ($item[&#39;qty&#39;] &gt; -1) {
                     $item[&#39;qty&#39;] -= 1;
                 }
             }


2) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:132    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
-                if ($item[&#39;qty&#39;] &gt; 0) {
+                if ($item[&#39;qty&#39;] &gt; 1) {
                     $item[&#39;qty&#39;] -= 1;
                 }
             }


3) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:132    [M] GreaterThan

--- Original
+++ New
@@ @@
     {
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
-                if ($item[&#39;qty&#39;] &gt; 0) {
+                if ($item[&#39;qty&#39;] &gt;= 0) {
                     $item[&#39;qty&#39;] -= 1;
                 }
             }


4) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:133    [M] Assignment

--- Original
+++ New
@@ @@
         $content = Collection::make($this-&gt;all())-&gt;map(function ($item) use($rowId) {
             if ($item[&#39;row_id&#39;] == $rowId) {
                 if ($item[&#39;qty&#39;] &gt; 0) {
-                    $item[&#39;qty&#39;] -= 1;
+                    $item[&#39;qty&#39;] = 1;
                 }
             }
             return $item;


5) /home/matthew/Projects/laravel-cart/src/Services/Cart.php:197    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     private function hasStringKeys(array $items)
     {
-        return count(array_filter(array_keys($items), &#39;is_string&#39;)) &gt; 0;
+        return count(array_filter(array_keys($items), &#39;is_string&#39;)) &gt; 1;
     }
     /**
      * Validate input

Timed Out mutants:
==================

Not Covered mutants:
====================
</code></pre>
<p>This displays the mutants that escaped, and include a diff of the changed code, so we can see that all of these involve changing the comparison operators.</p>
<p>The last one can be resolved easily because the comparison is superfluous - the result of <code>count()</code> can be evaluated as true or false by itself, so removing the <code>&gt; 0</code> at the end in the test solves the problem quite neatly.</p>
<p>The other four mutations are somewhat harder. They all amend the <code>decrement</code> method’s conditions, showing that a single assertion doesn’t really fully check the behaviour. Here’s the current test for that method:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\Unit\Services;

use Tests\TestCase;
use Matthewbdaly\LaravelCart\Services\Cart;
use Mockery as m;

class CartTest extends TestCase
{
    /**
     * @dataProvider arrayProvider
     */
    public function testCanDecrementQuantity($data)
    {
        $data[0][&#39;row_id&#39;] = &#39;my_row_id_1&#39;;
        $data[1][&#39;row_id&#39;] = &#39;my_row_id_2&#39;;
        $newdata = $data;
        $newdata[1][&#39;qty&#39;] = 1;
        $session = m::mock(&#39;Illuminate\Contracts\Session\Session&#39;);
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($data);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newdata)-&gt;once();
        $uniqid = m::mock(&#39;Matthewbdaly\LaravelCart\Contracts\Services\UniqueId&#39;);
        $cart = new Cart($session, $uniqid);
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
    }
}
</code></pre>
<p>It should be possible to decrement it if the quantity is more than zero, but not to go any lower. However, our current test does not catch anything but decrementing it from 2 to 1, which doesn’t fully demonstrate this. We therefore need to add a few more assertions to cover taking it down to zero, and then trying to decrement it again. Here’s how we might do that.</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\Unit\Services;

use Tests\TestCase;
use Matthewbdaly\LaravelCart\Services\Cart;
use Mockery as m;

class CartTest extends TestCase
{
    /**
     * @dataProvider arrayProvider
     */
    public function testCanDecrementQuantity($data)
    {
        $data[0][&#39;row_id&#39;] = &#39;my_row_id_1&#39;;
        $data[1][&#39;row_id&#39;] = &#39;my_row_id_2&#39;;
        $newdata = $data;
        $newdata[1][&#39;qty&#39;] = 1;
        $session = m::mock(&#39;Illuminate\Contracts\Session\Session&#39;);
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($data);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newdata)-&gt;once();
        $uniqid = m::mock(&#39;Matthewbdaly\LaravelCart\Contracts\Services\UniqueId&#39;);
        $cart = new Cart($session, $uniqid);
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
        $newerdata = $newdata;
        $newerdata[1][&#39;qty&#39;] = 0;
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($newdata);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newerdata)-&gt;once();
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
        $session-&gt;shouldReceive(&#39;get&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;)-&gt;once()-&gt;andReturn($newerdata);
        $session-&gt;shouldReceive(&#39;put&#39;)-&gt;with(&#39;Matthewbdaly\LaravelCart\Services\Cart&#39;, $newerdata)-&gt;once();
        $this-&gt;assertEquals(null, $cart-&gt;decrement(&#39;my_row_id_2&#39;));
    }
}
</code></pre>
<p>If we re-run Infection, we now get a much better result:</p>
<pre><code class="lang-bash">$ infection
You are running Infection with xdebug enabled.
    ____      ____          __  _
   /  _/___  / __/__  _____/ /_(_)___  ____ 
   / // __ \/ /_/ _ \/ ___/ __/ / __ \/ __ \
 _/ // / / / __/  __/ /__/ /_/ / /_/ / / / /
/___/_/ /_/_/  \___/\___/\__/_/\____/_/ /_/

Running initial test suite...

PHPUnit version: 6.5.13

   22 [============================] 3 secs

Generate mutants...

Processing source code files: 5/5
Creating mutated files and processes: 41/41
.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out

.........................................            (41 / 41)

41 mutations were generated:
      41 mutants were killed
       0 mutants were not covered by tests
       0 covered mutants were not detected
       0 errors were encountered
       0 time outs were encountered

Metrics:
         Mutation Score Indicator (MSI): 100%
         Mutation Code Coverage: 100%
         Covered Code MSI: 100%

Please note that some mutants will inevitably be harmless (i.e. false positives).

Time: 19s. Memory: 12.00MB
</code></pre>
<p>Code coverage only tells you what lines of code are actually executed - it doesn’t tell you much about how effectively that line of code is tested. Infection gives you a different insight into the quality of your tests, helping to write better ones. I’ve so far found it very useful for getting feedback on the quality of my tests. It’s interesting that PHPSpec tests seem to have a consistently lower proportion of escaped mutants than PHPUnit ones - perhaps the more natural workflow when writing specs with PHPSpec makes it easier to write good tests.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Switching from Vim to Neovim]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/09/09/switching-from-vim-to-neovim/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/09/09/switching-from-vim-to-neovim/</guid>
            <pubDate>Sun, 09 Sep 2018 12:40:35 GMT</pubDate>
            <description><![CDATA[<p>I honestly thought it would never happen. I’ve been using Vim since 2008, and every other editor I’ve tried (including VSCode, Emacs, Sublime Text and Atom) hasn’t come up to scratch. There were a few useful features in PHPStorm, to be fair, but nothing that justified the bother of moving. Also, I suffer from a degree of RSI from my prior career as an insurance clerk (years of using crap keyboards and mice on Windows XP took its toll…), and Vim has always been the most RSI-friendly editor I found.</p>
<p>Yet I have actually gone ahead and migrated away… to Neovim. Of course, the fact that the workflow is essentially identical helps in the migration process, as does the fact that it supports most of the same plugins.</p>
<p>My workflow has always been strongly CLI-based. I use GNU Screen and Byobu together to run multiple “tabs” in the terminal, so the lack of GUI support in Neovim doesn’t bother me in the slightest. The only change I really made was to my <code>.bash_aliases</code> so that the Vim command ran <code>screen -t Vim nvim</code>, so that it would open up Neovim rather than Vim in a new Screen tab.</p>
<p>Initially I switched straight over to using the same settings and plugins I had with Vim, and they worked seamlessly. However, after a while I decided to use the opportunity to completely overhaul the plugins and settings I used and largely start over - cull the ones I no longer needed, add some new ones, and comment it properly.</p>
<h2 id="loading-plugins">Loading plugins</h2>
<p>I used to use Pathogen to manage my Vim plugins, but it didn’t actually import the plugins itself, and just provided a structure for them. This meant that the only practical way I found to pull in third-party plugins was to set them up as Git submodules, meaning I had to store my configuration in version control and clone it recursively onto a new machine. It also made updating cumbersome.</p>
<p>Now I’ve switched to <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, which makes things much easier. I can define my dependencies in my <code>.config/nvim/init.vim</code> and pull them in with <code>PlugInstall</code>. If I want to update them, I run <code>PlugUpdate</code>, or if I need to add something else, I merely add it in the file and run <code>PlugInstall</code> again. Nice and easy.</p>
<p>The first section of my configuration file loads the dependencies:</p>
<pre><code class="lang-vim">call plug#begin()

&quot; NERDTree
Plug &#39;scrooloose/nerdtree&#39;

&quot; Git integration
Plug &#39;tpope/vim-fugitive&#39;
Plug &#39;airblade/vim-gitgutter&#39;

&quot; Linting
Plug &#39;neomake/neomake&#39;
Plug &#39;w0rp/ale&#39;

&quot; PHP-specific integration
Plug &#39;phpactor/phpactor&#39; ,  {&#39;do&#39;: &#39;composer install&#39;, &#39;for&#39;: &#39;php&#39;}
Plug &#39;ncm2/ncm2&#39;
Plug &#39;roxma/nvim-yarp&#39;
Plug &#39;phpactor/ncm2-phpactor&#39;

&quot; Snippets
Plug &#39;SirVer/ultisnips&#39;
Plug &#39;honza/vim-snippets&#39;

&quot; Comments
Plug &#39;tpope/vim-commentary&#39;

&quot; Search
Plug &#39;ctrlpvim/ctrlp.vim&#39;

&quot; Syntax
Plug &#39;sheerun/vim-polyglot&#39;
Plug &#39;matthewbdaly/vim-filetype-settings&#39;

&quot; Themes
Plug &#39;nanotech/jellybeans.vim&#39; , {&#39;as&#39;: &#39;jellybeans&#39;}

call plug#end()
</code></pre>
<p>As always, it’s a good idea to comment your config and try to group things logically. Note that I have one plugin of my own listed here - this is just a collection of settings for different filetypes, such as making Javascript files use 2 spaces for indentation, and it’s easier to keep that in a repository and pull it in as a dependency.</p>
<h2 id="completion">Completion</h2>
<p>The next part of the config deals with configuration. Most of the time the default omnicompletion is pretty good, but in the process of building out this config, I discovered PHPActor, which has massively improved my development experience with PHP - it finally provides completion as good as most IDE’s, and also provides similar refactoring tools. My config for completion currently looks like this:</p>
<pre><code class="lang-vim">&quot;Completion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set ofu=syntaxcomplete#Complete
autocmd FileType php setlocal omnifunc=phpactor#Complete
let g:phpactorOmniError = v:true
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect
</code></pre>
<h2 id="general-config">General config</h2>
<p>This is a set of standard settings for the general behaviour of the application, such as setting the colorscheme and default indentation levels. I also routinely disable the mouse because it bugs me.</p>
<pre><code class="lang-vim">&quot;General
syntax on
colorscheme jellybeans
set nu
filetype plugin indent on
set nocp
set ruler
set wildmenu
set mouse-=a
set t_Co=256

&quot;Code folding
set foldmethod=manual

&quot;Tabs and spacing
set autoindent
set cindent
set tabstop=4
set expandtab
set shiftwidth=4
set smarttab

&quot;Search
set hlsearch
set incsearch
set ignorecase
set smartcase
set diffopt +=iwhite
</code></pre>
<h2 id="markdown-configuration">Markdown configuration</h2>
<p>This section sets the file type for Markdown. It disables the Markdown plugin included in <code>vim-polyglot</code> as I had problems with it, and sets the languages that will be highlighted in fenced code blocks. I may at some point migrate this to the filetype repository.</p>
<pre><code class="lang-vim">&quot;Syntax highlighting in Markdown
au BufNewFile,BufReadPost *.md set filetype=markdown
let g:polyglot_disabled = [&#39;markdown&#39;]
let g:markdown_fenced_languages = [&#39;bash=sh&#39;, &#39;css&#39;, &#39;django&#39;, &#39;javascript&#39;, &#39;js=javascript&#39;, &#39;json=javascript&#39;, &#39;perl&#39;, &#39;php&#39;, &#39;python&#39;, &#39;ruby&#39;, &#39;sass&#39;, &#39;xml&#39;, &#39;html&#39;, &#39;vim&#39;]
</code></pre>
<h2 id="neomake">Neomake</h2>
<p>I used to use Syntastic for checking my code for errors, but I’ve always found it problematic - it was slow and would often block the editor for some time. Neovim does have support for asynchronous jobs (as does Vim 8), but Syntastic doesn’t use it, so I decided to look elsewhere.</p>
<p>Neomake seemed a lot better, so I migrated over to it. It doesn’t require much configuration, and it’s really fast - unlike Syntastic, it supports asynchronous jobs. This part of the config sets it up to run on changes with no delay in writing, so I get near-instant feedback if a syntax error creeps in, and it doesn’t block the editor the way Syntastic used to.</p>
<pre><code class="lang-vim">&quot; Neomake config
&quot; Full config: when writing or reading a buffer, and on changes in insert and
&quot; normal mode (after 1s; no delay when writing).
call neomake#configure#automake(&#39;nrwi&#39;, 500)
</code></pre>
<h2 id="phpactor">PHPActor</h2>
<p>As mentioned above, PHPActor has dramatically improved my experience when coding in PHP by providing access to features normally found only in full IDE’s. Here’s the fairly standard config I use for the refactoring functionality:</p>
<pre><code class="lang-vim">&quot; PHPActor config
&quot; Include use statement
nmap &lt;Leader&gt;u :call phpactor#UseAdd()&lt;CR&gt;

&quot; Invoke the context menu
nmap &lt;Leader&gt;mm :call phpactor#ContextMenu()&lt;CR&gt;

&quot; Invoke the navigation menu
nmap &lt;Leader&gt;nn :call phpactor#Navigate()&lt;CR&gt;

&quot; Goto definition of class or class member under the cursor
nmap &lt;Leader&gt;o :call phpactor#GotoDefinition()&lt;CR&gt;

&quot; Transform the classes in the current file
nmap &lt;Leader&gt;tt :call phpactor#Transform()&lt;CR&gt;

&quot; Generate a new class (replacing the current file)
nmap &lt;Leader&gt;cc :call phpactor#ClassNew()&lt;CR&gt;

&quot; Extract expression (normal mode)
nmap &lt;silent&gt;&lt;Leader&gt;ee :call phpactor#ExtractExpression(v:false)&lt;CR&gt;

&quot; Extract expression from selection
vmap &lt;silent&gt;&lt;Leader&gt;ee :&lt;C-U&gt;call phpactor#ExtractExpression(v:true)&lt;CR&gt;

&quot; Extract method from selection
vmap &lt;silent&gt;&lt;Leader&gt;em :&lt;C-U&gt;call phpactor#ExtractMethod()&lt;CR&gt;
</code></pre>
<h2 id="summary">Summary</h2>
<p>Vim or Neovim configuration files are never static. Your needs are always changing, and you’re constantly discovering new plugins and new settings to try out, and keeping ones that prove useful. It’s been helpful to start over and ditch some plugins I no longer needed, pull in some new ones, and organise my configuration a bit better.</p>
<p>Now that I can set the dependencies in a text file rather than pulling them in as Git submodules, it makes more sense to keep my config in a <a href="https://gist.github.com/matthewbdaly/80b777ad3db885ebeecd27687fb121cd">Github Gist</a> rather than a Git repository, and that’s where I plan to retain it for now. Feel free to fork or cannibalize it for your own purposes if you wish.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Better strings in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/07/25/better-strings-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/07/25/better-strings-in-php/</guid>
            <pubDate>Wed, 25 Jul 2018 21:25:17 GMT</pubDate>
            <description><![CDATA[<p>One of the weaknesses of PHP as a programming language is the limitations of some of the fundamental types. For instance, a string in PHP is a simple value, rather than an object, and doesn’t have any methods associated with it. Instead, to manipulate a string, you have to call all manner of functions. By comparison, in Python, not only can you call methods on a string, and receive a new string as the response, making them easily chainable, but you can also iterate through a string, as in this example:</p>
<pre><code class="lang-python">&gt;&gt;&gt; a = &#39;foo&#39;
&gt;&gt;&gt; a.upper()
&#39;FOO&#39;
&gt;&gt;&gt; a.lower()
&#39;foo&#39;
&gt;&gt;&gt; for letter in a:
...   print(letter)
... 
f
o
o
</code></pre>
<p>A little while back, I read Adam Wathan’s excellent book <em>Refactoring to Collections</em>, which describes how you can use a collection implementation (such as the one included with Laravel) to replace convoluted array manipulation with simpler, chainable calls to a collection object. Using this approach, you can turn something like this:</p>
<pre><code class="lang-php">$result = array_filter(
    array_map(function ($item) {
        return $item-&gt;get(&#39;foo&#39;);
    }, $items),
    function ($item) {
        return $item-&gt;bar == true;
});
</code></pre>
<p>Or, even worse, this:</p>
<pre><code class="lang-php">$result1 = array_map(function ($item) {
    return $item-&gt;get(&#39;foo&#39;);
}, $items);
$result2 = array_filter($result1, function ($item) {
    return $item-&gt;bar == true;
});
</code></pre>
<p>Into this:</p>
<pre><code class="lang-php">$result = Collection::make($items)
    -&gt;map(function ($item) {
        return $item-&gt;get(&#39;foo&#39;);
    })-&gt;filter(function ($item) {
        return $item-&gt;bar == true;
    })-&gt;toArray();
</code></pre>
<p>Much cleaner, more elegant, and far easier to understand.</p>
<p>A while back, after some frustration with PHP’s native strings, I started wondering how practical it would be to produce a string implementation that was more like the string objects in languages like Python and Javascript, with inspiration from collection implementations such as that used by Laravel. I soon discovered that it was very practical, and with a bit of work it’s not hard to produce your own, more elegant string class.</p>
<p>The most fundamental functionality required is to be able to create a string object, either by passing a string to the constructor or calling a static method. Our string class should be able to do both:</p>
<pre><code class="lang-php">&lt;?php

class Str
{
    protected $string;

    public function __construct(string $string = &#39;&#39;)
    {
        $this-&gt;string = $string;
    }

    public static function make(string $string)
    {
        return new static($string);
    }
}
</code></pre>
<h2 id="making-it-iterable">Making it iterable</h2>
<p>To be able to get the length of a string, it needs to implement the <a href="http://php.net/manual/en/class.countable.php"><code>Countable</code></a> interface:</p>
<pre><code class="lang-php">use Countable;

class Str implements Countable
{
    ...
    public function count()
    {
        return strlen($this-&gt;string);
    }
}
</code></pre>
<p>To access it as an array, it needs to implement the <a href="http://php.net/manual/en/class.arrayaccess.php"><code>ArrayAccess</code></a> interface:</p>
<pre><code class="lang-php">...
use ArrayAccess;

class Str implements Countable, ArrayAccess
{
    ...
    public function offsetExists($offset)
    {
        return isset($this-&gt;string[$offset]);
    }

    public function offsetGet($offset)
    {
        return isset($this-&gt;string[$offset]) ? $this-&gt;string[$offset] : null;
    }

    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this-&gt;string[] = $value;
        } else {
            $this-&gt;string[$offset] = $value;
        }
    }

    public function offsetUnset($offset)
    {
        $this-&gt;string = substr_replace($this-&gt;string, &#39;&#39;, $offset, 1);
    }
}
</code></pre>
<p>And to make it iterable, it needs to implement the <a href="http://php.net/manual/en/class.iterator.php"><code>Iterator</code></a> interface:</p>
<pre><code class="lang-php">use Iterator;

class Str implements Countable, ArrayAccess, Iterator
{
    ...
    public function current()
    {
        return $this-&gt;string[$this-&gt;position];
    }

    public function key()
    {
        return $this-&gt;position;
    }

    public function next()
    {
        ++$this-&gt;position;
    }

    public function rewind()
    {
        $this-&gt;position = 0;
    }

    public function valid()
    {
        return isset($this-&gt;string[$this-&gt;position]);
    }
}
</code></pre>
<h2 id="making-it-work-as-a-string">Making it work as a string</h2>
<p>To be useful, it also needs to be possible to actually use it as a string - for instance, you should be able to do this:</p>
<pre><code class="lang-php">$foo = Str::make(&#39;I am the very model of a modern major general&#39;);
echo $foo;
</code></pre>
<p>Fortunately, the <a href="http://php.net/manual/en/language.oop5.magic.php#object.tostring"><code>__toString()</code></a> magic method allows this:</p>
<pre><code class="lang-php">    public function __toString()
    {
        return $this-&gt;string;
    }
</code></pre>
<h2 id="adding-methods">Adding methods</h2>
<p>With that functionality in place, you can then start adding support for the methods you need in your string objects. If you’re looking to be able to use the same functionality as existing PHP methods, you can call those functions inside your methods. However, be sure to return a new instance of your string object from each method - that way, you can continually chain them:</p>
<pre><code class="lang-php">    public function replace($find, $replace)
    {
        return new static(str_replace($find, $replace, $this-&gt;string));
    }

    public function toUpper()
    {
        return new static(strtoupper($this-&gt;string));
    }

    public function toLower()
    {
        return new static(strtolower($this-&gt;string));
    }

    public function trim()
    {
        return new static(trim($this-&gt;string));
    }

    public function ltrim()
    {
        return new static(ltrim($this-&gt;string));
    }

    public function rtrim()
    {
        return new static(rtrim($this-&gt;string));
    }
</code></pre>
<p>Now, you can write something like this:</p>
<pre><code class="lang-php">return Str::make(&#39;I am the very model of a modern major general  &#39;)
    -&gt;trim()
    -&gt;replace(&#39;modern major general&#39;, &#39;scientist Salarian&#39;)
    -&gt;toLower();
</code></pre>
<p>While you could do this with PHP’s native string functions alone, it would be a lot less elegant. In addition, if you have other, more complex string manipulations that you often do in a particular application, it may make sense to write a method for that so that your string objects can encapsulate that functionality for easier reuse.</p>
<p>As our string objects are iterable, we can also do this:</p>
<pre><code class="lang-php">&gt;&gt;&gt; $foo = Str::make(&#39;foo&#39;);
&gt;&gt;&gt; foreach ($foo as $letter) { echo &quot;$letter\n&quot;; }
f
o
o
</code></pre>
<p>If you have an application that does some complex string manipulation, having a string utility class like this can make for much more expressive, elegant and easy-to-comprehend code than PHP’s native string functions. If you want to see a working implementation for this, check out my proof of concept collection and string utility library <a href="https://github.com/matthewbdaly/proper">Proper</a>.</p>
]]></description>
        </item>
    </channel>
</rss>
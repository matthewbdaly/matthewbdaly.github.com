<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk</link>
        <description>I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sat, 25 Jan 2020 22:30:08 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2020</copyright>
        <item>
            <title><![CDATA[F*** PHPStorm Man and the high horse he rode in on]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/01/25/f***-phpstorm-man-and-the-high-horse-he-rode-in-on/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/01/25/f***-phpstorm-man-and-the-high-horse-he-rode-in-on/</guid>
            <pubDate>Sat, 25 Jan 2020 22:25:17 GMT</pubDate>
            <description><![CDATA[<p>There’s a particularly unpleasant type of programmer that exists, and you’ve probably met him, either online or in person. I call him <strong>PHPStorm Man</strong>.</p>
<p>NB: Despite the name I’ve chosen, I’m not singling out users of PHPStorm in particular about this. The first time I encountered PHPStorm Man in person, he was using Sublime Text, and you will find PHPStorm Men using all different editors and IDEs. PHPStorm Man is an archetype defined not by any particular piece of software, but by a common bad attitude, and given that I work primarily with PHP these days, I’ve most often encountered this kind of behaviour from PHPStorm users (or at least, people claiming to be PHPStorm users, since at least online you can’t discount the possibility that they’re trolls). Users of other languages may well see this behaviour most prominently from those who use some other editor or IDE, but the same underlying phenomenon is at work, whether we call him PHPStorm Man, Eclipse Man, Vim Man or PyCharm Man.</p>
<h2 id="who-is-phpstorm-man-">Who is PHPStorm Man?</h2>
<p><img src="/static/images/phpstorm-man.jpg" alt="The hero we really, really don&#39;t need"></p>
<p>PHPStorm Man (and he <em>will</em> almost certainly be a man - while it could be just because our industry is male-dominated, I’ve <em>never</em> known a woman to behave like this, and I strongly suspect it’s nothing more than an industry-specific example of the common phenomenon of <a href="https://en.wikipedia.org/wiki/Mansplaining">mansplaining</a>) doesn’t know squat about your editor or IDE. He just knows his is superior, and he wants you to know it, regardless of the evidence.</p>
<p>His knowledge of your editor is probably either non-existent, grossly outdated, plain ill-informed or second-hand (probably from another PHPStorm Man). If he’s advocating an IDE, he’ll likely equate all text editors with Notepad - he may claim the advantages of his one over yours include such fundamentals as syntax highlighting and autocompletion.</p>
<p>He’ll boast about some feature his editor has that yours doesn’t, even if it does. If your editor lacks that functionality out of the box, but can add it via a plugin, apparently that doesn’t count because although you’re intelligent enough to build a working web app, somehow installing and configuring that plugin is an insurmountable burden (yet mysteriously turning off all the stuff you don’t need in <em>his</em> editor is quick and easy). If it does do that out of the box, he’ll probably find some bullshit reason why his editor’s implementation is better, even if it’s something as pointless and irrelevant as “it’s been around longer”. He’ll likely claim, with absolutely no evidence whatsoever, or indeed in the presence of evidence to the contrary, that you’d be more productive if you only used his editor.</p>
<p>In short, if you aren’t using his editor or IDE of choice, you’re a troglodyte living in a dung hut.</p>
<h2 id="phpstorm-man-in-the-wild">PHPStorm man in the wild</h2>
<p>I had an encounter with PHPStorm Man in person a while back. Just over two years ago I started a new job, which as it turned out didn’t last long after I caught the flu that was going around in late 2017 my first week. On the second day, shortly after going over something with me, the senior dev sent me the following message on Slack:</p>
<blockquote>
<p>I noticed you’re using Vim. Have you tried using Sublime Text?</p>
</blockquote>
<p>I responded that I had, and chose not to use it. There followed a long string of messages along the following lines:</p>
<blockquote>
<p>Him: Sublime Text has X!</p>
</blockquote>
<blockquote>
<p>Me: I have that</p>
</blockquote>
<blockquote>
<p>Him: Well Sublime Text also has Y!</p>
</blockquote>
<blockquote>
<p>Me: I have that too, via a plugin</p>
</blockquote>
<blockquote>
<p>Him: Well, Sublime Text doesn’t need a plugin for that</p>
</blockquote>
<blockquote>
<p>Me: Irrelevant since the plugin is already installed and configured, and I know how to use it</p>
</blockquote>
<blockquote>
<p>Him: Well, what about this?</p>
</blockquote>
<blockquote>
<p>Me: That sounds cool, so I just found a plugin to do that and installed it</p>
</blockquote>
<blockquote>
<p>Him: And this?</p>
</blockquote>
<blockquote>
<p>Me: I have absolutely no need for that</p>
</blockquote>
<blockquote>
<p>Him: Well, Vim is old, Sublime Text is new!</p>
</blockquote>
<blockquote>
<p>Me: Actually, this is Neovim, which is technically newer than Sublime Text</p>
</blockquote>
<blockquote>
<p>Him: Well, Sublime Text is a GUI application</p>
</blockquote>
<blockquote>
<p>Me: Exactly. That makes it slower and forces me to use the mouse, aggravating my RSI. I use the terminal because it’s more efficient</p>
</blockquote>
<blockquote>
<p>Him: Well, I don’t mind what you use…(despite the evidence of that entire conversation)</p>
</blockquote>
<p>With the benefit of hindsight, what I <em>should</em> have responded with was this:</p>
<blockquote>
<p>I’m an experienced, professional web developer of over six years, and I chose my editor based on years of personal experience, and have chosen my plugins and configuration based on what’s useful to me, and continue to do so to this day. I don’t appreciate you talking down to me like a child.</p>
</blockquote>
<h2 id="why-i-personally-don-t-use-an-ide">Why I personally don’t use an IDE</h2>
<p>In my case, I have a particularly good reason not to use <em>any</em> GUI application to develop in. Before I was a developer, I worked for an insurance company in a customer service role, and I didn’t have access to the sort of decent quality keyboards and mice developers habitually use, as well as having output goals linked to discipline and bonus/salary raises and having to use custom internal applications on Windows XP, with dreadful keyboard support. As a result I developed a degree of RSI in both hands, which I’ve found is aggravated by using any application that requires me to use a mouse extensively - I’m generally OK if I only have to type, but reaching for the mouse all the time quickly becomes tiring, and soon after painful.</p>
<p>For that reason I’ve developed a workflow that’s strongly dependent on the command line - I use Neovim in the terminal, alongside Byobu so that I can run multiple tabs and switch between them quickly without touching the mouse. Moving to a more GUI-oriented workflow would require me to use the mouse more than I do now, which would probably become physically painful quite quickly. Using an editor or IDE which I found made me more prone to further flare-ups of RSI could have serious consequences for my long-term health, and could potentially be career-ending. If I worked somewhere that mandated a particular IDE that didn’t work well for me, I’d <em>have</em> to either negotiate an exception on health and safety grounds or quit.</p>
<p>I’m also of the personal opinion that much of the functionality of an IDE should not be, in principle, tied to that IDE, but should instead be the province of more general purpose tools that can used, not merely in any editor or IDE but, where appropriate, on a continuous integration server. For instance, language servers provide a tool-agnostic way for any IDE or editor to implement functionality such as completion or navigation, and linters such as ESLint can integrate into any half-decent editor or run in a CI environment. Since these tend to be open source projects, whereas IDE’s are normally commercial offerings, they’re less vulnerable to suddenly disappearing and leaving users high and dry.</p>
<p>There’s also a lot of functionality in an IDE that I rarely, if ever, use. There’s no point including and starting up an FTP client as part of my editor if I’m never going to use it, as it slows the application down, and nor should I have to root around trying to turn off functionality I’m never going to have to use. For a lot of other functionality, there are more powerful standalone applications that I’m used to such as Postman or MySQL Workbench, and I’ll use them as and when I need them - I gain nothing by having them integrated with my editor.</p>
<p>I also like to be able to use the same editor everywhere. I still occasionally dabble in Python, so a language-specific IDE wouldn’t be suitable when switching between languages. I also sometimes work on personal projects on an HP Stream netbook running Xubuntu, which is fine for small PHP projects that don’t require a database server or any web server other than the PHP dev server. I can happily run Neovim on that, but there’s no way it could run an IDE at an acceptable speed.</p>
<p>Last of all, screen real estate is an issue. I don’t like interfaces that are too busy - I <em>cannot stand</em> having anything, <em>at all</em> on my desktop for any length of time at all, and any interface that has too much on screen at once is distracting. I will typically have Neovim open in a terminal, with the NERDTree file finder open on the left, and two panels split in the main body, and that’s all. A big factor in my productivity is how much code I can see at once, and having too much screen real estate taken up by menus and sidebars is counterproductive - with Neovim there’s almost nothing getting in the way.</p>
<p>I personally have had to give this sort of explanation many, many times as to why I use first Vim and then Neovim, and indeed part of the motivation behind writing this post is that I’m sick to death of having to explain myself over and over again and will now be able to merely direct them to this article. Thanks to tools like PHPActor, vim-ale and FZF, I don’t feel like there’s anything I’m missing out on that an IDE would give me, and Psalm is very good at catching type errors without being tied to any one IDE, but that doesn’t stop people telling me I’m missing out on features I already have. Any time I come across a feature I think is cool, I go through the following process:</p>
<ul>
<li>Find cool feature</li>
<li>Find plugin that implements said feature</li>
<li>Install plugin by adding a single line to my Neovim config and running <code>:PlugUpdate</code></li>
<li>Add a few lines of config</li>
<li>Start using feature</li>
</ul>
<p>Using an IDE <em>would</em> eliminate the middle three steps, but I don’t find those onerous - we’re talking about the work of five minutes, which is insignificant compared to the time taken to learn to use the feature effectively. And a feature you don’t use is one that you still have to start up if it’s present, so making it an opt-in plugin is often a better way to go.</p>
<p>Every other developer will have their own version of this story. Some will have stayed mostly static in their editor choices, while others will be changing all the time - indeed, I’ve sometimes used other editors for specific tasks in the past. In short, everyone has their own reasons for using their editor of choice, and it’s <em>appallingly</em> arrogant to assume that their reasons for using a particular one are less valid than yours.</p>
<h2 id="am-i-phpstorm-man-">Am I PHPStorm Man?</h2>
<p>As I’ve said before, this behaviour is not confined to PHPStorm users, nor is it in any way universal among them. If you use PHPStorm and enjoy it, then fine, rock on. If you use a different editor or IDE, then that’s fine too - I don’t have a problem with that, and nor should your colleagues or line manager. Using any one editor or IDE <em>does not</em> make you PHPStorm Man. What makes you PHPStorm Man is the patronising attitude.</p>
<p>In the example given above, what made the senior dev PHPStorm Man was not the initial enquiry as to whether I’d tried Sublime Text, but the fact that he wouldn’t leave it be when confronted with evidence that I either had, could easily obtain, or didn’t need the functionality of his editor in mine, and that he was talking down to an experienced developer like a child.</p>
<p>Obviously, this isn’t a new development - editor wars have long been a feature of our industry, as has the divide between IDE and editor users. But that doesn’t mean I, and no doubt others, don’t get utterly sick of it.</p>
<h2 id="how-not-to-be-phpstorm-man">How not to be PHPStorm Man</h2>
<p>When talking to users of other editors or IDE’s about the subject of those tools, you should always bear this in mind:</p>
<ul>
<li>If they use a different tool to you, they probably know a hell of a lot more about it than you do, and are unlikely to take kindly to you ignorantly telling them what it can and can’t do</li>
<li>Mastering an editor or IDE can take years, and if they’re already invested in one, it’s incredibly arrogant to just assume that they’re less productive in it than they would be in yours - even if they would (and that’s almost certainly debatable), it would take some time to adjust.</li>
<li>They’ve probably had this conversation many times before, and are sick of hearing it, especially if they have a few years experience under their belt</li>
<li>Not every feature you use is useful to them</li>
<li>No-one minds seeing a cool feature, so feel free to demonstrate it, but bear in mind that it’s almost certainly not limited to that platform - if it’s suffficiently cool, someone <em>will</em> have made it available as a plugin on most of the major editors and IDE’s. If they like it, the most likely scenario is that they’ll look to add that feature to their own editor via a plugin</li>
<li>Just because it makes you more productive, doesn’t mean that it would make them more productive</li>
<li>It’s perfectly possible to enforce consistent code styles and catch errors using standalone tools such as PHP CodeSniffer, Psalm, or ESLint, and these tools can be integrated in <em>any</em> editor, triggered with Git hooks, or run with continuous integration.</li>
</ul>
<p>Now, it has to be said that sometimes there <em>are</em> some people who plod on with painfully outdated tools, like Notepad. But those tools tend to be limited to either commercial offerings that are no longer mainained or supported, or ones that lack any sort of plugin or extension system, making them limited in terms of how they can integrate with other services, so they’re fairly easy to spot. However, making a particular editor or IDE compulsory is going to be disruptive. If you’re in a leadership position, one way to resolve this is to simply require that everyone’s editor have certain functionality - for instance, if you specify that everyone’s editor must allow integration with PHP CodeSniffer and support for <code>.editorconfig</code>, then anyone using a legacy editor that can’t support those will need to move away from it, but they’ll be able to pick one that suits them, rather than be forced into one they may well dislike. Editors and IDE’s don’t produce proprietary formats the way word processors do - they work with common formats, and if prominent open-source projects can enforce a consistent coding standard with many different editors there’s absolutely no reason why your colleagues can’t do so too,</p>
<h2 id="summary">Summary</h2>
<p>This post is a bit of an angry rant, but at the same time it shouldn’t be taken <em>too</em> seriously. As I said, despite the name <em>PHPStorm Man</em>, it’s not specifically about users of any one editor or IDE, but about the widespread, patronising attitude many developers have about editors and IDE’s other than their own in general.</p>
<p>Someone using a different IDE or editor is absolutely none of your business unless you’re their line manager or you work on the same code base, and even then it should only be an issue if it causes a clear effect on their productivity or the quality of their code. If that’s not the case, keep your nose out.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Input components with the useState and useEffect hooks in React]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/10/27/input-components-with-the-usestate-and-useeffect-hooks-in-react/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/10/27/input-components-with-the-usestate-and-useeffect-hooks-in-react/</guid>
            <pubDate>Sun, 27 Oct 2019 21:20:00 GMT</pubDate>
            <description><![CDATA[<p>Like many developers who use React.js, I’ve been eager to explore the Hooks API in the last year or so. They allow for easier ways to share functionality between components, and can allow for a more expressive syntax that’s a better fit for Javascript than class-based components. Unfortunately, they became production ready around the time I rolled out a new React-based home page, so I didn’t want to jump on them immediately in the context of a legacy application. I’m now finding myself with a bit of breathing space, so I’ve begun refactoring these components, and converting some to use hooks, in order to more easily reuse some code that currently resides in a big higher-order component.</p>
<p>The <code>useState</code> and <code>useEffect</code> hooks are by far the most common hooks in most applications. However, I’ve found that the React documentation, while OK at explaining how to use these individually, is not so good at explaining how to use them together, particularly in the case of an input component, which is a common use case when looking to convert existing components. For that reason, I’m going to provide a short example of how you might use them together for that use case.</p>
<h2 id="a-simple-function-component">A simple function component</h2>
<p>A basic component for an input might look like this:</p>
<pre><code class="lang-jsx">//@flow
import React from &#39;react&#39;;

type Props = {
  name: string,
  id: string,
  value: string,
  placeholder: string
};

const Input = (props: Props) =&gt; {
  return (
    &lt;input type=&quot;text&quot; name={props.name} id={props.id} value={props.value} placeholder={props.placeholder} /&gt;
  );
}

export default Input;
</code></pre>
<p>Note I’m using Flow annotations to type the arguments passed to my components. If you prefer Typescript it should be straightforward to convert to that.</p>
<p>As you can see, this component accepts a name, ID, value and placeholder as props. If you add this to an existing React app, or use <code>create-react-app</code> to create one and add this to it, you can include it in another component as follows:</p>
<pre><code class="lang-jsx">&lt;Input name=&quot;foo&quot; id=&quot;foo&quot; value=&quot;foo&quot; placeholder=&quot;foo&quot; /&gt;
</code></pre>
<h2 id="adding-state">Adding state</h2>
<p>This will render, but as the value will never change it’s not actually of any use in a form. If you’ve written class-based React components before, you’ll know that the usual way to handle this is to move the value of the input from props to state. Prior to the introduction of the Hooks API, while you could create a function component, you couldn’t use state with it, making situations like this difficult to handle. Fortunately, the <code>useState</code> hook now allows you to add state to a function component as follows:</p>
<pre><code class="lang-jsx">//@flow
import React, { useState } from &#39;react&#39;;

type Props = {
  name: string,
  id: string,
  value: string,
  placeholder: string
};

const Input = (props: Props) =&gt; {
  const [value, setValue] = useState(props.value);

  return (
    &lt;input type=&quot;text&quot; name={props.name} id={props.id} value={value} placeholder={props.placeholder} onChange={(e) =&gt; setValue(e.target.value)} /&gt;
  );
}

export default Input;
</code></pre>
<p>We import the <code>useState</code> hook at the top, as usual. Then, within the body of the component, we call <code>useState()</code>, passing in the initial value of <code>props.value</code>, and get back two variables in response:</p>
<ul>
<li><code>value</code> is the value of the state variable, and can be thought of as equivalent to what <code>this.state.value</code> would be in a class-based component</li>
<li><code>setValue</code> is a function for updating <code>value</code> - rather than explicitly defining a function for this, we can just get one back from <code>useState()</code></li>
</ul>
<p>Now we can set the value with <code>value={value}</code>. We also need to handle changes in the state, so we add <code>onChange={(e) =&gt; setValue(e.target.value)}</code> to call <code>setValue()</code> on a change event on the input.</p>
<h2 id="handling-effects">Handling effects</h2>
<p>The component will now allow you to edit the value. However, one problem remains. If you open the React dev tools, go to the props for this component, and set <code>value</code> manually, it won’t be reflected in the input’s value, because the state has diverged from the initial value passed in as a prop. We need to be able to pick up on changes in the props and pass them through as state.</p>
<p>In class-based components, there are lifecycle methods that fire at certain times, such as <code>componentDidMount()</code> and <code>componentDidUpdate()</code>, and we would use those to handle that situation. Hooks condense these into a single <code>useEffect</code> hook that is more widely useful. Here’s how we might overcome this problem in our component:</p>
<pre><code class="lang-jsx">//@flow
import React, { useState, useEffect } from &#39;react&#39;;

type Props = {
  name: string,
  id: string,
  value: string,
  placeholder: string
};

const Input = (props: Props) =&gt; {
  const [value, setValue] = useState(props.value);

  useEffect(() =&gt; {
    setValue(props.value);
  }, [props.value]);

  return (
    &lt;input type=&quot;text&quot; name={props.name} id={props.id} value={value} placeholder={props.placeholder} onChange={(e) =&gt; setValue(e.target.value)}/&gt;
  );
}

export default Input;
</code></pre>
<p><code>useEffect</code> takes one compulsory argument, in the form of a callback. Here we’re using that callback to set our state variable back to the value of the prop passed through.</p>
<p>Note the second argument, which is an array of variables that should be watched for changes. If we had used the following code instead:</p>
<pre><code class="lang-jsx">  useEffect(() =&gt; {
    setValue(props.value);
  });
</code></pre>
<p>Then the callback would fire after every render, reverting the value back and possibly causing an infinite loop. For that reason, we pass through the second argument, which tells React to only fire the callback if one of the specified variables has changed. Here we only want to override the state when the value props passed down to the component changes, so we pass that prop in as an argument.</p>
<h2 id="summary">Summary</h2>
<p>This is only a simple example, but it does show how simple and expressive hooks can make your React components, and how to use the <code>useEffect</code> and <code>useState</code> hooks together, which was something I found the documentation didn’t make clear. These two hooks cover a large chunk of the functionality of React, and knowledge of them is essential to using React effectively.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Flexible data types with the JSON field]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/10/13/flexible-data-types-with-the-json-field/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/10/13/flexible-data-types-with-the-json-field/</guid>
            <pubDate>Sun, 13 Oct 2019 22:10:43 GMT</pubDate>
            <description><![CDATA[<p>Relational databases have many advantages over other data stores. They’re (mostly) solid, mature products, they have the means to prevent data duplication while still allowing related data to be accessed, and they allow for easy enforcement of data types. However, the latter point has also historically made them less flexible compared to document databases such as MongoDB, which allow for fields to be set dynamically, making it much easier to set content arbitrarily.</p>
<p>One area in which this has caused particular problems is with content management systems, where you might want to be able to set custom content types that need to be treated the same in some circumstances, and have some fields in common, but store different data. If you want to be able to store arbitrary data against a particular entity, historically the main way to do that is to create a meta table to contain keys and values, and set the entity ID as a foreign key in the new table.</p>
<p>Wordpress is a common example of this. Any piece of content is stored in the <code>wp_posts</code> table, which in addition to the generic structure of a post, also includes the <code>post_type</code> field. It’s possible to create and register your own post types, but it’s not possible to store additional custom data in that table. Instead, it’s stored as keys and values in the <code>wp_postmeta</code> table, meaning you need to do a join to retrieve that content at the same time, making for more complex queries.</p>
<p>Another approach is to have a generic entity table that contains the common fields, and separate tables for the rest, and then set up a one-to-one relationship between them. However, that can be fiddly too because it doesn’t allow for custom types in the same way, so it may not fit with your use case if you need to be able to create arbitrary content types, such as for a CMS that allowed for custom content types.</p>
<h2 id="introducing-json-fields">Introducing JSON fields</h2>
<p>JSON fields allow you to bring some of the flexibility of document databases to the relational world. They allow you to store whatever arbitrary text data you wish as JSON, and retrieve it as usual. More importantly, they also allow you to query by that data, so you can easily filter by fields that need not be set in stone with a database schema.</p>
<p>This means that in the above example of a CMS, instead of having a separate meta table, you can instead store the meta values in a JSON field, thus removing the need for a join and simplifying querying by those values.</p>
<p>PostgreSQL has had this capability for a long time, but it’s only comparatively recently that MySQL and MariaDB versions that support it have become widespread. Here I’ll show you how you might use it in a Laravel application.</p>
<p>The example will be a content management system with flexible content types. The first step is to create the migration to add the new content table:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateContent extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(&#39;content&#39;, function (Blueprint $table) {
            $table-&gt;bigIncrements(&#39;id&#39;);
            $table-&gt;string(&#39;type&#39;, 20);
            $table-&gt;json(&#39;attributes&#39;);
            $table-&gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists(&#39;content&#39;);
    }
}
</code></pre>
<p>Here we’re specifying the following fields:</p>
<ul>
<li>An auto-incrementing ID (feel free to swap this out for a UUID if it makes sense for your application)</li>
<li>A string denoting the content type. If you want to limit the values these can accept, you can replace it with an <code>ENUM</code> field</li>
<li>The JSON field, named <code>attributes</code></li>
<li>The standard Laravel timestamp fields, <code>created_at</code> and <code>updated_at</code></li>
</ul>
<p>If there are certain fields that are common to all of your content types, it would also make sense to define them as fields in the usual way, rather than use the JSON field, since compulsory fields should be enforced by the database.</p>
<p>Next, we’ll create the model:</p>
<pre><code class="lang-php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Content extends Model
{
    protected $table = &#39;content&#39;;

    protected $casts = [
        &#39;attributes&#39; =&gt; &#39;array&#39;
    ];
}
</code></pre>
<p>Note that we cast the <code>attributes</code> field to an array. If we didn’t do this, we’d need to manually run <code>json_encode()</code> and <code>json_decode()</code> on the field to get it back in a usable form. As it is, we can now easily retrieve fields using array access.</p>
<p>With that done, we can now set up some data:</p>
<pre><code class="lang-php">&lt;?php
$c = new App\Content;
$c-&gt;type = &#39;page&#39;;
$c-&gt;attributes = [ 
    &quot;type&quot; =&gt; &quot;info&quot;,
    &quot;title&quot; =&gt; &quot;Terms&quot;,
    &quot;content&quot; =&gt; &quot;Our Terms&quot;,
    &quot;layout&quot; =&gt; &quot;info&quot;,
];
$c-&gt;save();
$c = new App\Content;
$c-&gt;type = &#39;link&#39;;
$c-&gt;attributes = [ 
    &quot;type&quot; =&gt; &quot;external&quot;,
    &quot;link&quot; =&gt; &quot;http://example.com&quot;,
];
$c-&gt;save();
$c = new App\Content;
$c-&gt;type = &#39;page&#39;;
$c-&gt;attributes = [ 
    &quot;type&quot; =&gt; &quot;promotional&quot;,
    &quot;title&quot; =&gt; &quot;My page&quot;,
    &quot;content&quot; =&gt; &quot;This is my page&quot;,
    &quot;layout&quot; =&gt; &quot;default&quot;,
];
$c-&gt;save();
</code></pre>
<p>As you can see, we’ve been able to set out whatever arbitrary fields we wish on these items. We can then call <code>toArray()</code> on a model to get all the fields, including the attributes, or we can call <code>$c-&gt;attributes</code> to get all those attributes together. We can also get a field via array access, eg <code>$c-&gt;attributes[&#39;type&#39;]</code>.</p>
<h2 id="querying-the-data">Querying the data</h2>
<p>The syntax for querying JSON fields is a little bit fiddly:</p>
<pre><code class="lang-sql">SELECT * FROM `content` WHERE attributes -&gt; &#39;$.type&#39; = &#39;promotional&#39;;
</code></pre>
<p>Fortunately, Eloquent makes it much simpler:</p>
<pre><code class="lang-php">&lt;?php
Content::where(&#39;attributes-&gt;type&#39;, &#39;promotional&#39;)-&gt;get();
</code></pre>
<p>It’s also possible to order by a JSON field value, but at the time of writing there’s no neat syntax for it, so you have to drop down to writing it using <code>orderByRaw</code> in Eloquent:</p>
<pre><code class="lang-php">&lt;?php
Content::orderByRaw(&quot;attributes-&gt; &#39;$.type&#39;&quot;)-&gt;get();
</code></pre>
<p>Eloquent also supports a few other JSON query types, such as querying if an array contains a value, and I suggest <a href="https://laravel.com/docs/6.x/queries#json-where-clauses">referring to the documentation</a> if you want to know more.</p>
<h2 id="other-applications">Other applications</h2>
<p>There are many other scenarios where this approach can be useful. For instance, e-commerce sites often sell many different products that may have arbitrary properties, and it may be necessary to sort and filter by different properties for different types of products. A store that sells, among other things, shoes and storage containers, might need a colour and capacity field for storage containers, and a colour and size field for shoes. Using this approach, you can set up your database in such a way that those arbitrary fields can be set up when needed, and used for filtering.</p>
<p>This approach is not without its downsides. Any data that’s stored in a JSON field can’t be validated by the database in the same way, so the burden of ensuring that it remains in a consistent state is moved to your application code. However, it’s no worse than it would be if you used a document database, and unlike with a document database you can combine JSON and more traditional fields as you see fit.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Storing Wordpress configuration in environment variables]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/</guid>
            <pubDate>Sun, 22 Sep 2019 18:00:34 GMT</pubDate>
            <description><![CDATA[<p>Wordpress configuration can be a serious pain in the proverbial. Hard-coding configuration details in a PHP file is not a terribly safe way of storing the details for your database, as if the server is misconfigured they can be exposed. In addition, it can be a chore to copy and populate the <code>wp-config.php</code> file to a new deploy.</p>
<p>A fundamental principle of <a href="https://12factor.net/">The Twelve-Factor App</a> is that config should be stored in the environment. While Wordpress does predate this, there’s no reason why we can’t abide by this. Storing Wordpress configuration in environment variables rather than the <code>wp-config.php</code> file has the following advantages:</p>
<ul>
<li>It’s more secure since the config is not stored in a file in the web root, but in the web server config</li>
<li>It makes managing the <code>wp-config.php</code> file less of a chore - it can be safely committed to version control, and you won’t need to change it to match your local configuration, running the risk of accidentally committing and pushing to production with broken config</li>
<li>Deployment to new servers is simpler because there’s no need to update the <code>wp-config.php</code></li>
<li>The risk of neglecting to change the database details and accidentally messing up the production database when working locally is virtually eliminated</li>
</ul>
<p>I’ve seen solutions for this that use DotEnv, but you don’t actually need to install that to be able to use environment variables with Wordpress. In fact, in some way it’s better if you don’t as too many developers use <code>.env</code> files in production. PHP natively has the ability to get data from environment variables using the <code>getenv()</code> function, so it’s easier to use that than to pull in a third-party library.</p>
<p>Here’s an abbreviated example of a <code>wp-config.php</code> file that’s been updated to pull the settings from environment variables:</p>
<pre><code class="lang-php">&lt;?php
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( &#39;DB_NAME&#39;, getenv(&#39;DB_NAME&#39;) );

/** MySQL database username */
define( &#39;DB_USER&#39;, getenv(&#39;DB_USER&#39;) );

/** MySQL database password */
define( &#39;DB_PASSWORD&#39;, getenv(&#39;DB_PASSWORD&#39;) );

/** MySQL hostname */
define( &#39;DB_HOST&#39;, getenv(&#39;DB_HOST&#39;) );

/** Database Charset to use in creating database tables. */
define( &#39;DB_CHARSET&#39;, &#39;utf8&#39; );

/** The Database Collate type. Don&#39;t change this if in doubt. */
define( &#39;DB_COLLATE&#39;, &#39;&#39; );

define( &#39;AUTH_KEY&#39;,         getenv(&#39;AUTH_KEY&#39;) );
define( &#39;SECURE_AUTH_KEY&#39;,  getenv(&#39;SECURE_AUTH_KEY&#39;) );
define( &#39;LOGGED_IN_KEY&#39;,    getenv(&#39;LOGGED_IN_KEY&#39;) );
define( &#39;NONCE_KEY&#39;,        getenv(&#39;NONCE_KEY&#39;) );
define( &#39;AUTH_SALT&#39;,        getenv(&#39;AUTH_SALT&#39;) );
define( &#39;SECURE_AUTH_SALT&#39;, getenv(&#39;SECURE_AUTH_SALT&#39;) );
define( &#39;LOGGED_IN_SALT&#39;,   getenv(&#39;LOGGED_IN_SALT&#39;) );
define( &#39;NONCE_SALT&#39;,       getenv(&#39;NONCE_SALT&#39;) );

$table_prefix = &#39;wp_&#39;;

define( &#39;WP_DEBUG&#39;, getenv(&#39;WP_DEBUG&#39;) );

/* That&#39;s all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( &#39;ABSPATH&#39; ) ) {
    define( &#39;ABSPATH&#39;, dirname( __FILE__ ) . &#39;/&#39; );
}

/** Sets up WordPress vars and included files. */
require_once( ABSPATH . &#39;wp-settings.php&#39; );
</code></pre>
<p>If you’re using Lando for local development, you will need to specify a file to include that contains the environment variables you wish to set, as in this example:</p>
<pre><code class="lang-yaml">name: wordpress
recipe: wordpress
config:
  webroot: .
env_file:
  - .env
</code></pre>
<p>This filename can be any arbitrarily chosen name. Then, you define the values for those variables in the same way you normally would in a <code>.env</code> file. Here’s an abbreviated example that excludes the crypto settings (though those should be placed here too):</p>
<pre><code class="lang-env">DB_NAME=wordpress
DB_USER=wordpress
DB_PASSWORD=wordpress
DB_HOST=database
WP_DEBUG=true
...
</code></pre>
<p>This will work fine during local development, but in production, or if you’re using something like Vagrant for local development, you’ll want to set the environment variables in the server configuration. For Apache, this is best set in the Virtualhost configuration, although you should be able to set it in an <code>.htaccess</code> file if all else fails. You need to use the <code>SetEnv</code> directive, as in this example:</p>
<pre><code class="lang-apache">SetEnv DB_NAME wordpress
SetEnv DB_USER wordpress
SetEnv DB_PASSWORD wordpress
SetEnv DB_HOST database
SetEnv WP_DEBUG true
</code></pre>
<p>For Nginx, assuming you’re using FastCGI, you need to set it in the server configuration for that site using the <code>fastcgi_param</code> directive, as shown below:</p>
<pre><code class="lang-nginx">fastcgi_param DB_NAME wordpress;
fastcgi_param DB_USER wordpress;
fastcgi_param DB_PASSWORD wordpress;
fastcgi_param DB_HOST database;
fastcgi_param WP_DEBUG true;
</code></pre>
<p>Since Wordpress doesn’t ship with any kind of command-line task runner, this should be sufficient for most installs. However, if you’re using WP CLI, that will break it as it won’t have access to environment variables set by Apache or Nginx, so you’ll also need to set them for the user that runs WP CLI by adding them to their Bash config in the usual way.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Using Mix versioning outside Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/09/21/using-mix-versioning-outside-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/09/21/using-mix-versioning-outside-laravel/</guid>
            <pubDate>Sat, 21 Sep 2019 10:30:50 GMT</pubDate>
            <description><![CDATA[<p>Laravel Mix is a really convenient front end scaffold, and not just in the context of a Laravel application. Last year, I added it to a legacy application I maintain, with positive results, and I’m including it in a CMS I’m working on.</p>
<p>However, I’ve always had issues trying to implement versioning outside a Laravel application. I’ve used the timestamp technique described <a href="https://matthewdaly.co.uk/blog/2016/11/26/easy-static-asset-versioning-in-php/">here</a> a lot in the past, but nowadays I do most of my work in a Lando container, and I’ve had a lot of issues with timestamp changes not being picked up, forcing me to restart my container regularly when working on front-end assets. Switching to using Mix versioning seemed like a good way to resolve that issue, but of course the <code>mix()</code> helper isn’t available elsewhere.</p>
<p>Fortunately, its not all that hard to implement your own solution. Under the bonnet, Mix versioning works as follows:</p>
<ul>
<li>The build generates an array of compiled static assets, with the key being the path to the asset, and the value being the path with a query string appended, and then saves it as <code>mix-manifest.json</code></li>
<li>The <code>mix()</code> helper loads the <code>mix-manifest.json</code> file, converts it to JSON, fetches the array entry by path, and then returns the appropriate value for passing back from the helper</li>
</ul>
<p>With that in mind, I wrote the following Twig filter to handle assets versioned with Mix:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types=1);

namespace Project\Core\Views\Filters;

use Exception;

final class Mix
{
    public function __invoke(string $path): string
    {
        $manifest = json_decode(file_get_contents(&#39;mix-manifest.json&#39;), true);
        if (! array_key_exists(&quot;/&quot; . $path, $manifest)) {
            throw new Exception(
                &quot;Unable to locate Mix file: {$path}&quot;
            );
        }
        if (!file_exists($path)) {
            throw new Exception(&#39;Included file does not exist&#39;);
        }
        return $manifest[&quot;/&quot; . $path];
    }
}
</code></pre>
<p>This works on the basis that the web root is set in the <code>public/</code> folder, and that the compiled CSS and Javascript files are placed there - if that’s not the case you may need to adapt this accordingly.</p>
<p>You also need to add the <code>version()</code> call to your <code>webpack.mix.js</code>:</p>
<pre><code class="lang-javascript">const mix = require(&#39;laravel-mix&#39;);

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for the application as well as bundling up all the JS files.
 |
 */

mix
  .setPublicPath(&#39;public/&#39;)
  .js(&#39;resources/js/app.js&#39;, &#39;public/js&#39;)
  .sass(&#39;resources/sass/app.scss&#39;, &#39;public/css&#39;)
  .version();
</code></pre>
<p>Then, when you instantiate Twig, you can add the new filter using something like this:</p>
<pre><code class="lang-php">$twig = new Environment($container-&gt;get(&#39;Twig\Loader\FilesystemLoader&#39;), $config);
$mix = $container-&gt;get(&#39;Project\Core\Views\Filters\Mix&#39;);
$twig-&gt;addFilter(new TwigFilter(&#39;mix&#39;, $mix));
</code></pre>
<p>Now, the filter should be usable in your Twig views as shown:</p>
<pre><code class="lang-twig">&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;

    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ &#39;css/app.css&#39;| mix }}&quot; /&gt;

    &lt;title&gt;{{ title }}&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    {% include &#39;header.html&#39; %}
    {% block body %}
    {% endblock %}

    &lt;script src=&quot;{{ &#39;js/app.js&#39;| mix }}&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>If you’re using a different framework or templating system, there should be a way to create helpers, and it should be possible to implement this technique fairly easily. I was able to do so in the context of a legacy Zend application, so it should be possible with other legacy frameworks like CodeIgniter.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Setting private properties in tests]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/09/07/setting-private-properties-in-tests/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/09/07/setting-private-properties-in-tests/</guid>
            <pubDate>Sat, 07 Sep 2019 19:16:47 GMT</pubDate>
            <description><![CDATA[<p>Sometimes when writing a test, you come across a situation where you need to set a private field that’s not accessible through any existing route. For instance, I’ve been working with Doctrine a bit lately, and since the ID on an entity is generated automatically, it should not be possible to change it via a setter, but at the same time, we sometimes have the need to set it in a test.</p>
<p>Fortunately, there is a way to do that. Using PHP’s reflection API, you can temporarily mark a property on an object as accessible, so as to be able to set it without either passing it to the constructor or creating a setter method that will only ever be used by the test. We first create a <code>ReflectionClass</code> instance from the object, then get the property. We mark it as accessible, and then set the value on the instance, as shown below:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Unit;

use Tests\TestCase;
use Project\Document;
use ReflectionClass;

final class DocumentTest extends TestCase
{
    public function testGetId()
    {
        $doc = new Document();
        $reflect = new ReflectionClass($doc);
        $id = $reflect-&gt;getProperty(&#39;id&#39;);
        $id-&gt;setAccessible(true);
        $id-&gt;setValue($doc, 1);
        $this-&gt;assertEquals(1, $doc-&gt;getId());
    }
}
</code></pre>
<p>If you’re likely to need this in more than one place, you may want to pull this functionality out into a trait for reuse:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Traits;

use ReflectionClass;

trait SetsPrivateProperties
{
    /**
     * Sets a private property
     *
     * @param mixed $object
     * @param string $property
     * @param mixed $value
     * @return void
     */
    public function setPrivateProperty($object, string $property, $value)
    {
        $reflect = new ReflectionClass($object);
        $prop = $reflect-&gt;getProperty($property);
        $prop-&gt;setAccessible(true);
        $prop-&gt;setValue($object, $value);
        $prop-&gt;setAccessible(false);
    }
}
</code></pre>
<p>Then your test can be simplified as follows:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Unit;

use Tests\TestCase;
use Project\Document;
use Tests\Traits\SetsPrivateProperties;

final class DocumentTest extends TestCase
{
    use SetsPrivateProperties;

    public function testGetId()
    {
        $doc = new Document();
        $this-&gt;setPrivateProperty($doc, &#39;id&#39;, 1);
        $this-&gt;assertEquals(1, $doc-&gt;getId());
    }
}
</code></pre>
<p>While this is a slightly contrived and limited example, and this situation is quite rare, I’ve found it to be a useful technique under certain circumstances.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Skipping environment specific PHPUnit tests]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/07/28/skipping-environment-specific-phpunit-tests/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/07/28/skipping-environment-specific-phpunit-tests/</guid>
            <pubDate>Sun, 28 Jul 2019 19:55:14 GMT</pubDate>
            <description><![CDATA[<p>If you’re doing client work, you don’t generally have to worry too much about working with any services other than those that will be installed in your production environment. For instance, if you’re using Memcached as your cache backend, you needn’t go to the trouble of checking that it works with Redis too unless the project actively switches. However, for more general purpose software that may be deployed to a variety of different environments, you may have to test it in all of those environments, which can be a chore.</p>
<p>Lately I’ve been working on a micro CMS for a personal project, and ran into a bit of an issue. This CMS uses the Stash caching library, and I wanted it to actively support all of the cache backends Stash provides. The CMS is configured using YAML, and I’d written a factory class that takes in the cache configuration and returns an adapter. The problem was that there are three adapters that require additional software to be installed, namely the APC, Redis and Memcached adapters. Installing all the packages to use all three of the adapters is onerous, and while it’s a good idea to test them all, it’s generally not worth the bother of adding all of them to your local development environment where you need your tests to run as fast as possible. Instead you’re better off deferring those tests that require additional dependencies to your continuous integration server, which can afford to be a lot slower.</p>
<p>Fortunately, PHPUnit allows you to mark a test as skipped by calling <code>markTestSkipped()</code>. In the past I’ve used this or the similar <code>markTestIncomplete()</code> method when a test wasn’t finished, but it’s also useful for skipping tests based on the environment. We can either test for the presence of the dependency and mark the test as skipped if it’s not present, or set the test up inside a try…catch block and call <code>markTestSkipped()</code> if the test throws an exception due to a missing dependency, as in this example:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Unit\Factories;

use Tests\TestCase;
use App\Factories\CacheFactory;
use Stash\Exception\RuntimeException;
use Mockery as m;

final class CacheFactoryTest extends TestCase
{
    public function testRedis()
    {
        $factory = new CacheFactory;
        try {
            $pool = $factory-&gt;make([
                &#39;driver&#39; =&gt; &#39;redis&#39;,
                &#39;servers&#39; =&gt; [[
                    &#39;127.0.0.1&#39;,
                    &#39;6379&#39;
                ]]
            ]);
        } catch (RuntimeException $e) {
            $this-&gt;markTestSkipped(&#39;Dependency not installed&#39;);
        }
        $this-&gt;assertInstanceOf(&#39;Stash\Pool&#39;, $pool);
        $this-&gt;assertInstanceOf(&#39;Stash\Driver\Redis&#39;, $pool-&gt;getDriver());
    }
}
</code></pre>
<p>As a general rule of thumb, when running your tests locally, it’s more important that your test suite run quickly than provide 100% coverage. Tests that are slower or require multiple services to be installed can still be run by your continuous integration server, which can afford to be slower since it’s not a blocker in the same way. In addition, I’m only ever really interested in coverage stats on the CI server, since enabling that slows PHPUnit down a lot, so since coverage is a non-issue locally we can happily leave covering that dependency to our CI server. In this case, the project is hosted on Github and uses Travis CI for running the tests and Coveralls for recording coverage, so we can leave the full test suite to be run on Travis CI, ensuring full coverage, while skipping those tests that require Redis, Memcached or APC locally.</p>
<p>Having a comprehensive test suite, and running it regularly during development, is important, but that doesn’t mean it’s compulsory you run every test regularly. In a case like this, where there are multiple adapters for the same basic functionality, you can often afford to avoid running those that test adapters with more exacting requirements.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Powering up git bisect with the run command]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/06/19/powering-up-git-bisect-with-the-run-command/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/06/19/powering-up-git-bisect-with-the-run-command/</guid>
            <pubDate>Wed, 19 Jun 2019 21:00:27 GMT</pubDate>
            <description><![CDATA[<p>The <code>bisect</code> command in Git can be very useful when trying to catch any regressions. If you know that a bug was not present at some point in the past, and now is, you can often use <code>bisect</code> to track it down quickly and easily.</p>
<p>The basic functionality is fairly simple. You start the process by tracking down a known “good” commit in the past, and a known “bad” commmit, which will usually be the head of the branch. Then, you start bisecting:</p>
<pre><code class="lang-bash">$ git bisect start
</code></pre>
<p>You then specify your bad commit:</p>
<pre><code class="lang-bash">$ git bisect bad HEAD
</code></pre>
<p>And your good commit</p>
<pre><code class="lang-bash">$ git bisect good fe0616f0cd523455a0e5bc536c09bfb1d8fd0c3f
</code></pre>
<p>And it will then step through the commits in between. Note that not every commit is loaded - it instead picks a commit between those you entered, and from there quickly narrows down the range. For each commit, you test it and mark it as good or bad with <code>git bisect good</code> or <code>git bisect bad</code> as appropriate. Once it’s tracked down the commit that introduced the problem, it will tell you what that commit was, making any remaining debugging much easier. There are situations that are more difficult to handle, such as when database migrations have been created and run in the intervening period, but for many cases <code>bisect</code> can be a very valuable tool.</p>
<p>However, it can still be a chore to step through those commits manually. Fortunately, in situations where you can produce some sort of script to determine if the issue is present or not, there’s an easy way to automate it with the <code>bisect run</code> command.</p>
<p>One of the personal projects I have on the go right now is a micro-CMS intended primarily for brochure-style sites. It includes an AJAX search that uses Fuse.js on the front end, the index for which is generated by a console task built on top of the Symfony Console component. Recently I noticed that although the unit tests still passed, the console task to generate the index no longer worked as expected due to an issue with Flysystem. Since it threw an error in the console, that could be used as input to <code>git bisect</code>. I was therefore able to automate the process of finding the bug by running this command:</p>
<pre><code class="lang-bash">$ git bisect run php console index:generate
</code></pre>
<p>This was pretty rare in that it was an ideal situation - the problem was the console command throwing an explicit error, which was perfect as input to <code>bisect run</code>. A more likely scenario in many cases is that if you want to automate catching the error, you’ll need to create an automated test to reproduce that error, and run that test with <code>git bisect run</code>. Given that TDD already recommends writing a test to reproduce a bug before fixing it, it’s prudent to write the test first, then use it to run the bisect command, before fixing the bug and committing both the fix and the new test, so as to not only minimise the manual work required, but also ensure it won’t crop up again.</p>
<p>Certain classes of issues are more difficult to automate in this way - for example, visual regressions in CSS. If you’re using a library like React or Vue, snapshot testing may be a good way to automate the bisect process for HTML rendered by components, or you could try the approach I’ve mentioned before for snapshot testing PHP applications. For legacy applications that can’t create and tear down a database for testing purposes due to gaps in the migration history, it can also be tricky and time-consuming to ensure consistency between runs. However, if you can do it, automating the bisect command makes it much quicker, and leaves you with a test you can retain to ensure that bug never returns again.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Writing golden master tests for Laravel applications]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/05/14/writing-golden-master-tests-for-laravel-applications/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/05/14/writing-golden-master-tests-for-laravel-applications/</guid>
            <pubDate>Tue, 14 May 2019 11:15:17 GMT</pubDate>
            <description><![CDATA[<p>Last year I wrote <a href="https://matthewdaly.co.uk/blog/2018/10/08/an-approach-to-writing-golden-master-tests-for-php-web-applications/">a post illustrating how to write golden master tests for PHP applications in general</a>. This approach works, but has a number of issues:</p>
<ul>
<li>Because it uses a headless browser such as Goutte, it’s inevitably slow (a typical test run for the legacy application I wrote those tests for is 3-4 minutes)</li>
<li>It can’t allow for differing content, so any changes to the content will break the tests</li>
</ul>
<p>These factors limit its utility for many PHP applications. However, for a Laravel application you’re in a much better position:</p>
<ul>
<li>You can use Browserkit rather than a headless browser, resulting in much faster response times</li>
<li>You can set up a testing database, and populate it with the same data each time, ensuring that the only thing that can change is how that data is processed to create the required HTML</li>
</ul>
<p>Here I’ll show you how to adapt that approach to work with a Laravel application.</p>
<p>We rely on Browserkit testing for this approach, so you need to install that:</p>
<pre><code class="lang-bash">$ composer require --dev laravel/browser-kit-testing
</code></pre>
<p>Next, we need to create our base golden master test case:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests;

use Tests\BrowserTestCase;

class GoldenMasterTestCase extends BrowserTestCase
{
    use CreatesApplication;

    public $baseUrl = &#39;http://localhost&#39;;

    protected $snapshotDir = &quot;tests/snapshots/&quot;;

    protected $response;

    protected $path;

    public function goto($path)
    {
        $this-&gt;path = $path;
        $this-&gt;response = $this-&gt;call(&#39;GET&#39;, $path);
        $this-&gt;assertNotEquals(404, $this-&gt;response-&gt;status());
        return $this;
    }

    public function saveHtml()
    {
        if (!$this-&gt;snapshotExists()) {
            $this-&gt;saveSnapshot();
        }
        return $this;
    }

    public function assertSnapshotsMatch()
    {
        $path = $this-&gt;getPath();
        $newHtml = $this-&gt;processHtml($this-&gt;getHtml());
        $oldHtml = $this-&gt;getOldHtml();
        $diff = &quot;&quot;;
        if (function_exists(&#39;xdiff_string_diff&#39;)) {
            $diff = xdiff_string_diff($oldHtml, $newHtml);
        }
        $message = &quot;The path $path does not match the snapshot\n$diff&quot;;
        self::assertThat($newHtml == $oldHtml, self::isTrue(), $message);
    }

    protected function getHtml()
    {
        return $this-&gt;response-&gt;getContent();
    }

    protected function getPath()
    {
        return $this-&gt;path;
    }

    protected function getEscapedPath()
    {
        return $this-&gt;snapshotDir.str_replace(&#39;/&#39;, &#39;_&#39;, $this-&gt;getPath()).&#39;.snap&#39;;
    }

    protected function snapshotExists()
    {
        return file_exists($this-&gt;getEscapedPath());
    }

    protected function processHtml($html)
    {
        return preg_replace(&#39;/(&lt;input type=&quot;hidden&quot;[^&gt;]+\&gt;|&lt;meta name=&quot;csrf-token&quot; content=&quot;([a-zA-Z0-9]+)&quot;&gt;)/i&#39;, &#39;&#39;, $html);
    }

    protected function saveSnapshot()
    {
        $html = $this-&gt;processHtml($this-&gt;getHtml());
        file_put_contents($this-&gt;getEscapedPath(), $html);
    }

    protected function getOldHtml()
    {
        return file_get_contents($this-&gt;getEscapedPath());
    }
}
</code></pre>
<p>The <code>goto()</code> method sets the current path on the object, then fetches the page. It verifies the page was found, and then returns an instance of the object, to allow for method chaining.</p>
<p>Another method of note is the <code>saveHtml()</code> method. This checks to see if the snapshot exists - if not, it saves it. The snapshot is essentially just the HTML returned from that route, but certain content may need to be stripped out, which is done in the <code>processHtml()</code> method. In this case we’ve stripped out hidden fields and the CSRF token meta tag, as CSRF tokens are generated anew each time and will break the snapshots.</p>
<p>The last method we’ll look at is the <code>assertSnapshotsMatch()</code> method. This will get the current HTML, and that for any snapshot for that route, and then compare them. If they differ, it will fail the assertion. In addition, if <code>xdiff_string_diff</code> is available, it will show a diff of the two files - be warned, these can sometimes be large, but they can be helpful in debugging.</p>
<p>Also, note our snapshots directory - <code>tests/snapshots</code>. If you do make a breaking change and want to delete a snapshot, then you can find it in there - the format replaces forward slashes with underscores, and appends a file extension of <code>.snap</code>,  but feel free to customise this to your needs.</p>
<p>Next, we’ll create a test for routes that don’t require authentication, at <code>tests/GoldenMaster/ExampleTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\GoldenMaster;

use Tests\GoldenMasterTestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;

class ExampleTest extends GoldenMasterTestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider nonAuthDataProvider
     */
    public function testNonAuthPages($data)
    {
        $this-&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function nonAuthDataProvider()
    {
        return [
            [&#39;/register&#39;],
            [&#39;/login&#39;],
        ];
    }
}
</code></pre>
<p>Note the use of the data provider. We want to be able to step through a list of routes, and verify each in turn, so it makes sense to set up a data provider method as <code>nonAuthDataProvider()</code>, which will return an array of routes. If you haven’t used data providers before, they are an easy way to reduce boilerplate in your tests when you need to test the same thing over and over with different data, and you can learn more <a href="https://tighten.co/blog/tidying-up-your-phpunit-tests-with-data-providers">here</a>.</p>
<p>Now, having seen the methods used, it should be easy to understand <code>testNonAuthPages()</code>. It goes through the following steps:</p>
<ul>
<li>Visit the route passed through, eg <code>/register</code></li>
<li>Save the HTML to a snapshot, if not already saved</li>
<li>Assert that the current content matches the snapshot</li>
</ul>
<p>Using this method, you can test a lot of routes for unexpected changes quite easily. If you’ve used snapshot tests with something like Jest, this is a similar approach.</p>
<h2 id="authenticated-routes">Authenticated routes</h2>
<p>This won’t quite work with authenticated routes, so a few more changes are required. You’ll get a response, but if you look at the HTML it will clearly show the user is being redirected for all of them, so there’s not much point in testing them.</p>
<p>If your content does not differ between users, you can add the trait <code>Illuminate\Foundation\Testing\WithoutMiddleware</code> to your test to disable the authentication and allow the test to get the content without being redirected.</p>
<p>If, however, your content does differ between users, you need to instead create a user object, and use the <code>actingAs()</code> method already available in Laravel tests to set the user, as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\GoldenMaster;

use Tests\GoldenMasterTestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;

class ExampleTest extends GoldenMasterTestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider authDataProvider
     */
    public function testAuthPages($data)
    {
        $user = factory(User::class)-&gt;create([
            &#39;email&#39; =&gt; &#39;eric@example.com&#39;,
            &#39;name&#39; =&gt; &#39;Eric Smith&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;
        ]);
        $this-&gt;actingAs($user)
            -&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function authDataProvider()
    {
        return [
            [&#39;/&#39;],
        ];
    }
}
</code></pre>
<p>This will allow us to visit a specific page as a user, without being redirected.</p>
<h2 id="summary">Summary</h2>
<p>This can be a useful technique to catch unexpected breakages in applications, particularly ones which have little or no conventional test coverage. While I originated this technique on a Zend 1 legacy code base, leveraging the tools available in Laravel makes this technique much faster and more useful. If your existing Laravel application is not as well tested as you’d like, and you have some substantial changes to make that risk breaking some of the functionality, having these sorts of golden master tests set up can be a quick and easy way of catching any problems as soon as possible.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[How much difference does adding an index to a database table make?]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/03/04/how-much-difference-does-adding-an-index-to-a-database-table-make/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/03/04/how-much-difference-does-adding-an-index-to-a-database-table-make/</guid>
            <pubDate>Mon, 04 Mar 2019 21:26:18 GMT</pubDate>
            <description><![CDATA[<p>For the last few weeks, I’ve been kept busy at work building out a new homepage for the legacy intranet system I maintain. The new homepage is built virtually from scratch with React, and has a completely new set of queries. In addition, I’ve also rebuilt the UI for the navigation to use React too. This has allowed me to bypass a lot of the worst code in the whole code base with the intent to get rid of it once the new home page is live - something I’m very pleased about!</p>
<p>As part of this, I built some new functionality to show items added in the last seven days. This section of the home page can be sorted by several parameters, including popularity. I also added the facility to expand that to 31 days via an AJAX request. However, the AJAX request was painfully slow, often taking 20-30 seconds. Also, the home page was quite slow to load in the first place, and examining the query time in Clockwork indicated that the culprit was the query for the new items.</p>
<p>Further examination of the query behind the new items (both on initial page load and the 31 day AJAX request) indicated that the problem was a join. Last year, one of my first tasks had been to add the facility to record a track for any media item when it was visited. This was accomplished using a polymorphic relationship. While Zend 1 doesn’t have the kind of out-of-the-box support for polymorphic relationships that Laravel has, it’s possible to fake it so I created a <code>tracks</code> table whose columns included <code>trackable_id</code> for the primary key of the tracked object, <code>trackable_type</code> for its class, and <code>user_id</code> for the ID of the user who visited it. Now, I was using that same table to determine the number of times each item had been viewed by joining it on each of the media items, which was the first time it was being read for anything other than a report generated in the admin, and performance was dog slow.</p>
<p>Once I’d established that removing that join from the query removed the performance issue, then it became apparent I was going to need to add an index to the <code>tracks</code> table. The table had got fairly large (low hundreds of thousands), so it had a lot to sort through. As the join used the <code>trackable_id</code> field to join onto the items added, that seemed like a good candidate, so I added the index there.</p>
<p>The results were dramatic, to put it mildly. The initial page load time dropped from 4.44s to 1.29s - around a third of the previous amount. For the AJAX request to fetch the last 31 day’s new items, the results were even more impressive - the loading time dropped from 22.44s to 1.61s. Overall, figuring out which part of the query was causing the poor performance and resolving it took about ten minutes, and resulted in a staggering improvement.</p>
<p>If you don’t have a particularly strong theoretical background with relational databases, knowledge of indices can fall by the wayside somewhat. However, as you can see from this example, if you have a particularly slow query, then adding an index can make a staggering difference, so it’s really worth taking the time to understand a bit more about indices and when they can be useful.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Searching content with Fuse.js]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/20/searching-content-with-fuse-dot-js/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/20/searching-content-with-fuse-dot-js/</guid>
            <pubDate>Wed, 20 Feb 2019 17:25:58 GMT</pubDate>
            <description><![CDATA[<p>Search is a problem I’m currently taking a big interest in. The legacy project I maintain has an utterly abominable search facility, one that I’m eager to replace with something like Elasticsearch. But smaller sites that are too small for Elasticsearch to be worth the bother can still benefit from having a decent search implementation. Despite some recent improvements, relational databases aren’t generally that good a fit for search  because they don’t really understand the concept of relevance - you can’t easily order something by how good a match it is, and your database may not deal with fuzzy matching well.</p>
<p>I’m currently working on a small flat-file CMS as a personal project. It’s built with PHP, but it’s intended to be as simple as possible, with no database, no caching service, and certainly no search service, so it needs something small and simple, but still effective for search.</p>
<p>In the past I’ve used Lunr.js on my own site, and it works very well for this use case. However, it’s problematic for this case as the index needs to be generated in Javascript on the server side, and adding Node.js to the stack for a flat-file PHP CMS is not really an option. What I needed was something where I could generate the index in any language I chose, load it via AJAX, and search it on the client side. I recently happened to stumble across <a href="https://fusejs.io/">Fuse.js</a>, which was pretty much exactly what I was after.</p>
<p>Suppose we have the following index:</p>
<pre><code class="lang-json">[  
   {  
      &quot;title&quot;:&quot;About me&quot;,
      &quot;path&quot;:&quot;about/&quot;
   },
   {  
      &quot;title&quot;:&quot;Meet the team&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/&quot;
   },
   {  
      &quot;title&quot;:&quot;Alice&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/alice/&quot;
   },
   {  
      &quot;title&quot;:&quot;Bob&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/bob/&quot;
   },
   {  
      &quot;title&quot;:&quot;Chris&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/chris/&quot;
   },
   {  
      &quot;title&quot;:&quot;Home&quot;,
      &quot;path&quot;:&quot;index/&quot;
   }
]
</code></pre>
<p>This index can be generated in any way you see fit. In this case, the page content is stored in Markdown files with YAML front matter, so I wrote a Symfony console command which gets all the Markdown files in the content folder, parses them to get the titles, and retrieves the path. You could also retrieve other items in front matter such as categories or tags, and the page content, and include that in the index. The data then gets converted to JSON and saved to the index file. As you can see, there’s nothing special about this JSON - these two fields happen to be the ones I’ve chosen.</p>
<p>Now we can load the JSON file via AJAX, and pass it to a new Fuse instance. You can search the index using the <code>.search()</code> method, as shown below:</p>
<pre><code class="lang-javascript">import Fuse from &#39;fuse.js&#39;;
window.$ = window.jQuery = require(&#39;jquery&#39;);

$(document).ready(function () {
  window.$.getJSON(&#39;/storage/index.json&#39;, function (response) {
    const fuse = new Fuse(response, {
      keys: [&#39;title&#39;],
      shouldSort: true
    });
    $(&#39;#search&#39;).on(&#39;keyup&#39;, function () {
      let result = fuse.search($(this).val());

      // Output it
      let resultdiv = $(&#39;ul.searchresults&#39;);
      if (result.length === 0) {
        // Hide results
        resultdiv.hide();
      } else {
        // Show results
        resultdiv.empty();
        for (let item in result.slice(0,4)) {
          let searchitem = &#39;&lt;li&gt;&lt;a href=&quot;/&#39; + result[item].path + &#39;&quot;&gt;&#39; + result[item].title + &#39;&lt;/a&gt;&lt;/li&gt;&#39;;
          resultdiv.append(searchitem);
        }
        resultdiv.show();
      }
    });
  });
});
</code></pre>
<p>The really great thing about Fuse.js is that it can search just about any JSON content, making it extremely flexible. For a site with a MySQL database, you could generate the JSON from one or more tables in the database, cache it in Redis or Memcached indefinitely until such time as the content changes again, and only regenerate it then, making for an extremely efficient client-side search that doesn’t need to hit the database during normal operation. Or you could generate it from static files, as in this example. It also means the backend language is not an issue, since you can easily generate the JSON file in PHP, Javascript, Python or any other language.</p>
<p>As you can see, it’s pretty straightforward to use Fuse.js to create a working search field out of the box, but the website lists a number of options allowing you to customise the search for your particular use case, and I’d recommend looking through these if you’re planning on using it on a project.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Higher-order components in React]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/16/higher-order-components-in-react/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/16/higher-order-components-in-react/</guid>
            <pubDate>Sat, 16 Feb 2019 19:00:30 GMT</pubDate>
            <description><![CDATA[<p>In the last few weeks I’ve been working on a big rebuild of the homepage of the legacy application I maintain. As I’ve been slowly transitioning it to use React on the front end, I used that, and it’s by far the largest React project I’ve worked on to date. This has pushed me to use some more advanced React techniques I hadn’t touched on before. I’ve also had to create some different components that have common functionality.</p>
<p>React used to use mixins to share common functionality, but the consensus is now that <a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">mixins are considered harmful</a>, so they have been removed. Instead, developers are encouraged to create higher-order components to contain the shared functionality.</p>
<p>A higher-order component is a function that accepts a React component as an argument, and then returns another component that wraps the provided one. The shared functionality is defined inside the wrapping component, and so any state or methods defined in the wrapping component can then be passed as props into the wrapped one, as in this simple example:</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;

export default function hocExample(WrappedComponent) {
  class hocExample extends Component {
    constructor(props) {
      this.state = {
        foo: false
      };
      this.doStuff = this.doStuff.bind(this);
    }
    doStuff() {
      this.setState({
        foo: true
      });
    }
    render() {
      return (
        &lt;WrappedComponent foo={this.state.foo} doStuff={this.doStuff} /&gt;
      );
    }
  }
  return hocExample;
}
</code></pre>
<p>If you’ve been working with React for a while, even if you haven’t written a higher-order component, you’ve probably used one. For instance, <code>withRouter()</code> from <code>react-router</code> is a good example of a higher-order component that forms part of an existing library.</p>
<h1 id="a-real-world-example">A real-world example</h1>
<p>A very common use case I’ve come across is handling a click outside of a component. For instance, if you have a sidebar or popup component, it’s common to want to close it when the user clicks outside the component. As such, it’s worth taking the time to refactor it to make it reusable.</p>
<p>In principle you can achieve this on any component as follows:</p>
<ul>
<li>The component should accept two props - an <code>active</code> prop that denotes whether the component is active or not, and an <code>onClickOutside()</code> prop method that is called on a click outside</li>
<li>On mount, an event listener should be added to the document to listen for <code>mousedown</code> events, and it should be removed on unmount</li>
<li>When the event listener is fired, it should use a ref on the component to determine if the ref contains the event target. If so, and the status is active, the <code>onClickOutside()</code> method should be called</li>
</ul>
<p>Moving this to a higher order component makes a couple of issues slightly more complex, but not very. We can’t easily get a ref of the wrapped component, so I had to resort to using <code>ReactDOM.findDOMNode()</code> instead, which is potentially a bit dodgy as they’re talking about deprecating that.</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;
import { findDOMNode } from &#39;react-dom&#39;;

export default function clicksOutside(WrappedComponent) {
  class clicksOutside extends Component {
    constructor(props) {
      super(props);
      this.setWrapperRef = this.setWrapperRef.bind(this);
      this.handleClickOutside = this.handleClickOutside.bind(this);
    }
    componentDidMount() {
      document.addEventListener(&#39;mousedown&#39;, this.handleClickOutside);
    }
    componentWillUnmount() {
      document.removeEventListener(&#39;mousedown&#39;, this.handleClickOutside);
    }
    setWrapperRef(node) {
      this.wrapperRef = node;
    }
    handleClickOutside(event) {
      const {target} = event;
      if (this.wrapperRef &amp;&amp; target instanceof Node) {
        const ref = findDOMNode(this.wrapperRef);
        if (ref &amp;&amp; !ref.contains(target) &amp;&amp; this.props.active === true) {
          this.props.onClickOutside();
        }
      }
    }
    render() {
      return (
        &lt;WrappedComponent {...this.props} ref={this.setWrapperRef} /&gt;
      );
    }
  };
  return clicksOutside;
}
</code></pre>
<p>Now we can use this as follows:</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Sidebar from &#39;./src/Components/Sidebar&#39;;
import clicksOutside from &#39;./src/Components/clicksOutside&#39;;

const SidebarComponent = clicksOutside(Sidebar);

function handleClickOutside() {
  alert(&#39;You have clicked outside&#39;);
}

ReactDOM.render(
  &lt;SidebarComponent 
    links={links} 
    active={true} 
    onClickOutside={handleClickOutside} 
  /&gt;,
  document.getElementById(&#39;root&#39;)
);
</code></pre>
<p>Higher order components sound a lot harder than they actually are. In reality, they’re actually quite simple to implement, but I’m not sure the <a href="https://reactjs.org/docs/higher-order-components.html">documentation</a> is necessarily the best example to use since it’s a bit on the complex side.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating your own dependency injection container in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/02/creating-your-own-dependency-injection-container-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/02/creating-your-own-dependency-injection-container-in-php/</guid>
            <pubDate>Sat, 02 Feb 2019 20:45:52 GMT</pubDate>
            <description><![CDATA[<p>Dependency injection can be a difficult concept to understand in the early stages. Even when you’re using it all the time, it can often seem like magic. However, it’s really not all that complicated once you actually get into the nuts and bolts of it, and building your own container is a good way to learn more about how it works and how to use it.</p>
<p>In this tutorial, I’ll walk you through creating a simple, minimal dependency injection container, using PHPSpec as part of a TDD workflow. While the end result isn’t necessarily something I’d be happy using in a production environment, it’s sufficient to understand the basic concept and make it feel less like a black box. Our container will be called Ernie (if you want to know why, it’s a reference to a 90’s era video game that had a character based on Eric Cantona called Ernie Container).</p>
<p>The first thing we need to do is set up our dependencies. Our container will implement PSR-11, so we need to include the interface that defines that. We’ll also use PHP CodeSniffer to ensure code quality, and PHPSpec for testing. Your <code>composer.json</code> should look something like this:</p>
<pre><code class="lang-json">{
    &quot;name&quot;: &quot;matthewbdaly/ernie&quot;,
    &quot;description&quot;: &quot;Simple DI container&quot;,
    &quot;type&quot;: &quot;library&quot;,
    &quot;require-dev&quot;: {
        &quot;squizlabs/php_codesniffer&quot;: &quot;^3.3&quot;,
        &quot;phpspec/phpspec&quot;: &quot;^5.0&quot;,
        &quot;psr/container&quot;: &quot;^1.0&quot;
    },
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;authors&quot;: [
        {
            &quot;name&quot;: &quot;Matthew Daly&quot;,
            &quot;email&quot;: &quot;450801+matthewbdaly@users.noreply.github.com&quot;
        }
    ],
    &quot;require&quot;: {},
    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;Matthewbdaly\\Ernie\\&quot;: &quot;src/&quot;
        }
    }
}
</code></pre>
<p>We also need to put this in our <code>phpspec.yml</code> file:</p>
<pre><code class="lang-yml">suites:
    test_suite:
        namespace: Matthewbdaly\Ernie
        psr4_prefix: Matthewbdaly\Ernie
</code></pre>
<p>With that done, we can start working on our implementation.</p>
<h1 id="creating-the-exceptions">Creating the exceptions</h1>
<p>The PSR-11 specification defines two interfaces for exceptions, which we will implement before actually moving on to the container itself. The first of these is <code>Psr\Container\ContainerExceptionInterface</code>. Run the following command to create a basic spec for the exception:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Exceptions/ContainerException
</code></pre>
<p>The generated specification for it at <code>spec/Exceptions/ContainerExceptionSpec.php</code> will look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\ContainerException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(ContainerException::class);
    }
}
</code></pre>
<p>This is not sufficient for our needs. Our exception must also implement two interfaces:</p>
<ul>
<li><code>Throwable</code></li>
<li><code>Psr\Container\ContainerExceptionInterface</code></li>
</ul>
<p>The former can be resolved by inheriting from <code>Exception</code>, while the latter doesn’t require any additional methods. Let’s expand our spec to check for these:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie\Exceptions;

use Matthewbdaly\Ernie\Exceptions\ContainerException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(ContainerException::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerExceptionInterface&#39;);
    }

    function it_implements_throwable()
    {
        $this-&gt;shouldImplement(&#39;Throwable&#39;);
    }
}
</code></pre>
<p>Now run the spec and PHPSpec will generate the boilerplate exception for you:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Exceptions/ContainerException                                
  11  - it is initializable
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

Matthewbdaly/Ernie/Exceptions/ContainerException                                  
  16  - it implements interface
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  21  - it implements throwable
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

                                      100%                                       3
1 specs
3 examples (3 broken)
23ms


  Do you want me to create `Matthewbdaly\Ernie\Exceptions\ContainerException`   
  for you?                                                                      
                                                                         [Y/n]
y
Class Matthewbdaly\Ernie\Exceptions\ContainerException created in /home/matthew/Projects/ernie-clone/src/Exceptions/ContainerException.php.

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  16  - it implements interface
      expected an instance of Psr\Container\ContainerExceptionInterface, but got
      [obj:Matthewbdaly\Ernie\Exceptions\ContainerException].

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  21  - it implements throwable
      expected an instance of Throwable, but got
      [obj:Matthewbdaly\Ernie\Exceptions\ContainerException].

            33%                                     66%                          3
1 specs
3 examples (1 passed, 2 failed)
36ms
</code></pre>
<p>It’s failing, but we expect that. We need to update our exception to extend the base PHP exception, and implement <code>Psr\Container\ContainerExceptionInterface</code>. Let’s do that now:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie\Exceptions;

use Psr\Container\ContainerExceptionInterface;
use Exception;

class ContainerException extends Exception implements ContainerExceptionInterface
{
}
</code></pre>
<p>Let’s re-run the spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
                                      100%                                       3
1 specs
3 examples (3 passed)
24ms
</code></pre>
<p>The second exception we need to implement is <code>Psr\Container\NotFoundExceptionInterface</code> and it’s a similar story. Run the following command to create the spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Exceptions/NotFoundException
</code></pre>
<p>Again, the spec needs to be amended to verify that it’s a throwable and implements the required interface:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie\Exceptions;

use Matthewbdaly\Ernie\Exceptions\NotFoundException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class NotFoundExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(NotFoundException::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\NotFoundExceptionInterface&#39;);
    }

    function it_implements_throwable()
    {
        $this-&gt;shouldImplement(&#39;Throwable&#39;);
    }
}
</code></pre>
<p>For the sake of brevity I’ve left out the output, but if you run <code>vendor/bin/phpspec run</code> you’ll see it fail due to the fact that the generated class doesn’t implement the required interfaces. Amend <code>src/Exceptions/NotFoundException</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie\Exceptions;

use Psr\Container\NotFoundExceptionInterface;
use Exception;

class NotFoundException extends Exception implements NotFoundExceptionInterface
{
}
</code></pre>
<p>Running <code>vendor/bin/phpspec run</code> should now see it pass. Now let’s move on to the container class…</p>
<h1 id="building-the-container">Building the container</h1>
<p>Run the following command to create the container spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Container
</code></pre>
<p>However, the default generated spec isn’t sufficient. We need to check it implements the required interface:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\Container;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Container::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerInterface&#39;);
    }
}
</code></pre>
<p>Now, if we run PHPSpec, we’ll generate our class:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  11  - it is initializable
      class Matthewbdaly\Ernie\Container does not exist.

Matthewbdaly/Ernie/Container                                                      
  16  - it implements interface
      class Matthewbdaly\Ernie\Container does not exist.

                            75%                                     25%          8
3 specs
8 examples (6 passed, 2 broken)
404ms


  Do you want me to create `Matthewbdaly\Ernie\Container` for you?              
                                                                         [Y/n] 
y
Class Matthewbdaly\Ernie\Container created in /home/matthew/Projects/ernie-clone/src/Container.php.

Matthewbdaly/Ernie/Container                                                      
  16  - it implements interface
      expected an instance of Psr\Container\ContainerInterface, but got
      [obj:Matthewbdaly\Ernie\Container].

                                 87%                                     12%     8
3 specs
8 examples (7 passed, 1 failed)
40ms
</code></pre>
<p>Now, as we can see, this class doesn’t implement the interface. Let’s remedy that:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;

class Container implements ContainerInterface
{
}
</code></pre>
<p>Now, if we run the tests, they should fail because the class needs to add the required methods:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
✘ Fatal error happened while executing the following 
    it is initializable 
    Class Matthewbdaly\Ernie\Container contains 2 abstract methods and must therefore be declared abstract or implement the remaining methods (Psr\Container\ContainerInterface::get, Psr\Container\ContainerInterface::has) in /home/matthew/Projects/ernie-clone/src/Container.php on line 7 
</code></pre>
<p>If you use an editor or IDE that allows you to implement an interface automatically, you can run it to add the required methods. I use PHPActor with Neovim, and used the option in the Transform menu to implement the contract:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;

class Container implements ContainerInterface
{
    /**
     * {@inheritDoc}
     */
    public function get($id)
    {
    }

    /**
     * {@inheritDoc}
     */
    public function has($id)
    {
    }
}
</code></pre>
<p>Running <code>vendor/bin/phpspec run</code> should now make the spec pass, but the methods don’t actually do anything yet. If you read the spec for PSR-11, you’ll see that <code>has()</code> returns a boolean to indicate whether a class can be instantiated or not, while <code>get()</code> will either return an instance of the specified class, or throw an exception. We will add specs that check that built-in classes can be returned by both, and unknown classes display the expected behaviour. We’ll do both at once, because in both cases, the functionality to actually resolve the required class will be deferred to a single resolver method, and these methods will not do all that much as a result:</p>
<pre><code class="lang-php">    function it_has_simple_classes()
    {
        $this-&gt;has(&#39;DateTime&#39;)-&gt;shouldReturn(true);
    }

    function it_does_not_have_unknown_classes()
    {
        $this-&gt;has(&#39;UnknownClass&#39;)-&gt;shouldReturn(false);
    }

    function it_can_get_simple_classes()
    {
        $this-&gt;get(&#39;DateTime&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_returns_not_found_exception_if_class_cannot_be_found()
    {
        $this-&gt;shouldThrow(&#39;Matthewbdaly\Ernie\Exceptions\NotFoundException&#39;)
            -&gt;duringGet(&#39;UnknownClass&#39;);
    }
</code></pre>
<p>These tests verify that:</p>
<ul>
<li><code>has()</code> returns <code>true</code> when called with the always-present <code>DateTime</code> class</li>
<li><code>has()</code> returns <code>false</code> for the undefined <code>UnknownClass</code></li>
<li><code>get()</code> successfully instantiates an instance of <code>DateTime</code></li>
<li><code>get()</code> throws an exception if you try to instantiate the undefined <code>UnknownClass</code></li>
</ul>
<p>Running the specs will raise errors:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                      
  21  - it has simple classes
      expected true, but got null.

Matthewbdaly/Ernie/Container                                                    
  26  - it does not have unknown classes
      expected false, but got null.

Matthewbdaly/Ernie/Container                                                    
  31  - it can get simple classes
      expected an instance of DateTime, but got null.

Matthewbdaly/Ernie/Container                                                    
  36  - it returns not found exception if class cannot be found
      expected to get exception / throwable, none got.

                         66%                                     33%             12
3 specs
12 examples (8 passed, 4 failed)
98ms
</code></pre>
<p>Let’s populate these empty methods:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;
use Matthewbdaly\Ernie\Exceptions\NotFoundException;
use ReflectionClass;
use ReflectionException;

class Container implements ContainerInterface
{
    /**
     * {@inheritDoc}
     */
    public function get($id)
    {
        $item = $this-&gt;resolve($id);
        return $this-&gt;getInstance($item);
    }

    /**
     * {@inheritDoc}
     */
    public function has($id)
    {
        try {
            $item = $this-&gt;resolve($id);
        } catch (NotFoundException $e) {
            return false;
        }
        return $item-&gt;isInstantiable();
    }

    private function resolve($id)
    {
        try {
            return (new ReflectionClass($id));
        } catch (ReflectionException $e) {
            throw new NotFoundException($e-&gt;getMessage(), $e-&gt;getCode(), $e);
        }
    }

    private function getInstance(ReflectionClass $item)
    {
        return $item-&gt;newInstance();
    }
}
</code></pre>
<p>As you can see, both the <code>has()</code> and <code>get()</code> methods need to resolve a string ID to an actual class, so that common functionality is stored in a private method called <code>resolve()</code>. This uses the <a href="http://php.net/manual/en/book.reflection.php">PHP Reflection API</a> to resolve the class name to an actual class. We pass the string ID into a constructor of <code>ReflectionClass</code>, and the <code>resolve()</code> method will either return the created instance of <code>ReflectionClass</code>, or throw an exception.</p>
<p>For the uninitiated, <code>ReflectionClass</code> allows you to reflect on the object whose fully qualified class name is passed to the constructor, in order to interact with that class programmatically. The methods we will use include:</p>
<ul>
<li><code>isInstantiable</code> - confirms whether or not the class can be instantiated (for instance, traits and abstract classes can’t)</li>
<li><code>newInstance</code> - creates a new instance of the item in question, as long as it has no dependencies in the constructor</li>
<li><code>newInstanceArgs</code> - creates a new instance, using the arguments passed in</li>
<li><code>getConstructor</code> - allows you to get information about the constructor</li>
</ul>
<p>The Reflection API is pretty comprehensive, and I would recommend reading the documentation linked to above if you want to know more.</p>
<p>For the <code>has()</code> method, we check that the resolved class is instantiable, and return the result of that. For the <code>get()</code> method, we use <code>getInstance()</code> to instantiate the item and return that, throwing an exception if that fails.</p>
<h1 id="registering-objects">Registering objects</h1>
<p>In its current state, the container doesn’t allow you to set an item. To be useful, we need to be able to specify that an interface or string should be resolved to a given class, or for cases where we need to pass in scalar parameters, such as a database object, to specify how a concrete instance of that class should be instantiated. To that end, we’ll create a new <code>set()</code> public method that will allow a dependency to be set. Here are the revised specs including this:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\Container;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;
use DateTime;

class ContainerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Container::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerInterface&#39;);
    }

    function it_has_simple_classes()
    {
        $this-&gt;has(&#39;DateTime&#39;)-&gt;shouldReturn(true);
    }

    function it_does_not_have_unknown_classes()
    {
        $this-&gt;has(&#39;UnknownClass&#39;)-&gt;shouldReturn(false);
    }

    function it_can_get_simple_classes()
    {
        $this-&gt;get(&#39;DateTime&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_returns_not_found_exception_if_class_cannot_be_found()
    {
        $this-&gt;shouldThrow(&#39;Matthewbdaly\Ernie\Exceptions\NotFoundException&#39;)
            -&gt;duringGet(&#39;UnknownClass&#39;);
    }

    function it_can_register_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve)-&gt;shouldReturn($this);
    }

    function it_can_resolve_registered_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }

    function it_can_resolve_registered_invokable()
    {
        $toResolve = new class {
            public function __invoke() {
                return new DateTime;
            }
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_can_resolve_registered_callable()
    {
        $toResolve = function () {
            return new DateTime;
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_can_resolve_if_registered_dependencies_instantiable()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;has(&#39;Foo\Bar&#39;)-&gt;shouldReturn(true);
    }
}
</code></pre>
<p>This needs to handle quite a few scenarios, so there are several tests we have in place. These verify that:</p>
<ul>
<li>The <code>set()</code> method returns an instance of the container class, to allow for method chaining</li>
<li>When a dependency is set, calling <code>get()</code> returns an instance of that class</li>
<li>When a concrete class that has the <code>__invoke()</code> magic method set is passed to <code>set()</code>, it is invoked and the response returned.</li>
<li>When the value passed through is a callback, the callback is resolved and the response returned</li>
<li>When a dependency is set, calling <code>has()</code> for it returns the right value</li>
</ul>
<p>Note that we use anonymous classes for testing - I’ve written about these before and they’re very useful in this context because they allow us to create a simple class inline for testing purposes.</p>
<p>Running the specs should result in us being prompted to generate the <code>set()</code> method, and failing afterwards:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  42  - it can register dependencies
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  49  - it can resolve registered dependencies
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  57  - it can resolve registered invokable
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  68  - it can resolve registered callable
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  77  - it can resolve if registered dependencies instantiable
      method Matthewbdaly\Ernie\Container::set not found.

                          70%                                     29%            17
3 specs
17 examples (12 passed, 5 broken)
316ms

  Do you want me to create `Matthewbdaly\Ernie\Container::set()` for you?       
                                                                         [Y/n]
y
  Method Matthewbdaly\Ernie\Container::set() has been created.

Matthewbdaly/Ernie/Container                                                    
  42  - it can register dependencies
      expected [obj:Matthewbdaly\Ernie\Container], but got null.

Matthewbdaly/Ernie/Container                                                    
  49  - it can resolve registered dependencies
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  57  - it can resolve registered invokable
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  68  - it can resolve registered callable
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  77  - it can resolve if registered dependencies instantiable
      expected true, but got false.

                          70%                              11%        17%        17
3 specs
17 examples (12 passed, 2 failed, 3 broken)
90ms
</code></pre>
<p>First, we need to set up the <code>set()</code> method properly, and define a property to contain the stored services:</p>
<pre><code class="lang-php">    private $services = [];

    public function set(string $key, $value)
    {
        $this-&gt;services[$key] = $value;
        return $this;
    }
</code></pre>
<p>This fixes the first spec, but the resolver needs to be amended to handle cases where the ID is set manually:</p>
<pre><code class="lang-php">    private function resolve($id)
    {
        try {
            $name = $id;
            if (isset($this-&gt;services[$id])) {
                $name = $this-&gt;services[$id];
                if (is_callable($name)) {
                    return $name();
                }
            }
            return (new ReflectionClass($name));
        } catch (ReflectionException $e) {
            throw new NotFoundException($e-&gt;getMessage(), $e-&gt;getCode(), $e);
        }
    }
</code></pre>
<p>This will allow us to resolve classes set with <code>set()</code>. However, we also want to resolve any callables, such as callbacks or classes that implement the <code>__invoke()</code> magic method, which means that sometimes <code>resolve()</code> will return the result of the callable instead of an instance of <code>ReflectionClass</code>. Under those circumstances we should return the item directly:</p>
<pre><code class="lang-php">    public function get($id)
    {
        $item = $this-&gt;resolve($id);
        if (!($item instanceof ReflectionClass)) {
            return $item;
        }
        return $this-&gt;getInstance($item);
    }
</code></pre>
<p>Note that because the <code>__invoke()</code> method is automatically called in any concrete class specified in the second argument to <code>set()</code>, it’s only possible to resolve classes that define an <code>__invoke()</code> method if they are passed in as string representations. The following PsySh session should make it clear what this means:</p>
<pre><code class="lang-php">&gt;&gt;&gt; use Matthewbdaly\Ernie\Container;
&gt;&gt;&gt; $c = new Container;
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; class TestClass { public function __invoke() { return &quot;Called&quot;; }}
&gt;&gt;&gt; $c-&gt;get(&#39;TestClass&#39;);
=&gt; TestClass {#2319}
&gt;&gt;&gt; $c-&gt;set(&#39;Foo\Bar&#39;, &#39;TestClass&#39;);
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; $c-&gt;get(&#39;Foo\Bar&#39;);
=&gt; TestClass {#2309}
&gt;&gt;&gt; $c-&gt;set(&#39;Foo\Bar&#39;, new TestClass);
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; $c-&gt;get(&#39;Foo\Bar&#39;);
=&gt; &quot;Called&quot;
</code></pre>
<p>As you can see, if we pass in the fully qualified class name of a class that defines an <code>__invoke()</code> method, it can be resolved as expected. However, if we pass a concrete instance of it to <code>set()</code>, it will be called and will return the response from that. This may not be the behaviour you want for your own container.</p>
<p>According to <a href="https://github.com/thephpleague/container/issues/113">this issue on the PHP League’s Container implementation</a>, it was also an issue for them, so seeing as this is just a toy example I’m not going to lose any sleep over it. Just something to be aware of if you use this post as the basis for writing your own container.</p>
<h1 id="resolving-dependencies">Resolving dependencies</h1>
<p>One thing is missing from our container. Right now it should be able to instantiate pretty much any class that has no dependencies, but these are quite firmly in the minority. To be useful, a container should be able to resolve all of the dependencies for a class automatically.</p>
<p>Let’s add a spec for that:</p>
<pre><code class="lang-php">    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
</code></pre>
<p>Here we have to be a bit crafty. Anonymous classes are defined and instantiated at the same time, so we can’t pass it in as an anonymous class in the test. Instead, we call the anonymous class and get its name, then set that as the second argument to <code>set()</code>. Then we can verify that the returned object is an instance of the same class.</p>
<p>Running this throws an error:</p>
<pre><code class="lang-php">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  86  - it can resolve dependencies
      exception [err:ArgumentCountError(&quot;Too few arguments to function class@anonymous::__construct(), 0 passed and exactly 1 expected&quot;)] has been thrown.

                                    94%                                          18
3 specs
18 examples (17 passed, 1 broken)
60ms
</code></pre>
<p>This is expected. Our test class accepts an instance of <code>DateTime</code> in the constructor as a mandatory dependency, so instantiating it fails. We need to update the <code>getInstance()</code> method so that it can handle pulling in any dependencies:</p>
<pre><code class="lang-php">    private function getInstance(ReflectionClass $item)
    {
        $constructor = $item-&gt;getConstructor();
        if (is_null($constructor) || $constructor-&gt;getNumberOfRequiredParameters() == 0) {
            return $item-&gt;newInstance();
        }
        $params = [];
        foreach ($constructor-&gt;getParameters() as $param) {
            if ($type = $param-&gt;getType()) {
                $params[] = $this-&gt;get($type-&gt;getName());
            }
        }
        return $item-&gt;newInstanceArgs($params);
    }
</code></pre>
<p>Here, we use the Reflection API to get the constructor. If there’s no constructor, or it has no required parameters, we just return a new instance of the reflected class as before.</p>
<p>Otherwise, we loop through the required parameters. For each parameter, we get the string representation of the type specified for that parameter, and retrieve an instance of it from the container. Afterwards, we use those parameters to instantiate the object.</p>
<p>Let’s run the specs again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
                                      100%                                       18
3 specs
18 examples (18 passed)
51ms
</code></pre>
<p>Our container is now complete. We can:</p>
<ul>
<li>Resolve simple classes out of the box</li>
<li>Set arbitrary keys to resolve to particular classes, or the result of callables, so as to enable mapping interfaces to concrete implementations, or resolve classes that require specific non-object parameters, such as PDO</li>
<li>Resolve complex classes with multiple dependencies</li>
</ul>
<p>Not too bad for just over 100 lines of PHP…</p>
<h1 id="final-thoughts">Final thoughts</h1>
<p>As I’ve said, this is a pretty minimal example of a dependency injection container, and I wouldn’t advise using this in production when there are so many existing, mature solutions available. I have no idea how the performance would stack up against existing solutions, or whether there are any issues with it, and quite frankly that’s besides the point - this is intended as a learning exercise to understand how dependency injection containers in general work, not as an actual useful piece of code for production. If you want an off-the-shelf container, I’d point you in the direction of <code>league/container</code>, which has served me well.</p>
<p>You can find the code for this tutorial on <a href="https://github.com/matthewbdaly/ernie">GitHub</a>, so if you have any problems, you should take a look there to see where the problem lies. Of course, if you go on to create your own kick-ass container based on this, do let me know!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding query objects]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/27/understanding-query-objects/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/27/understanding-query-objects/</guid>
            <pubDate>Sun, 27 Jan 2019 23:10:39 GMT</pubDate>
            <description><![CDATA[<p>The project I’ve been maintaining for the last year has inherited a rather dubious database structure that would currently be very difficult to refactor, which also makes many queries more convoluted than they should be. At present, I’m involved in building a whole new home page, which has necessitated adding some new queries. Since some of these involve carrying out unions between several similar tables (that should have been one table, grr…), they can involve some quite large chunks for each query.</p>
<p>As a result, it’s made sense to break those queries down further. Since Zend 1 doesn’t have anything analogous to scopes in Eloquent, I don’t really have an easy way to break these queries up in the models (and I’m trying to get the query logic out of the models at present anyway), so I opted to make them into query objects instead, which is a pattern I hadn’t used before (but probably should have).</p>
<p>A query object is pretty much what it says on the tin - it’s a PHP object that executes a single, very specific query. This may seem like overkill, but it’s only really useful for the most complex and convoluted of queries. It can accept parameters, as you’d expect, and some parts of the query may be optional based on that, but fundamentally it should build and run only one single query.</p>
<p>In this post I’ll go through how you might create one, how it relates to the repository pattern, and when to create one.</p>
<h1 id="creating-a-query-object-class">Creating a query object class</h1>
<p>I’m a big fan of the <code>__invoke()</code> magic method in PHP. For the uninitiated, it lets you instantiate the class, and then use it in the same way you would a function, making it very useful for callbacks. This also brings some other advantages:</p>
<ul>
<li>Unlike with a function, you can create private methods to do other parts of the work, making it easier to understand the main method.</li>
<li>It can have a constructor, and can therefore both accept dependencies via the constructor, and be instantiated via dependency injection, simplifying setup and testing when compared to using a callback.</li>
<li>Since <code>__invoke()</code> is an innate part of the PHP language, it makes more sense for classes that have a single responsibility to use that method name to do that, rather than picking something like <code>handle()</code> or <code>run()</code>.</li>
</ul>
<p>As a result, my query objects generally use the <code>__invoke()</code> method to trigger the query.</p>
<p>Since Zend 1 is no longer supported, I won’t bother displaying how I’d write the query in that specific context. I have yet to use this pattern with Laravel, but if I did, it would look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Queries;

use Illuminate\Database\DatabaseManager;

final class DashboardItems
{
    protected $db;

    public function __construct(DatabaseManager $db)
    {
        $this-&gt;db = $db;
    }

    public function __invoke(int $days = 7)
    {
        return $this-&gt;fooTable()
            -&gt;union($this-&gt;barTable())
            -&gt;whereRaw(&#39;start_date &gt;= (NOW() - INTERVAL ? DAY)&#39;, [$days]);
            -&gt;get();
    }

    private function fooTable()
    {
        return $this-&gt;db-&gt;table(&#39;foo&#39;)
            -&gt;where(&#39;type&#39;, &#39;=&#39;, &#39;fooType&#39;);
    }

    private function barTable(int $days)
    {
        return $this-&gt;db-&gt;table(&#39;bar&#39;)
            -&gt;where(&#39;type&#39;, &#39;=&#39;, &#39;barType&#39;);
    }
}
</code></pre>
<p>Note that we break each one of the tables we want to perform a <code>UNION</code> on into a private method. This is probably the biggest advantage of query objects - it lets you break particularly unwieldy queries up into logical steps, making them more readable. You could do this by adding private methods on a repository class too, but I’d be reluctant to add private methods to a repository that were only used in one query - to my mind, a query object is a better home for that.</p>
<h1 id="what-about-repositories-">What about repositories?</h1>
<p>I regularly use the repository pattern in my code bases, whether that’s for Laravel projects or the current Zend 1-based legacy project. It’s an ongoing effort to refactor it so that all the queries are called from repository classes, leaving the models to act as containers for the data. So how do query objects fit in here?</p>
<p>It’s important to note that while a repository represents all queries relating to a table, a query object represents only a single query, and so the repository should still be the place where the query is called from. However, the repository should just defer the actual querying to the query object. The relevant parts of the application structure for my current application look a bit like this:</p>
<pre><code class="lang-bash">└── app
    ├── Queries
    │   └── DashboardItems.php
    └── Repositories
        └── DashboardRepository.php
</code></pre>
<p>And the repository might call the query object as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Repositories;

use App\Queries\DashboardItems;

final class DashboardRepository
{
    public static function dashboardItems(int $days = 7)
    {
        $query = new DashboardItems;
        return $query($days);
    }
}
</code></pre>
<p>At present my repositories all use static methods as I’m still in the process of migrating the queries over to the repository classes. That also means I can’t easily use dependency injection. For a Laravel application, a similar call might look like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Repositories;

use App\Queries\DashboardItems;

final class DashboardRepository
{
    protected $dashboardQuery;

    public function __construct(DashboardItems $dashboardQuery)
    {
        $this-&gt;dashboardQuery = $dashboardQuery;
    }

    public function dashboardItems(int $days = 7)
    {
        return $this-&gt;dashboardQuery($days);
    }
}
</code></pre>
<p>The only real difference is that we can instantiate the query object out of the container, simplifying setup.</p>
<h1 id="when-to-use-query-objects">When to use query objects</h1>
<p>I think it probably goes without saying, but it should be a rare query that actually needs to be implemented as a query object, especially if you’re using an ORM like Eloquent that provides features like scopes, and as yet I only have two using this pattern, as well as two others that were implemented as “reporter” classes, but could be query objects instead. So far, my experience has been that the sort of queries that are large enough to be worth considering include:</p>
<ul>
<li>Queries that generate reports, particularly if they have various options</li>
<li>Queries that use unions, as in the above example, since it makes sense to use a private method to fetch each table</li>
<li>Queries with multiple complex joins</li>
</ul>
<p>Smaller queries will typically fit happily inside a single method in your repository classes. If that’s the case, then they can live there without trouble. However, if you have a query that’s becoming too big to fit inside a single method, rather than adding private methods to your repository class, it may make more sense to refactor it out into a query object in its own right. You can still call it via the same method on your repository class, but the repository can just defer to the query object. As I usually use decorators to cache the responses from my repository classes anyway, then it makes sense to stick with this approach to keep caching consistent too.</p>
<p>Query objects only really offer any value for particularly large queries. However, they can be invaluable in those circumstances. By enabling you to break those big queries up into a series of steps, they help make them easier to understand.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Writing a custom sniff for PHP CodeSniffer]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/</guid>
            <pubDate>Sun, 13 Jan 2019 18:50:45 GMT</pubDate>
            <description><![CDATA[<p>I’ve recently come around to the idea that <a href="https://matthiasnoback.nl/2018/09/final-classes-by-default-why/">in PHP all classes should be final by default</a>, and have started doing so as a matter of course. However, when you start doing something like this it’s easy to miss a few files that haven’t been updated, or forget to do it, so I wanted a way to detect PHP classes that are not set as either abstract or final, and if possible, set them as final automatically. I’ve mentioned before that I use PHP CodeSniffer extensively, and that has the capability to both find and resolve deviations from a coding style, so last night I started looking into the possibility of creating a coding standard for this. It took a little work to understand how to do this so I thought I’d use this sniff as a simple example.</p>
<p>The first part is to set out the directory structure. There’s a very specific layout you have to follow for PHP CodeSniffer:</p>
<ul>
<li>The folder for the standard must have the name of the standard, and be in the source folder set by Composer (in this case, <code>src/AbstractOrFinalClassesOnly</code>.</li>
<li>This folder must contain a <code>ruleset.xml</code> file defining the name and description of the standard, and any other required content.</li>
<li>Any defined sniffs must be in a <code>Sniffs</code> folder.</li>
</ul>
<p>The <code>ruleset.xml</code> file was fairly simple in this case, as this is a very simple standard:</p>
<pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;ruleset name=&quot;AbstractOrFinalClassesOnly&quot;&gt;
    &lt;description&gt;Checks all classes are marked as either abstract or final.&lt;/description&gt;
&lt;/ruleset&gt;
</code></pre>
<p>The sniff is intended to do the following:</p>
<ul>
<li>Check all classes have either the <code>final</code> keyword or the <code>abstract</code> keyword set</li>
<li>When running the fixer, make all classes without the <code>abstract</code> keyword final</li>
</ul>
<p>First of all, our class must implement the interface <code>PHP_CodeSniffer\Sniffs\Sniff</code>, which requires the following methods:</p>
<pre><code class="lang-php">    public function register(): array;

    public function process(File $file, $position): void;
</code></pre>
<p>Note that <code>File</code> here is an instance of <code>PHP_CodeSniffer\Files\File</code>. The first method registers the code the sniff should operate on. Here we’re only interested in classes, so we return an array containing <code>T_CLASS</code>. This is defined in the <a href="https://secure.php.net/manual/en/tokens.php">list of parser tokens used by PHP</a>, and represents classes and objects:</p>
<pre><code class="lang-php">    public function register(): array
    {
        return [T_CLASS];
    }
</code></pre>
<p>For the <code>process()</code> method, we receive two arguments, the file itself, and the position. We need to keep a record of the tokens we check for, so we do so in a private property:</p>
<pre><code class="lang-php">    private $tokens = [
        T_ABSTRACT,
        T_FINAL,
    ];
</code></pre>
<p>Then, we need to find the error:</p>
<pre><code class="lang-php">        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
        }
</code></pre>
<p>We use <code>$file</code> to get the token before <code>class</code>, and pass the <code>$tokens</code> property as a list of acceptable values. If the preceding token is not either <code>abstract</code> or <code>final</code>, we add a fixable error. The first argument is the string error message, the second is the location, and the third is the class of the sniff that has failed.</p>
<p>That will catch the issue, but won’t actually fix it. To do that, we need to get the fixer from the file object, and call its <code>addContent()</code> method to add the <code>final</code> keyword. We amend <code>process()</code> to extract the fixer, add it as a property, and then call the <code>fix()</code> method when we come across a fixable error:</p>
<pre><code class="lang-php">    public function process(File $file, $position): void
    {
        $this-&gt;fixer = $file-&gt;fixer;
        $this-&gt;position = $position;

        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
            $this-&gt;fix();
        }
    }
</code></pre>
<p>Then we define the <code>fix()</code> method:</p>
<pre><code class="lang-php">    private function fix(): void
    {
        $this-&gt;fixer-&gt;addContent($this-&gt;position - 1, &#39;final &#39;);
    }
</code></pre>
<p>Here’s the finished class:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types=1);

namespace Matthewbdaly\AbstractOrFinalClassesOnly\Sniffs;

use PHP_CodeSniffer\Sniffs\Sniff;
use PHP_CodeSniffer\Files\File;

/**
 * Sniff for catching classes not marked as abstract or final
 */
final class AbstractOrFinalSniff implements Sniff
{
    private $tokens = [
        T_ABSTRACT,
        T_FINAL,
    ];

    private $fixer;

    private $position;

    public function register(): array
    {
        return [T_CLASS];
    }

    public function process(File $file, $position): void
    {
        $this-&gt;fixer = $file-&gt;fixer;
        $this-&gt;position = $position;

        if (!$file-&gt;findPrevious($this-&gt;tokens, $position)) {
            $file-&gt;addFixableError(
                &#39;All classes should be declared using either the &quot;abstract&quot; or &quot;final&quot; keyword&#39;,
                $position - 1,
                self::class
            );
            $this-&gt;fix();
        }
    }

    private function fix(): void
    {
        $this-&gt;fixer-&gt;addContent($this-&gt;position - 1, &#39;final &#39;);
    }
}
</code></pre>
<p>I’ve made the resulting standard <a href="https://github.com/matthewbdaly/abstract-or-final-sniff">available via Github</a>.</p>
<p>This is a bit rough and ready and I’ll probably refactor it a bit when I have time. In addition, it’s not quite displaying the behaviour I want as it should, since ideally it should only be looking for the <code>abstract</code> and <code>final</code> keywords in classes that implement an interface. However, it’s proven fairly easy to create this sniff, except for the fact I had to go rooting around various tutorials that weren’t all that clear. Hopefully this example is a bit simpler and easier to follow.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[You don't need that module package]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/03/you-dont-need-that-module-package/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/03/you-dont-need-that-module-package/</guid>
            <pubDate>Thu, 03 Jan 2019 23:55:49 GMT</pubDate>
            <description><![CDATA[<p>Lately I’ve seen a number of Laravel packages being posted on places like Reddit that offer ways to make your project more modular by letting you break their classes out of the usual structure and place them in a separate folder called something like <code>packages/</code> or <code>modules/</code>. However, these packages are completely redundant, and it requires very little work to achieve the same thing with Composer alone. In addition, much of it is not specific to Laravel and can also be applied to any other framework that uses Composer.</p>
<p>There are two main approaches I’m aware of - keeping it in a single project, and moving the modules to separate Composer packages.</p>
<h1 id="single-project">Single project</h1>
<p>Suppose we have a brand new Laravel project with the namespace left as the default <code>App</code>. This is what the <code>autoload</code> section of the <code>composer.json</code> file will look like:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;App\\&quot;: &quot;app/&quot;
        },
        &quot;classmap&quot;: [
            &quot;database/seeds&quot;,
            &quot;database/factories&quot;
        ]
    },
</code></pre>
<p>Composer allows for numerous ways to autoload classes and you can add additional namespaces as you wish. Probably the best approach is to use PSR-4 autoloading, as in this example:</p>
<pre><code class="lang-json">    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;App\\&quot;: &quot;app/&quot;,
            &quot;Packages\\&quot;: &quot;packages&quot;
        },
        &quot;classmap&quot;: [
            &quot;database/seeds&quot;,
            &quot;database/factories&quot;
        ]
    },
</code></pre>
<p>Now, if you put the model <code>Post.php</code> in the folder, <code>packages/Blog/Models/</code>, then this will map to the namespace <code>Packages\Blog\Models\Post</code>, and if you set the namespace to this in the file, and run <code>composer dump-autoload</code>, you should be able to import it from that namespace without trouble. As with the <code>App\</code> namespace, because it’s using PSR-4 you’re only specifying the top-level namespace and the folders and files underneath have to mirror the namespace, so for instance, <code>Packages\Foo\Bar</code> maps to <code>packages/Foo/Bar.php</code>. If for some reason PSR-4 autoloading doesn’t map well to what you want to do, then there are other methods you can use - refer to the <a href="https://getcomposer.org/doc/04-schema.md#autoload">relevant section of the Composer documentation</a> for the other methods available.</p>
<p>The controllers are the toughest part, because by default Laravel’s routing works on the assumption that the controllers are all under the <code>App\Http\Controllers</code> namespace, so you can shorten the namespace used. There are two ways around this I’m aware of. One is to specify the full namespace when referencing each controller:</p>
<pre><code class="lang-php">Route::get(&#39;/&#39;, &#39;\App\Modules\Http\Controllers\FooController@index&#39;);
</code></pre>
<p>The other option is to update the <code>RouteServiceProvider.php</code>‘s namespace property. It defaults to this:</p>
<pre><code class="lang-php">protected $namespace = &#39;App\Http\Controllers&#39;;
</code></pre>
<p>If there’s a more convenient namespace you want to place all your controllers under, then you can replace this, and it will become the default namespace applied in your route files.</p>
<p>Other application components such as migrations, routes and views can be loaded from a service provider very easily. Just create a service provider for your module, register it in <code>config/app.php</code>, and set up the <code>boot()</code> method to load whichever components you want from the appropriate place, as in this example:</p>
<pre><code class="lang-php">        $this-&gt;loadMigrationsFrom(__DIR__.&#39;/../database/migrations&#39;);
        $this-&gt;loadRoutesFrom(__DIR__.&#39;/../routes.php&#39;);
        $this-&gt;loadViewsFrom(__DIR__.&#39;/../views&#39;, &#39;comments&#39;);
</code></pre>
<h1 id="separate-packages">Separate packages</h1>
<p>The above approach works particularly well in the initial stages of a project, when you may need to jump around a lot to edit different parts of the project. However, later on, once many parts of the project have stabilised, it may make more sense to pull the modules out into separate repositories and use Composer to pull them in as dependencies, using its support for private repositories. I’ve also often taken this approach right from the start without issue.</p>
<p>This approach has a number of advantages. It makes it easier to reuse parts of the project in other projects if need be. Also, if you put your tests in the packages containing the components they test, it means that rather than running one monolithic test suite for the whole project, you can instead run each module’s tests each time you change it, and limit the test suite of the main project to those integration and acceptance tests that verify the whole thing, along with any unit tests for code that remains in the main repository, resulting in quicker test runs.</p>
<p>Don’t get me wrong, making your code more modular is definitely a good thing and I’m wholly in favour of it. However, it only takes a little knowledge of Composer to be able to achieve this without any third party package at all, which is good because you’re no longer dependent on a package that may at any time fall behind the curve or be abandoned.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Why bad code is bad]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/02/why-bad-code-is-bad/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/02/why-bad-code-is-bad/</guid>
            <pubDate>Wed, 02 Jan 2019 23:00:50 GMT</pubDate>
            <description><![CDATA[<p>This may sound a little trite, but why is it bad to write bad code?</p>
<p>Suppose you’re a client, or a line manager for a team of developers. You work with developers regularly, but when they say that a code base is bad, what are the consequences of that, and how can you justify spending time and money to fix it? I’ve often heard the refrain “If it works, it doesn’t matter”, which may have a grain of truth, but is somewhat disingenuous. In this post, I’ll explain some of the consequences when your code base is bad. It can be hard to put a definitive price tag on the costs associated with delivering bad code, but this should give some idea of the sort of issues you should take into account.</p>
<h1 id="bad-code-kills-developer-productivity">Bad code kills developer productivity</h1>
<p>Bad code is harder to understand, navigate and reason about than good code. Developers are not superhuman, and we can only hold so much in our heads at one time, which is why many of the principles behind a clean and maintainable code base can essentially be boiled down to “break it into bite-sized chunks so developers can understand each one in isolation before seeing how they fit together”.</p>
<p>If one particular class or function gets too big and starts doing too much, it quickly becomes very, very hard to get your head around what that code does. Developers typically have to build a mental model of how a class or function works before they can use it effectively, and the smaller and simpler you can keep each unit of code, the less time and effort it takes to do so. The mark of a skilled developer is not the complexity of their code bases, but their simplicity - they’ve learned to make their code as small, simple, and readable as possible. A clean and well laid-out code base makes it easy for developers to get into the mental state called “flow” that is significantly more productive.</p>
<p>In addition, if an application doesn’t conform to accepted conventions in some way, such as using inappropriate HTTP verbs (eg <code>GET</code> to change the state of something), then quite apart from the fact that it won’t play well with proxy servers, it imposes an additional mental load on developers by forcing them to drop a reasonable set of assumptions about how the application works. If the application used the correct HTTP verbs, experienced developers would know without being told that to create a new report, you’d send a <code>POST</code> request to the <code>reports</code> API endpoint.</p>
<p>During the initial stages of a project, functionality can be delivered quite quickly, but if the code quality is poor, then over time developer velocity can decrease. Ensuring a higher quality code base helps to maintain velocity at a consistent level as it gets bigger. This also means estimates will be more accurate, so if you quote a given number of hours for a feature, you’re more likely to deliver inside that number of hours.</p>
<h1 id="bad-code-is-bad-for-developer-welfare">Bad code is bad for developer welfare</h1>
<p>A code base that’s repetitive, badly organised, overly complex and hard to read is a recipe for stressed developers, making burnout more likely. If a developer suffers burnout, their productivity will drop substantially.</p>
<p>In the longer term, if developer burnout isn’t managed correctly, it could easily increase developer turnover as stressed developers quit. It’s also harder to recruit new developers if they’re faced with the prospect of dealing with a messy, stressful code base.</p>
<h1 id="bad-code-hampers-your-ability-to-pivot">Bad code hampers your ability to pivot</h1>
<p>If the quality of your code base is poor, it can mean that if functionality needs to be changed or added, then more work is involved. Repetitive code can mean something has to be updated in more than one place, and if it becomes too onerous, it can make it too time-consuming or expensive to justify the changes.</p>
<h1 id="bad-code-may-threaten-the-long-term-viability-of-your-project">Bad code may threaten the long-term viability of your project</h1>
<p>One thing that is certain in our industry is that things change. Libraries, languages and frameworks are constantly being updated, and sometimes there will be potentially breaking changes to some of these. On occasion, a library or framework will be discontinued, making it necessary to migrate to a replacement.</p>
<p>Bad code is often tightly coupled to a particular framework or library, and sometimes even to a particular version, making it harder to migrate if it becomes necessary. If a project was written with a language or framework version that had a serious issue, and was too tightly coupled to migrate to a newer version, it might be too risky to keep it running, or it might be necessary to run an insecure application in spite of the risks it posed.</p>
<h1 id="bad-code-is-more-brittle">Bad code is more brittle</h1>
<p>A poor code base will break, a lot, and often in ways that are clearly visible to end users. Duplicate code makes it easy to miss cases where something needs to be updated in more than one place, and if the code base lacks tests, a serious error may not be noticed for a long time, especially if it’s something comparatively subtle.</p>
<h1 id="bad-code-is-hard-if-not-impossible-to-write-automated-tests-for">Bad code is hard, if not impossible, to write automated tests for</h1>
<p>If a particular class or function does too much, it becomes <em>much</em> harder to write automated tests for it because there are more variables going in and more expected outcomes. A sufficiently messy code base may only really be testable by automating the browser, which tends to be very slow and brittle, making test-driven development impractical. Manual testing is no substitute for a proper suite of automated tests, since it’s slower, less consistent and not repeatable in the same way, and it’s only sufficient by itself for the most trivial of web apps.</p>
<h1 id="bad-code-is-often-insecure">Bad code is often insecure</h1>
<p>A bad code base may inadvertently expose user’s data, or be at risk from all kinds of attacks such as cross-site scripting and SQL injection attacks that can also potentially expose too much data.</p>
<p>For any business with EU-based users, the risks of exposing user’s data are very serious. Under the GDPR, there’s a potential fine of up to &euro;20 million, or 4% of turnover. That’s potentially an existential risk for many companies.</p>
<p>In addition, a bad code base is often more vulnerable to denial-of-service attacks. If it has poor or no caching, excessive queries, or inefficient queries, then every time a page loads it will carry out more queries than a more optimised site would. Given the same server specs, the inefficient site will be overwhelmed quicker than the efficient one.</p>
<h1 id="summary">Summary</h1>
<p>It’s all too easy to focus solely on delivering a working product and not worry about the quality of the code base when time spent cleaning it up doesn’t pay the bills, and it can be hard to justify the cost of cleaning it up later to clients.</p>
<p>There are tools you can use to help keep up code quality, such as linters and static analysers, and it’s never a bad idea to investigate the ones available for the language(s) you work in. For best results they should form part of your continuous integration pipeline, so you can monitor changes over time and prompt developers who check in problematic code to fix the issues. Code reviews are another good way to avoid bad code, since they allow developers to find problematic code and offer more elegant solutions.</p>
<p>I’m not suggesting that a code base that has a few warts has no value, or that you should sink huge amounts of developer time into refactoring messy code when money is tight, as commercial concerns do have to come first. But a bad code base does cause serious issues that have financial implications, and it’s prudent to recognise the problems it could cause, and take action to resolve them, or better yet, prevent them occurring in the first place.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Improving search in Vim and Neovim with FZF and Ripgrep]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/12/27/improving-search-in-vim-and-neovim-with-fzf-and-ripgrep/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/12/27/improving-search-in-vim-and-neovim-with-fzf-and-ripgrep/</guid>
            <pubDate>Thu, 27 Dec 2018 18:37:09 GMT</pubDate>
            <description><![CDATA[<p>A while back I was asked to make some changes to a legacy project that was still using Subversion. This was troublesome because my usual method of searching in files is to use Tim Pope’s Fugitive Vim plugin as a frontend for <code>git grep</code>, and so it would be harder than usual to navigate the project. I therefore started looking around for alternative search systems, and one combination that kept on coming up was FZF and Ripgrep, so I decided to give them a try. FZF is a fuzzy file finder, written in Go, while Ripgrep is an extremely fast grep, written in Rust, that respects gitignore rules by default. Both have proven so useful they’re now a permanent part of my setup.</p>
<p>On Mac OS X, both are available via Homebrew, so they’re easy to install. On Ubuntu, Ripgrep is in the repositories, but FZF isn’t, so it was necessary to install it in my home directory. There’s a <a href="https://github.com/junegunn/fzf.vim">Vim plugin for FZF and Ripgrep integration</a>, which, since I use vim-plugged, I could install by adding the following to my <code>init.vim</code>, then running <code>PlugUpdate</code> from Neovim:</p>
<pre><code class="lang-viml">&quot; Search
Plug &#39;~/.fzf&#39;
Plug &#39;junegunn/fzf.vim&#39;
</code></pre>
<p>The plugin exposes a number of commands that are very useful, and I’ll go through the ones I use most often:</p>
<ul>
<li><code>:Files</code> is for finding files by name. I used to use Ctrl-P for this, but FZF is so much better and quicker that I ditched Ctrl-P almost immediately (though you can map <code>:Files</code> to it if you want to use the same key).</li>
<li><code>:Rg</code> uses Ripgrep to search for content in files, so you can search for a specific string. This makes it an excellent replacement for the <code>Ggrep</code> command from Fugitive.</li>
<li><code>:Snippets</code> works with Ultisnips to provide a filterable list of available snippets you can insert, making it much more useful</li>
<li><code>:Tags</code> allows you to filter and search tags in the project as a whole</li>
<li><code>:BTags</code> does the same, but solely in the current buffer</li>
<li><code>:Lines</code> allows you to find lines in the project and navigate to them.</li>
<li><code>:BLines</code> does the same, but solely in the current buffer.</li>
</ul>
<p>In addition to being useful in Neovim, FZF can also be helpful in Bash. You can use <code>Ctrl-T</code> to find file paths, and it enhances the standard <code>Ctrl-R</code> history search, making it faster and more easily navigable. The performance of both is also excellent - they work very fast, even on the very large legacy project I maintain, or on slower machines, and I never find myself waiting for them to finish. Both tools have quickly become an indispensible part of my workflow.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Decorating service classes]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/12/06/decorating-service-classes/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/12/06/decorating-service-classes/</guid>
            <pubDate>Thu, 06 Dec 2018 18:34:16 GMT</pubDate>
            <description><![CDATA[<p>I’ve written before about using decorators to extend the functionality of existing classes, in the context of the repository pattern when working with Eloquent. However, the same practice is applicable in many other contexts.</p>
<p>Recently, I was asked to add RSS feeds to the home page of the legacy project that is my main focus these days. The resulting service class looked something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Services;

use Rss\Feed\Reader;
use App\Contracts\Services\FeedFetcher;

class RssFetcher implements FeedFetcher
{
    public function fetch($url)
    {
        return Reader::import($url);
    }
}
</code></pre>
<p>In accordance with the principle of loose coupling, I also created an interface for it:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Contracts\Services;

interface FeedFetcher
{
    public function fetch($url);
}
</code></pre>
<p>I was recently able to add dependency injection to the project using PHP-DI, so now I can inject an instance of the feed fetcher into the controller by typehinting the interface and having it resolve to the <code>RssFetcher</code> class.</p>
<p>However, there was an issue. I didn’t want the application to make multiple HTTP requests to fetch those feeds every time the page loads. At the same time, it was also a bit much to have a scheduled task running to fetch those feeds and store them in the database, since many times that would be unnecessary. The obvious solution was to cache the feed content for a specified length of time, in this case five minutes.</p>
<p>I <em>could</em> have integrated the caching into the service class itself, but that wasn’t the best practice, because it would be tied to that implementation. If in future we needed to switch to a different feed handler, we’d have to re-implement the caching functionality. So I decided it made sense to decorate the service class.</p>
<p>The decorator class implemented the same interface as the feed fetcher, and accepted another instance of that interface in the constructor, along with a PSR6-compliant caching library. It looked something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Services;

use App\Contracts\Services\FeedFetcher;
use Psr\Cache\CacheItemPoolInterface;

class FetcherCachingDecorator implements FeedFetcher
{
    protected $fetcher;

    protected $cache;

    public function __construct(FeedFetcher $fetcher, CacheItemPoolInterface $cache)
    {
        $this-&gt;fetcher = $fetcher;
        $this-&gt;cache = $cache;
    }

    public function fetch($url)
    {
        $item = $this-&gt;cache-&gt;getItem(&#39;feed_&#39;.$url);
        if (!$item-&gt;isHit()) {
            $item-&gt;set($this-&gt;fetcher-&gt;fetch($url));
            $this-&gt;cache-&gt;save($item);
        }
        return $item-&gt;get();
    }
}
</code></pre>
<p>Now, when you instantiate the feed fetcher, you wrap it in the decorator as follows:</p>
<pre><code class="lang-php">&lt;?php

$fetcher = new FetcherCachingDecorator(
        new App\Services\RssFetcher,
        $cache
);
</code></pre>
<p>As you can see, this solves our problem quite nicely. By wrapping our feed fetcher in this decorator, we keep the caching layer completely separate from any one implementation of the fetcher, so in the event we need to swap the current one out for another implementation, we don’t have to touch the caching layer at all. As long as we’re using dependency injection to resolve this interface, we’re only looking at a little more code to instantiate it.</p>
<p>In addition, this same approach can be applied for other purposes, and you can wrap the service class as many times as necessary. For instance, if we wanted to log all the responses we got, we could write a logging decorator something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Services;

use App\Contracts\Services\FeedFetcher;
use Psr\Log\LoggerInterface;

class FeedLoggingDecorator implements FeedFetcher
{
    protected $fetcher;

    protected $logger;

    public function __construct(FeedFetcher $fetcher, LoggerInterface $logger)
    {
        $this-&gt;fetcher = $fetcher;
        $this-&gt;logger = $logger;
    }

    public function fetch($url)
    {
        $response = $this-&gt;fetcher-&gt;fetch($url);
        $this-&gt;logger-&gt;info($response);
        return $response;
    }
}
</code></pre>
<p>The same idea can be applied to an API client. For instance, say we have the following interface for an API client:</p>
<pre><code class="lang-php">&lt;?php

namespace Foo\Bar\Contracts;

use Foo\Bar\Objects\Item;
use Foo\Bar\Objects\ItemCollection;

interface Client
{
    public function getAll(): ItemCollection;

    public function find(int $id): Item;

    public function create(array $data): Item;

    public function update(int $id, array $data): Item;

    public function delete(int $id);
}
</code></pre>
<p>Now, of course any good API client should respect HTTP headers and use those to do some caching itself, but depending on the use case, you may also want to cache these requests yourself. For instance, if the only changes to the entities stored by the third party API will be ones you’ve made, or they don’t need to be 100% up to date, you may be better off caching those responses before they reach the actual API client. Under those circumstances, you might write a decorator like this to do the caching:</p>
<pre><code class="lang-php">&lt;?php

namespace Foo\Bar\Services;

use Foo\Bar\Contracts\Client;
use Psr\Cache\CacheItemPoolInterface;

class CachingDecorator implements Client
{
    protected $client;

    protected $cache;

    public function __construct(Client $client, CacheItemPoolInterface $cache)
    {
        $this-&gt;client = $client;
        $this-&gt;cache = $cache;
    }

    public function getAll(): ItemCollection
    {
        $item = $this-&gt;cache-&gt;getItem(&#39;item_all&#39;);
        if (!$item-&gt;isHit()) {
            $item-&gt;set($this-&gt;client-&gt;getAll());
            $this-&gt;cache-&gt;save($item);
        }
        return $item-&gt;get();
    }

    public function find(int $id): Item
    {
        $item = $this-&gt;cache-&gt;getItem(&#39;item_&#39;.$id);
        if (!$item-&gt;isHit()) {
            $item-&gt;set($this-&gt;client-&gt;find($id));
            $this-&gt;cache-&gt;save($item);
        }
        return $item-&gt;get();

    }

    public function create(array $data): Item
    {
        $this-&gt;cache-&gt;clear();
        return $this-&gt;client-&gt;create($data);
    }

    public function update(int $id, array $data): Item
    {
        $this-&gt;cache-&gt;clear();
        return $this-&gt;client-&gt;update($id, $data);
    }

    public function delete(int $id)
    {
        $this-&gt;cache-&gt;clear();
        return $this-&gt;client-&gt;delete($id);
    }
}
</code></pre>
<p>Any methods that change the state of the data on the remote API will clear the cache, while any that fetch data will first check the cache, only explicitly fetching data from the API when the cache is empty, and caching it again. I won’t go into how you might write a logging decorator for this, but it should be straightforward to figure out for yourself.</p>
<p>The decorator pattern is a very powerful way of adding functionality to a class without tying it to a specific implementation. If you’re familiar with how middleware works, decorators work in a very similar fashion in that you can wrap your service in as many layers as you wish in order to accomplish specific tasks, and they adhere to the single responsibility principle by allowing you to use different decorators for different tasks.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Simplify your tests with anonymous classes]]></title>
            <link>https://matthewdaly.co.uk/blog/2018/10/20/simplify-your-tests-with-anonymous-classes/</link>
            <guid>https://matthewdaly.co.uk/blog/2018/10/20/simplify-your-tests-with-anonymous-classes/</guid>
            <pubDate>Sat, 20 Oct 2018 13:48:05 GMT</pubDate>
            <description><![CDATA[<p>Anonymous classes were added in PHP7, but so far I haven’t made all that much use of them. However, recently I’ve been working on building a simple dependency injection container for learning purposes. This uses the PHP Reflection API to determine how to resolve dependencies. For instance, if it’s asked for a class for which one of the dependencies required by the constructor is an instance of the <code>DateTime</code> class, it should create an instance, and then pass it into the constructor automatically when instantiating the class. Then it should return the newly created class.</p>
<p>Mocking isn’t really a suitable approach for this use case because the container needs to return a concrete class instance to do its job properly. You could just create a series of fixture classes purely for testing purposes, but that would mean either defining more than one class in a file (violating PSR-2), or defining a load of fixture classes in separate files, meaning you’d have to write a lot of boilerplate, and you’d have to move between several different files to understand what’s going on in the test.</p>
<p>Anonymous classes allow you a means to write simple classes for tests inline, as in this example for retrieving a very basic class. The tests use PHPSpec:</p>
<pre><code class="lang-php7">&lt;?php

namespace spec\Vendor\Package;

use Vendor\Package\MyClass;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;
use DateTime;

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_registered_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
}
</code></pre>
<p>You can also define your own methods inline. Here we implement the <code>invoke()</code> magic method so that the class is a callable:</p>
<pre><code class="lang-php7">&lt;?php

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_registered_invokable()
    {
        $toResolve = new class {
            public function __invoke() {
                return new DateTime;
            }
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }
}
</code></pre>
<p>You can also define a constructor. Here, we’re getting the class name of a newly created anonymous class that accepts an instance of <code>DateTime</code> as an argument to the constructor. Then, we can resolve a new instance out of the container:</p>
<pre><code class="lang-php7">&lt;?php

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
}
</code></pre>
<p>For classes that will extend an existing class or implement an interface, you can define those inline too. Or you can include a trait:</p>
<pre><code class="lang-php7">&lt;?php

class MyClassSpec extends ObjectBehavior
{
    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) extends Foo implements Bar {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }

            use MyTrait;
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
}
</code></pre>
<p>In cases where the functionality is contained in a trait or abstract class, and you might need to add little or no additional functionality, this is a lot less verbose than creating a class the conventional way.</p>
<p>None of this is stuff you can’t do without anonymous classes, but by defining these sort of disposable fixture classes inline in your tests, you’re writing the minimum amount of code necessary to implement your test, and it’s logical to define it inline since it’s only ever used in the tests. One thing to bear in mind is that anonymous classes are created and instantiated at the same time, so you can’t easily create a class and then instantiate an instance of it separately. However, you can instantiate one, then use the <code>get_class()</code> function to get its class name and use that to resolve it, which worked well for my use case.</p>
<p>Another use case for anonymous classes is testing traits or abstract classes. I generally use Mockery as my mocking solution with PHPUnit tests, but I’ve sometimes missed the <code>getMockForTrait()</code> method from PHPUnit. However, another option is to instantiate an anonymous class that includes that trait for testing purposes:</p>
<pre><code class="lang-php7">&lt;?php

$item = new class() {
    use MyTrait;
};
</code></pre>
<p>This way, your test class is as minimal as possible, and you can test the trait/abstract class in a fairly isolated fashion.</p>
]]></description>
        </item>
    </channel>
</rss>
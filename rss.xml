<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk</link>
        <description>I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Sun, 03 Jan 2021 20:45:45 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2021</copyright>
        <item>
            <title><![CDATA[Lightweight Laravel - deconstructing a full stack framework]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/12/30/lightweight-laravel-deconstructing-a-full-stack-framework/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/12/30/lightweight-laravel-deconstructing-a-full-stack-framework/</guid>
            <pubDate>Wed, 30 Dec 2020 17:00:00 GMT</pubDate>
            <description><![CDATA[<p>Back when I used to work with Django, I read the book <a href="https://www.oreilly.com/library/view/lightweight-django/9781491946275/">Lightweight Django</a>, and it completely changed the way I thought about building web applications. For years I’d heard the same lines parroted about how Django was too large and bloated, and something like Flask was a better bet for many applications, and this book completely blew this misconception away. By demonstrating how it was possible to break the framework apart, use just what you need, and leave out what you don’t, it showed how I could benefit from my familiarity with Django, while making it more suitable for smaller applications.</p>
<p>Laravel, like Django, is a full stack framework, and is often subject to similar misconceptions about bloat. But just because the framework ships with all this stuff, doesn’t mean you’re obliged to use it all. If you know you aren’t going to need all of a framework’s functionality, there’s nothing stopping you getting rid of what you don’t need, or even replacing it with something else. In this article, I’ll show you how to apply the same methodology to a Laravel application to remove what you don’t need. As part of this, we’ll be building a simple placeholder image service. This was used in Lightweight Django as it’s a good example of an application that is completely stateless, and doesn’t need sessions or a database, so it’s often seen as a bad fit for a full stack framework. Since the same applies here, it’s a good example for us too.</p>
<h2 id="getting-started">Getting started</h2>
<p>Run the following command in the shell to create a new Laravel application:</p>
<pre><code class="lang-bash">$ composer create-project --prefer-dist laravel/laravel lightweight-laravel
</code></pre>
<p>What this actually does is as follows:</p>
<ul>
<li>Resolve the latest release of the package <code>laravel/laravel</code> that will work on your system</li>
<li>Copy it from the <a href="https://github.com/laravel/laravel">repository</a> to the specified location</li>
<li>Carry out any post-install scripts specified, such as creating the <code>.env</code> file and generating a key</li>
</ul>
<p>However, that’s just a standardised boilerplate for Laravel applications. Most of the functionality of the framework is in the package <code>laravel/framework</code>, which is included as a dependency in your <code>composer.json</code>. This makes sense, because by keeping as much of the actual framework out of the starter boilerplate and in a separate repository, it minimises the work required to update the application to a new version. It also means you can strip that boilerplate down to remove references to things you don’t need, and even create your own custom boilerplates to save you work in future.</p>
<h2 id="stripping-down-the-boilerplate">Stripping down the boilerplate</h2>
<p>Let’s start stripping out the things we don’t need. Since our application is stateless, we have no need whatsoever of a database, so we can delete the <code>app/Models</code> and <code>database</code> folders. We’ll want to support Redis for the cache, so we can’t delete the file <code>config/database.php</code>, but we can remove any references to the database other than Redis from that file. We can delete some other files from the <code>config/</code> folder, namely <code>auth.php</code>, <code>broadcasting.php</code>, <code>filesystems.php</code>, <code>mail.php</code>, <code>queue.php</code>, <code>services.php</code> and <code>session.php</code>.</p>
<p>We also don’t need a lot of the middleware that ships with Laravel. If you go into the file <code>app/Http/Kernel.php</code> you’ll see that it assigns some middleware as global, some to the <code>web</code> and <code>api</code> groups, and some as optional route middleware. In this file:</p>
<ul>
<li>We don’t need to make any POST requests to this application, so we can lose the <code>ValidatePostSize</code> middleware from the global middleware entirely</li>
<li>The <code>web</code> group relates to cookies, sessions, CSRF, authentication and handling routing with substitute bindings. Since we don’t need any of that we can empty this group entirely</li>
<li>The <code>auth</code>, <code>auth.basic</code>, <code>can</code>, <code>guest</code>, <code>password.confirm</code>, and <code>verified</code> route middleware is also surplus to requirements and can go</li>
</ul>
<p>As this change is a bit fiddly, here’s a patch, which may be easier to read:</p>
<pre><code class="lang-patch">From 6bc87e9602e839d5635963b6d740279b2dbcf16b Mon Sep 17 00:00:00 2001
From: Matthew Daly &lt;Matthew Daly 450801+matthewbdaly@users.noreply.github.com&gt;
Date: Wed, 30 Dec 2020 11:54:56 +0000
Subject: [PATCH] Removed unwanted middleware

---
 app/Http/Kernel.php | 14 --------------
 1 file changed, 14 deletions(-)

diff --git a/app/Http/Kernel.php b/app/Http/Kernel.php
index 30020a5..10e150d 100644
--- a/app/Http/Kernel.php
+++ b/app/Http/Kernel.php
@@ -18,7 +18,6 @@ class Kernel extends HttpKernel
         \App\Http\Middleware\TrustProxies::class,
         \Fruitcake\Cors\HandleCors::class,
         \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
-        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
         \App\Http\Middleware\TrimStrings::class,
         \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
     ];
@@ -30,13 +29,6 @@ class Kernel extends HttpKernel
      */
     protected $middlewareGroups = [
         &#39;web&#39; =&gt; [
-            \App\Http\Middleware\EncryptCookies::class,
-            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
-            \Illuminate\Session\Middleware\StartSession::class,
-            // \Illuminate\Session\Middleware\AuthenticateSession::class,
-            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
-            \App\Http\Middleware\VerifyCsrfToken::class,
-            \Illuminate\Routing\Middleware\SubstituteBindings::class,
         ],

         &#39;api&#39; =&gt; [
@@ -53,14 +45,8 @@ class Kernel extends HttpKernel
      * @var array
      */
     protected $routeMiddleware = [
-        &#39;auth&#39; =&gt; \App\Http\Middleware\Authenticate::class,
-        &#39;auth.basic&#39; =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
         &#39;cache.headers&#39; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
-        &#39;can&#39; =&gt; \Illuminate\Auth\Middleware\Authorize::class,
-        &#39;guest&#39; =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,
-        &#39;password.confirm&#39; =&gt; \Illuminate\Auth\Middleware\RequirePassword::class,
         &#39;signed&#39; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
         &#39;throttle&#39; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
-        &#39;verified&#39; =&gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
     ];
 }
-- 
2.28.0

</code></pre>
<p>These changes also mean a lot of the service providers and facades are now redundant and can be removed from the application. If you go into <code>config/app.php</code> you can remove <code>AuthServiceProvider</code>, <code>BroadcastServiceProvider</code>, <code>CookieServiceProvider</code>, <code>MailServiceProvider</code>, <code>NotificationServiceProvider</code>, <code>PaginationServiceProvider</code>, <code>PasswordResetServiceProvider</code>, <code>SessionServiceProvider</code> and <code>TranslationServiceProvider</code> from the providers section, as well as the commented-out local <code>BroadcastServiceProvider</code>. You can also delete the facades for <code>Auth</code>, <code>Cookie</code>, <code>DB</code>, <code>Eloquent</code>, <code>Gate</code>, <code>Lang</code>, <code>Mail</code>, <code>Notification</code>, <code>Password</code>, <code>Queue</code>, <code>Schema</code>, <code>Session</code>, and <code>Storage</code>.</p>
<p>Again, here’s a patch of the required changes:</p>
<pre><code class="lang-patch">From 66be3b836706ef488b890cdae6e97d4fc6195dd6 Mon Sep 17 00:00:00 2001
From: Matthew Daly &lt;Matthew Daly 450801+matthewbdaly@users.noreply.github.com&gt;
Date: Wed, 30 Dec 2020 12:10:25 +0000
Subject: [PATCH] Removed unused service providers and facades

---
 config/app.php | 26 --------------------------
 1 file changed, 26 deletions(-)

diff --git a/config/app.php b/config/app.php
index 2a2f0eb..b7a38c8 100644
--- a/config/app.php
+++ b/config/app.php
@@ -139,26 +139,17 @@ return [
         /*
          * Laravel Framework Service Providers...
          */
-        Illuminate\Auth\AuthServiceProvider::class,
-        Illuminate\Broadcasting\BroadcastServiceProvider::class,
         Illuminate\Bus\BusServiceProvider::class,
         Illuminate\Cache\CacheServiceProvider::class,
         Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,
-        Illuminate\Cookie\CookieServiceProvider::class,
         Illuminate\Database\DatabaseServiceProvider::class,
         Illuminate\Encryption\EncryptionServiceProvider::class,
         Illuminate\Filesystem\FilesystemServiceProvider::class,
         Illuminate\Foundation\Providers\FoundationServiceProvider::class,
         Illuminate\Hashing\HashServiceProvider::class,
-        Illuminate\Mail\MailServiceProvider::class,
-        Illuminate\Notifications\NotificationServiceProvider::class,
-        Illuminate\Pagination\PaginationServiceProvider::class,
         Illuminate\Pipeline\PipelineServiceProvider::class,
         Illuminate\Queue\QueueServiceProvider::class,
         Illuminate\Redis\RedisServiceProvider::class,
-        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
-        Illuminate\Session\SessionServiceProvider::class,
-        Illuminate\Translation\TranslationServiceProvider::class,
         Illuminate\Validation\ValidationServiceProvider::class,
         Illuminate\View\ViewServiceProvider::class,

@@ -170,9 +161,6 @@ return [
          * Application Service Providers...
          */
         App\Providers\AppServiceProvider::class,
-        App\Providers\AuthServiceProvider::class,
-        // App\Providers\BroadcastServiceProvider::class,
-        App\Providers\EventServiceProvider::class,
         App\Providers\RouteServiceProvider::class,

     ],
@@ -193,35 +181,21 @@ return [
         &#39;App&#39; =&gt; Illuminate\Support\Facades\App::class,
         &#39;Arr&#39; =&gt; Illuminate\Support\Arr::class,
         &#39;Artisan&#39; =&gt; Illuminate\Support\Facades\Artisan::class,
-        &#39;Auth&#39; =&gt; Illuminate\Support\Facades\Auth::class,
         &#39;Blade&#39; =&gt; Illuminate\Support\Facades\Blade::class,
         &#39;Broadcast&#39; =&gt; Illuminate\Support\Facades\Broadcast::class,
         &#39;Bus&#39; =&gt; Illuminate\Support\Facades\Bus::class,
         &#39;Cache&#39; =&gt; Illuminate\Support\Facades\Cache::class,
         &#39;Config&#39; =&gt; Illuminate\Support\Facades\Config::class,
-        &#39;Cookie&#39; =&gt; Illuminate\Support\Facades\Cookie::class,
         &#39;Crypt&#39; =&gt; Illuminate\Support\Facades\Crypt::class,
-        &#39;DB&#39; =&gt; Illuminate\Support\Facades\DB::class,
-        &#39;Eloquent&#39; =&gt; Illuminate\Database\Eloquent\Model::class,
-        &#39;Event&#39; =&gt; Illuminate\Support\Facades\Event::class,
         &#39;File&#39; =&gt; Illuminate\Support\Facades\File::class,
-        &#39;Gate&#39; =&gt; Illuminate\Support\Facades\Gate::class,
         &#39;Hash&#39; =&gt; Illuminate\Support\Facades\Hash::class,
         &#39;Http&#39; =&gt; Illuminate\Support\Facades\Http::class,
-        &#39;Lang&#39; =&gt; Illuminate\Support\Facades\Lang::class,
         &#39;Log&#39; =&gt; Illuminate\Support\Facades\Log::class,
-        &#39;Mail&#39; =&gt; Illuminate\Support\Facades\Mail::class,
-        &#39;Notification&#39; =&gt; Illuminate\Support\Facades\Notification::class,
-        &#39;Password&#39; =&gt; Illuminate\Support\Facades\Password::class,
-        &#39;Queue&#39; =&gt; Illuminate\Support\Facades\Queue::class,
         &#39;Redirect&#39; =&gt; Illuminate\Support\Facades\Redirect::class,
         // &#39;Redis&#39; =&gt; Illuminate\Support\Facades\Redis::class,
         &#39;Request&#39; =&gt; Illuminate\Support\Facades\Request::class,
         &#39;Response&#39; =&gt; Illuminate\Support\Facades\Response::class,
         &#39;Route&#39; =&gt; Illuminate\Support\Facades\Route::class,
-        &#39;Schema&#39; =&gt; Illuminate\Support\Facades\Schema::class,
-        &#39;Session&#39; =&gt; Illuminate\Support\Facades\Session::class,
-        &#39;Storage&#39; =&gt; Illuminate\Support\Facades\Storage::class,
         &#39;Str&#39; =&gt; Illuminate\Support\Str::class,
         &#39;URL&#39; =&gt; Illuminate\Support\Facades\URL::class,
         &#39;Validator&#39; =&gt; Illuminate\Support\Facades\Validator::class,
-- 
2.28.0

</code></pre>
<p>There are a few service providers that ideally we’d strip out but are tightly integrated into the framework. For instance, the database and queue service providers are both used by some Artisan commands, and it’s not very practical to disable only those commands, so removing them will stop Artisan from working. If you don’t mind running the development server manually, you can go ahead and remove these.</p>
<h2 id="building-the-application">Building the application</h2>
<p>Now, let’s set out how our application will work. We will have two routes:</p>
<ul>
<li>A route that accepts width and height parameters in the route itself, and responds with a PNG response sized accordingly</li>
<li>A route that returns a simple HTML homepage</li>
</ul>
<p>You’ve no doubt seen various novelty placeholder sites like <a href="http://placekitten.com/">placekitten.com</a> for use in web projects, and this will be similar to that. We’ll use a simple black image with the dimensions in white text, but you should be able to use this as the basis of a more sophisticated placeholder service, such as if you wanted to use branded images for a particular client.</p>
<p>Since the home page will be fairly straightforward, let’s do that first. Delete the existing <code>resources/views/welcome.blade.php</code> file and save this to <code>resources/views/home.blade.php</code>:</p>
<pre><code class="lang-blade.php">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Laravel Placeholder Images&lt;/title&gt;
    &lt;link href=&quot;{{ mix(&#39;css/app.css&#39;) }}&quot; rel=&quot;stylesheet&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Laravel Placeholder Images&lt;/h1&gt;
    &lt;p&gt;This server can be used for serving placeholder
    images for any web page.&lt;/p&gt;
    &lt;p&gt;To request a placeholder image of a given width and height
    simply include an image with the source pointing to
    &lt;b&gt;/image/&amp;lt;width&amp;gt;x&amp;lt;height&amp;gt;/&lt;/b&gt;
    on this server such as:&lt;/p&gt;
    &lt;pre&gt;
        &amp;lt;img src=&quot;{{ $example }}&quot; &amp;gt;
    &lt;/pre&gt;
    &lt;h2&gt;Examples&lt;/h2&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;img src=&quot;{{{ route(&#39;placeholder&#39;, [&#39;width&#39; =&gt; 50, &#39;height&#39; =&gt; 50]) }}}&quot;&gt;&lt;/li&gt;
        &lt;li&gt;&lt;img src=&quot;{{{ route(&#39;placeholder&#39;, [&#39;width&#39; =&gt; 100, &#39;height&#39; =&gt; 50]) }}}&quot;&gt;&lt;/li&gt;
        &lt;li&gt;&lt;img src=&quot;{{{ route(&#39;placeholder&#39;, [&#39;width&#39; =&gt; 50, &#39;height&#39; =&gt; 100]) }}}&quot;&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Note we’re using the <code>route()</code> helper to add some example images, even though it’s not in place yet. Add this route to your <code>routes/web.php</code> as well:</p>
<pre><code class="lang-php">Route::get(&#39;/&#39;, function () {
    return view(&#39;home&#39;, [
        &#39;example&#39; =&gt; route(&#39;placeholder&#39;, [&#39;width&#39; =&gt; 50, &#39;height&#39; =&gt; 50]),
    ]);
});
</code></pre>
<p>Again, note that we’re using the <code>route()</code> helper to get the URL for the placeholder image. Next, we need to create the outline of the route for getting the placeholders:</p>
<pre><code class="lang-php">Route::get(&#39;/placeholder/{width}x{height}&#39;, function (int $width, int $height) {
})-&gt;where([&#39;width&#39; =&gt; &#39;[0-9]+&#39;, &#39;height&#39; =&gt; &#39;[0-9]+&#39;])
    -&gt;name(&#39;placeholder&#39;);
</code></pre>
<p>Due to the limited scope of this application, we won’t bother with full controllers, but you can add them if you wish. Note we’ve specified the name <code>placeholder</code> and set a regex to validate the <code>width</code> and <code>height</code> parameters.</p>
<p>Now let’s populate the callback to generate a PNG file.</p>
<pre><code class="lang-php">Route::get(&#39;/placeholder/{width}x{height}&#39;, function (int $width, int $height) {
    if (!$img = imagecreatetruecolor($width, $height)) {
        abort();
    }
    $textColour = imagecolorallocate($img, 255, 255, 255);
    imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
    ob_start();
    imagepng($img);
    $file = ob_get_contents();
    ob_end_clean();
    return response()-&gt;make($file, 200, [
        &#39;Content-type&#39; =&gt; &#39;image/png&#39;
    ]);
})-&gt;where([&#39;width&#39; =&gt; &#39;[0-9]+&#39;, &#39;height&#39; =&gt; &#39;[0-9]+&#39;])
    -&gt;name(&#39;placeholder&#39;);
</code></pre>
<p>We’ll also add some very basic CSS to the provided CSS file:</p>
<pre><code class="lang-css">body {
    text-align: center;
}

ul {
    list-type: none;
}

li {
    display: inline-block;
}
</code></pre>
<p>Don’t forget to build this with <code>npm install &amp;&amp; npm run production</code> too.</p>
<p>If you now run <code>php artisan serve</code> you should be able to see that it works - the homepage renders, and the embedded images are pulled in OK. However, there are three potential issues:</p>
<ul>
<li>The images themselves are regenerated each time. Since they never change, it’s a no-brainer to cache them indefinitely for the best performance, and if we do need to change them in the future we can just flush the cache to resolve this</li>
<li>Similarly, we should use ETags to allow the application to tell the browser when the image has changed</li>
<li>There’s no limit on how large images can be, so a malicious user could request a huge image to break the system</li>
</ul>
<p>Let’s tackle these in order. First, let’s create some middleware to handle the caching:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;

final class CacheImages
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        $key = sprintf(&quot;%d.%d&quot;, $request-&gt;width, $request-&gt;height);
        return Cache::rememberForever($key, function () use ($next, $request) {
            return $next($request);
        });
    }
}
</code></pre>
<p>We construct a cache key from the request width and height, and use the <code>Cache::rememberForever()</code> method to cache the response. We then register this middleware as route middleware in <code>app\Http\Kernel.php</code>:</p>
<pre><code class="lang-php">    protected $routeMiddleware = [
        &#39;cache.headers&#39; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        &#39;signed&#39; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        &#39;throttle&#39; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
        &#39;cache.images&#39; =&gt; \App\Http\Middleware\CacheImages::class,
    ];
</code></pre>
<p>And apply it to the image route:</p>
<pre><code class="lang-php">Route::get(&#39;/placeholder/{width}x{height}&#39;, function (int $width, int $height) {
    if (!$img = imagecreatetruecolor($width, $height)) {
        abort();
    }
    $textColour = imagecolorallocate($img, 255, 255, 255);
    imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
    ob_start();
    imagepng($img);
    $file = ob_get_contents();
    ob_end_clean();
    return response()-&gt;make($file, 200, [
        &#39;Content-type&#39; =&gt; &#39;image/png&#39;
    ]);
})-&gt;where([&#39;width&#39; =&gt; &#39;[0-9]+&#39;, &#39;height&#39; =&gt; &#39;[0-9]+&#39;])
  -&gt;name(&#39;placeholder&#39;)
  -&gt;middleware(&#39;cache.images&#39;);
</code></pre>
<p>Next, let’s set ETags on our images. Laravel comes with the <code>cache.headers</code> middleware, which we can easily wrap around our placeholder route:</p>
<pre><code class="lang-php">Route::middleware(&#39;cache.headers:public;etag&#39;)-&gt;group(function () {
    Route::get(&#39;/placeholder/{width}x{height}&#39;, function (int $width, int $height) {
        if (!$img = imagecreatetruecolor($width, $height)) {
            abort();
        }
        $textColour = imagecolorallocate($img, 255, 255, 255);
        imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
        ob_start();
        imagepng($img);
        $file = ob_get_contents();
        ob_end_clean();
        return response()-&gt;make($file, 200, [
            &#39;Content-type&#39; =&gt; &#39;image/png&#39;
        ]);
    })-&gt;where([&#39;width&#39; =&gt; &#39;[0-9]+&#39;, &#39;height&#39; =&gt; &#39;[0-9]+&#39;])
      -&gt;name(&#39;placeholder&#39;)
      -&gt;middleware(&#39;cache.images&#39;);
});
</code></pre>
<p>Finally, let’s handle the dimensions issue. Again, this is something that is probably best handled in middleware since that way it can be rejected before the point it gets to the route handler. All we need to do is to check to see if the width and height parameters exceed the intended value, and throw an error in the middleware:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;

final class ValidateImageDimensions
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        if ($request-&gt;width &gt; 2000 || $request-&gt;height &gt; 2000) {
            abort(422, &#39;Height and width cannot exceed 2000 pixels&#39;);
        }
        return $next($request);
    }
}
</code></pre>
<p>Register this middleware in <code>app/Http/Kernel.php</code>:</p>
<pre><code class="lang-php">    protected $routeMiddleware = [
        &#39;cache.headers&#39; =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        &#39;signed&#39; =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        &#39;throttle&#39; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
        &#39;cache.images&#39; =&gt; \App\Http\Middleware\CacheImages::class,
        &#39;validate.images&#39; =&gt; \App\Http\Middleware\ValidateImageDimensions::class,
    ];
</code></pre>
<p>And apply it to the image route:</p>
<pre><code class="lang-php">Route::middleware(&#39;cache.headers:public;etag&#39;)-&gt;group(function () {
    Route::get(&#39;/placeholder/{width}x{height}&#39;, function (int $width, int $height) {
        if (!$img = imagecreatetruecolor($width, $height)) {
            abort();
        }
        $textColour = imagecolorallocate($img, 255, 255, 255);
        imagestring($img, 1, 5, 5, &quot;$width X $height&quot;, $textColour);
        ob_start();
        imagepng($img);
        $file = ob_get_contents();
        ob_end_clean();
        return response()-&gt;make($file, 200, [
            &#39;Content-type&#39; =&gt; &#39;image/png&#39;
        ]);
    })-&gt;where([&#39;width&#39; =&gt; &#39;[0-9]+&#39;, &#39;height&#39; =&gt; &#39;[0-9]+&#39;])
      -&gt;name(&#39;placeholder&#39;)
      -&gt;middleware([&#39;validate.images&#39;, &#39;cache.images&#39;]);
});
</code></pre>
<p>And we’re done! We now have a basic, but functional, stateless Laravel application that’s been stripped of a lot of the unnecessary functionality. There are a few further changes that could be made to expand this if necessary, such as:</p>
<ul>
<li>Amend the project to allow requesting different image formats using an additional route parameter (hint - you’ll want to use something like <a href="http://image.intervention.io/">Intervention for this</a>)</li>
<li>Serve different images, either by using one as a starting template so they are all branded the same, or specifying one from several options in the URL, such as with <a href="https://www.placecage.com/">PlaceCage</a></li>
</ul>
<p>However, I will leave these as an exercise for the reader. The code for this project is available on <a href="https://github.com/matthewbdaly/lightweight-laravel">Github</a> if you get stuck at any point.</p>
<p>Hopefully, this article has given you some food for thought about how you can use Laravel for applications you might have previously considered too small to use it for. Don’t worry too much about removing something that you need to add later - version control means you can always retrieve it if it turns out you do need it later. I’d also add that potentially the same approach can be applied to other full stack PHP frameworks, though you’ll have to do some exploring on your own to determine this.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[What I want in a PHP CMS]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/09/28/what-i-want-in-a-php-cms/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/09/28/what-i-want-in-a-php-cms/</guid>
            <pubDate>Mon, 28 Sep 2020 14:50:48 GMT</pubDate>
            <description><![CDATA[<p>I maintain a custom PHP legacy CMS for a client, and have also been building a micro-CMS as a learning project, so I’ve spent quite a lot of time in the last few years thinking about how content should be managed, and how applications to manage it should work.</p>
<p>I’ve also at least tinkered with a few different content management systems down the years, and I’ve found it depressing how many times Wordpress has been the default choice, despite it being probably the worst CMS I’ve ever had the gross misfortune to use. The argument that “it’s easy to install and use” doesn’t really hold water given that in my experience most users setting up a new Wordpress site don’t go through the five-minute install, but use their shared hosting provider’s setup wizard, which typically also supports several other content management systems. Also, it just does not make sense to optimise a short five minute install that will never be repeated for that site over the rest of the workflow for maintaining the site, possibly for years - I’d rather have something that takes a bit more time to do the initial set up, but is easier to maintain.</p>
<p>So, what do I want in a PHP CMS? Here’s my thoughts on my ideal CMS solution.</p>
<h2 id="managed-entirely-with-composer">Managed entirely with Composer</h2>
<p>Creating a new site using a CMS should be as simple as running something like the following command:</p>
<pre><code class="lang-bash">$ composer create-project --prefer-dist my/cms newsite
</code></pre>
<p>And updating it should be as simple as running the following:</p>
<pre><code class="lang-bash">$ composer update
</code></pre>
<p>Installing a plugin should be a case of running this:</p>
<pre><code class="lang-bash">$ composer require my/plugin-foo
</code></pre>
<p>It should then be possible to activate the plugin simply by listing it in a config file.</p>
<p>As far as possible, <em>all</em> of the functionality of the CMS should be contained in a single “core” package, and plugins should be their own Composer packages that can be installed, and then switched on and off in a simple config file. The initial creation step should be a case of checking out a boilerplate that contains only the absolute minimum - a front controller, a starting configuration, front end tooling, and some views - and gets the rest of the functionality from the core package.</p>
<h2 id="allow-creating-custom-site-boilerplates">Allow creating custom site boilerplates</h2>
<p>It should be possible to create and publish alternative boilerplates.</p>
<p>For instance, if a CMS provides a default starting boilerplate that ships with Bootstrap, VueJS and Laravel Mix, I should be able to fork it, replace Bootstrap with Tailwind and Vue with React, and then use my version for future projects without having to spend a lot of time maintaining the fork.</p>
<p>Similarly, if there are certain plugins I use all the time, it should be possible to include those plugins as dependencies in my <code>composer.json</code> so that when I create a new project from my boilerplate, they’re present right from the start and I don’t have to faff around downloading and configuring them manually.</p>
<h2 id="plugin-api-should-work-like-a-framework">Plugin API should work like a framework</h2>
<p>The best practices we’ve all spent years learning shouldn’t go out the window when working with a CMS. A good CMS should feel familiar if you’ve got some experience working in MVC frameworks, and it should embrace PSR standards. Adding a route should largely be a matter of writing a controller, mapping it to a route, and adding a view file, just as it would be in a framework</p>
<p>There’s always going to be some things that need to be CMS-specific, because registering things like routes is more complex in a general purpose CMS than a custom web app as they can be defined in multiple arbitrary places. These can be handled by triggering events at various points in the CMS application’s lifecycle, so that plugin authors can set up listeners to do things such as register routes, add new view helpers and so on.</p>
<h2 id="focused-exclusively-on-content-not-presentation">Focused exclusively on content, not presentation</h2>
<p>I’m increasingly convinced that the ability to amend presentation in a CMS is a misfeature. The purpose of a CMS is to manage content, not presentation, and making it able to amend presentation potentially gives unskilled site owners enough rope to hang themselves with, while making it actively harder for us devs.</p>
<p>I’ve certainly seen enough sites that a client has completely messed up after being given access to change the presentation in Wordpress, and because it’s stored in the database it’s not possible to roll back the changes easily the way it would be if the styling was stored in version control. And it’s definitely quicker for an experienced front end developer to edit a CSS file than to use Wordpress’s own tools for amending styling.</p>
<h2 id="use-a-proper-templating-system">Use a proper templating system</h2>
<p>As a templating language, PHP <em>sucks</em>:</p>
<ul>
<li>It’s too easy to overlook escaping variables properly</li>
<li>Handling partials is difficult</li>
<li>There’s always the temptation to put in more logic than is advisable in the view layer, especially when deadlines are tight</li>
</ul>
<p>Using a dedicated templating language, rather than a full programming language, in the view layer, means that entire classes of issues can be completely eradicated from the layer of the application that the developers who work with the CMS have the most dealings with. Developers are forced to move more complex logic into dedicated helpers, and can’t just leave it in the template “until we have time to clear it up”, which is often never.</p>
<p>Twig is solid, reliable, fast, easy to extend, and similar enough to other templating languages such as Handlebars and Django’s templates that if you’ve used any of those you can adapt easily, and it should probably be your first choice. Blade is also a solid choice, and if you want something whose syntax is not dissimilar to PHP you should probably consider Plates.</p>
<h2 id="configuration-with-version-control-in-mind">Configuration with version control in mind</h2>
<p>Wordpress does this particularly badly because it actively encourages storing sensitive data, such as database credentials, in a PHP file (which is then kept in the web root…). A good, solid way to store configuration details in PHP is to store generic details (for instance, a list of the active plugins, which will be the same for production and the local copy developers run) for that project in either a YAML or PHP file, and store install-specific details in either a <code>.env</code> file, or as environment variables.</p>
<h2 id="custom-content-types">Custom content types</h2>
<p>It should be easy to create a new content type, and define specific fields for that content type. For instance, if I’m building a recipe site, I should be able to define a Recipe type that has the following attributes:</p>
<ul>
<li>Ingredients</li>
<li>Cover image</li>
<li>Title</li>
<li>Method</li>
</ul>
<p>Then all Recipe instances should have those attributes, and it shouldn’t be necessary to bastardise a different content type to make it work properly. It should also be possible to lock down the ability to create custom content types so it’s either limited to admins, or they’re defined in code, so end users can’t create arbitrary content types.</p>
<h2 id="custom-taxonomies">Custom taxonomies</h2>
<p>It should be possible to define your own custom taxonomies for content. Continuing the Recipe example above, we should be able to define three sorts of taxonomy:</p>
<ul>
<li>Dietary requirements (eg vegetarian, vegan, gluten-free etc)</li>
<li>Meal (eg breakfast, lunch, dinner, snacks)</li>
<li>Region (eg Indian, Chinese, Italian)</li>
</ul>
<p>A taxonomy should be appropriately named, and again it shouldn’t be necessary to abuse generic categories and tags to categorise content. As with the content types, it should also be possible to lock them down.</p>
<h2 id="a-better-solution-than-rich-text-for-managing-content">A better solution than rich text for managing content</h2>
<p>Rich text is not a great solution for more complex page layouts, and tends to be abused horribly to do all sorts of things. There’s a tendency to dump things like snippets for Google Maps, tables, galleries, Javascript widgets and many more into rich text. This means that it also loses the semantic value of the content - rather than being a paragraph, then a map of the local area, then a photo carousel, then another paragraph, it’s just a single blob of text. This can’t be easily migrated to another solution if, say, you decide to swap Google Maps for Open Streetmap, and change one carousel for another, without going through and manually replacing every map and carousel, which is a chore.</p>
<p>Wagtail isn’t a PHP CMS, but <a href="https://torchbox.com/blog/rich-text-fields-and-faster-horses/">it has an interesting approach to rich text handling</a> for complex content, inspired by <a href="https://madebymany.github.io/sir-trevor-js/">Sir Trevor</a>, based around blocks of different types. The Gutenberg editor in Wordpress 5.0 and up isn’t a million miles away from this, either. For simpler sites, it’s probably better to limit users to a Markdown editor and add helpers for adding more complex functionality directly in the template, such as a gallery helper.</p>
<h2 id="a-decent-command-line-runner">A decent command-line runner</h2>
<p>There are always going to be certain tasks that are best done from the command line. A decent CMS should have a command line tool that:</p>
<ul>
<li>Allows appropriate admin tasks, such as going into maintenance mode and flushing caches, to be done from the command line</li>
<li>Can be easily extended by plugin authors to add their own commands</li>
<li>Assists developers when working locally, such as by generating boilerplate when necessary (so, for instance, you can run a command to generate the skeleton for a new plugin)</li>
</ul>
<p>There’s no excuse not to do this when building a CMS. Symfony’s console component is solid, easy to work with, and a good base for whatever commands you need to write.</p>
<h2 id="headless-as-an-option">Headless as an option</h2>
<p>The rise of headless CMS’s, both as a service and as software packages, hasn’t surprised me. Nowadays it’s quite common to have to publish the same content to multiple channels, which might be one or more websites, as well as mobile apps, and it makes sense to be able to centralise that content in one place rather than have to copy it in some fashion.</p>
<p>It’s therefore very useful to have an API that can retrieve that content for republishing. The same API can also be used with Javascript libraries like React and Vue to build sophisticated frontends that consume that data.</p>
<h2 id="which-solutions-do-this-best-">Which solutions do this best?</h2>
<p>You’ll probably have got the idea at this point that Wordpress isn’t my first choice. It was created in a different era, and hasn’t kept up well compared to many of its contemporaries, and there are many technical issues with it that are at this point effectively impossible to ever fix. For instance, you could potentially store the post meta in the same table as the rest of the post data by using a JSON field in current versions of MySQL, which would make it more performant, but it seems unlikely it could ever be migrated across to use that solution.</p>
<p>Frustratingly, its mindshare means it’s erroneously seen as some kind of “gold standard” by inexperienced developers and non-technical clients, and there seems to be a common misconception that it’s the only solution that lets users update the content themselves (when in fact that’s the whole point of ANY CMS). Using Bedrock and a theme system like Sage that supports a proper templating system helps solve some of the problems with Wordpress, but not all.</p>
<p>I have tried a few solutions that come very close to what I want:</p>
<ul>
<li><a href="https://bolt.cm/">Bolt</a> seems from what I’ve seen so far to be effectively a “better Wordpress” in that the interface and functionality is broadly familiar to anyone already used to Wordpress, but it uses Twig, is built in Symfony, and has a proper command-line runner. I haven’t tried it since version 4 was released a few days back, so I will probably give it a spin before long.</li>
<li><a href="https://getgrav.org/">Grav</a> looks like a great solution for brochure sites. I’ve long thought that these sites, which often run on shared hosting, don’t really need a database-backed solution, and a flat-file solution is probably a better bet in most cases. Grav is simple to set up and configure, has a decent admin interface, and uses Twig for the views, making it easy to theme.</li>
<li><a href="https://statamic.com/">Statamic</a> is my current favourite and ticks almost all of the boxes mentioned above. It’s built on Laravel, and can be added to an existing Laravel site if required. It also allows you access to the full power of the underlying framework if you need it, and ships with a decent front-end boilerplate that includes Tailwind. The only downside compared to Wordpress is that it’s a paid-for solution, but the price is entirely reasonable, and if it’s for a client build you’ll not only save on all the premium plugins you don’t need, but you’ll probably save time on the site build.</li>
</ul>
<p>Payment shouldn’t be an issue if you’re doing client work, unless the cost is huge. You’re getting paid for building something, and if buying an off-the-shelf product saves you time, it’s well worth it. Back when Laravel Nova was first released, a lot of people were complaining that it wasn’t free, but that was neither here nor there - the cost is only equivalent to a few hours of an experienced developer’s time, and it would take a lot longer to build out the same functionality, and the same is true of any half-decent CMS. In the early days of the web, one company I used to work for sold <a href="http://www.wordserver.co.uk/">a CMS that was considered cheap by the standards of the time</a> at £495, plus £96 a year, for the entry level version - Statamic is significantly cheaper than that.</p>
<p>It’s always a good idea to be aware of the various CMS options around. Wordpress isn’t a great solution and there are plenty of options that are technically better, easier to use, more secure, and work out cheaper when you consider the total cost of ownership. I’ll probably be favouring Statamic for the foreseeable future when building content-based websites, but that doesn’t mean I won’t look elsewhere from time to time.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Flow typed AJAX responses with React Hooks]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/06/13/flow-typed-ajax-responses-with-react-hooks/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/06/13/flow-typed-ajax-responses-with-react-hooks/</guid>
            <pubDate>Sat, 13 Jun 2020 12:50:41 GMT</pubDate>
            <description><![CDATA[<p>I’m a big fan of type systems in general. Using Psalm to find missing type declarations and incorrect calls in PHP has helped me out tremendously. However, I’m not a big fan of Typescript. The idea of creating a whole new language, primarily just to add types to Javascript, strikes me as a fundamentally bad idea given how many languages that compile to Javascript have fallen by the wayside. Flow seems like a much better approach since it adds types to the language rather than creating a new language, and I’ve been using it on my React components for a good while now. However, there are a few edge cases that can be difficult to figure out, and one of those is any generic AJAX component that may be reused for different requests.</p>
<p>A while back I wrote the following custom hook, loosely inspired by axios-hooks (but using the Fetch API) to make a query to a GraphQL endpoint:</p>
<pre><code class="lang-javascript">import { useCallback, useState, useEffect } from &quot;react&quot;;

function useFetch(url, query) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false)

  const fetchData = useCallback(() =&gt; {
    setLoading(true);
    fetch(url, {
      method: &#39;POST&#39;,
      headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
        &#39;Accept&#39;: &#39;application/json&#39;,
      },
      body: JSON.stringify({query: query})
    }).then(r =&gt; r.json())
      .then((data) =&gt; {
        setData(data.data);
        setLoading(false);
        setError(false);
      });
  }, [url, query]);

  useEffect(() =&gt; {
    fetchData();
  }, [url, query, fetchData]);

  return [{
    data: data,
    loading: loading,
    error: error
  }, fetchData];
};

export default useFetch;
</code></pre>
<p>When called, the hook receives two parameters, the URL to hit, and the query to make, and returns an array that contains a function for reloading, and an object containing the following values:</p>
<ul>
<li><code>loading</code> - a boolean that specifies if the hook is loading right now</li>
<li><code>error</code> - a boolean that specifies if an error has occurred</li>
<li><code>data</code> - the response data from the endpoint, or null</li>
</ul>
<p>Using this hook, it was then possible to make an AJAX request when a component was loaded to populate the data, as in this example:</p>
<pre><code class="lang-javascript">import React from &#39;react&#39;;
import useFetch from &#39;./Hooks/useFetch&#39;;
import marked from &#39;marked&#39;;
import &#39;./App.css&#39;;

function App() {
  const url = `/graphql`;
  const query = `query {
    posts {
      title
      slug
      content
      tags {
        name
      }
    }
  }`;

  const [{data, loading, error}] = useFetch(url, query);

  if (loading) {
    return (&lt;h1&gt;Loading...&lt;/h1&gt;);
  }

  if (error) {
    return (&lt;h1&gt;Error!&lt;/h1&gt;);
  }

  const posts = data ? data.posts.map((item) =&gt; (
    &lt;div key={item.slug}&gt;
      &lt;h2&gt;{item.title}&lt;/h2&gt;
      &lt;div dangerouslySetInnerHTML={{__html: marked(item.content)}} /&gt;
    &lt;/div&gt;
  )) : [];
  return (
    &lt;div className=&quot;App&quot;&gt;
      {posts}
    &lt;/div&gt;
  );
}

export default App;
</code></pre>
<p>This hook is simple, and easy to reuse. However, it’s difficult to type the value of <code>data</code> correctly, since it will be different for different endpoints, and given that it may be reused for almost any endpoint, you can’t cover <em>all</em> the acceptable response types. We need to be able to specify the response that is acceptable in that particular context.</p>
<h2 id="generics-to-the-rescue">Generics to the rescue</h2>
<p>Flow provides a solution for this in the shape of <a href="https://flow.org/en/docs/types/generics/">generic types</a>. By passing in a polymorphic type using <code>&lt;T&gt;</code> in the function declaration, we can then refer to that type when specifying what <code>data</code> should look like:</p>
<pre><code class="lang-flow">//@flow
import { useCallback, useState, useEffect } from &quot;react&quot;;

function useFetch&lt;T&gt;(url: string, query: string): [{
  data: ?T,
  loading: boolean,
  error: boolean
}, () =&gt; void] {
  const [data, setData]: [?T, ((?T =&gt; ?T) | ?T) =&gt; void] = useState(null);
  const [loading, setLoading]: [boolean, ((boolean =&gt; boolean) | boolean) =&gt; void] = useState(false);
  const [error, setError]: [boolean, ((boolean =&gt; boolean) | boolean) =&gt; void] = useState(false)

  const fetchData = useCallback(() =&gt; {
    setLoading(true);
    fetch(url, {
      method: &#39;POST&#39;,
      headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
        &#39;Accept&#39;: &#39;application/json&#39;,
      },
      body: JSON.stringify({query: query})
    }).then(r =&gt; r.json())
      .then((data) =&gt; {
        setData(data.data);
        setLoading(false);
        setError(false);
      });
  }, [url, query]);

  useEffect(() =&gt; {
    fetchData();
  }, [url, query, fetchData]);

  return [{
    data: data,
    loading: loading,
    error: error
  }, fetchData];
};

export default useFetch;
</code></pre>
<p>Then, when calling the hook, we can define a type that represents the expected shape of the data (here called <code>&lt;Data&gt;</code>, and specify that type when calling the hook, as in this example:</p>
<pre><code class="lang-javascript">//@flow
import React from &#39;react&#39;;
import useFetch from &#39;./Hooks/useFetch&#39;;
import marked from &#39;marked&#39;;
import &#39;./App.css&#39;;

type Data = {
  posts: Array&lt;{
    title: string,
    slug: string,
    content: string,
    name: Array&lt;string&gt;
  }&gt;
};

function App() {
  const url = `/graphql`;
  const query = `query {
    posts {
      title
      slug
      content
      tags {
        name
      }
    }
  }`;

  const [{data, loading, error}] = useFetch&lt;Data&gt;(url, query);

  if (loading) {
    return (&lt;h1&gt;Loading...&lt;/h1&gt;);
  }

  if (error) {
    return (&lt;h1&gt;Error!&lt;/h1&gt;);
  }

  const posts = data ? data.posts.map((item) =&gt; (
    &lt;div key={item.slug}&gt;
      &lt;h2&gt;{item.title}&lt;/h2&gt;
      &lt;div dangerouslySetInnerHTML={{__html: marked(item.content)}} /&gt;
    &lt;/div&gt;
  )) : [];
  return (
    &lt;div className=&quot;App&quot;&gt;
      {posts}
    &lt;/div&gt;
  );
}

export default App;
</code></pre>
<p>That way, we can specify a completely different shape for our response data every time we call a different endpoint, without creating a different hook for every different endpoint, and still enjoy properly typed responses from our hook.</p>
<p>Generics can be useful for many other purposes, such as specifying the contents of collections. For instance, if you had a <code>Collection</code> object, you could use a generic type to specify that any one instance must consist of instances of a given type. Flow would then flag it as an error if you assigned an item of the wrong type to that collection, thus making some unit tests redundant.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Caching the Laravel user provider with a decorator]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/03/11/caching-the-laravel-user-provider-with-a-decorator/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/03/11/caching-the-laravel-user-provider-with-a-decorator/</guid>
            <pubDate>Wed, 11 Mar 2020 21:20:14 GMT</pubDate>
            <description><![CDATA[<p>A couple of years ago I posted <a href="https://matthewdaly.co.uk/blog/2018/01/12/creating-a-caching-user-provider-for-laravel/">this article</a> about constructing a caching user provider for Laravel. It worked, but with the benefit of hindsight I can now see that there were a number of issues with this solution:</p>
<ul>
<li>Because it extended the existing Eloquent user provider, it was dependent on the internals of that remaining largely the same - any change in how that worked could potentially break it</li>
<li>For the same reason, if you wanted to switch to a different user provider, you’d need to add the same functionality to that provider, either by writing a new provider from scratch or extending an existing one</li>
</ul>
<p>I’ve used the decorator pattern a few times in the past, and it’s a good fit for situations like this where you want to add functionality to something that implements an interface. It allows you to separate out one part of the functionality (in this case, caching) into its own layer, so it’s not dependent on any one implementation and can wrap any other implementation of that same interface you wish. Also, as long as the interface remains the same, there likely won’t be any need to change it when the implementation that is wrapped changes. Here I’ll demonstrate how to create a decorator to wrap the existing user providers.</p>
<p>If we only want to cache the <code>retrieveById()</code> method, like the previous implementation, the decorator class might look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Auth;

use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Contracts\Auth\UserProvider;
use Illuminate\Contracts\Cache\Repository;

final class UserProviderDecorator implements UserProvider
{
    /**
     * @var UserProvider
     */
    private $provider;

    /**
     * @var Repository
     */
    private $cache;

    public function __construct(UserProvider $provider, Repository $cache)
    {
        $this-&gt;provider = $provider;
        $this-&gt;cache = $cache;
    }

    /**
     * {@inheritDoc}
     */
    public function retrieveById($identifier)
    {
        return $this-&gt;cache-&gt;remember(&#39;id-&#39; . $identifier, 60, function () use ($identifier) {
            return $this-&gt;provider-&gt;retrieveById($identifier);
        });
    }

    /**
     * {@inheritDoc}
     */
    public function retrieveByToken($identifier, $token)
    {
        return $this-&gt;provider-&gt;retrieveById($identifier, $token);
    }

    /**
     * {@inheritDoc}
     */
    public function updateRememberToken(Authenticatable $user, $token)
    {
        return $this-&gt;provider-&gt;updateRememberToken($user, $token);
    }

    /**
     * {@inheritDoc}
     */
    public function retrieveByCredentials(array $credentials)
    {
        return $this-&gt;provider-&gt;retrieveByCredentials($credentials);
    }

    /**
     * {@inheritDoc}
     */
    public function validateCredentials(Authenticatable $user, array $credentials)
    {
        return $this-&gt;provider-&gt;validateCredentials($user, $credentials);
    }
}
</code></pre>
<p>It implements the same interface as the user providers, but accepts two arguments in the constructor, which are injected and stored as properties:</p>
<ul>
<li>Another instance of <code>Illuminate\Contracts\Auth\UserProvider</code></li>
<li>An instance of the cache repository <code>Illuminate\Contracts\Cache\Repository</code></li>
</ul>
<p>Most of the methods just defer to their counterparts on the wrapped instance - in this example I have cached the response to <code>retrieveById()</code> only, but you can add caching to the other methods easily enough if need be. You do of course still need to flush the cache at appropriate times, which is out of scope for this example, but can be handled by model events as appropriate, as described in the prior article.</p>
<p>Then you add the new decorator as a custom user provider, but crucially, you need to first resolve the provider you’re going to use, then wrap it in the decorator:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Providers;

use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Contracts\Auth\UserProvider;
use Auth;
use Illuminate\Auth\EloquentUserProvider;
use Illuminate\Contracts\Cache\Repository;
use App\Auth\UserProviderDecorator;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array
     */
    protected $policies = [
        &#39;App\Model&#39; =&gt; &#39;App\Policies\ModelPolicy&#39;,
    ];

    /**
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
        $this-&gt;registerPolicies();

        Auth::provider(&#39;cached&#39;, function ($app, array $config) {
            $provider = new EloquentUserProvider($app[&#39;hash&#39;], $config[&#39;model&#39;]);
            $cache = $app-&gt;make(Repository::class);
            return new UserProviderDecorator($provider, $cache);
        });
    }
}
</code></pre>
<p>Finally, set up the config to use the caching provider:</p>
<pre><code class="lang-php">    &#39;providers&#39; =&gt; [
        &#39;users&#39; =&gt; [
            &#39;driver&#39; =&gt; &#39;cached&#39;,
            &#39;model&#39; =&gt; App\Eloquent\Models\User::class,
        ],
    ],
</code></pre>
<p>This is pretty rough and ready, and could possibly be improved upon by allowing you to specify a particular provider to wrap in the config, as well as caching more of the methods, but it demonstrates the principle effectively.</p>
<p>By wrapping the existing providers, you can change the behaviour of the user provider without touching the existing implementation, which is in line with the idea of composition over inheritance. Arguably it’s more complex, but it’s also more flexible - if need be you can swap out the wrapped user provider easily, and still retain the same caching functionality.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[The trouble with integrated static analysis]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/02/12/the-trouble-with-integrated-static-analysis/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/02/12/the-trouble-with-integrated-static-analysis/</guid>
            <pubDate>Wed, 12 Feb 2020 22:40:15 GMT</pubDate>
            <description><![CDATA[<p>I’ve always been a big fan in general of tools that provide feedback about the quality of my code. The development role in which I spent the most time was one in which I had no peer feedback or mentoring at all, and while I could definitely have done with more peer review than I had, automated tools helped fill the gap a little bit. When I started building my first Phonegap app, about a year after I started programming professionally, it used <em>far</em> more Javascript than I’d ever used before, and JSLint was very helpful in instilling good practices at that early stage in my career.</p>
<p>In addition, I often find that using an automated tool largely eliminates the issue of ego - if your colleague Bob tells you something is a bad practice, you can potentially dismiss it as “That’s just Bob’s preferences”, whereas an automated tool is potentially much more objective. Nowadays, my typical set of static analysis tools on a project includes:</p>
<ul>
<li>ESLint</li>
<li>Flow</li>
<li>PHP CodeSniffer</li>
<li>Psalm</li>
</ul>
<p>However, I’m always dubious of using any static analysis tool that’s tightly integrated with a particular editor or IDE. In this post, I will explain my reasoning.</p>
<h1 id="in-editor-feedback">In-editor feedback</h1>
<p>Having instant feedback on the quality of your code is tremendously useful. Sure, you can run something like CodeSniffer from the command line and see what the problems are, but that’s nowhere near as useful as having it actually <em>in</em> your code. If you work on a legacy code base, there’s no way in hell you can wade through a long list of output in the terminal and fix them without losing the will to live. By comparison, actually seeing something flagged as an error where it actually occurs makes the mental cost of fixing it much smaller - you can see it in context, and can usually therefore resolve it more easily.</p>
<p>However, that doesn’t explicitly require that any one tool form an integral part of the editor. Most editors can hand off linting and static analysis to other, standalone tools, and doing so offers the following advantages:</p>
<ul>
<li>Less dependence on a given development environment - it’s always a struggle if you wind up stuck using a development environment you dislike (I grew to utterly despise Netbeans in my first role), but if you can use generic feedback tools that can be integrated with just about any editor, your team can use the development environment that suits them most, while still all benefiting from the feedback these tools provide</li>
<li>These tools tend to be open source, meaning you have the security of knowing that if the creator ceases maintaining it, either someone else may pick up the baton, or you can choose to fork it yourself. If a commercial IDE provider ceases trading, it’s likely you won’t be able to use their offering at all at some point in the future.</li>
</ul>
<p>Nowadays I use vim-ale in Neovim, and that provides real-time feedback for a number of linters and static analysis tools, including all those I mentioned above. I have comprehensive information on any issues in my code, and because any configuration is in simple text files that form part of the repository, it’s easy to update those settings for all developers working on the project to ensure consistency. </p>
<p>It’s possible that an integrated solution <em>might</em> offer a few advantages in terms of tighter integration with autocompletion and other functionality allowing for it, but whether they outweigh the tradeoffs mentioned here is dependent entirely on the implementation and how useful it is for any one team.</p>
<h1 id="continuous-integration-to-the-rescue">Continuous integration to the rescue</h1>
<p>There’s another issue I have with this sort of tightly integrated static analysis, which is probably the biggest, and that is that the feedback is available only at the level of an individual developer, not the team.</p>
<p>It’s great providing all this feedback to developers, but what if they just ignore it? Not all developers have had the sort of experience that leads one to really appreciate the value of coding standards and type hints, particularly if they’ve worked primarily on small or greenfield projects, or in environments where the emphasis was on churning out large quantities of work, and getting developers to tidy up the sort of issues these tools identify can sometimes be a tough sell when faced with code which, at least superficially, works.</p>
<p>Suppose you take on a new developer and ask them to work alone on a particular project for several months. Due to your own workload you can’t easily schedule code reviews with them, so you don’t see what they’re writing until they’re done. Then you take a look at what they’ve written and it’s full of issues that the IDE caught, but the developer either didn’t bother to fix, or didn’t know how to. What they’ve done may well work, but they’ve introduced a huge morass of technical debt that will slow down future development for the foreseeable future.</p>
<p>If your static analysis tools work only in the context of a given editor or IDE, then if the new dev introduce issues in the code base and doesn’t resolve them because they don’t know how, or don’t see the value, then the first you knows about it is when you clone the repo yourself and open it up. With a solution that runs in a CI environment, you can catch any reduction in code quality when it’s pushed. Sure, code reviews can do that too, but that requires manual input in a way that not every team is willing to spare, whereas a CI server, once set up, is largely self sustaining. And you could run one tool locally and another in a CI environment, but you can’t be sure they’ll necessarily catch all the same issues.</p>
<p>Now consider the same scenario if you’re using a separate code quality tool that’s integrated both into the editor, and your continuous integration workflow. Obviously, it will depend on your personal CI setup, but once code quality either begins to drop, or drops below a given level, the CI server will mark the build as failed, and you’ll be alerted. You can therefore then raise the issue with the new dev before it gets out of hand, and provide whatever support they need to resolve the problem there and then.</p>
<p>I personally maintain a legacy project in which, at one point prior to my arrival, a junior dev introduced an enormous amount of technical debt after working on it alone for six months. An integrated linter or static analysis tool probably wouldn’t have stopped that from happening, for the reasons stated above, but if a similar tool were part of the CI workflow, it could have been flagged as an issue much earlier and dealt with. Yes, leaving a junior dev unsupported and unsupervised for that length of time isn’t a great idea, but it happens, particularly in busy environments such as agencies. A good CI setup lets you see if someone is adding these kinds of issues, and act to nip it in the bud before it becomes too much of a problem, which is ultimately good for that developer’s career.</p>
<p>Peer pressure can also be a strong motivating factor under these circumstances. By simply displaying a metric, you encourage people’s natural competitiveness, so displaying code quality stats in your CI dashboard will encourage your team to do better in this regard, and no-one wants to be visibly seen to be letting the team down by producing substandard code.</p>
<p>For these reasons, where possible for feedback on code quality, I would always prefer to rely on a standalone tool that can be integrated with an editor, or used as part of a continuous integration workflow, as opposed to any IDE-specific functionality.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Don't use stdClass]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/02/09/don&apos;t-use-stdclass/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/02/09/don&apos;t-use-stdclass/</guid>
            <pubDate>Sun, 09 Feb 2020 10:10:48 GMT</pubDate>
            <description><![CDATA[<p>The digital agency I work for specialises in marketing, so some of my work tends to relate to mailing lists. This week I was asked to look at an issue on a Laravel-based export system built by a co-worker who left a few months ago. This particular application pulled data from the Campaign Monitor API about campaigns, and it returned the data as instances of <code>stdClass</code>, something that I’m not terribly happy about.</p>
<p>Now, this was an implementation detail of the Campaign Monitor PHP SDK, which is old and creaky (to say the least…) and doesn’t exactly abide by modern best practices. However, the legacy application I maintain also does this (there’s a <em>lot</em> of stuff that needs sorting out on it, and sadly replacing the <code>stdClass</code> instances is a <em>long</em> way down the list), so I thought it was an interesting subject for a blog post. I consider using <code>stdClass</code>, even just as a dumb container for data, to be an antipattern, and I thought it would be useful to explain my thoughts on this.</p>
<h1 id="why-shouldn-t-i-use-stdclass-">Why shouldn’t I use stdClass?</h1>
<h2 id="readability">Readability</h2>
<p>One of the first things I learned about throwing exceptions is that they should be meaningful. It’s trivial to define a named exception and use that to specify the type of exception, and you can then capture exceptions to handle them differently elsewhere in the application. For instance, a validation error is entirely due to a user submitting the wrong details, and should therefore be handled in an entirely different manner to the database going down.</p>
<p>The same is applicable to an object. If an API client returns an instance of <code>stdClass</code>, that doesn’t tell me anything about what that object is. If I need to pass it elsewhere in a large application, it may become very difficult to understand what it represents without tracking it back to where it came from, which will slow me down. If instead I use a named class, the name can convey what it represents. It may seem like overkill to create a class that adds no new functionality, but the mere fact that it has a name makes your code more meaningful and easier to understand. I can also add DocBlock comments to describe it further.</p>
<p>Of course, just giving something a generic name like <code>Container</code> isn’t much of an improvement, and coming up with meaningful names for classes and methods is notoriously hard. As always, give some serious thoughts into what your objects represent and attempt to give them names that will make it easy to understand what they are if you look at the code base again six months down the line.</p>
<h2 id="type-hinting">Type hinting</h2>
<p>A related argument is that it makes type hinting more useful. You <em>can</em> type hint <code>stdClass</code>, but as noted above it tells someone working on the code receiving it very little about where it’s come from, or what it represents, and it doesn’t offer much value since an <code>stdClass</code> could mean anything, and could be created anywhere in the application.</p>
<p>By contrast, named classes provides much more information about what the type hinted parameter represents. For instance, naming your class something such as <code>App\Api\Response\Item</code>, makes it much clearer that that object represents an individual item returned from an API, and others developers working on the same code base (including your future self, who may not necessarily remember all of the details of how you’re implementing it now), will have less trouble understanding what is going on. There’s also a much-reduced likelihood of the same class being used to represent completely different types of data.</p>
<h2 id="new-functionality">New functionality</h2>
<p>Finally, are you sure you don’t want to add any functionality? PHP includes a number of interfaces that can be <em>extremely</em> useful for working with this sort of data.</p>
<p>First off, the <code>ArrayAccess</code> interface allows you to access an object’s values using array syntax, which can be useful. Also, implementing either <code>Iterator</code> or <code>IteratorAggregate</code> will allow you to iterate over the object using a <code>foreach</code> loop. The <code>Countable</code> interface is less useful, since all it does is let you get the number of items, but it’s sometimes handy. Finally, the <code>Serializable</code> interface lets you serialise an object so it can be stored in a suitable medium, which can sometimes be useful.</p>
<p>The same also applies to some of the magic methods. The <code>__toString()</code> method, in particular, can be useful for returning a suitable string-based representation of an object - for instance, if it represents an item in a database, it might be appropriate to use this to return the ID of the item, or a text representation of it (eg title for a blog post, or product name for a product in an e-commerce site). The <code>__get()</code> and <code>__set()</code> magic methods may be a bit more dubious, but they can be useful if your object is intended to just be a dumb container as they allow you to make the properties on the object private, but keep them accessible without writing explicit getters and setters. I’d also suggest adding <code>__debugInfo()</code> to objects unless you have a good reason not to, as when you’re debugging it can be hard to see the wood for the trees, and returning only the most pertinent data can make your job a <em>lot</em> easier.</p>
<p>Of course, you don’t have to implement all this functionality from scratch for every class. It often makes sense to create an abstract class that implements this sort of basic container functionality, and then base all your container classes on that, overriding it when necessary.</p>
<h2 id="summary">Summary</h2>
<p>Hopefully, this has made it clear how compelling it is to use named classes instead of <code>stdClass</code>, and how much benefit you can get from not just using named classes, but creating your own base container class for them. I’m of the opinion that PHP should probably make <code>stdClass</code> abstract to prevent them from being used like this, and indeed I’m seriously considering the idea of creating a Codesniffer sniff to detect instances of <code>stdClass</code> being instantiated and raise them as an error.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[F*** PHPStorm Man and the high horse he rode in on]]></title>
            <link>https://matthewdaly.co.uk/blog/2020/01/25/f***-phpstorm-man-and-the-high-horse-he-rode-in-on/</link>
            <guid>https://matthewdaly.co.uk/blog/2020/01/25/f***-phpstorm-man-and-the-high-horse-he-rode-in-on/</guid>
            <pubDate>Sat, 25 Jan 2020 22:25:17 GMT</pubDate>
            <description><![CDATA[<p>There’s a particularly unpleasant type of programmer that exists, and you’ve probably met him, either online or in person. I call him <strong>PHPStorm Man</strong>.</p>
<p>NB: Despite the name I’ve chosen, I’m not singling out users of PHPStorm in particular about this. The first time I encountered PHPStorm Man in person, he was using Sublime Text, and you will find PHPStorm Men using all different editors and IDEs. PHPStorm Man is an archetype defined not by any particular piece of software, but by a common bad attitude, and given that I work primarily with PHP these days, I’ve most often encountered this kind of behaviour from PHPStorm users (or at least, people claiming to be PHPStorm users, since at least online you can’t discount the possibility that they’re trolls). Users of other languages may well see this behaviour most prominently from those who use some other editor or IDE, but the same underlying phenomenon is at work, whether we call him PHPStorm Man, Eclipse Man, Vim Man or PyCharm Man.</p>
<h2 id="who-is-phpstorm-man-">Who is PHPStorm Man?</h2>
<p><img src="/static/images/phpstorm-man.jpg" alt="The hero we really, really don&#39;t need"></p>
<p>PHPStorm Man (and he <em>will</em> almost certainly be a man - while it could be just because our industry is male-dominated, I’ve <em>never</em> known a woman to behave like this, and I strongly suspect it’s nothing more than an industry-specific example of the common phenomenon of <a href="https://en.wikipedia.org/wiki/Mansplaining">mansplaining</a>) doesn’t know squat about your editor or IDE. He just knows his is superior, and he wants you to know it, regardless of the evidence.</p>
<p>His knowledge of your editor is probably either non-existent, grossly outdated, plain ill-informed or second-hand (probably from another PHPStorm Man). If he’s advocating an IDE, he’ll likely equate all text editors with Notepad - he may claim the advantages of his one over yours include such fundamentals as syntax highlighting and autocompletion.</p>
<p>He’ll boast about some feature his editor has that yours doesn’t, even if it does. If your editor lacks that functionality out of the box, but can add it via a plugin, apparently that doesn’t count because although you’re intelligent enough to build a working web app, somehow installing and configuring that plugin is an insurmountable burden (yet mysteriously turning off all the stuff you don’t need in <em>his</em> editor is quick and easy). If it does do that out of the box, he’ll probably find some bullshit reason why his editor’s implementation is better, even if it’s something as pointless and irrelevant as “it’s been around longer”. He’ll likely claim, with absolutely no evidence whatsoever, or indeed in the presence of evidence to the contrary, that you’d be more productive if you only used his editor.</p>
<p>In short, if you aren’t using his editor or IDE of choice, you’re a troglodyte living in a dung hut.</p>
<h2 id="phpstorm-man-in-the-wild">PHPStorm man in the wild</h2>
<p>I had an encounter with PHPStorm Man in person a while back. Just over two years ago I started a new job, which as it turned out didn’t last long after I caught the flu that was going around in late 2017 my first week. On the second day, shortly after going over something with me, the senior dev sent me the following message on Slack:</p>
<blockquote>
<p>I noticed you’re using Vim. Have you tried using Sublime Text?</p>
</blockquote>
<p>I responded that I had, and chose not to use it. There followed a long string of messages along the following lines:</p>
<blockquote>
<p>Him: Sublime Text has X!</p>
</blockquote>
<blockquote>
<p>Me: I have that</p>
</blockquote>
<blockquote>
<p>Him: Well Sublime Text also has Y!</p>
</blockquote>
<blockquote>
<p>Me: I have that too, via a plugin</p>
</blockquote>
<blockquote>
<p>Him: Well, Sublime Text doesn’t need a plugin for that</p>
</blockquote>
<blockquote>
<p>Me: Irrelevant since the plugin is already installed and configured, and I know how to use it</p>
</blockquote>
<blockquote>
<p>Him: Well, what about this?</p>
</blockquote>
<blockquote>
<p>Me: That sounds cool, so I just found a plugin to do that and installed it</p>
</blockquote>
<blockquote>
<p>Him: And this?</p>
</blockquote>
<blockquote>
<p>Me: I have absolutely no need for that</p>
</blockquote>
<blockquote>
<p>Him: Well, Vim is old, Sublime Text is new!</p>
</blockquote>
<blockquote>
<p>Me: Actually, this is Neovim, which is technically newer than Sublime Text</p>
</blockquote>
<blockquote>
<p>Him: Well, Sublime Text is a GUI application</p>
</blockquote>
<blockquote>
<p>Me: Exactly. That makes it slower and forces me to use the mouse, aggravating my RSI. I use the terminal because it’s more efficient</p>
</blockquote>
<blockquote>
<p>Him: Well, I don’t mind what you use…(despite the evidence of that entire conversation)</p>
</blockquote>
<p>With the benefit of hindsight, what I <em>should</em> have responded with was this:</p>
<blockquote>
<p>I’m an experienced, professional web developer of over six years, and I chose my editor based on years of personal experience, and have chosen my plugins and configuration based on what’s useful to me, and continue to do so to this day. I don’t appreciate you talking down to me like a child.</p>
</blockquote>
<h2 id="why-i-personally-don-t-use-an-ide">Why I personally don’t use an IDE</h2>
<p>In my case, I have a particularly good reason not to use <em>any</em> GUI application to develop in. Before I was a developer, I worked for an insurance company in a customer service role, and I didn’t have access to the sort of decent quality keyboards and mice developers habitually use, as well as having output goals linked to discipline and bonus/salary raises and having to use custom internal applications on Windows XP, with dreadful keyboard support. As a result I developed a degree of RSI in both hands, which I’ve found is aggravated by using any application that requires me to use a mouse extensively - I’m generally OK if I only have to type, but reaching for the mouse all the time quickly becomes tiring, and soon after painful.</p>
<p>For that reason I’ve developed a workflow that’s strongly dependent on the command line - I use Neovim in the terminal, alongside Byobu so that I can run multiple tabs and switch between them quickly without touching the mouse. Moving to a more GUI-oriented workflow would require me to use the mouse more than I do now, which would probably become physically painful quite quickly. Using an editor or IDE which I found made me more prone to further flare-ups of RSI could have serious consequences for my long-term health, and could potentially be career-ending. If I worked somewhere that mandated a particular IDE that didn’t work well for me, I’d <em>have</em> to either negotiate an exception on health and safety grounds or quit.</p>
<p>I’m also of the personal opinion that much of the functionality of an IDE should not be, in principle, tied to that IDE, but should instead be the province of more general purpose tools that can used, not merely in any editor or IDE but, where appropriate, on a continuous integration server. For instance, language servers provide a tool-agnostic way for any IDE or editor to implement functionality such as completion or navigation, and linters such as ESLint can integrate into any half-decent editor or run in a CI environment. Since these tend to be open source projects, whereas IDE’s are normally commercial offerings, they’re less vulnerable to suddenly disappearing and leaving users high and dry.</p>
<p>There’s also a lot of functionality in an IDE that I rarely, if ever, use. There’s no point including and starting up an FTP client as part of my editor if I’m never going to use it, as it slows the application down, and nor should I have to root around trying to turn off functionality I’m never going to have to use. For a lot of other functionality, there are more powerful standalone applications that I’m used to such as Postman or MySQL Workbench, and I’ll use them as and when I need them - I gain nothing by having them integrated with my editor.</p>
<p>I also like to be able to use the same editor everywhere. I still occasionally dabble in Python, so a language-specific IDE wouldn’t be suitable when switching between languages. I also sometimes work on personal projects on an HP Stream netbook running Xubuntu, which is fine for small PHP projects that don’t require a database server or any web server other than the PHP dev server. I can happily run Neovim on that, but there’s no way it could run an IDE at an acceptable speed.</p>
<p>Last of all, screen real estate is an issue. I don’t like interfaces that are too busy - I <em>cannot stand</em> having anything, <em>at all</em> on my desktop for any length of time at all, and any interface that has too much on screen at once is distracting. I will typically have Neovim open in a terminal, with the NERDTree file finder open on the left, and two panels split in the main body, and that’s all. A big factor in my productivity is how much code I can see at once, and having too much screen real estate taken up by menus and sidebars is counterproductive - with Neovim there’s almost nothing getting in the way.</p>
<p>I personally have had to give this sort of explanation many, many times as to why I use first Vim and then Neovim, and indeed part of the motivation behind writing this post is that I’m sick to death of having to explain myself over and over again and will now be able to merely direct them to this article. Thanks to tools like PHPActor, vim-ale and FZF, I don’t feel like there’s anything I’m missing out on that an IDE would give me, and Psalm is very good at catching type errors without being tied to any one IDE, but that doesn’t stop people telling me I’m missing out on features I already have. Any time I come across a feature I think is cool, I go through the following process:</p>
<ul>
<li>Find cool feature</li>
<li>Find plugin that implements said feature</li>
<li>Install plugin by adding a single line to my Neovim config and running <code>:PlugUpdate</code></li>
<li>Add a few lines of config</li>
<li>Start using feature</li>
</ul>
<p>Using an IDE <em>would</em> eliminate the middle three steps, but I don’t find those onerous - we’re talking about the work of five minutes, which is insignificant compared to the time taken to learn to use the feature effectively. And a feature you don’t use is one that you still have to start up if it’s present, so making it an opt-in plugin is often a better way to go.</p>
<p>Every other developer will have their own version of this story. Some will have stayed mostly static in their editor choices, while others will be changing all the time - indeed, I’ve sometimes used other editors for specific tasks in the past. In short, everyone has their own reasons for using their editor of choice, and it’s <em>appallingly</em> arrogant to assume that their reasons for using a particular one are less valid than yours.</p>
<h2 id="am-i-phpstorm-man-">Am I PHPStorm Man?</h2>
<p>As I’ve said before, this behaviour is not confined to PHPStorm users, nor is it in any way universal among them. If you use PHPStorm and enjoy it, then fine, rock on. If you use a different editor or IDE, then that’s fine too - I don’t have a problem with that, and nor should your colleagues or line manager. Using any one editor or IDE <em>does not</em> make you PHPStorm Man. What makes you PHPStorm Man is the patronising attitude.</p>
<p>In the example given above, what made the senior dev PHPStorm Man was not the initial enquiry as to whether I’d tried Sublime Text, but the fact that he wouldn’t leave it be when confronted with evidence that I either had, could easily obtain, or didn’t need the functionality of his editor in mine, and that he was talking down to an experienced developer like a child.</p>
<p>Obviously, this isn’t a new development - editor wars have long been a feature of our industry, as has the divide between IDE and editor users. But that doesn’t mean I, and no doubt others, don’t get utterly sick of it.</p>
<h2 id="how-not-to-be-phpstorm-man">How not to be PHPStorm Man</h2>
<p>When talking to users of other editors or IDE’s about the subject of those tools, you should always bear this in mind:</p>
<ul>
<li>If they use a different tool to you, they probably know a hell of a lot more about it than you do, and are unlikely to take kindly to you ignorantly telling them what it can and can’t do</li>
<li>Mastering an editor or IDE can take years, and if they’re already invested in one, it’s incredibly arrogant to just assume that they’re less productive in it than they would be in yours - even if they would (and that’s almost certainly debatable), it would take some time to adjust.</li>
<li>They’ve probably had this conversation many times before, and are sick of hearing it, especially if they have a few years experience under their belt</li>
<li>Not every feature you use is useful to them</li>
<li>No-one minds seeing a cool feature, so feel free to demonstrate it, but bear in mind that it’s almost certainly not limited to that platform - if it’s sufficiently cool, someone <em>will</em> have made it available as a plugin on most of the major editors and IDE’s. If they like it, the most likely scenario is that they’ll look to add that feature to their own editor via a plugin</li>
<li>Just because it makes you more productive, doesn’t mean that it would make them more productive</li>
<li>It’s perfectly possible to enforce consistent code styles and catch errors using standalone tools such as PHP CodeSniffer, Psalm, or ESLint, and these tools can be integrated in <em>any</em> editor, triggered with Git hooks, or run with continuous integration.</li>
</ul>
<p>Now, it has to be said that sometimes there <em>are</em> some people who plod on with painfully outdated tools, like Notepad. But those tools tend to be limited to either commercial offerings that are no longer maintained or supported, or ones that lack any sort of plugin or extension system, making them limited in terms of how they can integrate with other services, so they’re fairly easy to spot. However, making a particular editor or IDE compulsory is going to be disruptive. If you’re in a leadership position, one way to resolve this is to simply require that everyone’s editor have certain functionality - for instance, if you specify that everyone’s editor must allow integration with PHP CodeSniffer and support for <code>.editorconfig</code>, then anyone using a legacy editor that can’t support those will need to move away from it, but they’ll be able to pick one that suits them, rather than be forced into one they may well dislike. Editors and IDE’s don’t produce proprietary formats the way word processors do - they work with common formats, and if prominent open-source projects can enforce a consistent coding standard with many different editors there’s absolutely no reason why your colleagues can’t do so too,</p>
<h2 id="summary">Summary</h2>
<p>This post is a bit of an angry rant, but at the same time it shouldn’t be taken <em>too</em> seriously. As I said, despite the name <em>PHPStorm Man</em>, it’s not specifically about users of any one editor or IDE, but about the widespread, patronising attitude many developers have about editors and IDE’s other than their own in general.</p>
<p>Someone using a different IDE or editor is absolutely none of your business unless you’re their line manager or you work on the same code base, and even then it should only be an issue if it causes a clear effect on their productivity or the quality of their code. If that’s not the case, keep your nose out.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Input components with the useState and useEffect hooks in React]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/10/27/input-components-with-the-usestate-and-useeffect-hooks-in-react/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/10/27/input-components-with-the-usestate-and-useeffect-hooks-in-react/</guid>
            <pubDate>Sun, 27 Oct 2019 21:20:00 GMT</pubDate>
            <description><![CDATA[<p>Like many developers who use React.js, I’ve been eager to explore the Hooks API in the last year or so. They allow for easier ways to share functionality between components, and can allow for a more expressive syntax that’s a better fit for Javascript than class-based components. Unfortunately, they became production ready around the time I rolled out a new React-based home page, so I didn’t want to jump on them immediately in the context of a legacy application. I’m now finding myself with a bit of breathing space, so I’ve begun refactoring these components, and converting some to use hooks, in order to more easily reuse some code that currently resides in a big higher-order component.</p>
<p>The <code>useState</code> and <code>useEffect</code> hooks are by far the most common hooks in most applications. However, I’ve found that the React documentation, while OK at explaining how to use these individually, is not so good at explaining how to use them together, particularly in the case of an input component, which is a common use case when looking to convert existing components. For that reason, I’m going to provide a short example of how you might use them together for that use case.</p>
<h2 id="a-simple-function-component">A simple function component</h2>
<p>A basic component for an input might look like this:</p>
<pre><code class="lang-jsx">//@flow
import React from &#39;react&#39;;

type Props = {
  name: string,
  id: string,
  value: string,
  placeholder: string
};

const Input = (props: Props) =&gt; {
  return (
    &lt;input type=&quot;text&quot; name={props.name} id={props.id} value={props.value} placeholder={props.placeholder} /&gt;
  );
}

export default Input;
</code></pre>
<p>Note I’m using Flow annotations to type the arguments passed to my components. If you prefer Typescript it should be straightforward to convert to that.</p>
<p>As you can see, this component accepts a name, ID, value and placeholder as props. If you add this to an existing React app, or use <code>create-react-app</code> to create one and add this to it, you can include it in another component as follows:</p>
<pre><code class="lang-jsx">&lt;Input name=&quot;foo&quot; id=&quot;foo&quot; value=&quot;foo&quot; placeholder=&quot;foo&quot; /&gt;
</code></pre>
<h2 id="adding-state">Adding state</h2>
<p>This will render, but as the value will never change it’s not actually of any use in a form. If you’ve written class-based React components before, you’ll know that the usual way to handle this is to move the value of the input from props to state. Prior to the introduction of the Hooks API, while you could create a function component, you couldn’t use state with it, making situations like this difficult to handle. Fortunately, the <code>useState</code> hook now allows you to add state to a function component as follows:</p>
<pre><code class="lang-jsx">//@flow
import React, { useState } from &#39;react&#39;;

type Props = {
  name: string,
  id: string,
  value: string,
  placeholder: string
};

const Input = (props: Props) =&gt; {
  const [value, setValue] = useState(props.value);

  return (
    &lt;input type=&quot;text&quot; name={props.name} id={props.id} value={value} placeholder={props.placeholder} onChange={(e) =&gt; setValue(e.target.value)} /&gt;
  );
}

export default Input;
</code></pre>
<p>We import the <code>useState</code> hook at the top, as usual. Then, within the body of the component, we call <code>useState()</code>, passing in the initial value of <code>props.value</code>, and get back two variables in response:</p>
<ul>
<li><code>value</code> is the value of the state variable, and can be thought of as equivalent to what <code>this.state.value</code> would be in a class-based component</li>
<li><code>setValue</code> is a function for updating <code>value</code> - rather than explicitly defining a function for this, we can just get one back from <code>useState()</code></li>
</ul>
<p>Now we can set the value with <code>value={value}</code>. We also need to handle changes in the state, so we add <code>onChange={(e) =&gt; setValue(e.target.value)}</code> to call <code>setValue()</code> on a change event on the input.</p>
<h2 id="handling-effects">Handling effects</h2>
<p>The component will now allow you to edit the value. However, one problem remains. If you open the React dev tools, go to the props for this component, and set <code>value</code> manually, it won’t be reflected in the input’s value, because the state has diverged from the initial value passed in as a prop. We need to be able to pick up on changes in the props and pass them through as state.</p>
<p>In class-based components, there are lifecycle methods that fire at certain times, such as <code>componentDidMount()</code> and <code>componentDidUpdate()</code>, and we would use those to handle that situation. Hooks condense these into a single <code>useEffect</code> hook that is more widely useful. Here’s how we might overcome this problem in our component:</p>
<pre><code class="lang-jsx">//@flow
import React, { useState, useEffect } from &#39;react&#39;;

type Props = {
  name: string,
  id: string,
  value: string,
  placeholder: string
};

const Input = (props: Props) =&gt; {
  const [value, setValue] = useState(props.value);

  useEffect(() =&gt; {
    setValue(props.value);
  }, [props.value]);

  return (
    &lt;input type=&quot;text&quot; name={props.name} id={props.id} value={value} placeholder={props.placeholder} onChange={(e) =&gt; setValue(e.target.value)}/&gt;
  );
}

export default Input;
</code></pre>
<p><code>useEffect</code> takes one compulsory argument, in the form of a callback. Here we’re using that callback to set our state variable back to the value of the prop passed through.</p>
<p>Note the second argument, which is an array of variables that should be watched for changes. If we had used the following code instead:</p>
<pre><code class="lang-jsx">  useEffect(() =&gt; {
    setValue(props.value);
  });
</code></pre>
<p>Then the callback would fire after every render, reverting the value back and possibly causing an infinite loop. For that reason, we pass through the second argument, which tells React to only fire the callback if one of the specified variables has changed. Here we only want to override the state when the value props passed down to the component changes, so we pass that prop in as an argument.</p>
<h2 id="summary">Summary</h2>
<p>This is only a simple example, but it does show how simple and expressive hooks can make your React components, and how to use the <code>useEffect</code> and <code>useState</code> hooks together, which was something I found the documentation didn’t make clear. These two hooks cover a large chunk of the functionality of React, and knowledge of them is essential to using React effectively.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Flexible data types with the JSON field]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/10/13/flexible-data-types-with-the-json-field/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/10/13/flexible-data-types-with-the-json-field/</guid>
            <pubDate>Sun, 13 Oct 2019 22:10:43 GMT</pubDate>
            <description><![CDATA[<p>Relational databases have many advantages over other data stores. They’re (mostly) solid, mature products, they have the means to prevent data duplication while still allowing related data to be accessed, and they allow for easy enforcement of data types. However, the latter point has also historically made them less flexible compared to document databases such as MongoDB, which allow for fields to be set dynamically, making it much easier to set content arbitrarily.</p>
<p>One area in which this has caused particular problems is with content management systems, where you might want to be able to set custom content types that need to be treated the same in some circumstances, and have some fields in common, but store different data. If you want to be able to store arbitrary data against a particular entity, historically the main way to do that is to create a meta table to contain keys and values, and set the entity ID as a foreign key in the new table.</p>
<p>Wordpress is a common example of this. Any piece of content is stored in the <code>wp_posts</code> table, which in addition to the generic structure of a post, also includes the <code>post_type</code> field. It’s possible to create and register your own post types, but it’s not possible to store additional custom data in that table. Instead, it’s stored as keys and values in the <code>wp_postmeta</code> table, meaning you need to do a join to retrieve that content at the same time, making for more complex queries.</p>
<p>Another approach is to have a generic entity table that contains the common fields, and separate tables for the rest, and then set up a one-to-one relationship between them. However, that can be fiddly too because it doesn’t allow for custom types in the same way, so it may not fit with your use case if you need to be able to create arbitrary content types, such as for a CMS that allowed for custom content types.</p>
<h2 id="introducing-json-fields">Introducing JSON fields</h2>
<p>JSON fields allow you to bring some of the flexibility of document databases to the relational world. They allow you to store whatever arbitrary text data you wish as JSON, and retrieve it as usual. More importantly, they also allow you to query by that data, so you can easily filter by fields that need not be set in stone with a database schema.</p>
<p>This means that in the above example of a CMS, instead of having a separate meta table, you can instead store the meta values in a JSON field, thus removing the need for a join and simplifying querying by those values.</p>
<p>PostgreSQL has had this capability for a long time, but it’s only comparatively recently that MySQL and MariaDB versions that support it have become widespread. Here I’ll show you how you might use it in a Laravel application.</p>
<p>The example will be a content management system with flexible content types. The first step is to create the migration to add the new content table:</p>
<pre><code class="lang-php">&lt;?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateContent extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(&#39;content&#39;, function (Blueprint $table) {
            $table-&gt;bigIncrements(&#39;id&#39;);
            $table-&gt;string(&#39;type&#39;, 20);
            $table-&gt;json(&#39;attributes&#39;);
            $table-&gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists(&#39;content&#39;);
    }
}
</code></pre>
<p>Here we’re specifying the following fields:</p>
<ul>
<li>An auto-incrementing ID (feel free to swap this out for a UUID if it makes sense for your application)</li>
<li>A string denoting the content type. If you want to limit the values these can accept, you can replace it with an <code>ENUM</code> field</li>
<li>The JSON field, named <code>attributes</code></li>
<li>The standard Laravel timestamp fields, <code>created_at</code> and <code>updated_at</code></li>
</ul>
<p>If there are certain fields that are common to all of your content types, it would also make sense to define them as fields in the usual way, rather than use the JSON field, since compulsory fields should be enforced by the database.</p>
<p>Next, we’ll create the model:</p>
<pre><code class="lang-php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Content extends Model
{
    protected $table = &#39;content&#39;;

    protected $casts = [
        &#39;attributes&#39; =&gt; &#39;array&#39;
    ];
}
</code></pre>
<p>Note that we cast the <code>attributes</code> field to an array. If we didn’t do this, we’d need to manually run <code>json_encode()</code> and <code>json_decode()</code> on the field to get it back in a usable form. As it is, we can now easily retrieve fields using array access.</p>
<p>With that done, we can now set up some data:</p>
<pre><code class="lang-php">&lt;?php
$c = new App\Content;
$c-&gt;type = &#39;page&#39;;
$c-&gt;attributes = [ 
    &quot;type&quot; =&gt; &quot;info&quot;,
    &quot;title&quot; =&gt; &quot;Terms&quot;,
    &quot;content&quot; =&gt; &quot;Our Terms&quot;,
    &quot;layout&quot; =&gt; &quot;info&quot;,
];
$c-&gt;save();
$c = new App\Content;
$c-&gt;type = &#39;link&#39;;
$c-&gt;attributes = [ 
    &quot;type&quot; =&gt; &quot;external&quot;,
    &quot;link&quot; =&gt; &quot;http://example.com&quot;,
];
$c-&gt;save();
$c = new App\Content;
$c-&gt;type = &#39;page&#39;;
$c-&gt;attributes = [ 
    &quot;type&quot; =&gt; &quot;promotional&quot;,
    &quot;title&quot; =&gt; &quot;My page&quot;,
    &quot;content&quot; =&gt; &quot;This is my page&quot;,
    &quot;layout&quot; =&gt; &quot;default&quot;,
];
$c-&gt;save();
</code></pre>
<p>As you can see, we’ve been able to set out whatever arbitrary fields we wish on these items. We can then call <code>toArray()</code> on a model to get all the fields, including the attributes, or we can call <code>$c-&gt;attributes</code> to get all those attributes together. We can also get a field via array access, eg <code>$c-&gt;attributes[&#39;type&#39;]</code>.</p>
<h2 id="querying-the-data">Querying the data</h2>
<p>The syntax for querying JSON fields is a little bit fiddly:</p>
<pre><code class="lang-sql">SELECT * FROM `content` WHERE attributes -&gt; &#39;$.type&#39; = &#39;promotional&#39;;
</code></pre>
<p>Fortunately, Eloquent makes it much simpler:</p>
<pre><code class="lang-php">&lt;?php
Content::where(&#39;attributes-&gt;type&#39;, &#39;promotional&#39;)-&gt;get();
</code></pre>
<p>It’s also possible to order by a JSON field value, but at the time of writing there’s no neat syntax for it, so you have to drop down to writing it using <code>orderByRaw</code> in Eloquent:</p>
<pre><code class="lang-php">&lt;?php
Content::orderByRaw(&quot;attributes-&gt; &#39;$.type&#39;&quot;)-&gt;get();
</code></pre>
<p>Eloquent also supports a few other JSON query types, such as querying if an array contains a value, and I suggest <a href="https://laravel.com/docs/6.x/queries#json-where-clauses">referring to the documentation</a> if you want to know more.</p>
<h2 id="other-applications">Other applications</h2>
<p>There are many other scenarios where this approach can be useful. For instance, e-commerce sites often sell many different products that may have arbitrary properties, and it may be necessary to sort and filter by different properties for different types of products. A store that sells, among other things, shoes and storage containers, might need a colour and capacity field for storage containers, and a colour and size field for shoes. Using this approach, you can set up your database in such a way that those arbitrary fields can be set up when needed, and used for filtering.</p>
<p>This approach is not without its downsides. Any data that’s stored in a JSON field can’t be validated by the database in the same way, so the burden of ensuring that it remains in a consistent state is moved to your application code. However, it’s no worse than it would be if you used a document database, and unlike with a document database you can combine JSON and more traditional fields as you see fit.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Storing Wordpress configuration in environment variables]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/09/22/storing-wordpress-configuration-in-environment-variables/</guid>
            <pubDate>Sun, 22 Sep 2019 18:00:34 GMT</pubDate>
            <description><![CDATA[<p>Wordpress configuration can be a serious pain in the proverbial. Hard-coding configuration details in a PHP file is not a terribly safe way of storing the details for your database, as if the server is misconfigured they can be exposed. In addition, it can be a chore to copy and populate the <code>wp-config.php</code> file to a new deploy.</p>
<p>A fundamental principle of <a href="https://12factor.net/">The Twelve-Factor App</a> is that config should be stored in the environment. While Wordpress does predate this, there’s no reason why we can’t abide by this. Storing Wordpress configuration in environment variables rather than the <code>wp-config.php</code> file has the following advantages:</p>
<ul>
<li>It’s more secure since the config is not stored in a file in the web root, but in the web server config</li>
<li>It makes managing the <code>wp-config.php</code> file less of a chore - it can be safely committed to version control, and you won’t need to change it to match your local configuration, running the risk of accidentally committing and pushing to production with broken config</li>
<li>Deployment to new servers is simpler because there’s no need to update the <code>wp-config.php</code></li>
<li>The risk of neglecting to change the database details and accidentally messing up the production database when working locally is virtually eliminated</li>
</ul>
<p>I’ve seen solutions for this that use DotEnv, but you don’t actually need to install that to be able to use environment variables with Wordpress. In fact, in some way it’s better if you don’t as too many developers use <code>.env</code> files in production. PHP natively has the ability to get data from environment variables using the <code>getenv()</code> function, so it’s easier to use that than to pull in a third-party library.</p>
<p>Here’s an abbreviated example of a <code>wp-config.php</code> file that’s been updated to pull the settings from environment variables:</p>
<pre><code class="lang-php">&lt;?php
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( &#39;DB_NAME&#39;, getenv(&#39;DB_NAME&#39;) );

/** MySQL database username */
define( &#39;DB_USER&#39;, getenv(&#39;DB_USER&#39;) );

/** MySQL database password */
define( &#39;DB_PASSWORD&#39;, getenv(&#39;DB_PASSWORD&#39;) );

/** MySQL hostname */
define( &#39;DB_HOST&#39;, getenv(&#39;DB_HOST&#39;) );

/** Database Charset to use in creating database tables. */
define( &#39;DB_CHARSET&#39;, &#39;utf8&#39; );

/** The Database Collate type. Don&#39;t change this if in doubt. */
define( &#39;DB_COLLATE&#39;, &#39;&#39; );

define( &#39;AUTH_KEY&#39;,         getenv(&#39;AUTH_KEY&#39;) );
define( &#39;SECURE_AUTH_KEY&#39;,  getenv(&#39;SECURE_AUTH_KEY&#39;) );
define( &#39;LOGGED_IN_KEY&#39;,    getenv(&#39;LOGGED_IN_KEY&#39;) );
define( &#39;NONCE_KEY&#39;,        getenv(&#39;NONCE_KEY&#39;) );
define( &#39;AUTH_SALT&#39;,        getenv(&#39;AUTH_SALT&#39;) );
define( &#39;SECURE_AUTH_SALT&#39;, getenv(&#39;SECURE_AUTH_SALT&#39;) );
define( &#39;LOGGED_IN_SALT&#39;,   getenv(&#39;LOGGED_IN_SALT&#39;) );
define( &#39;NONCE_SALT&#39;,       getenv(&#39;NONCE_SALT&#39;) );

$table_prefix = &#39;wp_&#39;;

define( &#39;WP_DEBUG&#39;, getenv(&#39;WP_DEBUG&#39;) );

/* That&#39;s all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( &#39;ABSPATH&#39; ) ) {
    define( &#39;ABSPATH&#39;, dirname( __FILE__ ) . &#39;/&#39; );
}

/** Sets up WordPress vars and included files. */
require_once( ABSPATH . &#39;wp-settings.php&#39; );
</code></pre>
<p>If you’re using Lando for local development, you will need to specify a file to include that contains the environment variables you wish to set, as in this example:</p>
<pre><code class="lang-yaml">name: wordpress
recipe: wordpress
config:
  webroot: .
env_file:
  - .env
</code></pre>
<p>This filename can be any arbitrarily chosen name. Then, you define the values for those variables in the same way you normally would in a <code>.env</code> file. Here’s an abbreviated example that excludes the crypto settings (though those should be placed here too):</p>
<pre><code class="lang-env">DB_NAME=wordpress
DB_USER=wordpress
DB_PASSWORD=wordpress
DB_HOST=database
WP_DEBUG=true
...
</code></pre>
<p>This will work fine during local development, but in production, or if you’re using something like Vagrant for local development, you’ll want to set the environment variables in the server configuration. For Apache, this is best set in the Virtualhost configuration, although you should be able to set it in an <code>.htaccess</code> file if all else fails. You need to use the <code>SetEnv</code> directive, as in this example:</p>
<pre><code class="lang-apache">SetEnv DB_NAME wordpress
SetEnv DB_USER wordpress
SetEnv DB_PASSWORD wordpress
SetEnv DB_HOST database
SetEnv WP_DEBUG true
</code></pre>
<p>For Nginx, assuming you’re using FastCGI, you need to set it in the server configuration for that site using the <code>fastcgi_param</code> directive, as shown below:</p>
<pre><code class="lang-nginx">fastcgi_param DB_NAME wordpress;
fastcgi_param DB_USER wordpress;
fastcgi_param DB_PASSWORD wordpress;
fastcgi_param DB_HOST database;
fastcgi_param WP_DEBUG true;
</code></pre>
<p>Since Wordpress doesn’t ship with any kind of command-line task runner, this should be sufficient for most installs. However, if you’re using WP CLI, that will break it as it won’t have access to environment variables set by Apache or Nginx, so you’ll also need to set them for the user that runs WP CLI by adding them to their Bash config in the usual way.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Using Mix versioning outside Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/09/21/using-mix-versioning-outside-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/09/21/using-mix-versioning-outside-laravel/</guid>
            <pubDate>Sat, 21 Sep 2019 10:30:50 GMT</pubDate>
            <description><![CDATA[<p>Laravel Mix is a really convenient front end scaffold, and not just in the context of a Laravel application. Last year, I added it to a legacy application I maintain, with positive results, and I’m including it in a CMS I’m working on.</p>
<p>However, I’ve always had issues trying to implement versioning outside a Laravel application. I’ve used the timestamp technique described <a href="https://matthewdaly.co.uk/blog/2016/11/26/easy-static-asset-versioning-in-php/">here</a> a lot in the past, but nowadays I do most of my work in a Lando container, and I’ve had a lot of issues with timestamp changes not being picked up, forcing me to restart my container regularly when working on front-end assets. Switching to using Mix versioning seemed like a good way to resolve that issue, but of course the <code>mix()</code> helper isn’t available elsewhere.</p>
<p>Fortunately, its not all that hard to implement your own solution. Under the bonnet, Mix versioning works as follows:</p>
<ul>
<li>The build generates an array of compiled static assets, with the key being the path to the asset, and the value being the path with a query string appended, and then saves it as <code>mix-manifest.json</code></li>
<li>The <code>mix()</code> helper loads the <code>mix-manifest.json</code> file, converts it to JSON, fetches the array entry by path, and then returns the appropriate value for passing back from the helper</li>
</ul>
<p>With that in mind, I wrote the following Twig filter to handle assets versioned with Mix:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types=1);

namespace Project\Core\Views\Filters;

use Exception;

final class Mix
{
    public function __invoke(string $path): string
    {
        $manifest = json_decode(file_get_contents(&#39;mix-manifest.json&#39;), true);
        if (! array_key_exists(&quot;/&quot; . $path, $manifest)) {
            throw new Exception(
                &quot;Unable to locate Mix file: {$path}&quot;
            );
        }
        if (!file_exists($path)) {
            throw new Exception(&#39;Included file does not exist&#39;);
        }
        return $manifest[&quot;/&quot; . $path];
    }
}
</code></pre>
<p>This works on the basis that the web root is set in the <code>public/</code> folder, and that the compiled CSS and Javascript files are placed there - if that’s not the case you may need to adapt this accordingly.</p>
<p>You also need to add the <code>version()</code> call to your <code>webpack.mix.js</code>:</p>
<pre><code class="lang-javascript">const mix = require(&#39;laravel-mix&#39;);

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for the application as well as bundling up all the JS files.
 |
 */

mix
  .setPublicPath(&#39;public/&#39;)
  .js(&#39;resources/js/app.js&#39;, &#39;public/js&#39;)
  .sass(&#39;resources/sass/app.scss&#39;, &#39;public/css&#39;)
  .version();
</code></pre>
<p>Then, when you instantiate Twig, you can add the new filter using something like this:</p>
<pre><code class="lang-php">$twig = new Environment($container-&gt;get(&#39;Twig\Loader\FilesystemLoader&#39;), $config);
$mix = $container-&gt;get(&#39;Project\Core\Views\Filters\Mix&#39;);
$twig-&gt;addFilter(new TwigFilter(&#39;mix&#39;, $mix));
</code></pre>
<p>Now, the filter should be usable in your Twig views as shown:</p>
<pre><code class="lang-twig">&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;

    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ &#39;css/app.css&#39;| mix }}&quot; /&gt;

    &lt;title&gt;{{ title }}&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    {% include &#39;header.html&#39; %}
    {% block body %}
    {% endblock %}

    &lt;script src=&quot;{{ &#39;js/app.js&#39;| mix }}&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>If you’re using a different framework or templating system, there should be a way to create helpers, and it should be possible to implement this technique fairly easily. I was able to do so in the context of a legacy Zend application, so it should be possible with other legacy frameworks like CodeIgniter.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Setting private properties in tests]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/09/07/setting-private-properties-in-tests/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/09/07/setting-private-properties-in-tests/</guid>
            <pubDate>Sat, 07 Sep 2019 19:16:47 GMT</pubDate>
            <description><![CDATA[<p>Sometimes when writing a test, you come across a situation where you need to set a private field that’s not accessible through any existing route. For instance, I’ve been working with Doctrine a bit lately, and since the ID on an entity is generated automatically, it should not be possible to change it via a setter, but at the same time, we sometimes have the need to set it in a test.</p>
<p>Fortunately, there is a way to do that. Using PHP’s reflection API, you can temporarily mark a property on an object as accessible, so as to be able to set it without either passing it to the constructor or creating a setter method that will only ever be used by the test. We first create a <code>ReflectionClass</code> instance from the object, then get the property. We mark it as accessible, and then set the value on the instance, as shown below:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Unit;

use Tests\TestCase;
use Project\Document;
use ReflectionClass;

final class DocumentTest extends TestCase
{
    public function testGetId()
    {
        $doc = new Document();
        $reflect = new ReflectionClass($doc);
        $id = $reflect-&gt;getProperty(&#39;id&#39;);
        $id-&gt;setAccessible(true);
        $id-&gt;setValue($doc, 1);
        $this-&gt;assertEquals(1, $doc-&gt;getId());
    }
}
</code></pre>
<p>If you’re likely to need this in more than one place, you may want to pull this functionality out into a trait for reuse:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Traits;

use ReflectionClass;

trait SetsPrivateProperties
{
    /**
     * Sets a private property
     *
     * @param mixed $object
     * @param string $property
     * @param mixed $value
     * @return void
     */
    public function setPrivateProperty($object, string $property, $value)
    {
        $reflect = new ReflectionClass($object);
        $prop = $reflect-&gt;getProperty($property);
        $prop-&gt;setAccessible(true);
        $prop-&gt;setValue($object, $value);
        $prop-&gt;setAccessible(false);
    }
}
</code></pre>
<p>Then your test can be simplified as follows:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Unit;

use Tests\TestCase;
use Project\Document;
use Tests\Traits\SetsPrivateProperties;

final class DocumentTest extends TestCase
{
    use SetsPrivateProperties;

    public function testGetId()
    {
        $doc = new Document();
        $this-&gt;setPrivateProperty($doc, &#39;id&#39;, 1);
        $this-&gt;assertEquals(1, $doc-&gt;getId());
    }
}
</code></pre>
<p>While this is a slightly contrived and limited example, and this situation is quite rare, I’ve found it to be a useful technique under certain circumstances.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Skipping environment specific PHPUnit tests]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/07/28/skipping-environment-specific-phpunit-tests/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/07/28/skipping-environment-specific-phpunit-tests/</guid>
            <pubDate>Sun, 28 Jul 2019 19:55:14 GMT</pubDate>
            <description><![CDATA[<p>If you’re doing client work, you don’t generally have to worry too much about working with any services other than those that will be installed in your production environment. For instance, if you’re using Memcached as your cache backend, you needn’t go to the trouble of checking that it works with Redis too unless the project actively switches. However, for more general purpose software that may be deployed to a variety of different environments, you may have to test it in all of those environments, which can be a chore.</p>
<p>Lately I’ve been working on a micro CMS for a personal project, and ran into a bit of an issue. This CMS uses the Stash caching library, and I wanted it to actively support all of the cache backends Stash provides. The CMS is configured using YAML, and I’d written a factory class that takes in the cache configuration and returns an adapter. The problem was that there are three adapters that require additional software to be installed, namely the APC, Redis and Memcached adapters. Installing all the packages to use all three of the adapters is onerous, and while it’s a good idea to test them all, it’s generally not worth the bother of adding all of them to your local development environment where you need your tests to run as fast as possible. Instead you’re better off deferring those tests that require additional dependencies to your continuous integration server, which can afford to be a lot slower.</p>
<p>Fortunately, PHPUnit allows you to mark a test as skipped by calling <code>markTestSkipped()</code>. In the past I’ve used this or the similar <code>markTestIncomplete()</code> method when a test wasn’t finished, but it’s also useful for skipping tests based on the environment. We can either test for the presence of the dependency and mark the test as skipped if it’s not present, or set the test up inside a try…catch block and call <code>markTestSkipped()</code> if the test throws an exception due to a missing dependency, as in this example:</p>
<pre><code class="lang-php">&lt;?php declare(strict_types = 1);

namespace Tests\Unit\Factories;

use Tests\TestCase;
use App\Factories\CacheFactory;
use Stash\Exception\RuntimeException;
use Mockery as m;

final class CacheFactoryTest extends TestCase
{
    public function testRedis()
    {
        $factory = new CacheFactory;
        try {
            $pool = $factory-&gt;make([
                &#39;driver&#39; =&gt; &#39;redis&#39;,
                &#39;servers&#39; =&gt; [[
                    &#39;127.0.0.1&#39;,
                    &#39;6379&#39;
                ]]
            ]);
        } catch (RuntimeException $e) {
            $this-&gt;markTestSkipped(&#39;Dependency not installed&#39;);
        }
        $this-&gt;assertInstanceOf(&#39;Stash\Pool&#39;, $pool);
        $this-&gt;assertInstanceOf(&#39;Stash\Driver\Redis&#39;, $pool-&gt;getDriver());
    }
}
</code></pre>
<p>As a general rule of thumb, when running your tests locally, it’s more important that your test suite run quickly than provide 100% coverage. Tests that are slower or require multiple services to be installed can still be run by your continuous integration server, which can afford to be slower since it’s not a blocker in the same way. In addition, I’m only ever really interested in coverage stats on the CI server, since enabling that slows PHPUnit down a lot, so since coverage is a non-issue locally we can happily leave covering that dependency to our CI server. In this case, the project is hosted on Github and uses Travis CI for running the tests and Coveralls for recording coverage, so we can leave the full test suite to be run on Travis CI, ensuring full coverage, while skipping those tests that require Redis, Memcached or APC locally.</p>
<p>Having a comprehensive test suite, and running it regularly during development, is important, but that doesn’t mean it’s compulsory you run every test regularly. In a case like this, where there are multiple adapters for the same basic functionality, you can often afford to avoid running those that test adapters with more exacting requirements.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Powering up git bisect with the run command]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/06/19/powering-up-git-bisect-with-the-run-command/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/06/19/powering-up-git-bisect-with-the-run-command/</guid>
            <pubDate>Wed, 19 Jun 2019 21:00:27 GMT</pubDate>
            <description><![CDATA[<p>The <code>bisect</code> command in Git can be very useful when trying to catch any regressions. If you know that a bug was not present at some point in the past, and now is, you can often use <code>bisect</code> to track it down quickly and easily.</p>
<p>The basic functionality is fairly simple. You start the process by tracking down a known “good” commit in the past, and a known “bad” commit, which will usually be the head of the branch. Then, you start bisecting:</p>
<pre><code class="lang-bash">$ git bisect start
</code></pre>
<p>You then specify your bad commit:</p>
<pre><code class="lang-bash">$ git bisect bad HEAD
</code></pre>
<p>And your good commit</p>
<pre><code class="lang-bash">$ git bisect good fe0616f0cd523455a0e5bc536c09bfb1d8fd0c3f
</code></pre>
<p>And it will then step through the commits in between. Note that not every commit is loaded - it instead picks a commit between those you entered, and from there quickly narrows down the range. For each commit, you test it and mark it as good or bad with <code>git bisect good</code> or <code>git bisect bad</code> as appropriate. Once it’s tracked down the commit that introduced the problem, it will tell you what that commit was, making any remaining debugging much easier. There are situations that are more difficult to handle, such as when database migrations have been created and run in the intervening period, but for many cases <code>bisect</code> can be a very valuable tool.</p>
<p>However, it can still be a chore to step through those commits manually. Fortunately, in situations where you can produce some sort of script to determine if the issue is present or not, there’s an easy way to automate it with the <code>bisect run</code> command.</p>
<p>One of the personal projects I have on the go right now is a micro-CMS intended primarily for brochure-style sites. It includes an AJAX search that uses Fuse.js on the front end, the index for which is generated by a console task built on top of the Symfony Console component. Recently I noticed that although the unit tests still passed, the console task to generate the index no longer worked as expected due to an issue with Flysystem. Since it threw an error in the console, that could be used as input to <code>git bisect</code>. I was therefore able to automate the process of finding the bug by running this command:</p>
<pre><code class="lang-bash">$ git bisect run php console index:generate
</code></pre>
<p>This was pretty rare in that it was an ideal situation - the problem was the console command throwing an explicit error, which was perfect as input to <code>bisect run</code>. A more likely scenario in many cases is that if you want to automate catching the error, you’ll need to create an automated test to reproduce that error, and run that test with <code>git bisect run</code>. Given that TDD already recommends writing a test to reproduce a bug before fixing it, it’s prudent to write the test first, then use it to run the bisect command, before fixing the bug and committing both the fix and the new test, so as to not only minimise the manual work required, but also ensure it won’t crop up again.</p>
<p>Certain classes of issues are more difficult to automate in this way - for example, visual regressions in CSS. If you’re using a library like React or Vue, snapshot testing may be a good way to automate the bisect process for HTML rendered by components, or you could try the approach I’ve mentioned before for snapshot testing PHP applications. For legacy applications that can’t create and tear down a database for testing purposes due to gaps in the migration history, it can also be tricky and time-consuming to ensure consistency between runs. However, if you can do it, automating the bisect command makes it much quicker, and leaves you with a test you can retain to ensure that bug never returns again.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Writing golden master tests for Laravel applications]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/05/14/writing-golden-master-tests-for-laravel-applications/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/05/14/writing-golden-master-tests-for-laravel-applications/</guid>
            <pubDate>Tue, 14 May 2019 11:15:17 GMT</pubDate>
            <description><![CDATA[<p>Last year I wrote <a href="https://matthewdaly.co.uk/blog/2018/10/08/an-approach-to-writing-golden-master-tests-for-php-web-applications/">a post illustrating how to write golden master tests for PHP applications in general</a>. This approach works, but has a number of issues:</p>
<ul>
<li>Because it uses a headless browser such as Goutte, it’s inevitably slow (a typical test run for the legacy application I wrote those tests for is 3-4 minutes)</li>
<li>It can’t allow for differing content, so any changes to the content will break the tests</li>
</ul>
<p>These factors limit its utility for many PHP applications. However, for a Laravel application you’re in a much better position:</p>
<ul>
<li>You can use Browserkit rather than a headless browser, resulting in much faster response times</li>
<li>You can set up a testing database, and populate it with the same data each time, ensuring that the only thing that can change is how that data is processed to create the required HTML</li>
</ul>
<p>Here I’ll show you how to adapt that approach to work with a Laravel application.</p>
<p>We rely on Browserkit testing for this approach, so you need to install that:</p>
<pre><code class="lang-bash">$ composer require --dev laravel/browser-kit-testing
</code></pre>
<p>Next, we need to create our base golden master test case:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests;

use Tests\BrowserTestCase;

class GoldenMasterTestCase extends BrowserTestCase
{
    use CreatesApplication;

    public $baseUrl = &#39;http://localhost&#39;;

    protected $snapshotDir = &quot;tests/snapshots/&quot;;

    protected $response;

    protected $path;

    public function goto($path)
    {
        $this-&gt;path = $path;
        $this-&gt;response = $this-&gt;call(&#39;GET&#39;, $path);
        $this-&gt;assertNotEquals(404, $this-&gt;response-&gt;status());
        return $this;
    }

    public function saveHtml()
    {
        if (!$this-&gt;snapshotExists()) {
            $this-&gt;saveSnapshot();
        }
        return $this;
    }

    public function assertSnapshotsMatch()
    {
        $path = $this-&gt;getPath();
        $newHtml = $this-&gt;processHtml($this-&gt;getHtml());
        $oldHtml = $this-&gt;getOldHtml();
        $diff = &quot;&quot;;
        if (function_exists(&#39;xdiff_string_diff&#39;)) {
            $diff = xdiff_string_diff($oldHtml, $newHtml);
        }
        $message = &quot;The path $path does not match the snapshot\n$diff&quot;;
        self::assertThat($newHtml == $oldHtml, self::isTrue(), $message);
    }

    protected function getHtml()
    {
        return $this-&gt;response-&gt;getContent();
    }

    protected function getPath()
    {
        return $this-&gt;path;
    }

    protected function getEscapedPath()
    {
        return $this-&gt;snapshotDir.str_replace(&#39;/&#39;, &#39;_&#39;, $this-&gt;getPath()).&#39;.snap&#39;;
    }

    protected function snapshotExists()
    {
        return file_exists($this-&gt;getEscapedPath());
    }

    protected function processHtml($html)
    {
        return preg_replace(&#39;/(&lt;input type=&quot;hidden&quot;[^&gt;]+\&gt;|&lt;meta name=&quot;csrf-token&quot; content=&quot;([a-zA-Z0-9]+)&quot;&gt;)/i&#39;, &#39;&#39;, $html);
    }

    protected function saveSnapshot()
    {
        $html = $this-&gt;processHtml($this-&gt;getHtml());
        file_put_contents($this-&gt;getEscapedPath(), $html);
    }

    protected function getOldHtml()
    {
        return file_get_contents($this-&gt;getEscapedPath());
    }
}
</code></pre>
<p>The <code>goto()</code> method sets the current path on the object, then fetches the page. It verifies the page was found, and then returns an instance of the object, to allow for method chaining.</p>
<p>Another method of note is the <code>saveHtml()</code> method. This checks to see if the snapshot exists - if not, it saves it. The snapshot is essentially just the HTML returned from that route, but certain content may need to be stripped out, which is done in the <code>processHtml()</code> method. In this case we’ve stripped out hidden fields and the CSRF token meta tag, as CSRF tokens are generated anew each time and will break the snapshots.</p>
<p>The last method we’ll look at is the <code>assertSnapshotsMatch()</code> method. This will get the current HTML, and that for any snapshot for that route, and then compare them. If they differ, it will fail the assertion. In addition, if <code>xdiff_string_diff</code> is available, it will show a diff of the two files - be warned, these can sometimes be large, but they can be helpful in debugging.</p>
<p>Also, note our snapshots directory - <code>tests/snapshots</code>. If you do make a breaking change and want to delete a snapshot, then you can find it in there - the format replaces forward slashes with underscores, and appends a file extension of <code>.snap</code>,  but feel free to customise this to your needs.</p>
<p>Next, we’ll create a test for routes that don’t require authentication, at <code>tests/GoldenMaster/ExampleTest.php</code>:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\GoldenMaster;

use Tests\GoldenMasterTestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;

class ExampleTest extends GoldenMasterTestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider nonAuthDataProvider
     */
    public function testNonAuthPages($data)
    {
        $this-&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function nonAuthDataProvider()
    {
        return [
            [&#39;/register&#39;],
            [&#39;/login&#39;],
        ];
    }
}
</code></pre>
<p>Note the use of the data provider. We want to be able to step through a list of routes, and verify each in turn, so it makes sense to set up a data provider method as <code>nonAuthDataProvider()</code>, which will return an array of routes. If you haven’t used data providers before, they are an easy way to reduce boilerplate in your tests when you need to test the same thing over and over with different data, and you can learn more <a href="https://tighten.co/blog/tidying-up-your-phpunit-tests-with-data-providers">here</a>.</p>
<p>Now, having seen the methods used, it should be easy to understand <code>testNonAuthPages()</code>. It goes through the following steps:</p>
<ul>
<li>Visit the route passed through, eg <code>/register</code></li>
<li>Save the HTML to a snapshot, if not already saved</li>
<li>Assert that the current content matches the snapshot</li>
</ul>
<p>Using this method, you can test a lot of routes for unexpected changes quite easily. If you’ve used snapshot tests with something like Jest, this is a similar approach.</p>
<h2 id="authenticated-routes">Authenticated routes</h2>
<p>This won’t quite work with authenticated routes, so a few more changes are required. You’ll get a response, but if you look at the HTML it will clearly show the user is being redirected for all of them, so there’s not much point in testing them.</p>
<p>If your content does not differ between users, you can add the trait <code>Illuminate\Foundation\Testing\WithoutMiddleware</code> to your test to disable the authentication and allow the test to get the content without being redirected.</p>
<p>If, however, your content does differ between users, you need to instead create a user object, and use the <code>actingAs()</code> method already available in Laravel tests to set the user, as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace Tests\GoldenMaster;

use Tests\GoldenMasterTestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;

class ExampleTest extends GoldenMasterTestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider authDataProvider
     */
    public function testAuthPages($data)
    {
        $user = factory(User::class)-&gt;create([
            &#39;email&#39; =&gt; &#39;eric@example.com&#39;,
            &#39;name&#39; =&gt; &#39;Eric Smith&#39;,
            &#39;password&#39; =&gt; &#39;password&#39;
        ]);
        $this-&gt;actingAs($user)
            -&gt;goto($data)
            -&gt;saveHtml()
            -&gt;assertSnapshotsMatch();
    }

    public function authDataProvider()
    {
        return [
            [&#39;/&#39;],
        ];
    }
}
</code></pre>
<p>This will allow us to visit a specific page as a user, without being redirected.</p>
<h2 id="summary">Summary</h2>
<p>This can be a useful technique to catch unexpected breakages in applications, particularly ones which have little or no conventional test coverage. While I originated this technique on a Zend 1 legacy code base, leveraging the tools available in Laravel makes this technique much faster and more useful. If your existing Laravel application is not as well tested as you’d like, and you have some substantial changes to make that risk breaking some of the functionality, having these sorts of golden master tests set up can be a quick and easy way of catching any problems as soon as possible.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[How much difference does adding an index to a database table make?]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/03/04/how-much-difference-does-adding-an-index-to-a-database-table-make/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/03/04/how-much-difference-does-adding-an-index-to-a-database-table-make/</guid>
            <pubDate>Mon, 04 Mar 2019 21:26:18 GMT</pubDate>
            <description><![CDATA[<p>For the last few weeks, I’ve been kept busy at work building out a new homepage for the legacy intranet system I maintain. The new homepage is built virtually from scratch with React, and has a completely new set of queries. In addition, I’ve also rebuilt the UI for the navigation to use React too. This has allowed me to bypass a lot of the worst code in the whole code base with the intent to get rid of it once the new home page is live - something I’m very pleased about!</p>
<p>As part of this, I built some new functionality to show items added in the last seven days. This section of the home page can be sorted by several parameters, including popularity. I also added the facility to expand that to 31 days via an AJAX request. However, the AJAX request was painfully slow, often taking 20-30 seconds. Also, the home page was quite slow to load in the first place, and examining the query time in Clockwork indicated that the culprit was the query for the new items.</p>
<p>Further examination of the query behind the new items (both on initial page load and the 31 day AJAX request) indicated that the problem was a join. Last year, one of my first tasks had been to add the facility to record a track for any media item when it was visited. This was accomplished using a polymorphic relationship. While Zend 1 doesn’t have the kind of out-of-the-box support for polymorphic relationships that Laravel has, it’s possible to fake it so I created a <code>tracks</code> table whose columns included <code>trackable_id</code> for the primary key of the tracked object, <code>trackable_type</code> for its class, and <code>user_id</code> for the ID of the user who visited it. Now, I was using that same table to determine the number of times each item had been viewed by joining it on each of the media items, which was the first time it was being read for anything other than a report generated in the admin, and performance was dog slow.</p>
<p>Once I’d established that removing that join from the query removed the performance issue, then it became apparent I was going to need to add an index to the <code>tracks</code> table. The table had got fairly large (low hundreds of thousands), so it had a lot to sort through. As the join used the <code>trackable_id</code> field to join onto the items added, that seemed like a good candidate, so I added the index there.</p>
<p>The results were dramatic, to put it mildly. The initial page load time dropped from 4.44s to 1.29s - around a third of the previous amount. For the AJAX request to fetch the last 31 day’s new items, the results were even more impressive - the loading time dropped from 22.44s to 1.61s. Overall, figuring out which part of the query was causing the poor performance and resolving it took about ten minutes, and resulted in a staggering improvement.</p>
<p>If you don’t have a particularly strong theoretical background with relational databases, knowledge of indices can fall by the wayside somewhat. However, as you can see from this example, if you have a particularly slow query, then adding an index can make a staggering difference, so it’s really worth taking the time to understand a bit more about indices and when they can be useful.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Searching content with Fuse.js]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/20/searching-content-with-fuse-dot-js/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/20/searching-content-with-fuse-dot-js/</guid>
            <pubDate>Wed, 20 Feb 2019 17:25:58 GMT</pubDate>
            <description><![CDATA[<p>Search is a problem I’m currently taking a big interest in. The legacy project I maintain has an utterly abominable search facility, one that I’m eager to replace with something like Elasticsearch. But smaller sites that are too small for Elasticsearch to be worth the bother can still benefit from having a decent search implementation. Despite some recent improvements, relational databases aren’t generally that good a fit for search  because they don’t really understand the concept of relevance - you can’t easily order something by how good a match it is, and your database may not deal with fuzzy matching well.</p>
<p>I’m currently working on a small flat-file CMS as a personal project. It’s built with PHP, but it’s intended to be as simple as possible, with no database, no caching service, and certainly no search service, so it needs something small and simple, but still effective for search.</p>
<p>In the past I’ve used Lunr.js on my own site, and it works very well for this use case. However, it’s problematic for this case as the index needs to be generated in Javascript on the server side, and adding Node.js to the stack for a flat-file PHP CMS is not really an option. What I needed was something where I could generate the index in any language I chose, load it via AJAX, and search it on the client side. I recently happened to stumble across <a href="https://fusejs.io/">Fuse.js</a>, which was pretty much exactly what I was after.</p>
<p>Suppose we have the following index:</p>
<pre><code class="lang-json">[  
   {  
      &quot;title&quot;:&quot;About me&quot;,
      &quot;path&quot;:&quot;about/&quot;
   },
   {  
      &quot;title&quot;:&quot;Meet the team&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/&quot;
   },
   {  
      &quot;title&quot;:&quot;Alice&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/alice/&quot;
   },
   {  
      &quot;title&quot;:&quot;Bob&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/bob/&quot;
   },
   {  
      &quot;title&quot;:&quot;Chris&quot;,
      &quot;path&quot;:&quot;about/meet-the-team/chris/&quot;
   },
   {  
      &quot;title&quot;:&quot;Home&quot;,
      &quot;path&quot;:&quot;index/&quot;
   }
]
</code></pre>
<p>This index can be generated in any way you see fit. In this case, the page content is stored in Markdown files with YAML front matter, so I wrote a Symfony console command which gets all the Markdown files in the content folder, parses them to get the titles, and retrieves the path. You could also retrieve other items in front matter such as categories or tags, and the page content, and include that in the index. The data then gets converted to JSON and saved to the index file. As you can see, there’s nothing special about this JSON - these two fields happen to be the ones I’ve chosen.</p>
<p>Now we can load the JSON file via AJAX, and pass it to a new Fuse instance. You can search the index using the <code>.search()</code> method, as shown below:</p>
<pre><code class="lang-javascript">import Fuse from &#39;fuse.js&#39;;
window.$ = window.jQuery = require(&#39;jquery&#39;);

$(document).ready(function () {
  window.$.getJSON(&#39;/storage/index.json&#39;, function (response) {
    const fuse = new Fuse(response, {
      keys: [&#39;title&#39;],
      shouldSort: true
    });
    $(&#39;#search&#39;).on(&#39;keyup&#39;, function () {
      let result = fuse.search($(this).val());

      // Output it
      let resultdiv = $(&#39;ul.searchresults&#39;);
      if (result.length === 0) {
        // Hide results
        resultdiv.hide();
      } else {
        // Show results
        resultdiv.empty();
        for (let item in result.slice(0,4)) {
          let searchitem = &#39;&lt;li&gt;&lt;a href=&quot;/&#39; + result[item].path + &#39;&quot;&gt;&#39; + result[item].title + &#39;&lt;/a&gt;&lt;/li&gt;&#39;;
          resultdiv.append(searchitem);
        }
        resultdiv.show();
      }
    });
  });
});
</code></pre>
<p>The really great thing about Fuse.js is that it can search just about any JSON content, making it extremely flexible. For a site with a MySQL database, you could generate the JSON from one or more tables in the database, cache it in Redis or Memcached indefinitely until such time as the content changes again, and only regenerate it then, making for an extremely efficient client-side search that doesn’t need to hit the database during normal operation. Or you could generate it from static files, as in this example. It also means the backend language is not an issue, since you can easily generate the JSON file in PHP, Javascript, Python or any other language.</p>
<p>As you can see, it’s pretty straightforward to use Fuse.js to create a working search field out of the box, but the website lists a number of options allowing you to customise the search for your particular use case, and I’d recommend looking through these if you’re planning on using it on a project.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Higher-order components in React]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/16/higher-order-components-in-react/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/16/higher-order-components-in-react/</guid>
            <pubDate>Sat, 16 Feb 2019 19:00:30 GMT</pubDate>
            <description><![CDATA[<p>In the last few weeks I’ve been working on a big rebuild of the homepage of the legacy application I maintain. As I’ve been slowly transitioning it to use React on the front end, I used that, and it’s by far the largest React project I’ve worked on to date. This has pushed me to use some more advanced React techniques I hadn’t touched on before. I’ve also had to create some different components that have common functionality.</p>
<p>React used to use mixins to share common functionality, but the consensus is now that <a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">mixins are considered harmful</a>, so they have been removed. Instead, developers are encouraged to create higher-order components to contain the shared functionality.</p>
<p>A higher-order component is a function that accepts a React component as an argument, and then returns another component that wraps the provided one. The shared functionality is defined inside the wrapping component, and so any state or methods defined in the wrapping component can then be passed as props into the wrapped one, as in this simple example:</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;

export default function hocExample(WrappedComponent) {
  class hocExample extends Component {
    constructor(props) {
      this.state = {
        foo: false
      };
      this.doStuff = this.doStuff.bind(this);
    }
    doStuff() {
      this.setState({
        foo: true
      });
    }
    render() {
      return (
        &lt;WrappedComponent foo={this.state.foo} doStuff={this.doStuff} /&gt;
      );
    }
  }
  return hocExample;
}
</code></pre>
<p>If you’ve been working with React for a while, even if you haven’t written a higher-order component, you’ve probably used one. For instance, <code>withRouter()</code> from <code>react-router</code> is a good example of a higher-order component that forms part of an existing library.</p>
<h1 id="a-real-world-example">A real-world example</h1>
<p>A very common use case I’ve come across is handling a click outside of a component. For instance, if you have a sidebar or popup component, it’s common to want to close it when the user clicks outside the component. As such, it’s worth taking the time to refactor it to make it reusable.</p>
<p>In principle you can achieve this on any component as follows:</p>
<ul>
<li>The component should accept two props - an <code>active</code> prop that denotes whether the component is active or not, and an <code>onClickOutside()</code> prop method that is called on a click outside</li>
<li>On mount, an event listener should be added to the document to listen for <code>mousedown</code> events, and it should be removed on unmount</li>
<li>When the event listener is fired, it should use a ref on the component to determine if the ref contains the event target. If so, and the status is active, the <code>onClickOutside()</code> method should be called</li>
</ul>
<p>Moving this to a higher order component makes a couple of issues slightly more complex, but not very. We can’t easily get a ref of the wrapped component, so I had to resort to using <code>ReactDOM.findDOMNode()</code> instead, which is potentially a bit dodgy as they’re talking about deprecating that.</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;
import { findDOMNode } from &#39;react-dom&#39;;

export default function clicksOutside(WrappedComponent) {
  class clicksOutside extends Component {
    constructor(props) {
      super(props);
      this.setWrapperRef = this.setWrapperRef.bind(this);
      this.handleClickOutside = this.handleClickOutside.bind(this);
    }
    componentDidMount() {
      document.addEventListener(&#39;mousedown&#39;, this.handleClickOutside);
    }
    componentWillUnmount() {
      document.removeEventListener(&#39;mousedown&#39;, this.handleClickOutside);
    }
    setWrapperRef(node) {
      this.wrapperRef = node;
    }
    handleClickOutside(event) {
      const {target} = event;
      if (this.wrapperRef &amp;&amp; target instanceof Node) {
        const ref = findDOMNode(this.wrapperRef);
        if (ref &amp;&amp; !ref.contains(target) &amp;&amp; this.props.active === true) {
          this.props.onClickOutside();
        }
      }
    }
    render() {
      return (
        &lt;WrappedComponent {...this.props} ref={this.setWrapperRef} /&gt;
      );
    }
  };
  return clicksOutside;
}
</code></pre>
<p>Now we can use this as follows:</p>
<pre><code class="lang-javascript">import React, { Component } from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Sidebar from &#39;./src/Components/Sidebar&#39;;
import clicksOutside from &#39;./src/Components/clicksOutside&#39;;

const SidebarComponent = clicksOutside(Sidebar);

function handleClickOutside() {
  alert(&#39;You have clicked outside&#39;);
}

ReactDOM.render(
  &lt;SidebarComponent 
    links={links} 
    active={true} 
    onClickOutside={handleClickOutside} 
  /&gt;,
  document.getElementById(&#39;root&#39;)
);
</code></pre>
<p>Higher order components sound a lot harder than they actually are. In reality, they’re actually quite simple to implement, but I’m not sure the <a href="https://reactjs.org/docs/higher-order-components.html">documentation</a> is necessarily the best example to use since it’s a bit on the complex side.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating your own dependency injection container in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/02/02/creating-your-own-dependency-injection-container-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/02/02/creating-your-own-dependency-injection-container-in-php/</guid>
            <pubDate>Sat, 02 Feb 2019 20:45:52 GMT</pubDate>
            <description><![CDATA[<p>Dependency injection can be a difficult concept to understand in the early stages. Even when you’re using it all the time, it can often seem like magic. However, it’s really not all that complicated once you actually get into the nuts and bolts of it, and building your own container is a good way to learn more about how it works and how to use it.</p>
<p>In this tutorial, I’ll walk you through creating a simple, minimal dependency injection container, using PHPSpec as part of a TDD workflow. While the end result isn’t necessarily something I’d be happy using in a production environment, it’s sufficient to understand the basic concept and make it feel less like a black box. Our container will be called Ernie (if you want to know why, it’s a reference to a 90’s era video game that had a character based on Eric Cantona called Ernie Container).</p>
<p>The first thing we need to do is set up our dependencies. Our container will implement PSR-11, so we need to include the interface that defines that. We’ll also use PHP CodeSniffer to ensure code quality, and PHPSpec for testing. Your <code>composer.json</code> should look something like this:</p>
<pre><code class="lang-json">{
    &quot;name&quot;: &quot;matthewbdaly/ernie&quot;,
    &quot;description&quot;: &quot;Simple DI container&quot;,
    &quot;type&quot;: &quot;library&quot;,
    &quot;require-dev&quot;: {
        &quot;squizlabs/php_codesniffer&quot;: &quot;^3.3&quot;,
        &quot;phpspec/phpspec&quot;: &quot;^5.0&quot;,
        &quot;psr/container&quot;: &quot;^1.0&quot;
    },
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;authors&quot;: [
        {
            &quot;name&quot;: &quot;Matthew Daly&quot;,
            &quot;email&quot;: &quot;450801+matthewbdaly@users.noreply.github.com&quot;
        }
    ],
    &quot;require&quot;: {},
    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;Matthewbdaly\\Ernie\\&quot;: &quot;src/&quot;
        }
    }
}
</code></pre>
<p>We also need to put this in our <code>phpspec.yml</code> file:</p>
<pre><code class="lang-yml">suites:
    test_suite:
        namespace: Matthewbdaly\Ernie
        psr4_prefix: Matthewbdaly\Ernie
</code></pre>
<p>With that done, we can start working on our implementation.</p>
<h1 id="creating-the-exceptions">Creating the exceptions</h1>
<p>The PSR-11 specification defines two interfaces for exceptions, which we will implement before actually moving on to the container itself. The first of these is <code>Psr\Container\ContainerExceptionInterface</code>. Run the following command to create a basic spec for the exception:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Exceptions/ContainerException
</code></pre>
<p>The generated specification for it at <code>spec/Exceptions/ContainerExceptionSpec.php</code> will look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\ContainerException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(ContainerException::class);
    }
}
</code></pre>
<p>This is not sufficient for our needs. Our exception must also implement two interfaces:</p>
<ul>
<li><code>Throwable</code></li>
<li><code>Psr\Container\ContainerExceptionInterface</code></li>
</ul>
<p>The former can be resolved by inheriting from <code>Exception</code>, while the latter doesn’t require any additional methods. Let’s expand our spec to check for these:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie\Exceptions;

use Matthewbdaly\Ernie\Exceptions\ContainerException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(ContainerException::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerExceptionInterface&#39;);
    }

    function it_implements_throwable()
    {
        $this-&gt;shouldImplement(&#39;Throwable&#39;);
    }
}
</code></pre>
<p>Now run the spec and PHPSpec will generate the boilerplate exception for you:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Exceptions/ContainerException                                
  11  - it is initializable
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

Matthewbdaly/Ernie/Exceptions/ContainerException                                  
  16  - it implements interface
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  21  - it implements throwable
      class Matthewbdaly\Ernie\Exceptions\ContainerException does not exist.

                                      100%                                       3
1 specs
3 examples (3 broken)
23ms


  Do you want me to create `Matthewbdaly\Ernie\Exceptions\ContainerException`   
  for you?                                                                      
                                                                         [Y/n]
y
Class Matthewbdaly\Ernie\Exceptions\ContainerException created in /home/matthew/Projects/ernie-clone/src/Exceptions/ContainerException.php.

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  16  - it implements interface
      expected an instance of Psr\Container\ContainerExceptionInterface, but got
      [obj:Matthewbdaly\Ernie\Exceptions\ContainerException].

Matthewbdaly/Ernie/Exceptions/ContainerException                                
  21  - it implements throwable
      expected an instance of Throwable, but got
      [obj:Matthewbdaly\Ernie\Exceptions\ContainerException].

            33%                                     66%                          3
1 specs
3 examples (1 passed, 2 failed)
36ms
</code></pre>
<p>It’s failing, but we expect that. We need to update our exception to extend the base PHP exception, and implement <code>Psr\Container\ContainerExceptionInterface</code>. Let’s do that now:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie\Exceptions;

use Psr\Container\ContainerExceptionInterface;
use Exception;

class ContainerException extends Exception implements ContainerExceptionInterface
{
}
</code></pre>
<p>Let’s re-run the spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
                                      100%                                       3
1 specs
3 examples (3 passed)
24ms
</code></pre>
<p>The second exception we need to implement is <code>Psr\Container\NotFoundExceptionInterface</code> and it’s a similar story. Run the following command to create the spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Exceptions/NotFoundException
</code></pre>
<p>Again, the spec needs to be amended to verify that it’s a throwable and implements the required interface:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie\Exceptions;

use Matthewbdaly\Ernie\Exceptions\NotFoundException;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class NotFoundExceptionSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(NotFoundException::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\NotFoundExceptionInterface&#39;);
    }

    function it_implements_throwable()
    {
        $this-&gt;shouldImplement(&#39;Throwable&#39;);
    }
}
</code></pre>
<p>For the sake of brevity I’ve left out the output, but if you run <code>vendor/bin/phpspec run</code> you’ll see it fail due to the fact that the generated class doesn’t implement the required interfaces. Amend <code>src/Exceptions/NotFoundException</code> as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie\Exceptions;

use Psr\Container\NotFoundExceptionInterface;
use Exception;

class NotFoundException extends Exception implements NotFoundExceptionInterface
{
}
</code></pre>
<p>Running <code>vendor/bin/phpspec run</code> should now see it pass. Now let’s move on to the container class…</p>
<h1 id="building-the-container">Building the container</h1>
<p>Run the following command to create the container spec:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec desc Matthewbdaly/Ernie/Container
</code></pre>
<p>However, the default generated spec isn’t sufficient. We need to check it implements the required interface:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\Container;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class ContainerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Container::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerInterface&#39;);
    }
}
</code></pre>
<p>Now, if we run PHPSpec, we’ll generate our class:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  11  - it is initializable
      class Matthewbdaly\Ernie\Container does not exist.

Matthewbdaly/Ernie/Container                                                      
  16  - it implements interface
      class Matthewbdaly\Ernie\Container does not exist.

                            75%                                     25%          8
3 specs
8 examples (6 passed, 2 broken)
404ms


  Do you want me to create `Matthewbdaly\Ernie\Container` for you?              
                                                                         [Y/n] 
y
Class Matthewbdaly\Ernie\Container created in /home/matthew/Projects/ernie-clone/src/Container.php.

Matthewbdaly/Ernie/Container                                                      
  16  - it implements interface
      expected an instance of Psr\Container\ContainerInterface, but got
      [obj:Matthewbdaly\Ernie\Container].

                                 87%                                     12%     8
3 specs
8 examples (7 passed, 1 failed)
40ms
</code></pre>
<p>Now, as we can see, this class doesn’t implement the interface. Let’s remedy that:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;

class Container implements ContainerInterface
{
}
</code></pre>
<p>Now, if we run the tests, they should fail because the class needs to add the required methods:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
✘ Fatal error happened while executing the following 
    it is initializable 
    Class Matthewbdaly\Ernie\Container contains 2 abstract methods and must therefore be declared abstract or implement the remaining methods (Psr\Container\ContainerInterface::get, Psr\Container\ContainerInterface::has) in /home/matthew/Projects/ernie-clone/src/Container.php on line 7 
</code></pre>
<p>If you use an editor or IDE that allows you to implement an interface automatically, you can run it to add the required methods. I use PHPActor with Neovim, and used the option in the Transform menu to implement the contract:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;

class Container implements ContainerInterface
{
    /**
     * {@inheritDoc}
     */
    public function get($id)
    {
    }

    /**
     * {@inheritDoc}
     */
    public function has($id)
    {
    }
}
</code></pre>
<p>Running <code>vendor/bin/phpspec run</code> should now make the spec pass, but the methods don’t actually do anything yet. If you read the spec for PSR-11, you’ll see that <code>has()</code> returns a boolean to indicate whether a class can be instantiated or not, while <code>get()</code> will either return an instance of the specified class, or throw an exception. We will add specs that check that built-in classes can be returned by both, and unknown classes display the expected behaviour. We’ll do both at once, because in both cases, the functionality to actually resolve the required class will be deferred to a single resolver method, and these methods will not do all that much as a result:</p>
<pre><code class="lang-php">    function it_has_simple_classes()
    {
        $this-&gt;has(&#39;DateTime&#39;)-&gt;shouldReturn(true);
    }

    function it_does_not_have_unknown_classes()
    {
        $this-&gt;has(&#39;UnknownClass&#39;)-&gt;shouldReturn(false);
    }

    function it_can_get_simple_classes()
    {
        $this-&gt;get(&#39;DateTime&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_returns_not_found_exception_if_class_cannot_be_found()
    {
        $this-&gt;shouldThrow(&#39;Matthewbdaly\Ernie\Exceptions\NotFoundException&#39;)
            -&gt;duringGet(&#39;UnknownClass&#39;);
    }
</code></pre>
<p>These tests verify that:</p>
<ul>
<li><code>has()</code> returns <code>true</code> when called with the always-present <code>DateTime</code> class</li>
<li><code>has()</code> returns <code>false</code> for the undefined <code>UnknownClass</code></li>
<li><code>get()</code> successfully instantiates an instance of <code>DateTime</code></li>
<li><code>get()</code> throws an exception if you try to instantiate the undefined <code>UnknownClass</code></li>
</ul>
<p>Running the specs will raise errors:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                      
  21  - it has simple classes
      expected true, but got null.

Matthewbdaly/Ernie/Container                                                    
  26  - it does not have unknown classes
      expected false, but got null.

Matthewbdaly/Ernie/Container                                                    
  31  - it can get simple classes
      expected an instance of DateTime, but got null.

Matthewbdaly/Ernie/Container                                                    
  36  - it returns not found exception if class cannot be found
      expected to get exception / throwable, none got.

                         66%                                     33%             12
3 specs
12 examples (8 passed, 4 failed)
98ms
</code></pre>
<p>Let’s populate these empty methods:</p>
<pre><code class="lang-php">&lt;?php

namespace Matthewbdaly\Ernie;

use Psr\Container\ContainerInterface;
use Matthewbdaly\Ernie\Exceptions\NotFoundException;
use ReflectionClass;
use ReflectionException;

class Container implements ContainerInterface
{
    /**
     * {@inheritDoc}
     */
    public function get($id)
    {
        $item = $this-&gt;resolve($id);
        return $this-&gt;getInstance($item);
    }

    /**
     * {@inheritDoc}
     */
    public function has($id)
    {
        try {
            $item = $this-&gt;resolve($id);
        } catch (NotFoundException $e) {
            return false;
        }
        return $item-&gt;isInstantiable();
    }

    private function resolve($id)
    {
        try {
            return (new ReflectionClass($id));
        } catch (ReflectionException $e) {
            throw new NotFoundException($e-&gt;getMessage(), $e-&gt;getCode(), $e);
        }
    }

    private function getInstance(ReflectionClass $item)
    {
        return $item-&gt;newInstance();
    }
}
</code></pre>
<p>As you can see, both the <code>has()</code> and <code>get()</code> methods need to resolve a string ID to an actual class, so that common functionality is stored in a private method called <code>resolve()</code>. This uses the <a href="http://php.net/manual/en/book.reflection.php">PHP Reflection API</a> to resolve the class name to an actual class. We pass the string ID into a constructor of <code>ReflectionClass</code>, and the <code>resolve()</code> method will either return the created instance of <code>ReflectionClass</code>, or throw an exception.</p>
<p>For the uninitiated, <code>ReflectionClass</code> allows you to reflect on the object whose fully qualified class name is passed to the constructor, in order to interact with that class programmatically. The methods we will use include:</p>
<ul>
<li><code>isInstantiable</code> - confirms whether or not the class can be instantiated (for instance, traits and abstract classes can’t)</li>
<li><code>newInstance</code> - creates a new instance of the item in question, as long as it has no dependencies in the constructor</li>
<li><code>newInstanceArgs</code> - creates a new instance, using the arguments passed in</li>
<li><code>getConstructor</code> - allows you to get information about the constructor</li>
</ul>
<p>The Reflection API is pretty comprehensive, and I would recommend reading the documentation linked to above if you want to know more.</p>
<p>For the <code>has()</code> method, we check that the resolved class is instantiable, and return the result of that. For the <code>get()</code> method, we use <code>getInstance()</code> to instantiate the item and return that, throwing an exception if that fails.</p>
<h1 id="registering-objects">Registering objects</h1>
<p>In its current state, the container doesn’t allow you to set an item. To be useful, we need to be able to specify that an interface or string should be resolved to a given class, or for cases where we need to pass in scalar parameters, such as a database object, to specify how a concrete instance of that class should be instantiated. To that end, we’ll create a new <code>set()</code> public method that will allow a dependency to be set. Here are the revised specs including this:</p>
<pre><code class="lang-php">&lt;?php

namespace spec\Matthewbdaly\Ernie;

use Matthewbdaly\Ernie\Container;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;
use DateTime;

class ContainerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Container::class);
    }

    function it_implements_interface()
    {
        $this-&gt;shouldImplement(&#39;Psr\Container\ContainerInterface&#39;);
    }

    function it_has_simple_classes()
    {
        $this-&gt;has(&#39;DateTime&#39;)-&gt;shouldReturn(true);
    }

    function it_does_not_have_unknown_classes()
    {
        $this-&gt;has(&#39;UnknownClass&#39;)-&gt;shouldReturn(false);
    }

    function it_can_get_simple_classes()
    {
        $this-&gt;get(&#39;DateTime&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_returns_not_found_exception_if_class_cannot_be_found()
    {
        $this-&gt;shouldThrow(&#39;Matthewbdaly\Ernie\Exceptions\NotFoundException&#39;)
            -&gt;duringGet(&#39;UnknownClass&#39;);
    }

    function it_can_register_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve)-&gt;shouldReturn($this);
    }

    function it_can_resolve_registered_dependencies()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }

    function it_can_resolve_registered_invokable()
    {
        $toResolve = new class {
            public function __invoke() {
                return new DateTime;
            }
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_can_resolve_registered_callable()
    {
        $toResolve = function () {
            return new DateTime;
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf(&#39;DateTime&#39;);
    }

    function it_can_resolve_if_registered_dependencies_instantiable()
    {
        $toResolve = new class {
        };
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;has(&#39;Foo\Bar&#39;)-&gt;shouldReturn(true);
    }
}
</code></pre>
<p>This needs to handle quite a few scenarios, so there are several tests we have in place. These verify that:</p>
<ul>
<li>The <code>set()</code> method returns an instance of the container class, to allow for method chaining</li>
<li>When a dependency is set, calling <code>get()</code> returns an instance of that class</li>
<li>When a concrete class that has the <code>__invoke()</code> magic method set is passed to <code>set()</code>, it is invoked and the response returned.</li>
<li>When the value passed through is a callback, the callback is resolved and the response returned</li>
<li>When a dependency is set, calling <code>has()</code> for it returns the right value</li>
</ul>
<p>Note that we use anonymous classes for testing - I’ve written about these before and they’re very useful in this context because they allow us to create a simple class inline for testing purposes.</p>
<p>Running the specs should result in us being prompted to generate the <code>set()</code> method, and failing afterwards:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  42  - it can register dependencies
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  49  - it can resolve registered dependencies
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  57  - it can resolve registered invokable
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  68  - it can resolve registered callable
      method Matthewbdaly\Ernie\Container::set not found.

Matthewbdaly/Ernie/Container                                                    
  77  - it can resolve if registered dependencies instantiable
      method Matthewbdaly\Ernie\Container::set not found.

                          70%                                     29%            17
3 specs
17 examples (12 passed, 5 broken)
316ms

  Do you want me to create `Matthewbdaly\Ernie\Container::set()` for you?       
                                                                         [Y/n]
y
  Method Matthewbdaly\Ernie\Container::set() has been created.

Matthewbdaly/Ernie/Container                                                    
  42  - it can register dependencies
      expected [obj:Matthewbdaly\Ernie\Container], but got null.

Matthewbdaly/Ernie/Container                                                    
  49  - it can resolve registered dependencies
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  57  - it can resolve registered invokable
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  68  - it can resolve registered callable
      exception [exc:Matthewbdaly\Ernie\Exceptions\NotFoundException(&quot;Class Foo\Bar does not exist&quot;)] has been thrown.

Matthewbdaly/Ernie/Container                                                    
  77  - it can resolve if registered dependencies instantiable
      expected true, but got false.

                          70%                              11%        17%        17
3 specs
17 examples (12 passed, 2 failed, 3 broken)
90ms
</code></pre>
<p>First, we need to set up the <code>set()</code> method properly, and define a property to contain the stored services:</p>
<pre><code class="lang-php">    private $services = [];

    public function set(string $key, $value)
    {
        $this-&gt;services[$key] = $value;
        return $this;
    }
</code></pre>
<p>This fixes the first spec, but the resolver needs to be amended to handle cases where the ID is set manually:</p>
<pre><code class="lang-php">    private function resolve($id)
    {
        try {
            $name = $id;
            if (isset($this-&gt;services[$id])) {
                $name = $this-&gt;services[$id];
                if (is_callable($name)) {
                    return $name();
                }
            }
            return (new ReflectionClass($name));
        } catch (ReflectionException $e) {
            throw new NotFoundException($e-&gt;getMessage(), $e-&gt;getCode(), $e);
        }
    }
</code></pre>
<p>This will allow us to resolve classes set with <code>set()</code>. However, we also want to resolve any callables, such as callbacks or classes that implement the <code>__invoke()</code> magic method, which means that sometimes <code>resolve()</code> will return the result of the callable instead of an instance of <code>ReflectionClass</code>. Under those circumstances we should return the item directly:</p>
<pre><code class="lang-php">    public function get($id)
    {
        $item = $this-&gt;resolve($id);
        if (!($item instanceof ReflectionClass)) {
            return $item;
        }
        return $this-&gt;getInstance($item);
    }
</code></pre>
<p>Note that because the <code>__invoke()</code> method is automatically called in any concrete class specified in the second argument to <code>set()</code>, it’s only possible to resolve classes that define an <code>__invoke()</code> method if they are passed in as string representations. The following PsySh session should make it clear what this means:</p>
<pre><code class="lang-php">&gt;&gt;&gt; use Matthewbdaly\Ernie\Container;
&gt;&gt;&gt; $c = new Container;
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; class TestClass { public function __invoke() { return &quot;Called&quot;; }}
&gt;&gt;&gt; $c-&gt;get(&#39;TestClass&#39;);
=&gt; TestClass {#2319}
&gt;&gt;&gt; $c-&gt;set(&#39;Foo\Bar&#39;, &#39;TestClass&#39;);
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; $c-&gt;get(&#39;Foo\Bar&#39;);
=&gt; TestClass {#2309}
&gt;&gt;&gt; $c-&gt;set(&#39;Foo\Bar&#39;, new TestClass);
=&gt; Matthewbdaly\Ernie\Container {#2307}
&gt;&gt;&gt; $c-&gt;get(&#39;Foo\Bar&#39;);
=&gt; &quot;Called&quot;
</code></pre>
<p>As you can see, if we pass in the fully qualified class name of a class that defines an <code>__invoke()</code> method, it can be resolved as expected. However, if we pass a concrete instance of it to <code>set()</code>, it will be called and will return the response from that. This may not be the behaviour you want for your own container.</p>
<p>According to <a href="https://github.com/thephpleague/container/issues/113">this issue on the PHP League’s Container implementation</a>, it was also an issue for them, so seeing as this is just a toy example I’m not going to lose any sleep over it. Just something to be aware of if you use this post as the basis for writing your own container.</p>
<h1 id="resolving-dependencies">Resolving dependencies</h1>
<p>One thing is missing from our container. Right now it should be able to instantiate pretty much any class that has no dependencies, but these are quite firmly in the minority. To be useful, a container should be able to resolve all of the dependencies for a class automatically.</p>
<p>Let’s add a spec for that:</p>
<pre><code class="lang-php">    function it_can_resolve_dependencies()
    {
        $toResolve = get_class(new class(new DateTime) {
            public $datetime;
            public function __construct(DateTime $datetime)
            {
                $this-&gt;datetime = $datetime;
            }
        });
        $this-&gt;set(&#39;Foo\Bar&#39;, $toResolve);
        $this-&gt;get(&#39;Foo\Bar&#39;)-&gt;shouldReturnAnInstanceOf($toResolve);
    }
</code></pre>
<p>Here we have to be a bit crafty. Anonymous classes are defined and instantiated at the same time, so we can’t pass it in as an anonymous class in the test. Instead, we call the anonymous class and get its name, then set that as the second argument to <code>set()</code>. Then we can verify that the returned object is an instance of the same class.</p>
<p>Running this throws an error:</p>
<pre><code class="lang-php">$ vendor/bin/phpspec run
Matthewbdaly/Ernie/Container                                                    
  86  - it can resolve dependencies
      exception [err:ArgumentCountError(&quot;Too few arguments to function class@anonymous::__construct(), 0 passed and exactly 1 expected&quot;)] has been thrown.

                                    94%                                          18
3 specs
18 examples (17 passed, 1 broken)
60ms
</code></pre>
<p>This is expected. Our test class accepts an instance of <code>DateTime</code> in the constructor as a mandatory dependency, so instantiating it fails. We need to update the <code>getInstance()</code> method so that it can handle pulling in any dependencies:</p>
<pre><code class="lang-php">    private function getInstance(ReflectionClass $item)
    {
        $constructor = $item-&gt;getConstructor();
        if (is_null($constructor) || $constructor-&gt;getNumberOfRequiredParameters() == 0) {
            return $item-&gt;newInstance();
        }
        $params = [];
        foreach ($constructor-&gt;getParameters() as $param) {
            if ($type = $param-&gt;getType()) {
                $params[] = $this-&gt;get($type-&gt;getName());
            }
        }
        return $item-&gt;newInstanceArgs($params);
    }
</code></pre>
<p>Here, we use the Reflection API to get the constructor. If there’s no constructor, or it has no required parameters, we just return a new instance of the reflected class as before.</p>
<p>Otherwise, we loop through the required parameters. For each parameter, we get the string representation of the type specified for that parameter, and retrieve an instance of it from the container. Afterwards, we use those parameters to instantiate the object.</p>
<p>Let’s run the specs again:</p>
<pre><code class="lang-bash">$ vendor/bin/phpspec run
                                      100%                                       18
3 specs
18 examples (18 passed)
51ms
</code></pre>
<p>Our container is now complete. We can:</p>
<ul>
<li>Resolve simple classes out of the box</li>
<li>Set arbitrary keys to resolve to particular classes, or the result of callables, so as to enable mapping interfaces to concrete implementations, or resolve classes that require specific non-object parameters, such as PDO</li>
<li>Resolve complex classes with multiple dependencies</li>
</ul>
<p>Not too bad for just over 100 lines of PHP…</p>
<h1 id="final-thoughts">Final thoughts</h1>
<p>As I’ve said, this is a pretty minimal example of a dependency injection container, and I wouldn’t advise using this in production when there are so many existing, mature solutions available. I have no idea how the performance would stack up against existing solutions, or whether there are any issues with it, and quite frankly that’s besides the point - this is intended as a learning exercise to understand how dependency injection containers in general work, not as an actual useful piece of code for production. If you want an off-the-shelf container, I’d point you in the direction of <code>league/container</code>, which has served me well.</p>
<p>You can find the code for this tutorial on <a href="https://github.com/matthewbdaly/ernie">GitHub</a>, so if you have any problems, you should take a look there to see where the problem lies. Of course, if you go on to create your own kick-ass container based on this, do let me know!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding query objects]]></title>
            <link>https://matthewdaly.co.uk/blog/2019/01/27/understanding-query-objects/</link>
            <guid>https://matthewdaly.co.uk/blog/2019/01/27/understanding-query-objects/</guid>
            <pubDate>Sun, 27 Jan 2019 23:10:39 GMT</pubDate>
            <description><![CDATA[<p>The project I’ve been maintaining for the last year has inherited a rather dubious database structure that would currently be very difficult to refactor, which also makes many queries more convoluted than they should be. At present, I’m involved in building a whole new home page, which has necessitated adding some new queries. Since some of these involve carrying out unions between several similar tables (that should have been one table, grr…), they can involve some quite large chunks for each query.</p>
<p>As a result, it’s made sense to break those queries down further. Since Zend 1 doesn’t have anything analogous to scopes in Eloquent, I don’t really have an easy way to break these queries up in the models (and I’m trying to get the query logic out of the models at present anyway), so I opted to make them into query objects instead, which is a pattern I hadn’t used before (but probably should have).</p>
<p>A query object is pretty much what it says on the tin - it’s a PHP object that executes a single, very specific query. This may seem like overkill, but it’s only really useful for the most complex and convoluted of queries. It can accept parameters, as you’d expect, and some parts of the query may be optional based on that, but fundamentally it should build and run only one single query.</p>
<p>In this post I’ll go through how you might create one, how it relates to the repository pattern, and when to create one.</p>
<h1 id="creating-a-query-object-class">Creating a query object class</h1>
<p>I’m a big fan of the <code>__invoke()</code> magic method in PHP. For the uninitiated, it lets you instantiate the class, and then use it in the same way you would a function, making it very useful for callbacks. This also brings some other advantages:</p>
<ul>
<li>Unlike with a function, you can create private methods to do other parts of the work, making it easier to understand the main method.</li>
<li>It can have a constructor, and can therefore both accept dependencies via the constructor, and be instantiated via dependency injection, simplifying setup and testing when compared to using a callback.</li>
<li>Since <code>__invoke()</code> is an innate part of the PHP language, it makes more sense for classes that have a single responsibility to use that method name to do that, rather than picking something like <code>handle()</code> or <code>run()</code>.</li>
</ul>
<p>As a result, my query objects generally use the <code>__invoke()</code> method to trigger the query.</p>
<p>Since Zend 1 is no longer supported, I won’t bother displaying how I’d write the query in that specific context. I have yet to use this pattern with Laravel, but if I did, it would look something like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Queries;

use Illuminate\Database\DatabaseManager;

final class DashboardItems
{
    protected $db;

    public function __construct(DatabaseManager $db)
    {
        $this-&gt;db = $db;
    }

    public function __invoke(int $days = 7)
    {
        return $this-&gt;fooTable()
            -&gt;union($this-&gt;barTable())
            -&gt;whereRaw(&#39;start_date &gt;= (NOW() - INTERVAL ? DAY)&#39;, [$days]);
            -&gt;get();
    }

    private function fooTable()
    {
        return $this-&gt;db-&gt;table(&#39;foo&#39;)
            -&gt;where(&#39;type&#39;, &#39;=&#39;, &#39;fooType&#39;);
    }

    private function barTable(int $days)
    {
        return $this-&gt;db-&gt;table(&#39;bar&#39;)
            -&gt;where(&#39;type&#39;, &#39;=&#39;, &#39;barType&#39;);
    }
}
</code></pre>
<p>Note that we break each one of the tables we want to perform a <code>UNION</code> on into a private method. This is probably the biggest advantage of query objects - it lets you break particularly unwieldy queries up into logical steps, making them more readable. You could do this by adding private methods on a repository class too, but I’d be reluctant to add private methods to a repository that were only used in one query - to my mind, a query object is a better home for that.</p>
<h1 id="what-about-repositories-">What about repositories?</h1>
<p>I regularly use the repository pattern in my code bases, whether that’s for Laravel projects or the current Zend 1-based legacy project. It’s an ongoing effort to refactor it so that all the queries are called from repository classes, leaving the models to act as containers for the data. So how do query objects fit in here?</p>
<p>It’s important to note that while a repository represents all queries relating to a table, a query object represents only a single query, and so the repository should still be the place where the query is called from. However, the repository should just defer the actual querying to the query object. The relevant parts of the application structure for my current application look a bit like this:</p>
<pre><code class="lang-bash">└── app
    ├── Queries
    │   └── DashboardItems.php
    └── Repositories
        └── DashboardRepository.php
</code></pre>
<p>And the repository might call the query object as follows:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Repositories;

use App\Queries\DashboardItems;

final class DashboardRepository
{
    public static function dashboardItems(int $days = 7)
    {
        $query = new DashboardItems;
        return $query($days);
    }
}
</code></pre>
<p>At present my repositories all use static methods as I’m still in the process of migrating the queries over to the repository classes. That also means I can’t easily use dependency injection. For a Laravel application, a similar call might look like this:</p>
<pre><code class="lang-php">&lt;?php

namespace App\Repositories;

use App\Queries\DashboardItems;

final class DashboardRepository
{
    protected $dashboardQuery;

    public function __construct(DashboardItems $dashboardQuery)
    {
        $this-&gt;dashboardQuery = $dashboardQuery;
    }

    public function dashboardItems(int $days = 7)
    {
        return $this-&gt;dashboardQuery($days);
    }
}
</code></pre>
<p>The only real difference is that we can instantiate the query object out of the container, simplifying setup.</p>
<h1 id="when-to-use-query-objects">When to use query objects</h1>
<p>I think it probably goes without saying, but it should be a rare query that actually needs to be implemented as a query object, especially if you’re using an ORM like Eloquent that provides features like scopes, and as yet I only have two using this pattern, as well as two others that were implemented as “reporter” classes, but could be query objects instead. So far, my experience has been that the sort of queries that are large enough to be worth considering include:</p>
<ul>
<li>Queries that generate reports, particularly if they have various options</li>
<li>Queries that use unions, as in the above example, since it makes sense to use a private method to fetch each table</li>
<li>Queries with multiple complex joins</li>
</ul>
<p>Smaller queries will typically fit happily inside a single method in your repository classes. If that’s the case, then they can live there without trouble. However, if you have a query that’s becoming too big to fit inside a single method, rather than adding private methods to your repository class, it may make more sense to refactor it out into a query object in its own right. You can still call it via the same method on your repository class, but the repository can just defer to the query object. As I usually use decorators to cache the responses from my repository classes anyway, then it makes sense to stick with this approach to keep caching consistent too.</p>
<p>Query objects only really offer any value for particularly large queries. However, they can be invaluable in those circumstances. By enabling you to break those big queries up into a series of steps, they help make them easier to understand.</p>
]]></description>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Matthew Daly&apos;s Blog</title>
        <link>https://matthewdaly.co.uk</link>
        <description>I&apos;m a web developer in Norfolk. This is my blog...</description>
        <lastBuildDate>Fri, 20 Oct 2017 22:01:01 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Matthew Daly 2017</copyright>
        <item>
            <title><![CDATA[Using phpiredis with Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/10/20/using-phpiredis-with-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/10/20/using-phpiredis-with-laravel/</guid>
            <pubDate>Fri, 20 Oct 2017 21:55:26 GMT</pubDate>
            <description><![CDATA[<p>Laravel has support out of the box for using Redis. However, by default it uses a Redis client written in PHP, which will always be a little slower than one written in C. If you’re making heavy use of Redis, it may be worth using the <a href="https://github.com/nrk/phpiredis">phpiredis</a> extension to squeeze a little more performance out of it.</p>
<p>I’m using PHP 7.0 on Ubuntu Zesty and I installed the dependencies with the following command:</p>
<pre><code class="hljs lang-bash singleline">$ sudo apt-get install libhiredis-dev php-redis php7.0-dev</code></pre>
<p>Then I installed phpiredis as follows:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>git <span class="hljs-built_in">clone</span> https://github.com/nrk/phpiredis.git &amp;&amp; \</td><tr><td class="linenos" data-pseudo-content="2"></td><td>       <span class="hljs-built_in">cd</span> phpiredis &amp;&amp; \</td><tr><td class="linenos" data-pseudo-content="3"></td><td>       phpize &amp;&amp; \</td><tr><td class="linenos" data-pseudo-content="4"></td><td>       ./configure --enable-phpiredis &amp;&amp; \</td><tr><td class="linenos" data-pseudo-content="5"></td><td>       make &amp;&amp; \</td><tr><td class="linenos" data-pseudo-content="6"></td><td>       sudo make install</td></table></code></pre>
<p>Finally, I configured Redis to use phpiredis in the <code>redis</code> section of <code>config/database.php</code> for a Laravel app:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-string">'redis'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'cluster'</span> =&gt; <span class="hljs-keyword">false</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'default'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'host'</span>     =&gt; env(<span class="hljs-string">'REDIS_HOST'</span>, <span class="hljs-string">'localhost'</span>),</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'password'</span> =&gt; env(<span class="hljs-string">'REDIS_PASSWORD'</span>, <span class="hljs-keyword">null</span>),</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'port'</span>     =&gt; env(<span class="hljs-string">'REDIS_PORT'</span>, <span class="hljs-number">6379</span>),</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'database'</span> =&gt; <span class="hljs-number">0</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-string">'options'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                <span class="hljs-string">'connections'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                    <span class="hljs-string">'tcp'</span> =&gt; <span class="hljs-string">'Predis\Connection\PhpiredisStreamConnection'</span>, <span class="hljs-comment">// PHP streams</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                    <span class="hljs-string">'unix'</span> =&gt; <span class="hljs-string">'Predis\Connection\PhpiredisSocketConnection'</span>, <span class="hljs-comment">// ext-socket</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                ],</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            ]</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    ],</td></table></code></pre>
<p>Now, I’m going to be honest - in a casual comparison I couldn’t see much difference in terms of speed. I would probably only bother with setting this up on a site where high Redis performance was absolutely necessary. If you just want a quicker cache response it might make more sense to put Varnish in front of the site instead. However, in cases where Redis gets used heavily, it’s probably worth doing.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Simple fuzzy search with Laravel and PostgreSQL]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/10/03/simple-fuzzy-search-with-laravel-and-postgresql/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/10/03/simple-fuzzy-search-with-laravel-and-postgresql/</guid>
            <pubDate>Tue, 03 Oct 2017 22:56:11 GMT</pubDate>
            <description><![CDATA[<p>When implementing fuzzy search, many developers reach straight for specialised tools like Elasticsearch. However, for simple implementations, this is often overkill. PostgreSQL, my relational database of choice, can natively handle fuzzy search quite easily if you know how. Here’s how you might use this with Laravel.</p>
<p>Suppose we have the following migration to create a <code>locations</code> table, storing towns, cities and villages:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateLocations</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Create locations table</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'locations'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>)-&gt;unsigned();</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">// Drop locations table</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        Schema::drop(<span class="hljs-string">'locations'</span>);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>}</td></table></code></pre>
<p>The key to this implementation of fuzzy search is <em>trigrams</em>. A trigram is a group of three consecutive characters taken from a string. Using the <code>pg_trgm</code> module, which comes with PostgreSQL, we can break a string into as many trigrams as possible, and then return the strings with the most matching trigrams.</p>
<p>We can ensure that <code>pg_trgm</code> is set up on the database by creating a migration:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddTrgmExtension</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::statement(<span class="hljs-string">'CREATE EXTENSION IF NOT EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        DB::statement(<span class="hljs-string">'DROP EXTENSION IF EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>Make sure you run the migration as well. Once that is done, we can make a raw fuzzy query against the <code>name</code> field as follows:</p>
<pre><code class="hljs lang-sql singleline"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> locations <span class="hljs-keyword">WHERE</span> <span class="hljs-string">'burgh'</span> % <span class="hljs-keyword">name</span>;</code></pre>
<p>Translating that to work with the Eloquent ORM, we can perform fuzzy queries against the <code>name</code> field as follows:</p>
<pre><code class="hljs lang-php singleline">$location = Location::whereRaw(<span class="hljs-string">"'burgh' % name"</span>)-&gt;get();</code></pre>
<p>This query might match both <code>Aldeburgh</code> and <code>Edinburgh</code>. It’s also able to handle slight misspellings, as in this example:</p>
<pre><code class="hljs lang-php singleline">$location = Location::whereRaw(<span class="hljs-string">"'hendrad' % name"</span>)-&gt;get();</code></pre>
<p>This query will match <code>East Hendred</code> or <code>West Hendred</code> successfully. As you can see, we can match strings at any point in the name string, and handle slight mis-spellings without any problems.</p>
<p>In practice, rather than using <code>whereRaw()</code> every time, you’ll probably want to create a local scope that accepts the name you want to match against.</p>
<h2 id="improving-performance-with-an-index">Improving performance with an index</h2>
<p>The performance of these queries isn’t that great out of the box. We can improve them by creating an index:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddTrgmExtension</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::statement(<span class="hljs-string">'CREATE EXTENSION IF NOT EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        DB::statement(<span class="hljs-string">'CREATE INDEX locations_name_trigram ON locations USING gist(name gist_trgm_ops);'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        DB::statement(<span class="hljs-string">'DROP INDEX IF EXISTS locations_name_trigram'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        DB::statement(<span class="hljs-string">'DROP EXTENSION IF EXISTS pg_trgm'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}</td></table></code></pre>
<p>Adding an index should produce a noticeable improvement in the response time.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>PostgreSQL’s <code>pg_trgm</code> module is a fairly straightforward way of implementing fuzzy search. It’s not much more involved than a <code>LIKE</code> or <code>ILIKE</code> clause in your query, and for many use cases, it’s more than sufficient. If you don’t have a huge number of records, it’s probably a more appropriate choice than something like Elasticsearch, and has the advantage of a simpler stack. However, if you have a larger dataset, you may be better off with a dedicated search solution. As always, if you’re unsure it’s a good idea to try both and see what works best for that particular use case.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[A generic PHP SMS library]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/09/25/a-generic-php-sms-library/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/09/25/a-generic-php-sms-library/</guid>
            <pubDate>Mon, 25 Sep 2017 21:18:18 GMT</pubDate>
            <description><![CDATA[<p>This weekend I published <a href="https://github.com/matthewbdaly/sms-client">sms-client</a>, a generic PHP library for sending SMS notifications. It’s intended to offer a consistent interface when sending SMS notifications by using swappable drivers. That way, if your SMS service provider suddenly goes out of business or bumps up their prices, it’s easy to switch to a new one.</p>
<p>Out of the box it comes with drivers for the following services:</p>
<ul>
<li>Nexmo</li>
<li>ClockworkSMS</li>
</ul>
<p>In addition, it provides the following test drivers:</p>
<ul>
<li>Null</li>
<li>Log</li>
<li>RequestBin</li>
</ul>
<p>Here’s an example of how you might use it with the ClockworkSMS driver:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Client</span> <span class="hljs-title">as</span> <span class="hljs-title">GuzzleClient</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Psr7</span>\<span class="hljs-title">Response</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">SMS</span>\<span class="hljs-title">Drivers</span>\<span class="hljs-title">Clockwork</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Matthewbdaly</span>\<span class="hljs-title">SMS</span>\<span class="hljs-title">Client</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>$guzzle = <span class="hljs-keyword">new</span> GuzzleClient;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>$resp = <span class="hljs-keyword">new</span> Response;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>$driver = <span class="hljs-keyword">new</span> Clockwork($guzzle, $resp, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-string">'api_key'</span> =&gt; <span class="hljs-string">'MY_CLOCKWORK_API_KEY'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>]);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>$client = <span class="hljs-keyword">new</span> Client($driver);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>$msg = [</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-string">'to'</span>      =&gt; <span class="hljs-string">'+44 01234 567890'</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-string">'content'</span> =&gt; <span class="hljs-string">'Just testing'</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>];</td><tr><td class="linenos" data-pseudo-content="16"></td><td>$client-&gt;send($msg);</td></table></code></pre>
<p>If you want to roll your own driver for it, it should be easy - just create a class that implements the <code>Matthewbdaly\SMS\Contracts\Driver</code> interface. Most of the existing drivers work using Guzzle to send HTTP requests to an API, but you don’t necessarily have to do that - for instance, you could create a driver for a mail-to-SMS gateway by using Swiftmailer or the PHP mail class. If you create a driver for it, please feel free to submit a pull request so I can add it to the repository.</p>
<p>For Laravel or Lumen users, there’s <a href="https://github.com/matthewbdaly/laravel-sms">an integration package</a> that should make it easier to use. For users of other frameworks, it should still be fairly straightforward to integrate.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Installing Nginx Unit on Ubuntu]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/09/08/installing-nginx-unit-on-ubuntu/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/09/08/installing-nginx-unit-on-ubuntu/</guid>
            <pubDate>Fri, 08 Sep 2017 21:05:04 GMT</pubDate>
            <description><![CDATA[<p>Recently Nginx announced the release of the first beta of <a href="https://www.nginx.com/products/nginx-unit/">Unit</a>, an application server that supports Python, PHP and Go, with support coming for Java, Node.js and Ruby.</p>
<p>The really interesting part is that not only does it support more than one language, but Unit can be configured by making HTTP requests, rather than by editing config files. This makes it potentially very interesting to web developers like myself who have worked in multiple languages - I could use it to serve a Python or PHP web app, simply by making different requests during the setup process. I can see this being a boon for SaaS providers - you could pick up the language from a file, much like the <code>runtime.txt</code> used by Heroku, and set up the application on the fly.</p>
<p>It’s currently in public beta, and there are packages for Ubuntu, so I decided to try it out. I’ve created the Ansible role below to set up Unit on an Ubuntu 16.04 server or VM:</p>
<pre><code class="hljs lang-yml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>-<span class="ruby">--</td><tr><td class="linenos" data-pseudo-content="2"></td><td></span>-<span class="ruby"> <span class="hljs-symbol">name:</span> Install keys</td><tr><td class="linenos" data-pseudo-content="3"></td><td></span>  apt_key: url=http://nginx.org/keys/nginx_signing.key state=present</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>-<span class="ruby"> <span class="hljs-symbol">name:</span> Setup main repo</td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>  apt_repository: repo='deb http://nginx.org/packages/mainline/ubuntu/ xenial nginx' state=present</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>-<span class="ruby"> <span class="hljs-symbol">name:</span> Setup source rep</td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>  apt_repository: repo='deb-src http://nginx.org/packages/mainline/ubuntu/ xenial nginx' state=present</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>-<span class="ruby"> <span class="hljs-symbol">name:</span> Update system</td><tr><td class="linenos" data-pseudo-content="12"></td><td></span>  apt: upgrade=full update_cache=yes</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>-<span class="ruby"> <span class="hljs-symbol">name:</span> Install dependencies</td><tr><td class="linenos" data-pseudo-content="15"></td><td></span>  apt: name={{ item }} state=present</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  with_items:</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    -<span class="ruby"> nginx</td><tr><td class="linenos" data-pseudo-content="18"></td><td></span>    -<span class="ruby"> unit</td><tr><td class="linenos" data-pseudo-content="19"></td><td></span>    -<span class="ruby"> golang</td><tr><td class="linenos" data-pseudo-content="20"></td><td></span>    -<span class="ruby"> php-dev</td><tr><td class="linenos" data-pseudo-content="21"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-dev</td><tr><td class="linenos" data-pseudo-content="22"></td><td></span>    -<span class="ruby"> libphp-embed</td><tr><td class="linenos" data-pseudo-content="23"></td><td></span>    -<span class="ruby"> libphp7.<span class="hljs-number">0</span>-embed</td><tr><td class="linenos" data-pseudo-content="24"></td><td></span>    -<span class="ruby"> python-dev</td><tr><td class="linenos" data-pseudo-content="25"></td><td></span>    -<span class="ruby"> python3</td><tr><td class="linenos" data-pseudo-content="26"></td><td></span>    -<span class="ruby"> python3-dev</td><tr><td class="linenos" data-pseudo-content="27"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-cli</td><tr><td class="linenos" data-pseudo-content="28"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-mcrypt</td><tr><td class="linenos" data-pseudo-content="29"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-pgsql</td><tr><td class="linenos" data-pseudo-content="30"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-sqlite3</td><tr><td class="linenos" data-pseudo-content="31"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-opcache</td><tr><td class="linenos" data-pseudo-content="32"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-curl</td><tr><td class="linenos" data-pseudo-content="33"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-mbstring</td><tr><td class="linenos" data-pseudo-content="34"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-dom</td><tr><td class="linenos" data-pseudo-content="35"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-xml</td><tr><td class="linenos" data-pseudo-content="36"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-zip</td><tr><td class="linenos" data-pseudo-content="37"></td><td></span>    -<span class="ruby"> php7.<span class="hljs-number">0</span>-bcmath</td><tr><td class="linenos" data-pseudo-content="38"></td><td></span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>-<span class="ruby"> <span class="hljs-symbol">name:</span> Copy over Nginx configuration</td><tr><td class="linenos" data-pseudo-content="40"></td><td></span>  copy: src=nginx.conf dest=/etc/nginx/sites-available/default owner=root group=root mode=0644</td></table></code></pre>
<p>Note the section that copies over the Nginx config file. Here is that file:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-attribute">upstream</span> unit_backend {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8300</span>;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>}</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server ipv6only=<span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attribute">fastcgi_param</span> HTTP_PROXY <span class="hljs-string">""</span>; </td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attribute">root</span> /var/www/public;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">index</span> index.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attribute">server_name</span> server_domain_or_IP;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">location</span> / { </td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }   </td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-attribute">proxy_pass</span> http://unit_backend;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }   </td><tr><td class="linenos" data-pseudo-content="27"></td><td>}</td></table></code></pre>
<p>This setup proxies all dynamic requests to the Unit backed in a similar fashion to how it would normally pass it to PHP-FPM.</p>
<p>There were still a few little issues. It doesn’t exactly help that the Nginx package provided with this repository isn’t quite the same as the one in Ubuntu by default - not only is it the unstable version, but it doesn’t set up the <code>sites-available</code> and <code>sites-enabled</code> folders, so I had to do that manually. I also had an issue with Systemd starting the process (at <code>/run/control.unit.sock</code>) with permissions that didn’t allow Nginx to access it. I’m not that familiar with Systemd so I wound up just setting the permissions of the file manually, but that doesn’t persist between restarts. I expect this issue isn’t that big a deal to someone more familiar with Systemd, but I haven’t been able to resolve it yet.</p>
<p>I decided to try it out with a Laravel application. I created a new Laravel app and set it up with the web root at <code>/var/www</code>. I then saved the following configuration for it as <code>app.json</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attr">"listeners"</span>: {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-attr">"*:8300"</span>: {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-attr">"application"</span>: <span class="hljs-string">"myapp"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attr">"applications"</span>: {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-attr">"myapp"</span>: {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"php"</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-attr">"workers"</span>: <span class="hljs-number">20</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-attr">"user"</span>: <span class="hljs-string">"www-data"</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-attr">"group"</span>: <span class="hljs-string">"www-data"</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-attr">"root"</span>: <span class="hljs-string">"/var/www/public"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-attr">"index"</span>: <span class="hljs-string">"index.php"</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>}</td></table></code></pre>
<p>This is fairly basic, but a good example of how you configure an application with Unit. The <code>listener</code> section maps a port to an application, while the <code>applications</code> section defines an application called <code>myapp</code>. In this case, we specify that the type should be <code>php</code>. Note that each platform has slightly different options - for instance, the Python type doesn’t have the <code>index</code> or <code>root</code> options, instead having the <code>path</code> option, which specifies the path to the <code>wsgi.py</code> file.</p>
<p>I then ran the following command to upload the file:</p>
<pre><code class="hljs lang-bash singleline">$ curl -X PUT <span class="hljs-_">-d</span> @app.json --unix-socket /run/control.unit.sock http://localhost</code></pre>
<p>Note that we send it direct to the Unix socket file - this way we don’t have to expose the API to the outside. After this was done, the Laravel app began working as expected.</p>
<p>We can then make a GET request to view the configured applications:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ curl --unix-socket /run/control.unit.sock http://localhost/</td><tr><td class="linenos" data-pseudo-content="2"></td><td>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">"listeners"</span>: {</td><tr><td class="linenos" data-pseudo-content="4"></td><td>                <span class="hljs-string">"*:8300"</span>: {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>                        <span class="hljs-string">"application"</span>: <span class="hljs-string">"saas"</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-string">"applications"</span>: {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>                <span class="hljs-string">"saas"</span>: {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"php"</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>                        <span class="hljs-string">"workers"</span>: 20,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>                        <span class="hljs-string">"user"</span>: <span class="hljs-string">"www-data"</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>                        <span class="hljs-string">"group"</span>: <span class="hljs-string">"www-data"</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>                        <span class="hljs-string">"root"</span>: <span class="hljs-string">"/var/www/public"</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>                        <span class="hljs-string">"index"</span>: <span class="hljs-string">"index.php"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>                }</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="19"></td><td>}</td></table></code></pre>
<p>It’s also possible to update and delete existing applications via the API using PUT and DELETE requests.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>This is <em>way</em> too early to be seriously considering using Unit in production. It’s only just been released as a public beta, and it’s a bit fiddly to set up. However, it has an enormous amount of promise.</p>
<p>One thing I can’t really see right now is whether it’s possible to use a virtualenv with it for Python applications. In the Python community it’s standard practice to use Virtualenv to isolate the dependencies for individual applications, and it’s not clear how I’d be able to go about using this, if it is possible. For deploying Python applications, lack of virtualenv support would be a deal breaker, and I hope this gets clarified soon.</p>
<p>I’d also be curious to see benchmarks of how it compares to something like PHP-FPM. It’s quite possible that it may be less performant than other solutions. However, I will keep a close eye on this in future.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Making internal requests with Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/09/02/making-internal-requests-with-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/09/02/making-internal-requests-with-laravel/</guid>
            <pubDate>Sat, 02 Sep 2017 13:45:27 GMT</pubDate>
            <description><![CDATA[<p>Recently I’ve been working on a Phonegap app that needs to work offline. The nature of relational databases can often make this tricky if you’re dealing with related objects and you’re trying to retrofit it to something that wasn’t built with this use case in mind.</p>
<p>Originally my plan was to push each request that would have been made to a queue in WebSQL, and then on reconnect, make every request individually. It quickly became apparent, however, that this approach had a few problems:</p>
<ul>
<li>If one request failed, the remaining requests had to be stopped from executing</li>
<li>It didn’t allow for storing the failed transactions in a way that made them easy to retrieve</li>
</ul>
<p>Instead, I decided to create a single <code>sync</code> endpoint for the API that would accept an object containing all the requests that would be made, and then step through each one. If it failed, it would get the failed request and all subsequent ones in the object, and store them in the database. That way, even if the data didn’t sync correctly, it wasn’t lost, and if necessary it could be resolved manually.</p>
<p>Since the necessary API endpoints already existed, and were thoroughly tested, it was not a good idea to start duplicating that functionality. Instead, I implemented the functionality to carry out internal requests, and I thought I’d share how you can do this.</p>
<p>For any service you may build for your Laravel applications, it’s a good idea to create an interface for it first:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MakesInternalRequests</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Make an internal request</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@param</span> string $action   The HTTP verb to use.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@param</span> string $resource The API resource to look up.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@param</span> array  $data     The request body.</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span><span class="hljs-params">(string $action, string $resource, array $data = [])</span></span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>That way you can resolve the service using dependency injection, making it trivial to replace it with a mock when testing.</p>
<p>Now, actually making an internal request is pretty easy. You get the app instance (you can do so by resolving it using dependency injection as I do below, or call the <code>app()</code> helper). Then you put together the request you want to make and pass it as an argument to the app’s <code>handle()</code> method:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Services</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">MakesInternalRequests</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Application</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">FailedInternalRequestException</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="11"></td><td> * Internal request service</td><tr><td class="linenos" data-pseudo-content="12"></td><td> */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InternalRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MakesInternalRequests</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     * The app instance</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     * <span class="hljs-doctag">@var</span> $app</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">protected</span> $app;</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * Constructor</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * <span class="hljs-doctag">@param</span> Application $app        The app instance.</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Application $app)</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app = $app;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     * Make an internal request</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     * <span class="hljs-doctag">@param</span> string $action   The HTTP verb to use.</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@param</span> string $resource The API resource to look up.</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     * <span class="hljs-doctag">@param</span> array  $data     The request body.</td><tr><td class="linenos" data-pseudo-content="39"></td><td>     * <span class="hljs-doctag">@throws</span> FailedInternalRequestException Request could not be synced.</td><tr><td class="linenos" data-pseudo-content="40"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="41"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span><span class="hljs-params">(string $action, string $resource, array $data = [])</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        $request = Request::create(<span class="hljs-string">'/api/'</span> . $resource, $action, $data, [], [], [</td><tr><td class="linenos" data-pseudo-content="46"></td><td>            <span class="hljs-string">'HTTP_Accept'</span>             =&gt; <span class="hljs-string">'application/json'</span>,</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment">// Get response</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;app-&gt;handle($request);</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-keyword">if</span> ($response-&gt;getStatusCode() &gt;= <span class="hljs-number">400</span>) {</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FailedInternalRequestException($request, $response);</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Dispatch the request</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-keyword">return</span> $response;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="58"></td><td>}</td></table></code></pre>
<p>Also note that I’ve created a custom exception, called <code>FailedInternalRequestException</code>. This is fired if the status code returned from the internal requests is greater than or equal to 400 (thus denoting an error):</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exceptions</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Response</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td> * Exception for when a bulk sync job fails</td><tr><td class="linenos" data-pseudo-content="10"></td><td> */</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FailedInternalRequestException</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">Exception</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * Request instance</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     * <span class="hljs-doctag">@var</span> $request</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">protected</span> $request;</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Response instance</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@var</span> $response</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">protected</span> $response;</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     * Constructor</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     * <span class="hljs-doctag">@param</span> Request  $request  The request object.</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * <span class="hljs-doctag">@param</span> Response $response The response object.</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Request $request, Response $response)</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-keyword">parent</span>::__construct();</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-keyword">$this</span>-&gt;request = $request;</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">$this</span>-&gt;response = $response;</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     * Get request object</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     * <span class="hljs-doctag">@return</span> Request</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequest</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;request;</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="52"></td><td>     * Get response object</td><tr><td class="linenos" data-pseudo-content="53"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="54"></td><td>     * <span class="hljs-doctag">@return</span> Response</td><tr><td class="linenos" data-pseudo-content="55"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResponse</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response;</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="60"></td><td>}</td></table></code></pre>
<p>You can catch this exception in an appropriate place and handle it as you wish. Now, if you import the internal request class as <code>$dispatcher</code>, you can just call <code>$dispatcher-&gt;request($action, $resource, $data)</code>, where <code>$action</code> is the HTTP verb, <code>$resource</code> is the API resource to send to, and <code>$data</code> is the data to send.</p>
<p>It’s actually quite rare to have to do this. In this case, because this was a REST API and every request made to it was changing the state of the application (there were no GET requests, only POST, PUT, PATCH and DELETE), it made sense to just break down the request body and do internal requests against the existing API, since otherwise I’d have to duplicate the existing functionality. I would not recommend this approach for something like fetching data to render a page on the server side, as there are more efficient ways of accomplishing it. In all honesty I can’t think of any other scenario where this would genuinely be the best option. However, it worked well for my use case and allowed me to implement this functionality quickly and simply.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Run your tests locally with Sismo]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/08/19/run-your-tests-locally-with-sismo/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/08/19/run-your-tests-locally-with-sismo/</guid>
            <pubDate>Sat, 19 Aug 2017 14:40:07 GMT</pubDate>
            <description><![CDATA[<p>Continuous integration is a veritable boon when working on any large software project. However, the popularity of distributed version control systems like Git over the older, more centralised ones like Subversion means that when you commit your changes, they don’t necessarily get pushed up to a remote repository immediately. While this is a good thing because it means you can commit at any stage without worrying about pushing up changes that break everyone else’s build, it has the downside that the tests aren’t automatically run on every commit, just every push, so if you get sloppy about running your tests before every commit you can more easily get caught out. In addition, a full CI server like Jenkins is a rather large piece of software that you don’t really want to run locally if you can help it, and has a lot of functionality you don’t need.</p>
<p><a href="https://sismo.symfony.com/">Sismo</a> is a small, simple continuous integration server, implemented in PHP, that’s ideal for running locally. You can set it up to run your tests on every commit, and it has an easy-to-use web interface. Although it’s a PHP application, there’s no reason why you couldn’t use it to run tests for projects in other languages, and because it’s focused solely on running your test suite without many of the other features of more advanced CI solutions, it’s a good fit for local use. Here I’ll show you how I use it.</p>
<h2 id="setting-up-sismo">Setting up Sismo</h2>
<p>Nowadays I don’t generally install a web server on a computer directly, preferring to use Vagrant or the dev server as appropriate, so Sismo generally doesn’t have to coexist with anything else. I normally install PHP7’s FastCGI implementation and Nginx, along with the SQLite bindings (which Sismo needs):</p>
<pre><code class="hljs lang-bash singleline">$ sudo apt-get install nginx php7.0-fpm php7.0-sqlite3</code></pre>
<p>Then we can set up our Nginx config at <code>/etc/nginx/sites-available/default</code>:</p>
<pre><code class="hljs lang-nginx"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-section">server</span> {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> default_server ipv6only=<span class="hljs-literal">on</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attribute">fastcgi_param</span> HTTP_PROXY <span class="hljs-string">""</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attribute">root</span> /var/www/html;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attribute">index</span> sismo.php index.html index.htm;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attribute">server_name</span> server_domain_or_IP;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-attribute">location</span> / {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /sismo.php?<span class="hljs-variable">$query_string</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /sismo.php =<span class="hljs-number">404</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(/.+)$</span>;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.0-fpm.sock;</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-attribute">fastcgi_index</span> sismo.php;</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SISMO_DATA_PATH <span class="hljs-string">"/home/matthew/.sismo/data"</span>;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-attribute">fastcgi_param</span> SISMO_CONFIG_PATH <span class="hljs-string">"/home/matthew/.sismo/config.php"</span>;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-attribute">include</span> fastcgi_params;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>You’ll probably want to adjust the paths as appropriate. Then set up the required folders:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir ~/.sismo</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ mkdir ~/.sismo/data</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ touch ~/.sismo/config.php</td><tr><td class="linenos" data-pseudo-content="4"></td><td>$ chmod -R a+w ~/.sismo/</td></table></code></pre>
<p>Then, <a href="https://sismo.symfony.com/get/sismo.php">download Sismo</a> and put it in your web root (here it’s at <code>/var/www/html/sismo.php</code>).</p>
<p>Now, say you have a project you want to test (I’m using my <a href="https://github.com/matthewbdaly/laravel-etag-middleware">Laravel ETag middleware</a> for this example). We need to specify the projects we want to test in <code>~/.sismo/config.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>$projects = <span class="hljs-keyword">array</span>();</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>$notifier = <span class="hljs-keyword">new</span> Sismo\Notifier\DBusNotifier();</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>Sismo\Project::setDefaultCommand(<span class="hljs-string">'if [ -f composer.json ]; then composer install; fi &amp;&amp; vendor/bin/phpunit'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>$projects[] = <span class="hljs-keyword">new</span> Sismo\GithubProject(<span class="hljs-string">'Laravel ETag Middleware'</span>, <span class="hljs-string">'/home/matthew/Projects/laravel-etag-middleware'</span>, $notifier);</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">return</span> $projects;</td></table></code></pre>
<p>Hopefully this shouldn’t be too difficult to understand. We create an array of projects, then specify a notifier (this is Linux-specific - refer to the documentation for using Growl on Mac OS). Next, we specify that by default the tests should run <code>composer install</code> followed by <code>vendor/bin/phpunit</code>. We then specify this project is a Github project - it also supports Bitbucket, or plain SSH, or the default Project, but in general it shouldn’t be a problem to use it with any repository as you can just run it against the local copy. Finally we return the list of projects.</p>
<p>Now, we should be able to run our tests as follows:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php /var/www/html/sismo.php build</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Building Project <span class="hljs-string">"Laravel ETag Middleware"</span> (into <span class="hljs-string">"68a087"</span>)</td></table></code></pre>
<p>That should be working, but it doesn’t get us anything we don’t get by running the tests ourselves. To trigger the build, we need to set up a post-commit hook for our project in <code>.git/hooks/post-commit</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">#!/bin/sh</td><tr><td class="linenos" data-pseudo-content="2"></td><td></span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>php /var/www/html/sismo.php --quiet --force build laravel-etag-middleware `git <span class="hljs-built_in">log</span> -1 HEAD --pretty=<span class="hljs-string">"%H"</span>` &amp;&gt;/dev/null &amp;</td></table></code></pre>
<p>You should now be able to view your project in the Sismo web interface at <a href="http://localhost">http://localhost</a>:</p>
<p><img src="/static/images/sismo-screenshot.png" alt="Sismo"></p>
<p>Clicking on the project should take you through to its build history:</p>
<p><img src="/static/images/sismo-screenshot2.png" alt="Sismo project page"></p>
<p>From here on, it should be straightforward to add new projects as and when necessary. Because you can change the command on a per-project basis, you can quite happily use it to run tests for Python or Node.js projects as well as PHP ones, and it’s not hard to configure it.</p>
<p>I personally find it very useful to have something in place to run my tests on every commit like this, and while you could just use a post-commit hook for that, this approach is less obtrusive because it doesn’t force you to wait around for your test suite to finish.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Profiling your Laravel application with Clockwork]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/08/14/profiling-your-laravel-application-with-clockwork/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/08/14/profiling-your-laravel-application-with-clockwork/</guid>
            <pubDate>Mon, 14 Aug 2017 11:40:00 GMT</pubDate>
            <description><![CDATA[<p>If you’re building any non-trivial application, it’s always a good idea to profile it to find performance problems. <a href="https://github.com/barryvdh/laravel-debugbar">Laravel Debugbar</a> is the usual solution for profiling Laravel web applications, but it isn’t really much use for REST API’s or single-page web apps that consume them.</p>
<p>Recently I was introduced to <a href="https://github.com/itsgoingd/clockwork">Clockwork</a>, which is a server-side extension for profiling PHP applications. It’s made it a whole lot easier to track down issues like excessive numbers of queries when building an API, and as a result I’ve been able to dramatically improve the performance of an API I’ve been working on. Here I’ll show you how you can use it on a project.</p>
<h2 id="installing-clockwork">Installing Clockwork</h2>
<p>Clockwork is available via Composer:</p>
<pre><code class="hljs lang-bash singleline">$ composer require itsgoingd/clockwork</code></pre>
<p>You also need to register the service provider in <code>config/app.php</code>:</p>
<pre><code class="hljs lang-php singleline">   Clockwork\Support\Laravel\ClockworkServiceProvider::class,</code></pre>
<p>And register the middleware globally in <code>app/Http/Kernel.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">protected</span> $middleware = [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>      \Clockwork\Support\Laravel\ClockworkMiddleware::class,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>]</td></table></code></pre>
<p>Note that it only works when <code>APP_DEBUG</code> is set to true in your <code>.env</code> file. This means that you can keep it in your application without worrying about exposing too much data in production, as long as debug mode is not active on your production server (which it shouldn’t be anyway).</p>
<p>You will also need to install the <a href="https://chrome.google.com/webstore/detail/clockwork/dmggabnehkmmfmdffgajcflpdjlnoemp?hl=en">Chrome extension</a> in order to actually work with the returned data. Clockwork works by adding its own route to your Laravel application, and this extension makes sure that it makes the appropriate request on loading a page, and then displays the data in the dev tools.</p>
<p>Once it’s all installed and your application is running, open the dev tools and you should see the new <strong>Clockwork</strong> tab in there. On the left of this tab is a list of requests - if you make a request, you’ll see it added to the list. When you click on each request, you’ll see the following tabs, where applicable:</p>
<h2 id="request">Request</h2>
<p><img src="/static/images/clockwork1.png" alt="Request tab"></p>
<p>This is similar to Chrome’s network tab in that it shows all of the headers for a given request. It’s not anything you can’t get using Chrome’s existing dev tools, but because it doesn’t show any static content it’s arguably a bit easier to navigate.</p>
<h2 id="timeline">Timeline</h2>
<p><img src="/static/images/clockwork2.png" alt="Timeline tab"></p>
<p>This shows how long the response takes to respond, which can be helpful in identifying slower requests.</p>
<p>In addition, you can create your own events using the <code>clock()</code> helper, which will appear in the timeline, as in this example:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>clock()-&gt;startEvent(<span class="hljs-string">'email_sent'</span>, <span class="hljs-string">'Email sent.'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td>clock()-&gt;endEvent(<span class="hljs-string">'email_sent'</span>);</td></table></code></pre>
<h2 id="log">Log</h2>
<p><img src="/static/images/clockwork8.png" alt="Log tab"></p>
<p>The log tab is only displayed if you use the <code>clock()</code> helper to log data. You can log text or JSON objects as appropriate:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>clock(<span class="hljs-string">'Message text.'</span>); <span class="hljs-comment">// 'Message text.' appears in Clockwork log tab</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>clock([<span class="hljs-string">'hello'</span> =&gt; <span class="hljs-string">'world'</span>]); <span class="hljs-comment">// logs json representation of the array</span></td></table></code></pre>
<p>This is arguably more convenient than using the <code>Log</code> facade to write to the application log, since it’s kept in the browser and you can easily see what request caused what message to be logged.</p>
<h2 id="database">Database</h2>
<p><img src="/static/images/clockwork3.png" alt="Database tab"></p>
<p>The database tab displays details of the queries made by a request. This is useful for identifying things such as:</p>
<ul>
<li>Repeated queries that should be cached</li>
<li>The n+1 problem (which can be resolved by use of eager loading)</li>
<li>Slow queries that need to be optimised</li>
</ul>
<p>Note that if a particular endpoint does not trigger a query, this tab will not be visible.</p>
<h2 id="cookies">Cookies</h2>
<p><img src="/static/images/clockwork4.png" alt="Cookies tab"></p>
<p>For a REST API, you shouldn’t really have much use for cookies, but if you do, this tab lets you view the cookies set on the request.</p>
<h2 id="session">Session</h2>
<p><img src="/static/images/clockwork5.png" alt="Session tab"></p>
<p>As with cookies, the session isn’t normally something you’d use for an API, but this tab lets you view it.</p>
<h2 id="views">Views</h2>
<p><img src="/static/images/clockwork6.png" alt="Views tab"></p>
<p>This tab shows the views used on the page, and all of the data passed to them.</p>
<h2 id="routes">Routes</h2>
<p><img src="/static/images/clockwork7.png" alt="Routes tab"></p>
<p>This tab shows all of the routes defined within your application.</p>
<p>Clockwork isn’t limited to Laravel - you can also use it with Lumen, Slim 2, and CodeIgniter 2.1, and it’s possible to write your own integration for other frameworks. It’s still fundamentally browser-based, so it’s difficult to use it if your API doesn’t have at least some kind of web front end (whether that’s a single page web app or Phonegap app that consumes the API, or that the API is itself browseable and returns HTML in a web browser), but I’ve found it to be superior to Laravel Debugbar for most of what I do.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Snapshot test your Vue components with Jest]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/06/17/snapshot-test-your-vue-components-with-jest/</guid>
            <pubDate>Sat, 17 Jun 2017 13:12:02 GMT</pubDate>
            <description><![CDATA[<p>At work I’ve recently started using <a href="https://vuejs.org/">Vue</a> as my main front-end framework instead of Angular 1. It has a relatively shallow learning curve and has enough similarities with both React and Angular 1 that if you’re familiar with one or both of them it feels quite familiar. We’re a Laravel shop and Laravel comes out of the box with a basic scaffolding for using Vue, so not only is it the path of least resistance, but many of my colleagues knew it already and it’s used on some existing projects (one of which I’ve been helping out on this week), so it made sense to learn it. Add to that the fact that the main alternative is Angular 2, which I vehemently dislike, and learning Vue was a no-brainer.</p>
<p><a href="https://facebook.github.io/jest/docs/snapshot-testing.html">Snapshot tests</a> are a really useful way of making sure your user interface doesn’t change unexpectedly. Facebook introduced them to their Jest testing framework last year, and they’ve started to appear in other testing frameworks too. In their words…</p>
<blockquote>
<p>A typical snapshot test case for a mobile app renders a UI component, takes a screenshot, then compares it to a reference image stored alongside the test. The test will fail if the two images do not match: either the change is unexpected, or the screenshot needs to be updated to the new version of the UI component.</p>
</blockquote>
<p>This makes it easy to make sure than a UI component, such as a React or Vue component, does not unexpectedly change how it is rendered. In the event that it does change, it will fail the test, and it’s up to the developer to confirm whether or not that’s expected - if so they can generate a new version of the snapshot and be on their way. Without it, you’re stuck manually testing that the right HTML tags get generated, which is a chore.</p>
<p>Jest’s documentation is aimed pretty squarely at React, but it’s not hard to adapt it to work with Vue components. Here I’ll show you how I got it working with Vue.</p>
<h2 id="setting-up-a-new-project">Setting up a new project</h2>
<p>I used the <a href="https://github.com/vuejs/vue-cli">Vue CLI</a> boilerplate generator to set up my initial dependencies for this project. I then had to install some further packages:</p>
<pre><code class="hljs lang-bash singleline">$ npm install --save-dev jest babel-jest jest-vue-preprocessor</code></pre>
<p>After that, I had to configure Jest to work with Vue. The finished <code>package.json</code> looked like this:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"myproject"</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-attr">"description"</span>: <span class="hljs-string">"A project"</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  <span class="hljs-attr">"author"</span>: <span class="hljs-string">"Matthew Daly &lt;matthew@matthewdaly.co.uk&gt;"</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-attr">"private"</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  <span class="hljs-attr">"scripts"</span>: {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-attr">"dev"</span>: <span class="hljs-string">"node build/dev-server.js"</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"node build/dev-server.js"</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"node build/build.js"</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-attr">"lint"</span>: <span class="hljs-string">"eslint --ext .js,.vue src"</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-attr">"test"</span>: <span class="hljs-string">"jest __test__/ --coverage"</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  <span class="hljs-attr">"dependencies"</span>: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-attr">"vue"</span>: <span class="hljs-string">"^2.3.3"</span>,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-attr">"vue-router"</span>: <span class="hljs-string">"^2.3.1"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  <span class="hljs-attr">"devDependencies"</span>: {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attr">"autoprefixer"</span>: <span class="hljs-string">"^6.7.2"</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attr">"babel-core"</span>: <span class="hljs-string">"^6.22.1"</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attr">"babel-eslint"</span>: <span class="hljs-string">"^7.1.1"</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attr">"babel-jest"</span>: <span class="hljs-string">"^20.0.3"</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attr">"babel-loader"</span>: <span class="hljs-string">"^6.2.10"</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attr">"babel-plugin-transform-runtime"</span>: <span class="hljs-string">"^6.22.0"</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attr">"babel-preset-env"</span>: <span class="hljs-string">"^1.3.2"</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attr">"babel-preset-stage-2"</span>: <span class="hljs-string">"^6.22.0"</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attr">"babel-register"</span>: <span class="hljs-string">"^6.22.0"</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attr">"chalk"</span>: <span class="hljs-string">"^1.1.3"</span>,</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attr">"connect-history-api-fallback"</span>: <span class="hljs-string">"^1.3.0"</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-attr">"copy-webpack-plugin"</span>: <span class="hljs-string">"^4.0.1"</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-attr">"css-loader"</span>: <span class="hljs-string">"^0.28.0"</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-attr">"eslint"</span>: <span class="hljs-string">"^3.19.0"</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-attr">"eslint-config-standard"</span>: <span class="hljs-string">"^6.2.1"</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    <span class="hljs-attr">"eslint-friendly-formatter"</span>: <span class="hljs-string">"^2.0.7"</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-attr">"eslint-loader"</span>: <span class="hljs-string">"^1.7.1"</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-attr">"eslint-plugin-html"</span>: <span class="hljs-string">"^2.0.0"</span>,</td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-attr">"eslint-plugin-promise"</span>: <span class="hljs-string">"^3.4.0"</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-attr">"eslint-plugin-standard"</span>: <span class="hljs-string">"^2.0.1"</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-attr">"eventsource-polyfill"</span>: <span class="hljs-string">"^0.9.6"</span>,</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-attr">"express"</span>: <span class="hljs-string">"^4.14.1"</span>,</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-attr">"extract-text-webpack-plugin"</span>: <span class="hljs-string">"^2.0.0"</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attr">"file-loader"</span>: <span class="hljs-string">"^0.11.1"</span>,</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-attr">"friendly-errors-webpack-plugin"</span>: <span class="hljs-string">"^1.1.3"</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-attr">"html-webpack-plugin"</span>: <span class="hljs-string">"^2.28.0"</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-attr">"http-proxy-middleware"</span>: <span class="hljs-string">"^0.17.3"</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-attr">"jest"</span>: <span class="hljs-string">"^20.0.4"</span>,</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-attr">"jest-vue-preprocessor"</span>: <span class="hljs-string">"^1.0.1"</span>,</td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-attr">"opn"</span>: <span class="hljs-string">"^4.0.2"</span>,</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-attr">"optimize-css-assets-webpack-plugin"</span>: <span class="hljs-string">"^1.3.0"</span>,</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-attr">"ora"</span>: <span class="hljs-string">"^1.2.0"</span>,</td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-attr">"rimraf"</span>: <span class="hljs-string">"^2.6.0"</span>,</td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-attr">"semver"</span>: <span class="hljs-string">"^5.3.0"</span>,</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-attr">"shelljs"</span>: <span class="hljs-string">"^0.7.6"</span>,</td><tr><td class="linenos" data-pseudo-content="54"></td><td>    <span class="hljs-attr">"url-loader"</span>: <span class="hljs-string">"^0.5.8"</span>,</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    <span class="hljs-attr">"vue-loader"</span>: <span class="hljs-string">"^12.1.0"</span>,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-attr">"vue-style-loader"</span>: <span class="hljs-string">"^3.0.1"</span>,</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    <span class="hljs-attr">"vue-template-compiler"</span>: <span class="hljs-string">"^2.3.3"</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>    <span class="hljs-attr">"webpack"</span>: <span class="hljs-string">"^2.6.1"</span>,</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-attr">"webpack-bundle-analyzer"</span>: <span class="hljs-string">"^2.2.1"</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>    <span class="hljs-attr">"webpack-dev-middleware"</span>: <span class="hljs-string">"^1.10.0"</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-attr">"webpack-hot-middleware"</span>: <span class="hljs-string">"^2.18.0"</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>    <span class="hljs-attr">"webpack-merge"</span>: <span class="hljs-string">"^4.1.0"</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="64"></td><td>  <span class="hljs-attr">"engines"</span>: {</td><tr><td class="linenos" data-pseudo-content="65"></td><td>    <span class="hljs-attr">"node"</span>: <span class="hljs-string">"&gt;= 4.0.0"</span>,</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    <span class="hljs-attr">"npm"</span>: <span class="hljs-string">"&gt;= 3.0.0"</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="68"></td><td>  <span class="hljs-attr">"browserslist"</span>: [</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-string">"&gt; 1%"</span>,</td><tr><td class="linenos" data-pseudo-content="70"></td><td>    <span class="hljs-string">"last 2 versions"</span>,</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    <span class="hljs-string">"not ie &lt;= 8"</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>  ],</td><tr><td class="linenos" data-pseudo-content="73"></td><td>  <span class="hljs-attr">"jest"</span>: {</td><tr><td class="linenos" data-pseudo-content="74"></td><td>    <span class="hljs-attr">"testRegex"</span>: <span class="hljs-string">"spec.js$"</span>,</td><tr><td class="linenos" data-pseudo-content="75"></td><td>    <span class="hljs-attr">"moduleFileExtensions"</span>: [</td><tr><td class="linenos" data-pseudo-content="76"></td><td>      <span class="hljs-string">"js"</span>,</td><tr><td class="linenos" data-pseudo-content="77"></td><td>      <span class="hljs-string">"vue"</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>    ],</td><tr><td class="linenos" data-pseudo-content="79"></td><td>    <span class="hljs-attr">"transform"</span>: {</td><tr><td class="linenos" data-pseudo-content="80"></td><td>      <span class="hljs-attr">"^.+\\.js$"</span>: <span class="hljs-string">"&lt;rootDir&gt;/node_modules/babel-jest"</span>,</td><tr><td class="linenos" data-pseudo-content="81"></td><td>      <span class="hljs-attr">".*\\.(vue)$"</span>: <span class="hljs-string">"&lt;rootDir&gt;/node_modules/jest-vue-preprocessor"</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="83"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="84"></td><td>}</td></table></code></pre>
<p>I won’t include things like the Webpack config, because that’s all generated by Vue CLI. Note that we need to tell Jest what file extensions it should work with, including <code>.vue</code>, and we need to specify the appropriate transforms for different types of files. We use <code>jest-vue-preprocessor</code> for <code>.vue</code> files and <code>babel-jest</code> for <code>.js</code> files.</p>
<p>With that done, we can create a basic component. We’ll assume we’re writing a simple issue tracker here, and our first component will be at <code>src/components/Issue.vue</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>An Issue<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  data () {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">return</span> {}</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="12"></td><td>}</td><tr><td class="linenos" data-pseudo-content="13"></td><td></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="undefined"></td><tr><td class="linenos" data-pseudo-content="16"></td><td></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></td></table></code></pre>
<p>Next, we create a simple test for this component. Save this as <code>__test__/components/issue.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> Issue <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Issue.vue'</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">const</span> Constructor = Vue.extend(Issue)</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Constructor().$mount()</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>describe(<span class="hljs-string">'Issue'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  it(<span class="hljs-string">'should render'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    expect(vm.$el.querySelector(<span class="hljs-string">'h1'</span>).textContent).toEqual(<span class="hljs-string">'An Issue'</span>)</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>  it(<span class="hljs-string">'should match the snapshot'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    expect(vm.$el).toMatchSnapshot()</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="15"></td><td>});</td></table></code></pre>
<p><code>Constructor</code> is what creates our Vue component, while <code>vm</code> is our actual newly-mounted Vue component. We can refer to the HTML inside the component through <code>vm.$el</code>, so we can then work with the virtual DOM easily.</p>
<p>In the first test we use the more traditional method of verifying our UI component has worked as expected - we fetch an HTML tag inside it and verify that the content inside is what we expect. This is fine for a small component, but as the components get larger we’ll find it more of a chore.</p>
<p>The second test is much simpler and more concise. We simply assert that it matches the snapshot. Not only is that easier, but it can scale to components of any size because we don’t have to check every little element.</p>
<p>Let’s run our tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; myproject@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/myproject</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; jest __test__/ --coverage</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td> PASS  __test__/components/issue.spec.js</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Issue</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    ✓ should render (46ms)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ should match the snapshot (14ms)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Snapshot Summary</td><tr><td class="linenos" data-pseudo-content="12"></td><td> › 1 snapshot written <span class="hljs-keyword">in</span> 1 <span class="hljs-built_in">test</span> suite.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Test Suites: 1 passed, 1 total</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Tests:       2 passed, 2 total</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Snapshots:   1 added, 1 total</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Time:        8.264s</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Ran all <span class="hljs-built_in">test</span> suites matching <span class="hljs-string">"__test__/"</span>.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="20"></td><td>File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |</td><tr><td class="linenos" data-pseudo-content="21"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="22"></td><td>All files                                                  |    96.15 |       50 |      100 |       96 |                |</td><tr><td class="linenos" data-pseudo-content="23"></td><td> root                                                      |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  unknown                                                  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="25"></td><td> root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="27"></td><td> root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |</td><tr><td class="linenos" data-pseudo-content="29"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td></table></code></pre>
<p>Note this section:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>Snapshot Summary</td><tr><td class="linenos" data-pseudo-content="2"></td><td> › 1 snapshot written <span class="hljs-keyword">in</span> 1 <span class="hljs-built_in">test</span> suite.</td></table></code></pre>
<p>This tells us that the snapshot has been successfully written. If we run the tests again we should see that it checks against the existing snapshot:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; myproject@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/myproject</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; jest __test__/ --coverage</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td> PASS  __test__/components/issue.spec.js</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Issue</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    ✓ should render (40ms)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ should match the snapshot (12ms)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Test Suites: 1 passed, 1 total</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Tests:       2 passed, 2 total</td><tr><td class="linenos" data-pseudo-content="13"></td><td>Snapshots:   1 passed, 1 total</td><tr><td class="linenos" data-pseudo-content="14"></td><td>Time:        3.554s</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Ran all <span class="hljs-built_in">test</span> suites matching <span class="hljs-string">"__test__/"</span>.</td><tr><td class="linenos" data-pseudo-content="16"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="17"></td><td>File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |</td><tr><td class="linenos" data-pseudo-content="18"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="19"></td><td>All files                                                  |    96.15 |       50 |      100 |       96 |                |</td><tr><td class="linenos" data-pseudo-content="20"></td><td> root                                                      |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  unknown                                                  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="22"></td><td> root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="24"></td><td> root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |</td><tr><td class="linenos" data-pseudo-content="26"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td></table></code></pre>
<p>Great stuff. Now, if we make a minor change to our component, such as changing the text from <code>An Issue</code> to <code>My Issue</code>, does it pick that up?</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; myproject@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/myproject</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; jest __test__/ --coverage</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td> FAIL  __test__/components/issue.spec.js (5.252s)</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  ● Issue › should render</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    expect(received).toEqual(expected)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Expected value to equal:</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-string">"An Issue"</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    Received:</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-string">"My Issue"</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:9:52)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  ● Issue › should match the snapshot</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    expect(value).toMatchSnapshot()</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    Received value does not match stored snapshot 1.</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    - Snapshot</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    + Received</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>     &lt;div&gt;</td><tr><td class="linenos" data-pseudo-content="29"></td><td>       &lt;h1&gt;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    -    An Issue</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    +    My Issue</td><tr><td class="linenos" data-pseudo-content="32"></td><td>       &lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:13:20)</td><tr><td class="linenos" data-pseudo-content="36"></td><td>      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>  Issue</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    ✕ should render (48ms)</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    ✕ should match the snapshot (25ms)</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>Snapshot Summary</td><tr><td class="linenos" data-pseudo-content="43"></td><td> › 1 snapshot <span class="hljs-built_in">test</span> failed <span class="hljs-keyword">in</span> 1 <span class="hljs-built_in">test</span> suite. Inspect your code changes or run with `npm <span class="hljs-built_in">test</span> -- -u` to update them.</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>Test Suites: 1 failed, 1 total</td><tr><td class="linenos" data-pseudo-content="46"></td><td>Tests:       2 failed, 2 total</td><tr><td class="linenos" data-pseudo-content="47"></td><td>Snapshots:   1 failed, 1 total</td><tr><td class="linenos" data-pseudo-content="48"></td><td>Time:        7.082s</td><tr><td class="linenos" data-pseudo-content="49"></td><td>Ran all <span class="hljs-built_in">test</span> suites matching <span class="hljs-string">"__test__/"</span>.</td><tr><td class="linenos" data-pseudo-content="50"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="51"></td><td>File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |</td><tr><td class="linenos" data-pseudo-content="52"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="53"></td><td>All files                                                  |    96.15 |       50 |      100 |       96 |                |</td><tr><td class="linenos" data-pseudo-content="54"></td><td> root                                                      |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="55"></td><td>  unknown                                                  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="56"></td><td> root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="57"></td><td>  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="58"></td><td> root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |</td><tr><td class="linenos" data-pseudo-content="59"></td><td>  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |</td><tr><td class="linenos" data-pseudo-content="60"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td></table></code></pre>
<p>Yes, we can see that it’s picked up on the change and thrown an error. Note this line:</p>
<pre><code class="hljs lang-bash singleline"> › 1 snapshot <span class="hljs-built_in">test</span> failed <span class="hljs-keyword">in</span> 1 <span class="hljs-built_in">test</span> suite. Inspect your code changes or run with `npm <span class="hljs-built_in">test</span> -- -u` to update them.</code></pre>
<p>Jest is telling us that our snapshot has changed, but if we expect that, we can just run <code>npm test -- -u</code> to replace the existing one with our new one. Then, our tests will pass again.</p>
<p>Now, this component is pretty useless. It doesn’t accept any external input whatsoever, so the response is always going to be the same. How do we test a more dynamic component? Amend the component to look like this:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{ issue.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-attr">props</span>: {</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attr">issue</span>: <span class="hljs-built_in">Object</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  },</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  data () {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">return</span> {}</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="15"></td><td>}</td><tr><td class="linenos" data-pseudo-content="16"></td><td></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="undefined"></td><tr><td class="linenos" data-pseudo-content="19"></td><td></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span></td></table></code></pre>
<p>We’re now passing the <code>issue</code> object into our component as a prop, and getting the name from that. That will break our test, so we need to amend it to pass through the props:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">import</span> Issue <span class="hljs-keyword">from</span> <span class="hljs-string">'../../src/components/Issue.vue'</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">const</span> Constructor = Vue.extend(Issue)</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">const</span> issue = {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  <span class="hljs-attr">name</span>: <span class="hljs-string">'My Issue'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>}</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Constructor({</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-attr">propsData</span>: { <span class="hljs-attr">issue</span>: issue }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}).$mount()</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>describe(<span class="hljs-string">'Issue'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  it(<span class="hljs-string">'should render'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    expect(vm.$el.querySelector(<span class="hljs-string">'h1'</span>).textContent).toEqual(<span class="hljs-string">'My Issue'</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>  it(<span class="hljs-string">'should match the snapshot'</span>, () =&gt; {</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    expect(vm.$el).toMatchSnapshot()</td><tr><td class="linenos" data-pseudo-content="19"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>});</td></table></code></pre>
<p>Here we pass our prop into the constructor for the component. Now, let’s run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; myproject@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/myproject</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; jest __test__/ --coverage</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td> FAIL  __test__/components/issue.spec.js</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  ● Issue › should match the snapshot</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    expect(value).toMatchSnapshot()</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    Received value does not match stored snapshot 1.</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    - Snapshot</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    + Received</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>     &lt;div&gt;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>       &lt;h1&gt;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    -    An Issue</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    +    My Issue</td><tr><td class="linenos" data-pseudo-content="20"></td><td>       &lt;/h1&gt;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>      at Object.&lt;anonymous&gt; (__test__/components/issue.spec.js:18:20)</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      at Promise.resolve.then.el (node_modules/p-map/index.js:42:16)</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>  Issue</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    ✓ should render (39ms)</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    ✕ should match the snapshot (25ms)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>Snapshot Summary</td><tr><td class="linenos" data-pseudo-content="31"></td><td> › 1 snapshot <span class="hljs-built_in">test</span> failed <span class="hljs-keyword">in</span> 1 <span class="hljs-built_in">test</span> suite. Inspect your code changes or run with `npm <span class="hljs-built_in">test</span> -- -u` to update them.</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>Test Suites: 1 failed, 1 total</td><tr><td class="linenos" data-pseudo-content="34"></td><td>Tests:       1 failed, 1 passed, 2 total</td><tr><td class="linenos" data-pseudo-content="35"></td><td>Snapshots:   1 failed, 1 total</td><tr><td class="linenos" data-pseudo-content="36"></td><td>Time:        3.717s</td><tr><td class="linenos" data-pseudo-content="37"></td><td>Ran all <span class="hljs-built_in">test</span> suites matching <span class="hljs-string">"__test__/"</span>.</td><tr><td class="linenos" data-pseudo-content="38"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="39"></td><td>File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |</td><tr><td class="linenos" data-pseudo-content="40"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="41"></td><td>All files                                                  |     96.3 |       50 |      100 |    96.15 |                |</td><tr><td class="linenos" data-pseudo-content="42"></td><td> root                                                      |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="43"></td><td>  unknown                                                  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="44"></td><td> root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="45"></td><td>  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="46"></td><td> root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |</td><tr><td class="linenos" data-pseudo-content="47"></td><td>  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |</td><tr><td class="linenos" data-pseudo-content="48"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td></table></code></pre>
<p>Jest has picked up on our changes and thrown an error. However, because we know the UI has changed, we’re happy with this situation, so we can tell Jest to replace the prior snapshot with <code>npm test -- -u</code> as mentioned earlier:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span> -- -u</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; myproject@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/myproject</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; jest __test__/ --coverage <span class="hljs-string">"-u"</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td> PASS  __test__/components/issue.spec.js</td><tr><td class="linenos" data-pseudo-content="7"></td><td>  Issue</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    ✓ should render (39ms)</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    ✓ should match the snapshot (14ms)</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>Snapshot Summary</td><tr><td class="linenos" data-pseudo-content="12"></td><td> › 1 snapshot updated <span class="hljs-keyword">in</span> 1 <span class="hljs-built_in">test</span> suite.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>Test Suites: 1 passed, 1 total</td><tr><td class="linenos" data-pseudo-content="15"></td><td>Tests:       2 passed, 2 total</td><tr><td class="linenos" data-pseudo-content="16"></td><td>Snapshots:   1 updated, 1 total</td><tr><td class="linenos" data-pseudo-content="17"></td><td>Time:        3.668s</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Ran all <span class="hljs-built_in">test</span> suites matching <span class="hljs-string">"__test__/"</span>.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="20"></td><td>File                                                       |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |</td><tr><td class="linenos" data-pseudo-content="21"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td><tr><td class="linenos" data-pseudo-content="22"></td><td>All files                                                  |     96.3 |       50 |      100 |    96.15 |                |</td><tr><td class="linenos" data-pseudo-content="23"></td><td> root                                                      |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  unknown                                                  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="25"></td><td> root/home/matthew/Projects/myproject/__test__/components  |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  issue.spec.js                                            |      100 |      100 |      100 |      100 |                |</td><tr><td class="linenos" data-pseudo-content="27"></td><td> root/home/matthew/Projects/myproject/src/components       |    94.44 |       50 |      100 |    94.12 |                |</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  Issue.vue                                                |    94.44 |       50 |      100 |    94.12 |             39 |</td><tr><td class="linenos" data-pseudo-content="29"></td><td>-----------------------------------------------------------|----------|----------|----------|----------|----------------|</td></table></code></pre>
<p>Great, we now have a passing test suite again! That’s all we need to make sure that any regressions in the generated HTML of a component get caught.</p>
<p>Of course, this won’t help with the actual functionality of the component. However, Jest is pretty easy to use to write tests for the actual functionality of the application. If you prefer another testing framework, it’s possible to do the same with them, although I will leave setting them up as an exercise for the reader.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Enforcing a coding standard with PHP CodeSniffer]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/03/15/enforcing-a-coding-standard-with-php-codesniffer/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/03/15/enforcing-a-coding-standard-with-php-codesniffer/</guid>
            <pubDate>Wed, 15 Mar 2017 21:37:11 GMT</pubDate>
            <description><![CDATA[<p>We all start new projects with the best of intentions - it’ll be clean, fully tested and work perfectly. Sadly as deadlines loom, it’s all too easy to find yourself neglecting your code quality, and once it starts to degrade, getting it back becomes much harder. Many development teams try to adhere to a coding standard, but it can be hard to enforce on other people - it puts you in the uncomfortable position of nagging others all the time.</p>
<p>Fortunately, there’s an easy solution that doesn’t force everyone to use the same IDE. <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP CodeSniffer</a> is a useful package that lets you specify a coding standard and then validate your code against it. That way, you can set up continuous integration and use that to remind people of errors. Better still, it also allows many errors to be fixed automatically.</p>
<p>To use it on your PHP project, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ composer require --dev squizlabs/php_codesniffer</code></pre>
<p>As this will only ever be used in development, you should use the <code>--dev</code> flag. We also need to specify the settings for our project. This example is for a module to be used with a Laravel application and should be saved as <code>phpcs.xml</code>:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span><span class="hljs-meta">?&gt;</span></span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">ruleset</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"PHP_CodeSniffer"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td> <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>The coding standard for our project.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td> <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>app<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td> <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>tests<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-tag">&lt;<span class="hljs-name">exclude-pattern</span>&gt;</span>*/migrations/*<span class="hljs-tag">&lt;/<span class="hljs-name">exclude-pattern</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td> <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"np"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">rule</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"PSR2"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">ruleset</span>&gt;</span></td></table></code></pre>
<p>Note the <code>&lt;rule /&gt;</code> tag - this specifies that this project should be validated as PSR2. Also, note the <code>&lt;file /&gt;</code> and <code>&lt;exclude-pattern /&gt;</code> tags - these specify what files should and should not be checked.</p>
<p>With this in place, we’re ready to run PHP CodeSniffer:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpcs</td><tr><td class="linenos" data-pseudo-content="2"></td><td>......................</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>Time: 45ms; Memory: 6Mb</td></table></code></pre>
<p>In this case, our code validated successfully. However, if it doesn’t, there’s an easy way to tidy it up. Just run this command:</p>
<pre><code class="hljs lang-bash singleline">$ vendor/bin/phpcbf</code></pre>
<p>That will fix many of the most common problems, and any others should be straightforward to fix.</p>
<p>PHP CodeSniffer makes it extremely straightforward to enforce a coding style. You can write custom rulesets or just use an existing one as you prefer, and it’s easy to fix many common problems automatically. In fact, it makes it so easy that there’s very little excuse <em>not</em> to meet the coding standard.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Decorating Laravel repositories]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/03/01/decorating-laravel-repositories/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/03/01/decorating-laravel-repositories/</guid>
            <pubDate>Wed, 01 Mar 2017 23:16:57 GMT</pubDate>
            <description><![CDATA[<p><a href="/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/">As mentioned previously</a>, when building any nontrivial Laravel application, it’s prudent to decouple our controllers from the Eloquent ORM (or any other ORM or data source we may be using) by creating an interface, and then writing a repository that implements that interface. We can then resolve the interface to our repository, and use the repository to interact with our data source. Should we need to switch to a different implementation, we then need only create the new repository and amend how Laravel resolves that interface.</p>
<p>The same principle applies when it comes to caching. Database queries are typically a major bottleneck in a web application, and so it’s prudent to implement some form of caching for your queries. However, it’s a bad idea to do so in your controllers, because just as with Eloquent models, you’re tying yourself to one particular implementation and won’t be able to switch without rewriting a good chunk of your controllers, as well as possibly having to maintain large amounts of duplicate code for when a query is made in several places.</p>
<p>Alternatively, you could implement caching within the methods of your repository, which might make sense for smaller projects. However, it means that your repository is now dependent on both the ORM and cache you chose. If you decide you want to change your ORM but retain the same caching system, or vice versa, you’re stuck with writing a new repository to handle both, duplicating work you’ve already done.</p>
<p>Fortunately, there’s a more elegant solution. Using the <a href="http://designpatternsphp.readthedocs.io/en/latest/Structural/Decorator/README.html">decorator pattern</a>, we can create a second repository that implements the same interface and “wraps” the original repository. Each of its methods will call its counterpart in the original, and if appropriate cache the response. That way, our caching is implemented separately from our database interactions, and we can easily create a repository for a new data source without affecting the caching in the slightest.</p>
<p>Say we have the following interface for our <code>User</code> model:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td></table></code></pre>
<p>And the following repository implements that interface:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Repositories</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">UserRepositoryInterface</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EloquentUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-keyword">private</span> $model;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $model)</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;model = $model;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;model-&gt;all();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;model-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        $user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;model;</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        $user-&gt;email = $input[<span class="hljs-string">'email'</span>];</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        $user-&gt;name = $input[<span class="hljs-string">'name'</span>];</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        $user-&gt;password = Hash::make($input[<span class="hljs-string">'password'</span>]);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        $user-&gt;save();</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-keyword">return</span> $user;</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="37"></td><td>}</td></table></code></pre>
<p>We might implement the following repository class to handle caching:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Decorators</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">UserRepositoryInterface</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span> <span class="hljs-title">as</span> <span class="hljs-title">Cache</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">protected</span> $repository;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">protected</span> $cache;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(UserRepositoryInterface $repository, Cache $cache)</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">$this</span>-&gt;repository = $repository;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache = $cache;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-string">'users'</span>)-&gt;remember(<span class="hljs-string">'all'</span>, <span class="hljs-number">60</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;repository-&gt;all();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-string">'users'</span>)-&gt;remember($id, <span class="hljs-number">60</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($id)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;repository-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-keyword">$this</span>-&gt;cache-&gt;tags(<span class="hljs-string">'users'</span>)-&gt;flush();</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;repository-&gt;create($input);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td>}</td></table></code></pre>
<p>Note how each method doesn’t actually do any querying. Instead, the constructor accepts an implementation of the same interface and the cache, and we defer all interactions with the database to that implementation. Each call that queries the database is wrapped in a callback so that it’s stored in Laravel’s cache when it’s returned, without touching the original implementation. When a user is created, the users tag is flushed from the cache so that stale results don’t get served.</p>
<p>To actually use this implementation, we need to update our service provider so that it resolves the interface to an implementation of our decorator:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app-&gt;singleton(<span class="hljs-string">'App\Repositories\Interfaces\UserRepositoryInterface'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            $baseRepo = <span class="hljs-keyword">new</span> \App\Repositories\EloquentUserRepository(<span class="hljs-keyword">new</span> \App\User);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            $cachingRepo = <span class="hljs-keyword">new</span> \App\Repositories\Decorators\CachingUserRepository($baseRepo, <span class="hljs-keyword">$this</span>-&gt;app[<span class="hljs-string">'cache.store'</span>]);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-keyword">return</span> $cachingRepo;</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>We instantiate the base repository, passing it the appropriate model. Then we instantiate the decorator, passing it the base repository and the cache, and return it. Now our controllers will start using the new decorator.</p>
<h2 id="testing-the-decorator">Testing the decorator</h2>
<p>Now that we have a working decorator, how do we test it? Just as with the decorator itself, we want our tests to be completely decoupled from any particular implementation of the dependencies. If in future we’re asked to migrate the database to MongoDB, say, we’ll have plenty of work writing our new database repositories, so we don’t want to have to rewrite the tests for our decorator as well. Fortunately, using Mockery we can just mock the interface for the repository, and pass that mock into the constructor of the decorator in our test. That way we can have the mock return a known response and not involve either the database repository or the underlying models in any way.</p>
<p>We will also want to mock the cache itself, as this is a unit test and so as far as possible it should not be testing anything outside of the repository class. Here’s an example of how we might test the above decorator.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">Tests</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Decorators</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\<span class="hljs-title">TestCase</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Decorators</span>\<span class="hljs-title">CachingUserRepository</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Mockery</span> <span class="hljs-title">as</span> <span class="hljs-title">m</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * Test fetching all items</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingAll</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">// Create mock of decorated repository</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $repo = m::mock(<span class="hljs-string">'App\Repositories\Interfaces\UserRepositoryInterface'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        $repo-&gt;shouldReceive(<span class="hljs-string">'all'</span>)-&gt;andReturn([]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-comment">// Create mock of cache</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        $cache = m::mock(<span class="hljs-string">'Illuminate\Contracts\Cache\Repository'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $cache-&gt;shouldReceive(<span class="hljs-string">'tags'</span>)-&gt;with(<span class="hljs-string">'users'</span>)-&gt;andReturn($cache);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        $cache-&gt;shouldReceive(<span class="hljs-string">'remember'</span>)-&gt;andReturn([]);</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">// Instantiate the repository</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $repository = <span class="hljs-keyword">new</span> CachingUserRepository($repo, $cache);</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">// Get all</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        $items = $repository-&gt;all();</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertCount(<span class="hljs-number">0</span>, $items);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     * Test fetching a single item</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="39"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFindOrFail</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment">// Create mock of decorated repository</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        $repo = m::mock(<span class="hljs-string">'App\Repositories\Interfaces\UserRepositoryInterface'</span>);</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        $repo-&gt;shouldReceive(<span class="hljs-string">'findOrFail'</span>)-&gt;with(<span class="hljs-number">1</span>)-&gt;andReturn(<span class="hljs-keyword">null</span>);</td><tr><td class="linenos" data-pseudo-content="45"></td><td></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        <span class="hljs-comment">// Create mock of cache</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>        $cache = m::mock(<span class="hljs-string">'Illuminate\Contracts\Cache\Repository'</span>);</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        $cache-&gt;shouldReceive(<span class="hljs-string">'tags'</span>)-&gt;with(<span class="hljs-string">'users'</span>)-&gt;andReturn($cache);</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        $cache-&gt;shouldReceive(<span class="hljs-string">'remember'</span>)-&gt;andReturn(<span class="hljs-keyword">null</span>);</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>        <span class="hljs-comment">// Instantiate the repository</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>        $repository = <span class="hljs-keyword">new</span> CachingUserRepository($repo, $cache);</td><tr><td class="linenos" data-pseudo-content="53"></td><td></td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment">// Get all</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        $item = $repository-&gt;findOrFail(<span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertNull($item);</td><tr><td class="linenos" data-pseudo-content="57"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="60"></td><td>     * Test creating a single item</td><tr><td class="linenos" data-pseudo-content="61"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="62"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="63"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCreate</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment">// Create mock of decorated repository</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        $repo = m::mock(<span class="hljs-string">'App\Repositories\Interfaces\UserRepositoryInterface'</span>);</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        $repo-&gt;shouldReceive(<span class="hljs-string">'create'</span>)-&gt;with([<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>])-&gt;andReturn(<span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="69"></td><td></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-comment">// Create mock of cache</span></td><tr><td class="linenos" data-pseudo-content="71"></td><td>        $cache = m::mock(<span class="hljs-string">'Illuminate\Contracts\Cache\Repository'</span>);</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        $cache-&gt;shouldReceive(<span class="hljs-string">'tags'</span>)-&gt;with(<span class="hljs-string">'usersUser'</span>)-&gt;andReturn($cache);</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        $cache-&gt;shouldReceive(<span class="hljs-string">'flush'</span>)-&gt;andReturn(<span class="hljs-keyword">true</span>);</td><tr><td class="linenos" data-pseudo-content="74"></td><td></td><tr><td class="linenos" data-pseudo-content="75"></td><td>        <span class="hljs-comment">// Instantiate the repository</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        $repository = <span class="hljs-keyword">new</span> CachingUserRepository($repo, $cache);</td><tr><td class="linenos" data-pseudo-content="77"></td><td></td><tr><td class="linenos" data-pseudo-content="78"></td><td>        <span class="hljs-comment">// Get all</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>        $item = $repository-&gt;create([<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="80"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertTrue($item);</td><tr><td class="linenos" data-pseudo-content="81"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="82"></td><td></td><tr><td class="linenos" data-pseudo-content="83"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="85"></td><td>        m::close();</td><tr><td class="linenos" data-pseudo-content="86"></td><td>        <span class="hljs-keyword">parent</span>::tearDown();</td><tr><td class="linenos" data-pseudo-content="87"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="88"></td><td>}</td></table></code></pre>
<p>As you can see, all we care about is that the underlying repository interface receives the correct method calls and arguments, nothing more. That way our test is fast and repository-agnositc.</p>
<h2 id="other-applications">Other applications</h2>
<p>Here I’ve used this technique to cache the queries, but that’s not the only use case for decorating a repository. For instance, you could decorate a repository to fire events when certain methods are called, and write different decorators when reusing these repositories for different applications. You could create one to log interactions with the repository, or you could use an external library to cache your queries, all without touching your existing repository. Should we need to switch back to our base repository, it’s just a matter of amending the service provider accordingly as both the decorator and the repository implement the same interface.</p>
<p>Creating decorators does mean you have to implement all of the interface’s methods again, but if you have a base repository that your other ones inherit from, you can easily create a base decorator in a similar fashion that wraps methods common to all the repositories, and then just implement the additional methods for each decorator as required. Also, each method is likely to be fairly limited in scope so it’s not generally too onerous.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[My first Laravel package]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/02/19/my-first-laravel-package/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/02/19/my-first-laravel-package/</guid>
            <pubDate>Sun, 19 Feb 2017 15:50:11 GMT</pubDate>
            <description><![CDATA[<p>For some time now I’ve had a Laravel middleware I use extensively to add ETags to HTTP requests. I often use it for work projects, but obviously copying and pasting it all the time was a pain. I always meant to create a package for it, but I didn’t want to do so until such time as I had some proper tests for it. Now I’ve finally figured out how to test middleware in isolation and I’ve got around to adding tests and creating a proper package for it.</p>
<p>It’s available on <a href="https://github.com/matthewbdaly/laravel-etag-middleware">Github</a> and <a href="https://packagist.org/packages/matthewbdaly/laravel-etag-middleware">Packagist</a> if you want to use it.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Integrating Behat with Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2017/02/18/integrating-behat-with-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2017/02/18/integrating-behat-with-laravel/</guid>
            <pubDate>Sat, 18 Feb 2017 21:25:57 GMT</pubDate>
            <description><![CDATA[<p>The Gherkin format used by tools like Cucumber is a really great way of specifying how your application will work. It’s easy for even non-technical stakeholders to understand, it makes it natural to break your tests into easily reusable steps, and it encourages you to think about the application from an end-user’s perspective. It’s also one of the easiest ways to get started writing automated tests when you first start out - it’s much more intuitive to a junior developer than lower-level unit tests, and is easier to add to a legacy project that may not have been built with testability in mind - if you can drive a browser, you can test it.</p>
<p><a href="http://behat.org/en/latest/">Behat</a> is a PHP equivalent. Combined with <a href="http://mink.behat.org/en/latest/">Mink</a>, it allows for easy automated acceptance tests of a PHP application. However, out of the box it doesn’t integrate well with Laravel. There is <a href="https://github.com/laracasts/Behat-Laravel-Extension">Jeffrey Way’s Behat Laravel extension</a>, but it doesn’t seem to be actively maintained and seems to be overkill for this purpose. I wanted something that I could use to run integration tests using PHPUnit’s assertions and Laravel’s testing utilities, and crucially, I wanted to do so as quickly as possible. That meant running a web server and using an automated web browser wasn’t an option. Also, I often work on REST API’s, and browser testing isn’t appropriate for those - in API tests I’m more interested in setting up the fixtures, making a single request, and verifying that it does what it’s meant to do, as quickly as possible.</p>
<p>As it turns out, integrating Behat and Laravel isn’t that hard. When using Behat, your <code>FeatureContext.php</code> file must implement the <code>Behat\Behat\Context\Context</code> interface, but as this interface does not implement any methods, you can extend any existing class and declare that it implements that interface. That means we can just extend the existing <code>Tests\TestCase</code> class in Laravel 5.4 and gain access to all the same testing utilities we have in our regular Laravel tests.</p>
<p>Then, in the constructor we can set environment variables using <code>putenv()</code> so that we can set it up to use an in-memory SQLite database for faster tests. We also use the <code>@BeforeScenario</code> hook to migrate the database before each scenario, and the <code>@AfterScenario</code> hook to roll it back afterwards.</p>
<p>Here’s the finished example:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Behat</span>\<span class="hljs-title">Behat</span>\<span class="hljs-title">Context</span>\<span class="hljs-title">Context</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Behat</span>\<span class="hljs-title">Gherkin</span>\<span class="hljs-title">Node</span>\<span class="hljs-title">PyStringNode</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Behat</span>\<span class="hljs-title">Gherkin</span>\<span class="hljs-title">Node</span>\<span class="hljs-title">TableNode</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Tests</span>\<span class="hljs-title">TestCase</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Behat</span>\<span class="hljs-title">Behat</span>\<span class="hljs-title">Tester</span>\<span class="hljs-title">Exception</span>\<span class="hljs-title">PendingException</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Behat</span>\<span class="hljs-title">Behat</span>\<span class="hljs-title">Hook</span>\<span class="hljs-title">Scope</span>\<span class="hljs-title">BeforeScenarioScope</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Behat</span>\<span class="hljs-title">Behat</span>\<span class="hljs-title">Hook</span>\<span class="hljs-title">Scope</span>\<span class="hljs-title">AfterScenarioScope</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Kernel</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="15"></td><td> * Defines application features from the specific context.</td><tr><td class="linenos" data-pseudo-content="16"></td><td> */</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeatureContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Context</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">protected</span> $content;</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Initializes context.</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * Every scenario gets its own context instance.</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * You can also pass arbitrary arguments to the</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     * context constructor through behat.yml.</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        putenv(<span class="hljs-string">'DB_CONNECTION=sqlite'</span>);</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        putenv(<span class="hljs-string">'DB_DATABASE=:memory:'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-keyword">parent</span>::setUp();</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-comment">/** <span class="hljs-doctag">@BeforeScenario</span> */</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">before</span><span class="hljs-params">(BeforeScenarioScope $scope)</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-keyword">$this</span>-&gt;artisan(<span class="hljs-string">'migrate'</span>);</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app[Kernel::class]-&gt;setArtisan(<span class="hljs-keyword">null</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-comment">/** <span class="hljs-doctag">@AfterScenario</span> */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">after</span><span class="hljs-params">(AfterScenarioScope $scope)</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-keyword">$this</span>-&gt;artisan(<span class="hljs-string">'migrate:rollback'</span>);</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="50"></td><td></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="52"></td><td>     * <span class="hljs-doctag">@Given</span> I visit the path :path</td><tr><td class="linenos" data-pseudo-content="53"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iVisitThePath</span><span class="hljs-params">($path)</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals(<span class="hljs-number">200</span>, $response-&gt;getStatusCode());</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-keyword">$this</span>-&gt;content = $response-&gt;getContent();</td><tr><td class="linenos" data-pseudo-content="59"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="62"></td><td>     * <span class="hljs-doctag">@Then</span> I should see the text :text</td><tr><td class="linenos" data-pseudo-content="63"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="64"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iShouldSeeTheText</span><span class="hljs-params">($text)</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertContains($text, <span class="hljs-keyword">$this</span>-&gt;content);</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="70"></td><td>     * <span class="hljs-doctag">@Given</span> a user called :user exists</td><tr><td class="linenos" data-pseudo-content="71"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aUserCalledExists</span><span class="hljs-params">($user)</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        $user = factory(App\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="75"></td><td>            <span class="hljs-string">'name'</span> =&gt; $user,</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="77"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="80"></td><td>     * <span class="hljs-doctag">@Given</span> I am logged in as :user</td><tr><td class="linenos" data-pseudo-content="81"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iAmLoggedInAs</span><span class="hljs-params">($user)</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="84"></td><td>        $user = User::where(<span class="hljs-string">'name'</span>, $user)-&gt;first();</td><tr><td class="linenos" data-pseudo-content="85"></td><td>        <span class="hljs-keyword">$this</span>-&gt;be($user);</td><tr><td class="linenos" data-pseudo-content="86"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="87"></td><td></td><tr><td class="linenos" data-pseudo-content="88"></td><td>}</td></table></code></pre>
<p>Note that I’ve added a few basic example methods for our tests. As you can see, we can call the same methods we normally use in Laravel tests to make assertions and HTTP requests. If you’re using Dusk, you can also call that in the same way you usually would.</p>
<p>We might then write the following feature file to demonstrate our application at work:</p>
<pre><code class="hljs lang-gherkin"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">Feature</span>: Login</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">Background</span>:</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-keyword">Given</span> a user called <span class="hljs-string">"Alan"</span> exists</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-keyword">And</span> a user called <span class="hljs-string">"Bob"</span> exists</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">And</span> a user called <span class="hljs-string">"Clare"</span> exists</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-keyword">And</span> a user called <span class="hljs-string">"Derek"</span> exists</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">And</span> a user called <span class="hljs-string">"Eric"</span> exists</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">Scenario</span>: Log in as Alan</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-keyword">Given</span> I am logged in as <span class="hljs-string">"Alan"</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">And</span> I visit the path <span class="hljs-string">"/"</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">Then</span> I should see the text <span class="hljs-string">"Laravel"</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">Scenario</span>: Log in as Bob</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">Given</span> I am logged in as <span class="hljs-string">"Bob"</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">And</span> I visit the path <span class="hljs-string">"/"</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">Then</span> I should see the text <span class="hljs-string">"Laravel"</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">Scenario</span>: Log in as Clare</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">Given</span> I am logged in as <span class="hljs-string">"Clare"</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-keyword">And</span> I visit the path <span class="hljs-string">"/"</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">Then</span> I should see the text <span class="hljs-string">"Laravel"</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">Scenario</span>: Log in as Derek</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">Given</span> I am logged in as <span class="hljs-string">"Derek"</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">And</span> I visit the path <span class="hljs-string">"/"</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-keyword">Then</span> I should see the text <span class="hljs-string">"Laravel"</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-keyword">Scenario</span>: Log in as Eric</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">Given</span> I am logged in as <span class="hljs-string">"Eric"</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">And</span> I visit the path <span class="hljs-string">"/"</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-keyword">Then</span> I should see the text <span class="hljs-string">"Laravel"</span></td></table></code></pre>
<p>We can then run these tests with <code>vendor/bin/behat</code>:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/behat </td><tr><td class="linenos" data-pseudo-content="2"></td><td>Feature: Login</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  Background:                         <span class="hljs-comment"># features/auth.feature:3</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>    Given a user called <span class="hljs-string">"Alan"</span> exists <span class="hljs-comment"># FeatureContext::aUserCalledExists()</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    And a user called <span class="hljs-string">"Bob"</span> exists    <span class="hljs-comment"># FeatureContext::aUserCalledExists()</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    And a user called <span class="hljs-string">"Clare"</span> exists  <span class="hljs-comment"># FeatureContext::aUserCalledExists()</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    And a user called <span class="hljs-string">"Derek"</span> exists  <span class="hljs-comment"># FeatureContext::aUserCalledExists()</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    And a user called <span class="hljs-string">"Eric"</span> exists   <span class="hljs-comment"># FeatureContext::aUserCalledExists()</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>  Scenario: Log <span class="hljs-keyword">in</span> as Alan               <span class="hljs-comment"># features/auth.feature:10</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    Given I am logged <span class="hljs-keyword">in</span> as <span class="hljs-string">"Alan"</span>       <span class="hljs-comment"># FeatureContext::iAmLoggedInAs()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    And I visit the path <span class="hljs-string">"/"</span>             <span class="hljs-comment"># FeatureContext::iVisitThePath()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    Then I should see the text <span class="hljs-string">"Laravel"</span> <span class="hljs-comment"># FeatureContext::iShouldSeeTheText()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>  Scenario: Log <span class="hljs-keyword">in</span> as Bob                <span class="hljs-comment"># features/auth.feature:15</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    Given I am logged <span class="hljs-keyword">in</span> as <span class="hljs-string">"Bob"</span>        <span class="hljs-comment"># FeatureContext::iAmLoggedInAs()</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    And I visit the path <span class="hljs-string">"/"</span>             <span class="hljs-comment"># FeatureContext::iVisitThePath()</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    Then I should see the text <span class="hljs-string">"Laravel"</span> <span class="hljs-comment"># FeatureContext::iShouldSeeTheText()</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  Scenario: Log <span class="hljs-keyword">in</span> as Clare              <span class="hljs-comment"># features/auth.feature:20</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    Given I am logged <span class="hljs-keyword">in</span> as <span class="hljs-string">"Clare"</span>      <span class="hljs-comment"># FeatureContext::iAmLoggedInAs()</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    And I visit the path <span class="hljs-string">"/"</span>             <span class="hljs-comment"># FeatureContext::iVisitThePath()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    Then I should see the text <span class="hljs-string">"Laravel"</span> <span class="hljs-comment"># FeatureContext::iShouldSeeTheText()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>  Scenario: Log <span class="hljs-keyword">in</span> as Derek              <span class="hljs-comment"># features/auth.feature:25</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    Given I am logged <span class="hljs-keyword">in</span> as <span class="hljs-string">"Derek"</span>      <span class="hljs-comment"># FeatureContext::iAmLoggedInAs()</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    And I visit the path <span class="hljs-string">"/"</span>             <span class="hljs-comment"># FeatureContext::iVisitThePath()</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    Then I should see the text <span class="hljs-string">"Laravel"</span> <span class="hljs-comment"># FeatureContext::iShouldSeeTheText()</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>  Scenario: Log <span class="hljs-keyword">in</span> as Eric               <span class="hljs-comment"># features/auth.feature:30</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    Given I am logged <span class="hljs-keyword">in</span> as <span class="hljs-string">"Eric"</span>       <span class="hljs-comment"># FeatureContext::iAmLoggedInAs()</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    And I visit the path <span class="hljs-string">"/"</span>             <span class="hljs-comment"># FeatureContext::iVisitThePath()</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    Then I should see the text <span class="hljs-string">"Laravel"</span> <span class="hljs-comment"># FeatureContext::iShouldSeeTheText()</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>5 scenarios (5 passed)</td><tr><td class="linenos" data-pseudo-content="37"></td><td>40 steps (40 passed)</td><tr><td class="linenos" data-pseudo-content="38"></td><td>0m0.50s (19.87Mb)</td></table></code></pre>
<p>Higher level tests can get very tedious if you’re not careful - you wind up setting up the same fixtures and making the same requests many times over. By using Behat in this way, not only are you writing your tests in a way that is easy to understand, but you’re also breaking it down into logical, repeatable steps, and by passing arguments in each step you limit the amount of repetition. It’s also fast if you aren’t running browser-based tests, making it particularly well-suited to API testing.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Testing Laravel Middleware]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/11/29/testing-laravel-middleware/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/11/29/testing-laravel-middleware/</guid>
            <pubDate>Tue, 29 Nov 2016 23:00:38 GMT</pubDate>
            <description><![CDATA[<p>It’s widely accepted that high-level integration tests alone do not make for a good test suite. Ideally each individual component of your application should have unit tests, which test that component in isolation. These unit tests are usually much quicker to run, making it easier to practice test-driven development. However, it can sometimes be hard to grasp how to test that one component on its own.</p>
<p>The other day I had an issue with several middleware classes for a Laravel application and I wanted to verify that they were working as expected. Sounds like a job for dedicated unit tests, but I hadn’t tested custom middleware in isolation before, and figuring out how to do so took a while.</p>
<p>Laravel middleware accepts an instance of <code>Illuminate\Http\Request</code>, itself based on the Symfony request object, as well as a closure for the action to take next. Depending on what the middleware does, it may return a redirect or simply amend the existing request or response. So in theory you can instantiate a request object, pass it to the middleware, and check the response. For middleware that does something simple, such as redirecting users based on certain conditions, this is fairly straightforward.</p>
<p>In this example we have a fairly useless piece of middleware that checks to see what the route is for a request and redirects it if it matches a certain pattern:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedirectFromAdminMiddleware</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Handle an incoming request.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;is(<span class="hljs-string">'admin*'</span>)) {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> $next($request);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>}</td></table></code></pre>
<p>While this example is of limited use, it wouldn’t take much work to develop it to redirect conditionally based on an account type, and it’s simple enough to demonstrate the principles involved. In these tests, we create instances of <code>Illuminate\Http\Request</code> and pass them to the middleware’s <code>handle()</code> method, along with an empty closure representing the response. If the middleware does not amend the request, we get the empty response from the closure. If it does amend the request, we get a redirect response.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedirectFromAdminMiddlewareTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testRedirectMiddlewareCalledOnAdmin</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $request = Request::create(<span class="hljs-string">'http://example.com/admin'</span>, <span class="hljs-string">'GET'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment">// Pass it to the middleware</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        $middleware = <span class="hljs-keyword">new</span> App\Http\Middleware\RedirectFromAdminMiddleware();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        $response = $middleware-&gt;handle($request, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{});</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($response-&gt;getStatusCode(), <span class="hljs-number">302</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testRedirectMiddlewareNotCalledOnNonAdmin</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $request = Request::create(<span class="hljs-string">'http://example.com/pages'</span>, <span class="hljs-string">'GET'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Pass it to the middleware</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $middleware = <span class="hljs-keyword">new</span> App\Http\Middleware\RedirectFromAdminMiddleware();</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        $response = $middleware-&gt;handle($request, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{});</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($response, <span class="hljs-keyword">null</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>}</td></table></code></pre>
<p>For middleware that fetches the response and acts on it, things are a little more complex. For instance, this is the Etag middleware I use on many projects:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ETagMiddleware</span> </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Implement Etag support</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@param</span>  \Closure  $next</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     * <span class="hljs-doctag">@return</span> mixed</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">($request, Closure $next)</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Get response</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        $response = $next($request);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-comment">// If this was a GET request...</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">if</span> ($request-&gt;isMethod(<span class="hljs-string">'get'</span>)) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-comment">// Generate Etag</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $etag = md5($response-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="23"></td><td>            $requestEtag = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">''</span>, $request-&gt;getETags());</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-comment">// Check to see if Etag has changed</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-keyword">if</span>($requestEtag &amp;&amp; $requestEtag[<span class="hljs-number">0</span>] == $etag) {</td><tr><td class="linenos" data-pseudo-content="26"></td><td>                $response-&gt;setNotModified();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-comment">// Set Etag</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>            $response-&gt;setEtag($etag);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">return</span> $response;</td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="34"></td><td>}</td></table></code></pre>
<p>This acts on the response object, so we need to pass that through as well. Fortunately, Mockery allows us to create a mock of our response object and set it up to handle only those methods we anticipate being called:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ETagMiddlewareTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test new request not cached</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testModified</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create mock response</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $response = Mockery::mock(<span class="hljs-string">'Illuminate\Http\Response'</span>)-&gt;shouldReceive(<span class="hljs-string">'getContent'</span>)-&gt;once()-&gt;andReturn(<span class="hljs-string">'blah'</span>)-&gt;getMock();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        $response-&gt;shouldReceive(<span class="hljs-string">'setEtag'</span>)-&gt;with(md5(<span class="hljs-string">'blah'</span>));</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        $request = Request::create(<span class="hljs-string">'http://example.com/admin'</span>, <span class="hljs-string">'GET'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Pass it to the middleware</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $middleware = <span class="hljs-keyword">new</span> App\Http\Middleware\ETagMiddleware();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        $middlewareResponse = $middleware-&gt;handle($request, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($response)</span> </span>{ </td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-keyword">return</span> $response;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * Test repeated request not modified</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testNotModified</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment">// Create mock response</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $response = Mockery::mock(<span class="hljs-string">'Illuminate\Http\Response'</span>)-&gt;shouldReceive(<span class="hljs-string">'getContent'</span>)-&gt;once()-&gt;andReturn(<span class="hljs-string">'blah'</span>)-&gt;getMock();</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        $response-&gt;shouldReceive(<span class="hljs-string">'setEtag'</span>)-&gt;with(md5(<span class="hljs-string">'blah'</span>));</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        $response-&gt;shouldReceive(<span class="hljs-string">'setNotModified'</span>);</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        $request = Request::create(<span class="hljs-string">'http://example.com/admin'</span>, <span class="hljs-string">'GET'</span>, [], [], [], [</td><tr><td class="linenos" data-pseudo-content="42"></td><td>            <span class="hljs-string">'ETag'</span> =&gt; md5(<span class="hljs-string">'blah'</span>)</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>        <span class="hljs-comment">// Pass it to the middleware</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>        $middleware = <span class="hljs-keyword">new</span> App\Http\Middleware\ETagMiddleware();</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        $middlewareResponse = $middleware-&gt;handle($request, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> <span class="hljs-title">use</span> <span class="hljs-params">($response)</span> </span>{ </td><tr><td class="linenos" data-pseudo-content="48"></td><td>            <span class="hljs-keyword">return</span> $response;</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="51"></td><td></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teardown</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        Mockery::close();</td><tr><td class="linenos" data-pseudo-content="55"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="56"></td><td>}</td></table></code></pre>
<p>In the first example we mock out the <code>getContent()</code> and <code>setEtag()</code> methods of our response to make sure they get called, and then pass the request to the middleware, along with a closure that returns the response. In the second example, we also mock out <code>setNotModified()</code> to ensure that the correct status code of 304 is set, and add an ETag to our request. In this way we can easily test our middleware in isolation, rather than having to resort to building up our entire application just to test one small method.</p>
<p>Middleware is a convenient place to put functionality that’s needed for many routes, but you shouldn’t neglect testing it, and ideally you shouldn’t have to resort to writing a slow integration test to test it works as expected. By mocking out your dependencies, it’s generally not too hard to test it in isolation, resulting in faster and more robust test suites.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Easy static asset versioning in PHP]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/11/26/easy-static-asset-versioning-in-php/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/11/26/easy-static-asset-versioning-in-php/</guid>
            <pubDate>Sat, 26 Nov 2016 21:40:39 GMT</pubDate>
            <description><![CDATA[<p>It’s prudent to cache static assets such as images, Javascript and CSS to improve performance, but that raises the issue of changes not being reflected in your site due to visitor’s browsers retaining the cached versions. Many content management systems and frameworks already handle this for you (such as Laravel’s Elixir build system), but what if you have to work with a legacy application that doesn’t do this?</p>
<p>Fortunately there’s a quite easy solution in PHP. Using the <code>filemtime()</code> function described <a href="http://php.net/manual/en/function.filemtime.php">here</a>, we can get a Unix timestamp for when a file was last altered. This is perfect to use to identify when a file last changed, because by appending a new query string to the file name when loading it, we can trick the browser into thinking it’s a new file when it’s not, as in this example for a CodeIgniter application:</p>
<pre><code class="hljs lang-php singleline">&lt;link rel=<span class="hljs-string">"stylesheet"</span> type=<span class="hljs-string">"text/css"</span> href=<span class="hljs-string">"&lt;?=$path?&gt;?v=&lt;?=filemtime($path)?&gt;"</span>&gt;</code></pre>
<p>   Obviously, this is a bit repetitive, so you may want to refactor this into some kind of template helper to make it easier to use, but the underlying principle applies to most programming languages. For instance, if you wanted to do so in a Handlebars template, you might want to create a helper something like this:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> Handlebars = <span class="hljs-built_in">require</span>(<span class="hljs-string">'handlebars'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>Handlebars.registerHelper(<span class="hljs-string">'version'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">path</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td>   <span class="hljs-keyword">return</span> path + <span class="hljs-string">'?v='</span> + fs.statSync(path).mtime.getTime();</td><tr><td class="linenos" data-pseudo-content="5"></td><td>});</td></table></code></pre>
<p>Where more robust solutions such as Elixir are already available, I’d advise making full use of them. However, this technique is a quick and easy way to implement versioning for static assets in existing projects.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap App with Laravel and Angular - Part 4]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/11/13/building-a-phonegap-app-with-laravel-and-angular-part-4/</guid>
            <pubDate>Sun, 13 Nov 2016 16:15:00 GMT</pubDate>
            <description><![CDATA[<p>In this instalment we’ll return to the back end. What we’ve done so far is typical of the kind of proof of concept we might do for a client early on, before going back and implementing the full set of features later on. Now we’ll go back and start to improve on that rather quick-and-dirty API by making sure we follow a few best practices.</p>
<p>For those of you who want to follow the Laravel Phonegap tutorials, I’ve created a dedicated category <a href="/blog/categories/laravel-phonegap-tutorial/">here</a> for those tutorials. This category include RSS and Atom feeds, so if you only want to read those posts, you can do so. I’ve also done the same for the <a href="/blog/categories/django-blog-tutorial/">Django tutorials</a>.</p>
<h2 id="the-repository-pattern">The Repository pattern</h2>
<p>One of the issues we currently have with our API is that we’re passing our Eloquent models into our controllers. This may not seem like a huge issue, but it means that our controllers are tightly coupled to the Eloquent ORM, so if we wanted to switch to another ORM, or to a completely different database such as MongoDB, we’d have to amend our controllers. That’s not good.</p>
<p>However, using the <a href="http://designpatternsphp.readthedocs.io/en/latest/More/Repository/README.html">Repository pattern</a> we can first of all define an interface for our repository, and then create a repository class that implements that interface. That way we can interact with the repository class in our controllers, rather than using Eloquent models directly. Then, if we want to switch databases, we merely amend the repository class to change the implementation of those methods, without having to touch our controllers. Also, it makes it much easier to test our controllers in isolation, because we can easily mock our repository class using Mockery and hard-code the response, so our tests won’t touch the database and will therefore run more quickly. We won’t touch on that this time, but it’s a very significant advantage.</p>
<p>If you haven’t used interfaces before in PHP, they aren’t that hard. They merely specify what methods an object implementing that method must have and what arguments they must accept, but do not specify the details of the implementation. This makes it easy to determine if a class implements an interface correctly, because it will throw an exception if it doesn’t.</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PetRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td></table></code></pre>
<p>That’s all there is to it. We define it using the <code>interface</code> keyword and we specify the methods it must implement. Save this file at <code>app/Repositories/Interfaces/PetRepositoryInterface.php</code>.</p>
<p>Next, we implement the repository class:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">PetRepositoryInterface</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EloquentPetRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PetRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">private</span> $pet;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Pet $pet)</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;pet = $pet;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;pet-&gt;all();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;pet-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;pet-&gt;create($input);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}</td></table></code></pre>
<p>Save this to <code>app/Repositories/EloquentPetRepository.php</code>. Note how the methods closely mirror the underlying Eloquent methods, but they don’t need to - you could change the underlying implementation of each method, but the repository would still work in exactly the same way.</p>
<p>To make this work, we need to make a few changes elsewhere. In <code>composer.json</code>, we need to add the new <code>Repositories</code> folder to our classmap:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    "autoload": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        "classmap": [</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            "database",</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            "app/Repositories"</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        "psr-4": {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            "AnimalFriend\\": "app/"</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    },</td></table></code></pre>
<p>And in <code>app/Providers/AppServiceProvider.php</code>, we need to bind our new files:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'AnimalFriend\Repositories\Interfaces\PetRepositoryInterface'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-string">'AnimalFriend\Repositories\EloquentPetRepository'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}</td></table></code></pre>
<p>With that done, we can now update <code>app/Http/Controllers/PetController.php</code> to use the repository:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">PetRepositoryInterface</span> <span class="hljs-title">as</span> <span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">private</span> $pet;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Pet $pet)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;pet = $pet;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment">// Get all pets</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        $pets = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;all();</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($pets, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     * Show the form for creating a new resource.</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     * Store a newly created resource in storage.</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="46"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="47"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="54"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="55"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="56"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="57"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="58"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="61"></td><td>        <span class="hljs-comment">// Get pet</span></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        $pet = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="63"></td><td></td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($pet, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="66"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="67"></td><td></td><tr><td class="linenos" data-pseudo-content="68"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="69"></td><td>     * Show the form for editing the specified resource.</td><tr><td class="linenos" data-pseudo-content="70"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="71"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="72"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="73"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="74"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="78"></td><td></td><tr><td class="linenos" data-pseudo-content="79"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="80"></td><td>     * Update the specified resource in storage.</td><tr><td class="linenos" data-pseudo-content="81"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="82"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="83"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="84"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="85"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="90"></td><td></td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="92"></td><td>     * Remove the specified resource from storage.</td><tr><td class="linenos" data-pseudo-content="93"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="94"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="95"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="96"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="97"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="99"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="100"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="101"></td><td>}</td></table></code></pre>
<p>Our repository is now injected automatically into the controller. To make this work we need to run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ composer dump-autoload</code></pre>
<p>Running our tests should confirm that everything is still working:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>............                                                      12 / 12 (100%)</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>Time: 897 ms, Memory: 18.00MB</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>OK (12 tests, 46 assertions)</td></table></code></pre>
<p>Let’s do the same for the User model. First we implement our interface in <code>app/Repositories/Interfaces/UserRepositoryInterface.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}</td></table></code></pre>
<p>Next we create our repository at <code>app/Repositories/EloquentUserRepository.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">UserRepositoryInterface</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">JWTAuth</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EloquentUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserRepositoryInterface</span> </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">private</span> $user;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-keyword">$this</span>-&gt;user = $user;</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">all</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;user-&gt;all();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOrFail</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;user-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">($input)</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        $user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;user;</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        $user-&gt;email = $input[<span class="hljs-string">'email'</span>];</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        $user-&gt;name = $input[<span class="hljs-string">'name'</span>];</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        $user-&gt;password = Hash::make($input[<span class="hljs-string">'password'</span>]);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        $user-&gt;save();</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment">// Create token</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">return</span> JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="40"></td><td>}</td></table></code></pre>
<p>Note how we’ve moved much of the logic for creating a user into the <code>create()</code> method, and we return the token, not the user model. This makes sense as right now we only ever want to get a token back when we create a user. Later that may change, but there’s nothing stopping us adding a new method to implement that behaviour alongside this.</p>
<p>Then we update <code>app/Http/Controllers/UserController.php</code> to use our repository:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">UserRepositoryInterface</span> <span class="hljs-title">as</span> <span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">JWTAuth</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">private</span> $user;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;user = $user;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * Show the form for creating a new resource.</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="41"></td><td>     * Store a newly created resource in storage.</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="50"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'required|email|unique:users,email'</span>,</td><tr><td class="linenos" data-pseudo-content="51"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'required|confirmed'</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Create token</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        $token = <span class="hljs-keyword">$this</span>-&gt;user-&gt;create($request-&gt;only(</td><tr><td class="linenos" data-pseudo-content="57"></td><td>            <span class="hljs-string">'email'</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>            <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="59"></td><td>            <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        ));</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'token'</span> =&gt; $token], <span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="64"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="67"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="68"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="69"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="70"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="71"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="72"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="76"></td><td></td><tr><td class="linenos" data-pseudo-content="77"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="78"></td><td>     * Show the form for editing the specified resource.</td><tr><td class="linenos" data-pseudo-content="79"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="80"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="81"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="82"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="83"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="84"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="85"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="87"></td><td></td><tr><td class="linenos" data-pseudo-content="88"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="89"></td><td>     * Update the specified resource in storage.</td><tr><td class="linenos" data-pseudo-content="90"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="91"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="92"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="93"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="94"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="96"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="99"></td><td></td><tr><td class="linenos" data-pseudo-content="100"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="101"></td><td>     * Remove the specified resource from storage.</td><tr><td class="linenos" data-pseudo-content="102"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="103"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="104"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="105"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="106"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="107"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="108"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="109"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="110"></td><td>}</td></table></code></pre>
<p>And add a new binding in <code>app/Providers/AppServiceProvider.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Bootstrap any application services.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     * Register any application services.</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'AnimalFriend\Repositories\Interfaces\PetRepositoryInterface'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-string">'AnimalFriend\Repositories\EloquentPetRepository'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">$this</span>-&gt;app-&gt;bind(</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-string">'AnimalFriend\Repositories\Interfaces\UserRepositoryInterface'</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'AnimalFriend\Repositories\EloquentUserRepository'</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>}</td></table></code></pre>
<p>Note that we bind the two sets separately - this allows Laravel to figure out which one maps to which.</p>
<p>Let’s run our tests to make sure nothing is broken:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>............                                                      12 / 12 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 956 ms, Memory: 18.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (12 tests, 46 assertions)</td></table></code></pre>
<p>Now that we’ve got our repositories in place, we’re no longer tightly coupled to Eloquent, and have a more flexible implementation which is easier to test.</p>
<h2 id="separating-our-models-from-our-json-with-fractal">Separating our models from our JSON with Fractal</h2>
<p>Another problem with our API is that our representation of our data is tightly coupled to our underlying implementation of our models. We therefore can’t change our models without potentially changing the data returned by the API. We need to separate our representation of our data from our actual model so that we can more easily specify the exact data we want to return, regardless of the underlying database structure.</p>
<p>Enter <a href="http://fractal.thephpleague.com/">Fractal</a>. From the website:</p>
<blockquote>
<p>Fractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc.</p>
</blockquote>
<p>In other words, Fractal lets you specify the format your data will take in one place so that it’s easier to return that data in a desired format. We’ll use Fractal to specify how we want our API responses to be formatted.</p>
<p>Install Fractal with the following command:</p>
<pre><code class="hljs lang-php singleline">$ composer <span class="hljs-keyword">require</span> league/fractal</code></pre>
<p>Then amend the classmap in <code>composer.json</code>:</p>
<pre><code class="hljs lang-json"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    "autoload": {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        "classmap": [</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            "database",</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            "app/Repositories",</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            "app/Transformers"</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        "psr-4": {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            "AnimalFriend\\": "app/"</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    },</td></table></code></pre>
<p>Then create the folder <code>app/Transformers</code> and run <code>composer dump-autoload</code>. We’re now ready to write our first transformer. Save this as <code>app/Transformers/PetTransformer.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Transformers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\<span class="hljs-title">Fractal</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetTransformer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fractal</span>\<span class="hljs-title">TransformerAbstract</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transform</span><span class="hljs-params">(Pet $pet)</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-string">'id'</span>            =&gt; (int) $pet-&gt;id,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-string">'name'</span>          =&gt; (string) $pet-&gt;name,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'type'</span>          =&gt; (string) $pet-&gt;type,</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'available'</span>     =&gt; (bool) $pet-&gt;available,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'picture'</span>       =&gt; (string) $pet-&gt;picture</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ];</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>}</td></table></code></pre>
<p>The <code>transform</code> method specifies how we want to represent our objects with our API. We can return only those attributes we want to expose, and amend the structure as we see fit. We could easily represemt relations in whatever manner we see fit, whereas before we needed to amend our queries to return the data in the right format, which would potentially be cumbersome.</p>
<p>Now let’s amend <code>PetController.php</code> to use this:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Repositories</span>\<span class="hljs-title">Interfaces</span>\<span class="hljs-title">PetRepositoryInterface</span> <span class="hljs-title">as</span> <span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Transformers</span>\<span class="hljs-title">PetTransformer</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\<span class="hljs-title">Fractal</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\<span class="hljs-title">Fractal</span>\<span class="hljs-title">Manager</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-keyword">private</span> $pet, $fractal;</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Pet $pet, Manager $fractal)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-keyword">$this</span>-&gt;pet = $pet;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;fractal = $fractal;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-comment">// Get all pets</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        $pets = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;all();</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-comment">// Format it</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>        $resource = <span class="hljs-keyword">new</span> Fractal\Resource\Collection($pets, <span class="hljs-keyword">new</span> PetTransformer);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        $data = <span class="hljs-keyword">$this</span>-&gt;fractal-&gt;createData($resource)-&gt;toArray();</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($data, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="41"></td><td>     * Show the form for creating a new resource.</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="49"></td><td></td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="51"></td><td>     * Store a newly created resource in storage.</td><tr><td class="linenos" data-pseudo-content="52"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="53"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="54"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="55"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="60"></td><td></td><tr><td class="linenos" data-pseudo-content="61"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="62"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="63"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="64"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="65"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="66"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-comment">// Get pet</span></td><tr><td class="linenos" data-pseudo-content="70"></td><td>        $pet = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment">// Format it</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        $resource = <span class="hljs-keyword">new</span> Fractal\Resource\Item($pet, <span class="hljs-keyword">new</span> PetTransformer);</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        $data = <span class="hljs-keyword">$this</span>-&gt;fractal-&gt;createData($resource)-&gt;toArray();</td><tr><td class="linenos" data-pseudo-content="75"></td><td></td><tr><td class="linenos" data-pseudo-content="76"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($data, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="78"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="81"></td><td>     * Show the form for editing the specified resource.</td><tr><td class="linenos" data-pseudo-content="82"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="83"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="84"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="85"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="90"></td><td></td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="92"></td><td>     * Update the specified resource in storage.</td><tr><td class="linenos" data-pseudo-content="93"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="94"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="95"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="96"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="97"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="99"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="100"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="101"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="102"></td><td></td><tr><td class="linenos" data-pseudo-content="103"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="104"></td><td>     * Remove the specified resource from storage.</td><tr><td class="linenos" data-pseudo-content="105"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="106"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="107"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="108"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="109"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="111"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="112"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="113"></td><td>}</td></table></code></pre>
<p>Note that by default, Fractal places our data inside a dedicated <code>data</code> namespace. This is good because it leaves a place for us to put metadata such as pagination links, but it does mean our controller test has been broken. Let’s fix it:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Test fetching pets when unauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetsWhenUnauthorised</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">400</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * Test fetching pets when authorised</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPets</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets'</span>, [], $headers)</td><tr><td class="linenos" data-pseudo-content="57"></td><td>            -&gt;seeJsonStructure([</td><tr><td class="linenos" data-pseudo-content="58"></td><td>                <span class="hljs-string">'data'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="59"></td><td>                    <span class="hljs-string">'*'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="60"></td><td>                        <span class="hljs-string">'id'</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>                        <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>                        <span class="hljs-string">'type'</span>,</td><tr><td class="linenos" data-pseudo-content="63"></td><td>                        <span class="hljs-string">'available'</span>,</td><tr><td class="linenos" data-pseudo-content="64"></td><td>                        <span class="hljs-string">'picture'</span></td><tr><td class="linenos" data-pseudo-content="65"></td><td>                    ]</td><tr><td class="linenos" data-pseudo-content="66"></td><td>                ]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            ]);</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="72"></td><td>     * Test fetching pet when unauthorised</td><tr><td class="linenos" data-pseudo-content="73"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="74"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="75"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetWhenUnauthorised</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="77"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="78"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="79"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="80"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="81"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="82"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="84"></td><td></td><tr><td class="linenos" data-pseudo-content="85"></td><td>        <span class="hljs-comment">// Send request</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/'</span>.$pet-&gt;id);</td><tr><td class="linenos" data-pseudo-content="87"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">400</span>);</td><tr><td class="linenos" data-pseudo-content="88"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="89"></td><td></td><tr><td class="linenos" data-pseudo-content="90"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="91"></td><td>     * Test fetching pet which does not exist</td><tr><td class="linenos" data-pseudo-content="92"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="93"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="94"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="95"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetDoesNotExist</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="96"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="97"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="99"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="100"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="101"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="102"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="103"></td><td></td><tr><td class="linenos" data-pseudo-content="104"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="105"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="106"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="107"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="108"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="109"></td><td></td><tr><td class="linenos" data-pseudo-content="110"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="111"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/1'</span>, [], $headers);</td><tr><td class="linenos" data-pseudo-content="112"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">404</span>);</td><tr><td class="linenos" data-pseudo-content="113"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="114"></td><td></td><tr><td class="linenos" data-pseudo-content="115"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="116"></td><td>     * Test fetching pet when authorised</td><tr><td class="linenos" data-pseudo-content="117"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="118"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="119"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="120"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPet</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="121"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="122"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="123"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="124"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="125"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="126"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="127"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="128"></td><td></td><tr><td class="linenos" data-pseudo-content="129"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="130"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="131"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="132"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="133"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="134"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="135"></td><td></td><tr><td class="linenos" data-pseudo-content="136"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="137"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="138"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="139"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="140"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="141"></td><td></td><tr><td class="linenos" data-pseudo-content="142"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="143"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/'</span>.$pet-&gt;id, [], $headers)</td><tr><td class="linenos" data-pseudo-content="144"></td><td>            -&gt;seeJsonStructure([</td><tr><td class="linenos" data-pseudo-content="145"></td><td>                <span class="hljs-string">'data'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="146"></td><td>                    <span class="hljs-string">'id'</span>,</td><tr><td class="linenos" data-pseudo-content="147"></td><td>                    <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="148"></td><td>                    <span class="hljs-string">'type'</span>,</td><tr><td class="linenos" data-pseudo-content="149"></td><td>                    <span class="hljs-string">'available'</span>,</td><tr><td class="linenos" data-pseudo-content="150"></td><td>                    <span class="hljs-string">'picture'</span></td><tr><td class="linenos" data-pseudo-content="151"></td><td>                ]</td><tr><td class="linenos" data-pseudo-content="152"></td><td>            ]);</td><tr><td class="linenos" data-pseudo-content="153"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="154"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="155"></td><td>}</td></table></code></pre>
<p>We’re also going to amend our test settings to use the array backend for the cache, as this does not require any external dependencies, but still allows us to tag our cache keys (I’ll cover that in a future instalment). Change the cache settings in <code>phpunit.xml</code> as follows:</p>
<pre><code class="hljs lang-xml singleline">        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CACHE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"array"</span>/&gt;</span></code></pre>
<p>Let’s run our tests to make sure everything’s fine:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>............                                                      12 / 12 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 859 ms, Memory: 18.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (12 tests, 44 assertions)</td></table></code></pre>
<p>At present our <code>User</code> controller doesn’t actually return anything, and the auth only ever returns the token, so it’s not worth while adding a transformer now.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That ends this lesson. We haven’t added any functionality, but we have improved the design of our API, and we’re now ready to develop it further. As usual, the backend repository has been tagged as <code>lesson-4</code>.</p>
<p>Next time we’ll start adding the additional functionality we need to our API.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating an Azure storage adapter for Laravel]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/10/24/creating-an-azure-storage-adapter-for-laravel/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/10/24/creating-an-azure-storage-adapter-for-laravel/</guid>
            <pubDate>Sun, 23 Oct 2016 23:25:27 GMT</pubDate>
            <description><![CDATA[<p>About a year ago I was working on my first non-trivial Laravel application. The client had, for their own reasons, wanted to use Microsoft’s Azure platform, particularly for its blob storage functionality, which is somewhat comparable to Amazon S3. Now, Laravel has the excellent <code>Storage</code> facade  that allows consistent access to both local files and those stored on various file hosting services, which is built on top of <a href="https://flysystem.thephpleague.com/">Flysystem</a>. Flysystem has an Azure driver, but the Laravel storage doesn’t include support for it, so at the time I resigned myself to using Flysystem directly, which wasn’t actually that bad, but not ideal.</p>
<p>A few days ago I stumbled across <a href="https://laravel.com/docs/5.1/filesystem#custom-filesystems">this section of the Laravel documentation</a>, which had me kicking myself. It’s actually trivially easy to implement a custom filesystem for Laravel if it already has a Flysystem adapter, as demonstrated in their Dropbox implementation in the docs. Using this as a guide, I was able to produce the following service provider for using Azure as a storage backend very quickly:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Providers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Storage</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\<span class="hljs-title">Flysystem</span>\<span class="hljs-title">Filesystem</span>;</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">League</span>\<span class="hljs-title">Flysystem</span>\<span class="hljs-title">Azure</span>\<span class="hljs-title">AzureAdapter</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">WindowsAzure</span>\<span class="hljs-title">Common</span>\<span class="hljs-title">ServicesBuilder</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AzureStorageServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="14"></td><td>     * Perform post-registration booting of services.</td><tr><td class="linenos" data-pseudo-content="15"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="16"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        Storage::extend(<span class="hljs-string">'azure'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($app, $config)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            $endpoint = sprintf(</td><tr><td class="linenos" data-pseudo-content="22"></td><td>                <span class="hljs-string">'DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s'</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>                $config[<span class="hljs-string">'name'</span>],</td><tr><td class="linenos" data-pseudo-content="24"></td><td>                $config[<span class="hljs-string">'key'</span>]</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            );</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>            $blobRestProxy = ServicesBuilder::getInstance()-&gt;createBlobService($endpoint);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Filesystem(<span class="hljs-keyword">new</span> AzureAdapter($blobRestProxy, $config[<span class="hljs-string">'container'</span>]));</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     * Register bindings in the container.</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="41"></td><td>}</td></table></code></pre>
<p>This should be saved as <code>app/Providers/AzureStorageServiceProvider.php</code>. You also need to add this to the list of service providers in <code>config/app.php</code>:</p>
<pre><code class="hljs lang-php singleline">        App\Providers\AzureStorageServiceProvider::class,</code></pre>
<p>And add this to <code>config/filesystems.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-string">'azure'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="2"></td><td>            <span class="hljs-string">'driver'</span>    =&gt; <span class="hljs-string">'azure'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>            <span class="hljs-string">'name'</span>      =&gt; env(<span class="hljs-string">'STORAGE_NAME'</span>),</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-string">'key'</span>       =&gt; env(<span class="hljs-string">'STORAGE_KEY'</span>),</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-string">'container'</span> =&gt; env(<span class="hljs-string">'STORAGE_CONTAINER'</span>),</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        ],</td></table></code></pre>
<p>I like to also set my storage backend using environment variables in this file, as in this example:</p>
<pre><code class="hljs lang-php singleline">    <span class="hljs-string">'default'</span> =&gt; env(<span class="hljs-string">'STORAGE_BACKEND'</span>, <span class="hljs-string">'local'</span>),</code></pre>
<p>That way we can easily set a different backend for testing, development and production so we don’t upload files when running PHPUnit. You can also keep your other config settings in your <code>.env</code> file, which is always a better idea than keeping it under version control. You also need to install the <code>microsoft/windowsazure</code> and <code>league/flysystem-azure</code> packages via Composer for this to work.</p>
<p>As I’ve since changed jobs it’s unlikely I’ll ever actually use this Azure integration in production - it’s not a service I’d choose of my own accord to use. However, since it’s so straightforward to implement an adapter like this I imagine I may be doing something similar - I’m currently working on a web app that uses MongoDB for some of its data and currently stores files locally, so it might make sense to create a GridFS integration along similar lines. It may also be useful for someone else, so feel free to use it if you wish.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 3]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/10/16/building-a-phonegap-app-with-laravel-and-angular-part-3/</guid>
            <pubDate>Sun, 16 Oct 2016 17:10:13 GMT</pubDate>
            <description><![CDATA[<p>Apologies for how long it’s taken for this post to appear. I’ve got a lot on my plate at present as I recently started a new job, so I haven’t been able to devote as much time to this series as I’d like.</p>
<p>In this instalment we’ll begin extending our app beyond the basic authentication we’ve already implemented. We’ll start by adding the means to sign up, before adding the list of pets.</p>
<h2 id="adding-a-signup-method-to-our-backend">Adding a signup method to our backend</h2>
<p>We’ll create a controller for our users in the Laravel backend. First we’ll create our tests:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan make:<span class="hljs-built_in">test</span> UserControllerTest</code></pre>
<p>We’ll create three tests. The first will check to see that an invalid request raises the correct status code (422). The second will check that a valid request returns the correct status code (201) and creates the user. The third will check that trying to create a duplicate user raises an error. Here they are - they should be saved in the new <code>tests/UserControllerTest.php</code> file:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test creating a user - invalid</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPostingInvalidUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create a request</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'/api/users'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">422</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     * Test creating a user</td><tr><td class="linenos" data-pseudo-content="25"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="26"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPostingUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment">// Create a request</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="35"></td><td>            <span class="hljs-string">'password_confirmation'</span> =&gt; <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'/api/users'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment">// Check user exists</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        $saved = User::first();</td><tr><td class="linenos" data-pseudo-content="43"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;email, <span class="hljs-string">'bob@example.com'</span>);</td><tr><td class="linenos" data-pseudo-content="44"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;name, <span class="hljs-string">'Bob Smith'</span>);</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="48"></td><td>     * Test creating a duplicate user</td><tr><td class="linenos" data-pseudo-content="49"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="50"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="51"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="52"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPostingDuplicateUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="54"></td><td>        <span class="hljs-comment">// Create user</span></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="56"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="57"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="58"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment">// Create a request</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="64"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Bob Smith'</span>,</td><tr><td class="linenos" data-pseudo-content="65"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="66"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            <span class="hljs-string">'password_confirmation'</span> =&gt; <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="68"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'/api/users'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">422</span>);</td><tr><td class="linenos" data-pseudo-content="71"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="72"></td><td>}</td></table></code></pre>
<p>Note the use of <code>$this-&gt;json()</code> to make the request. This method is ideal for testing a REST API.</p>
<p>Running our tests should confirm that they fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>........FFF.                                                      12 / 12 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 827 ms, Memory: 18.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 3 failures:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) UserControllerTest::<span class="hljs-built_in">test</span>PostingInvalidUser</td><tr><td class="linenos" data-pseudo-content="11"></td><td>Expected status code 422, got 404.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Failed asserting that 404 matches expected 422.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:21</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>2) UserControllerTest::<span class="hljs-built_in">test</span>PostingUser</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Expected status code 201, got 404.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Failed asserting that 404 matches expected 201.</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="22"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:39</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>3) UserControllerTest::<span class="hljs-built_in">test</span>PostingDuplicateUser</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Expected status code 422, got 404.</td><tr><td class="linenos" data-pseudo-content="26"></td><td>Failed asserting that 404 matches expected 422.</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="29"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/UserControllerTest.php:71</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>FAILURES!</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Tests: 12, Assertions: 43, Failures: 3.</td></table></code></pre>
<p>Next, we create our new controller:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan make:controller UserController --resource</code></pre>
<p>Let’s populate it:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">JWTAuth</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">private</span> $user;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;user = $user;</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * Show the form for creating a new resource.</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="33"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="34"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="41"></td><td>     * Store a newly created resource in storage.</td><tr><td class="linenos" data-pseudo-content="42"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="43"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="44"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="45"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment">// Validate request</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        $valid = <span class="hljs-keyword">$this</span>-&gt;validate($request, [</td><tr><td class="linenos" data-pseudo-content="50"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'required|email|unique:users,email'</span>,</td><tr><td class="linenos" data-pseudo-content="51"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'required|string'</span>,</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'required|confirmed'</span>,</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Create user</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        $user = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;user;</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        $user-&gt;email = $request-&gt;input(<span class="hljs-string">'email'</span>);</td><tr><td class="linenos" data-pseudo-content="58"></td><td>        $user-&gt;name = $request-&gt;input(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="59"></td><td>        $user-&gt;password = Hash::make($request-&gt;input(<span class="hljs-string">'password'</span>));</td><tr><td class="linenos" data-pseudo-content="60"></td><td>        $user-&gt;save();</td><tr><td class="linenos" data-pseudo-content="61"></td><td></td><tr><td class="linenos" data-pseudo-content="62"></td><td>        <span class="hljs-comment">// Create token</span></td><tr><td class="linenos" data-pseudo-content="63"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="64"></td><td></td><tr><td class="linenos" data-pseudo-content="65"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'token'</span> =&gt; $token], <span class="hljs-number">201</span>);</td><tr><td class="linenos" data-pseudo-content="67"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="70"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="71"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="72"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="73"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="74"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="75"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="76"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="77"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="78"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="79"></td><td></td><tr><td class="linenos" data-pseudo-content="80"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="81"></td><td>     * Show the form for editing the specified resource.</td><tr><td class="linenos" data-pseudo-content="82"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="83"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="84"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="85"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="86"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="87"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="88"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="89"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="90"></td><td></td><tr><td class="linenos" data-pseudo-content="91"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="92"></td><td>     * Update the specified resource in storage.</td><tr><td class="linenos" data-pseudo-content="93"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="94"></td><td>     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</td><tr><td class="linenos" data-pseudo-content="95"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="96"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="97"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="98"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span><span class="hljs-params">(Request $request, $id)</span></td><tr><td class="linenos" data-pseudo-content="99"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="100"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="101"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="102"></td><td></td><tr><td class="linenos" data-pseudo-content="103"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="104"></td><td>     * Remove the specified resource from storage.</td><tr><td class="linenos" data-pseudo-content="105"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="106"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="107"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="108"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="109"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="110"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="111"></td><td>        <span class="hljs-comment">//</span></td><tr><td class="linenos" data-pseudo-content="112"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="113"></td><td>}</td></table></code></pre>
<p>For now we’ll leave the other methods blank, but we’ll be using them later so we won’t get rid of them. At the top, note we load not only the <code>User</code> model, but also the <code>JWTAuth</code> and <code>Hash</code> facades. We use <code>JWTAuth::fromUser()</code> to return a JSON web token for the given user model.</p>
<p>In the <code>store()</code> method we first of all use <a href="https://laravel.com/docs/5.3/validation">Laravel’s validation support</a> to validate our input. We specify that the user must provide a unique email address, a username, and a password, which must be confirmed. Note that we don’t need to specify an action if the request is invalid, as Laravel will do that for us. Also, note that the <code>confirmed</code> rule means that the <code>password</code> field must be accompanied by a matching <code>password_confirmation</code> field.</p>
<p>Next, we create the user. Note that we hash the password before storing it, which is a best practice (storing passwords in plain text is a REALLY bad idea!). Then we create the token for the new user and return it. From then on, the user can use that token to authenticate their requests.</p>
<p>We also need to add this route in <code>routes/api.php</code>:</p>
<pre><code class="hljs lang-php singleline">Route::resource(<span class="hljs-string">'users'</span>, <span class="hljs-string">'UserController'</span>);</code></pre>
<p>Let’s check the test passes:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit <span class="hljs-number">5.5</span><span class="hljs-number">.4</span> by Sebastian Bergmann <span class="hljs-keyword">and</span> contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>............                                                      <span class="hljs-number">12</span> / <span class="hljs-number">12</span> (<span class="hljs-number">100</span>%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: <span class="hljs-number">905</span> ms, Memory: <span class="hljs-number">20.00</span>MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (<span class="hljs-number">12</span> tests, <span class="hljs-number">46</span> assertions)</td></table></code></pre>
<h2 id="building-the-registration-in-the-app">Building the registration in the app</h2>
<p>With registration in place on the server side, we can move back to the app. We need to create another route for the registration form. Add this to <code>test/routes.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  it(<span class="hljs-string">'should map register route to register controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      expect($route.routes[<span class="hljs-string">'/register'</span>].controller).toBe(<span class="hljs-string">'RegisterCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>      expect($route.routes[<span class="hljs-string">'/register'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/register.html'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  });</td></table></code></pre>
<p>Running the tests should confirm that this fails. So next you should add this to the route provider section of <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  .when(<span class="hljs-string">'/register'</span>, {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/register.html'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'RegisterCtrl'</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  })</td></table></code></pre>
<p>We also need to allow the register path to be accessed when not logged in:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.run([<span class="hljs-string">'$rootScope'</span>, <span class="hljs-string">'$location'</span>, <span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $rootScope.$on(<span class="hljs-string">'$routeChangeStart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-keyword">if</span> (!Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-keyword">if</span> ($location.path() !== <span class="hljs-string">'/login'</span> &amp;&amp; $location.path() !== <span class="hljs-string">'/register'</span>) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>}])</td></table></code></pre>
<p>Our next step is to create a service representing the <code>User</code> endpoint. Here’s the test for it:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'User service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> mockBackend, User;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_User_, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      User = _User_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    it(<span class="hljs-string">'can create a new user'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/users'</span>, <span class="hljs-string">'{"email":"bob@example.com","name":"bobsmith","password":"password","password_confirmation":"password"}'</span>).respond({<span class="hljs-attr">token</span>: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User({</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-attr">email</span>: <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-attr">name</span>: <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-attr">password</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-attr">password_confirmation</span>: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>      user.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        expect(response).toEqualData({<span class="hljs-attr">token</span>: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  });</td></table></code></pre>
<p>We’re only interested in using this model to create new users at this point, so this is the full scope of this test for now. Make sure the test fails, then we’re ready to create the new service in <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.factory(<span class="hljs-string">'User'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/users/:id'</span>, <span class="hljs-literal">null</span>, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'update'</span>: { <span class="hljs-attr">method</span>: <span class="hljs-string">'PATCH'</span> }</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>})</td></table></code></pre>
<p>Note that <code>angular-resource</code> does not support the <code>PUT</code> or <code>PATCH</code> methods by default, but as shown here it’s easy to implement it ourselves. That should be sufficient to make our test pass.</p>
<p>Next, we need to create the controller for registration. Here’s the test for it:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Register Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> mockBackend, scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      $controller(<span class="hljs-string">'RegisterCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-attr">$scope</span>: scope</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">// Test doRegister is defined</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    it(<span class="hljs-string">'should define the register method'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      expect(scope.doRegister).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-comment">// Test doRegister works</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    it(<span class="hljs-string">'should allow the user to register'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>      <span class="hljs-comment">// Mock the backend</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/users'</span>, <span class="hljs-string">'{"email":"user@example.com","name":"bobsmith","password":"password","password_confirmation":"password"}'</span>).respond({<span class="hljs-attr">token</span>: <span class="hljs-number">123</span>});</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>      <span class="hljs-comment">// Define login data</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>      scope.credentials = {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-attr">email</span>: <span class="hljs-string">'user@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-attr">name</span>: <span class="hljs-string">"bobsmith"</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-attr">password</span>: <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-attr">password_confirmation</span>: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>      };</td><tr><td class="linenos" data-pseudo-content="34"></td><td></td><tr><td class="linenos" data-pseudo-content="35"></td><td>      <span class="hljs-comment">//  Submit the request</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>      scope.doRegister();</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>      <span class="hljs-comment">// Flush the backend</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="40"></td><td></td><tr><td class="linenos" data-pseudo-content="41"></td><td>      <span class="hljs-comment">// Check login complete</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toEqual(<span class="hljs-string">'Bearer 123'</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  });</td></table></code></pre>
<p>Make sure the test fails before proceeding. Our <code>RegisterCtrl</code> is very similar to the login controller:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.controller(<span class="hljs-string">'RegisterCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, User, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $scope.doRegister = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    user.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="16"></td><td>})</td></table></code></pre>
<p>Check the tests pass,and we’re ready to move on to creating our HTML template. Save this as <code>www/templates/register.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>&lt;md-content md-theme=<span class="hljs-string">"default"</span> layout-gt-sm=<span class="hljs-string">"row"</span> layout-padding&gt;</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    &lt;div&gt;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="4"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;Email&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="5"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.email"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"email"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;Username&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.name"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"text"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="11"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="14"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;Password&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.password"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"password"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        &lt;md-<span class="hljs-keyword">input</span>-container <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-block"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            &lt;<span class="hljs-keyword">label</span>&gt;<span class="hljs-keyword">Confirm</span> Password&lt;/<span class="hljs-keyword">label</span>&gt;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            &lt;<span class="hljs-keyword">input</span> ng-model=<span class="hljs-string">"credentials.password_confirmation"</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">"password"</span>&gt;</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        &lt;/md-<span class="hljs-keyword">input</span>-container&gt;</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        &lt;md-button <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-raised md-primary"</span> ng-click=<span class="hljs-string">"doRegister()"</span>&gt;Submit&lt;/md-button&gt;</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        &lt;md-button <span class="hljs-keyword">class</span>=<span class="hljs-string">"md-raised md-primary"</span> href=<span class="hljs-string">"/login"</span>&gt;<span class="hljs-keyword">Log</span> <span class="hljs-keyword">in</span>&lt;/md-button&gt;</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    &lt;/div&gt;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>&lt;/md-content&gt;</td></table></code></pre>
<p>It’s very similar to our login template. Speaking of which, we need to add a link to this route there:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-content</span> <span class="hljs-attr">md-theme</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">layout-gt-sm</span>=<span class="hljs-string">"row"</span> <span class="hljs-attr">layout-padding</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.email"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.password"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> /&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-raised md-primary"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"doLogin()"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-raised md-primary"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"register"</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-content</span>&gt;</span></td></table></code></pre>
<p>With that done, you should now be able to run the Gulp server for the app with <code>gulp</code> and the Laravel backend with <code>php artisan serve</code> and create a new user account.</p>
<h2 id="adding-pets-to-the-home-page">Adding pets to the home page</h2>
<p>Our final task for this lesson is to display a list of pets on the home page. Later we’ll refine that functionality, but for now we’ll just get a list of all current pets and display them. First we need to write a test for our <code>Pet</code> service:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Pet service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> mockBackend, Pet;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Pet_, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      Pet = _Pet_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    it(<span class="hljs-string">'can fetch pets'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      mockBackend.expectGET(<span class="hljs-string">'http://localhost:8000/api/pets'</span>).respond([{<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"Freddie"</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">"Cat"</span>}]);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      expect(Pet).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="12"></td><td>      <span class="hljs-keyword">var</span> pets = Pet.query();</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      expect(pets).toEqualData([{<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"Freddie"</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">"Cat"</span>}]);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  });</td></table></code></pre>
<p>Once you know that fails, it’s time to implement the service:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.factory(<span class="hljs-string">'Pet'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/pets/:id'</span>, <span class="hljs-literal">null</span>, {</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">'update'</span>: { <span class="hljs-attr">method</span>: <span class="hljs-string">'PATCH'</span> }</td><tr><td class="linenos" data-pseudo-content="4"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>})</td></table></code></pre>
<p>Next, we want to add the pets to the scope of the home controller. Amend the test for it as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Home Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> pets, scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, Pet</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      pets = Pet;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      $controller(<span class="hljs-string">'HomeCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-attr">$scope</span>: scope,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-attr">pets</span>: [{<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>},{<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>}]</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">// Test pets</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    it(<span class="hljs-string">'should define the pets'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      expect(scope.pets).toEqualData([{<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>}, {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>}]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  });</td></table></code></pre>
<p>We check to see if the scope contains the <code>pets</code> variable. Once you have a failing test, amend the home controller as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.controller(<span class="hljs-string">'HomeCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, Pet, pets</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $scope.pets = pets;</td><tr><td class="linenos" data-pseudo-content="3"></td><td>});</td></table></code></pre>
<p>We could fetch the via AJAX inside the controller, but there’s a better way. We’ll create a loader for the pet data and have it resolve that before the page is displayed. To do so, first we need to add the loader service to <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.factory(<span class="hljs-string">'PetsLoader'</span>, [<span class="hljs-string">'Pet'</span>, <span class="hljs-string">'$q'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Pet, $q</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-keyword">var</span> delay = $q.defer();</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    Pet.query(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      delay.resolve(response);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      delay.reject(<span class="hljs-string">'Unable to fetch pets'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-keyword">return</span> delay.promise;</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="11"></td><td>}])</td></table></code></pre>
<p>Then we set that route up to resolve it in <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'HomeCtrl'</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    <span class="hljs-attr">resolve</span>: {</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      <span class="hljs-attr">pets</span>: [<span class="hljs-string">'PetsLoader'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">PetsLoader</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-keyword">return</span> PetsLoader();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      }]</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  })</td></table></code></pre>
<p>Now, when we load that route, it will first of all fetch those pets and populate <code>$scope.pets</code> with them.</p>
<p>Now, we need to have some pets in the database, so we’ll make a seeder for it. Head back to the backend and run this command:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan make:seeder PetTableSeeder</code></pre>
<p>Then amend the file at <code>database/seeds/PetTableSeeder.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetTableSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Add Pets</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::table(<span class="hljs-string">'pets'</span>)-&gt;insert([[</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'available'</span> =&gt; <span class="hljs-number">1</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'picture'</span>   =&gt; <span class="hljs-string">'https://placekitten.com/300/300'</span>,</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        ], [</td><tr><td class="linenos" data-pseudo-content="24"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Sophie'</span>,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-string">'available'</span> =&gt; <span class="hljs-number">1</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>            <span class="hljs-string">'picture'</span>   =&gt; <span class="hljs-string">'https://placekitten.com/300/300'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        ]]);</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="32"></td><td>}</td></table></code></pre>
<p>And we need to update <code>database/seeds/DatabaseSeeder.php</code> to call our seeder:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(UserTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(PetTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td>}</td></table></code></pre>
<p>For now we’ll use placeholder images, but at a later point our backend will be set up to use images uploaded from the admin. Then we need to refresh our migrations and apply the seeders:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan migrate:refresh</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ php artisan db:seed</td></table></code></pre>
<p>Now we just need to amend our home template to show the pets and we’re done for today:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-toolbar-tools"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Log out"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            Log out</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">"column"</span> <span class="hljs-attr">flex</span>=<span class="hljs-string">"grow"</span> <span class="hljs-attr">layout-align</span>=<span class="hljs-string">"center stretch"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">md-card</span> <span class="hljs-attr">md-theme</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"pet in pets"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-card-title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">md-card-title-text</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-headline"</span>&gt;</span></span><span class="hljs-template-variable">{{ pet.name }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-subhead"</span>&gt;</span></span><span class="hljs-template-variable">{{ pet.type }}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-tag">&lt;/<span class="hljs-name">md-card-title-text</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-card-title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-card-content</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-card-image md-media-lg"</span> <span class="hljs-attr">ng-src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{ pet.picture }}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-card-content</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">md-card</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></td></table></code></pre>
<p>Now we can see our pets in the app.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>That’s enough for today - the fact that we can log in and out, register, and view the home page is sufficient as a proof of concept for a client. As usual, the results are on Github, tagged <code>lesson-3</code>. </p>
<p>Next time, we’ll concentrate exclusively on the back end. We’ll build upon what we already have using Laravel to create a full REST API for our app. In a later instalment, we’ll move on to build our admin interface for the staff, before switching back to finish off the app. I hope you’ll join me then.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 2]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/09/18/building-a-phonegap-app-with-laravel-and-angular-part-2/</guid>
            <pubDate>Sun, 18 Sep 2016 22:18:06 GMT</pubDate>
            <description><![CDATA[<p>In this lesson, the initial scope of the app will be extremely simple. We will implement functionality that:</p>
<ul>
<li>Allows users to log in and out</li>
<li>Displays the home page</li>
</ul>
<p>That’s fairly simple, and easily achievable within a fairly short timeframe. We’ll also write automated tests for our app. By the end of this lesson, we’ll have built a first pass for our app using Angular.js.</p>
<p>NOTE: As at time of writing, Angular 2 has just come out. I’m using Angular 1 here, and the two are not compatible, so make sure you’re using Angular 1.</p>
<h2 id="creating-our-app">Creating our app</h2>
<p>Start by creating a new folder, separate from the backend, for the app. Then, in there, run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ npm init -y</code></pre>
<p>Then let’s install our dependencies:</p>
<pre><code class="hljs lang-bash singleline">$ npm install --save-dev gulp karma karma-browserify karma-phantomjs-launcher browserify angular angular-route angular-mocks angular-animate angular-messages angular-sanitize angular-material angular-resource vinyl-buffer vinyl-source-stream gulp-sass karma-coverage karma-jasmine jasmine-core gulp-webserver</code></pre>
<p>We’re going to use <a href="https://material.angularjs.org/latest/">Angular Material</a> for our user interface as it includes support out of the box for swiping left and right. You’ll notice it mentioned as one of the dependencies above.</p>
<p>We’ll also use Karma for running our tests. Save the following as <code>karma.conf.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    config.set({</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-attr">basePath</span>: <span class="hljs-string">''</span>,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-attr">frameworks</span>: [<span class="hljs-string">'browserify'</span>, <span class="hljs-string">'jasmine'</span>],</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-attr">files</span>: [</td><tr><td class="linenos" data-pseudo-content="6"></td><td>            <span class="hljs-string">'node_modules/angular/angular.min.js'</span>,</td><tr><td class="linenos" data-pseudo-content="7"></td><td>            <span class="hljs-string">'node_modules/angular-mocks/angular-mocks.js'</span>,</td><tr><td class="linenos" data-pseudo-content="8"></td><td>            <span class="hljs-string">'node_modules/angular-material/angular-material-mocks.js'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-string">'js/*.js'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-string">'test/*.js'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-attr">exclude</span>: [</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        ],</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-attr">preprocessors</span>: {</td><tr><td class="linenos" data-pseudo-content="15"></td><td>            <span class="hljs-string">'js/*.js'</span>: [<span class="hljs-string">'browserify'</span>, <span class="hljs-string">'coverage'</span>],</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'tests/js'</span>: [<span class="hljs-string">'browserify'</span>]</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        <span class="hljs-attr">browserify</span>: {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>          <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        },</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-attr">reporters</span>: [<span class="hljs-string">'progress'</span>, <span class="hljs-string">'coverage'</span>],</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        <span class="hljs-attr">port</span>: <span class="hljs-number">9876</span>,</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-attr">colors</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-attr">logLevel</span>: config.LOG_DEBUG,</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-attr">autoWatch</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-attr">browsers</span>: [<span class="hljs-string">'PhantomJS'</span>],</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-attr">singleRun</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-attr">coverageReporter</span>: {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>          <span class="hljs-attr">dir</span> : <span class="hljs-string">'coverage/'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>          <span class="hljs-attr">reporters</span>: [</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            { <span class="hljs-attr">type</span>: <span class="hljs-string">'html'</span>, <span class="hljs-attr">subdir</span>: <span class="hljs-string">'report-html'</span> },</td><tr><td class="linenos" data-pseudo-content="32"></td><td>            { <span class="hljs-attr">type</span>: <span class="hljs-string">'cobertura'</span>, <span class="hljs-attr">subdir</span>: <span class="hljs-string">'report-cobertura'</span> }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>          ]</td><tr><td class="linenos" data-pseudo-content="34"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="36"></td><td>};</td></table></code></pre>
<p>This is our Karma configuration. Karma can run the same test in multiple browsers. Here we’re going to use PhantomJS, but it’s trivial to amend the <code>browsers</code> section to add more. You just need to make sure you install the appropriate launchers for those browsers.</p>
<p>We’ll use Gulp to build the app. Here’s the <code>gulpfile.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);</td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">var</span> source = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-source-stream'</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">var</span> buffer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vinyl-buffer'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">var</span> sass = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-sass'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-keyword">var</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-webserver'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">var</span> paths = {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-attr">scripts</span>: [<span class="hljs-string">'js/*.js'</span>],</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-attr">styles</span>: [<span class="hljs-string">'sass/*.scss'</span>]</td><tr><td class="linenos" data-pseudo-content="11"></td><td>};</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>gulp.task(<span class="hljs-string">'sass'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>  gulp.src(<span class="hljs-string">'sass/style.scss'</span>)</td><tr><td class="linenos" data-pseudo-content="15"></td><td>   .pipe(sass().on(<span class="hljs-string">'error'</span>, sass.logError))</td><tr><td class="linenos" data-pseudo-content="16"></td><td>   .pipe(gulp.dest(<span class="hljs-string">'www/css'</span>));</td><tr><td class="linenos" data-pseudo-content="17"></td><td>});;</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>gulp.task(<span class="hljs-string">'js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  <span class="hljs-keyword">return</span> browserify({ <span class="hljs-attr">entries</span>: [<span class="hljs-string">'js/main.js'</span>], <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span> })</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    .bundle()</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    .pipe(source(<span class="hljs-string">'bundle.js'</span>))</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    .pipe(buffer())</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    .pipe(gulp.dest(<span class="hljs-string">'www/js/'</span>));</td><tr><td class="linenos" data-pseudo-content="25"></td><td>});</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>gulp.task(<span class="hljs-string">'server'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  gulp.src(<span class="hljs-string">'www/'</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    .pipe(server({</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="hljs-attr">livereload</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="34"></td><td>});</td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>gulp.task(<span class="hljs-string">'watch'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  gulp.watch(paths.scripts, [<span class="hljs-string">'js'</span>]);</td><tr><td class="linenos" data-pseudo-content="39"></td><td>  gulp.watch(paths.styles, [<span class="hljs-string">'sass'</span>]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>});</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>gulp.task(<span class="hljs-string">'default'</span>, [<span class="hljs-string">'sass'</span>,<span class="hljs-string">'js'</span>,<span class="hljs-string">'server'</span>, <span class="hljs-string">'watch'</span>]);</td></table></code></pre>
<p>Note that we’re going to be using Browserify to handle our dependencies. If you haven’t used it before, it lets you use the <code>require()</code> syntax from Node.js to include other JavaScript files, including ones available via NPM such as jQuery or Angular, allowing you to compile them all into a single file.</p>
<p>We should be able to test and run the app using NPM, so add these scripts to <code>package.json</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  <span class="hljs-string">"scripts"</span>: {</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-string">"test"</span>: <span class="hljs-string">"karma start"</span>,</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-string">"run"</span>: <span class="hljs-string">"gulp"</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>  },</td></table></code></pre>
<p>We also need an HTML file. Save this as <code>www/index.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, user-scalable=0"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My New Animal Friend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">"mynewanimalfriend"</span> <span class="hljs-attr">ng-cloak</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></td></table></code></pre>
<p>Note the use of the Angular directives. <code>ng-app</code> denotes the name of the app namespace, <code>ng-cloak</code> hides the application until it’s fully loaded, and <code>ng-view</code> denotes the area containing our content.</p>
<p>You should also create the files <code>js/main.js</code>, <code>sass/style.scss</code>, and the <code>test</code> folder.</p>
<h2 id="creating-our-first-routes">Creating our first routes</h2>
<p>Our first task is to create the routes we need. Our default route will be <code>/</code>, representing the home page. However, users will need to be logged in to see this. Otherwise, they should be redirected to the login route, which will be <code>/login</code>, appropriately enough. We’ll also have a <code>/logout</code> route, which should be self-explanatory.</p>
<p>Before we implement these routes, we need to write a test for them. We’ll start with our login route, and we’ll test that for this route, the controller will be <code>LoginCtrl</code> and the template will be <code>templates/login.html</code>. The significance of these will become apparent later. Save this as <code>test/routes.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Routes'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend'</span>));</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  it(<span class="hljs-string">'should map login route to login controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].controller).toBe(<span class="hljs-string">'LoginCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/login.html'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="12"></td><td>});</td></table></code></pre>
<p>Note the <code>beforeEach()</code> hook. This is used to set up the application.</p>
<p>We can run this test with <code>npm test</code> as that calls Karma directly. Note that we’re using Jasmine to write our tests.</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; mynewanimalfriend-app@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/mynewanimalfriend-app</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; karma start</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>12 09 2016 22:22:34.168:DEBUG [config]: autoWatch <span class="hljs-built_in">set</span> to <span class="hljs-literal">false</span>, because of singleRun</td><tr><td class="linenos" data-pseudo-content="7"></td><td>12 09 2016 22:22:34.172:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules</td><tr><td class="linenos" data-pseudo-content="8"></td><td>12 09 2016 22:22:34.176:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>12 09 2016 22:22:34.314:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>12 09 2016 22:22:34.484:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>12 09 2016 22:22:34.485:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>12 09 2016 22:22:34.535:DEBUG [framework.browserify]: created browserify bundle: /tmp/f8c46bd8d72c5b8578e64552192273be.browserify</td><tr><td class="linenos" data-pseudo-content="13"></td><td>12 09 2016 22:22:34.553:DEBUG [framework.browserify]: add bundle to config.files at position 3</td><tr><td class="linenos" data-pseudo-content="14"></td><td>12 09 2016 22:22:34.559:DEBUG [web-server]: Instantiating middleware</td><tr><td class="linenos" data-pseudo-content="15"></td><td>12 09 2016 22:22:34.569:DEBUG [reporter]: Trying to load reporter: coverage</td><tr><td class="linenos" data-pseudo-content="16"></td><td>12 09 2016 22:22:34.570:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>12 09 2016 22:22:34.571:DEBUG [reporter]: Couldn<span class="hljs-string">'t load color-version.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>12 09 2016 22:22:34.596:DEBUG [framework.browserify]: updating js/main.js in bundle</td><tr><td class="linenos" data-pseudo-content="19"></td><td>12 09 2016 22:22:34.597:DEBUG [framework.browserify]: building bundle</td><tr><td class="linenos" data-pseudo-content="20"></td><td>12 09 2016 22:22:35.302:DEBUG [framework.browserify]: bundling</td><tr><td class="linenos" data-pseudo-content="21"></td><td>12 09 2016 22:22:35.328:DEBUG [preprocessor.coverage]: Processing "/home/matthew/Projects/mynewanimalfriend-app/js/main.js".</td><tr><td class="linenos" data-pseudo-content="22"></td><td>12 09 2016 22:22:35.345:INFO [framework.browserify]: bundle built</td><tr><td class="linenos" data-pseudo-content="23"></td><td>12 09 2016 22:22:35.352:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/</td><tr><td class="linenos" data-pseudo-content="24"></td><td>12 09 2016 22:22:35.352:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency</td><tr><td class="linenos" data-pseudo-content="25"></td><td>12 09 2016 22:22:35.361:INFO [launcher]: Starting browser PhantomJS</td><tr><td class="linenos" data-pseudo-content="26"></td><td>12 09 2016 22:22:35.361:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-17657666</td><tr><td class="linenos" data-pseudo-content="27"></td><td>12 09 2016 22:22:35.364:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-17657666/capture.js</td><tr><td class="linenos" data-pseudo-content="28"></td><td>12 09 2016 22:22:35.466:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html</td><tr><td class="linenos" data-pseudo-content="29"></td><td>12 09 2016 22:22:35.478:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js</td><tr><td class="linenos" data-pseudo-content="30"></td><td>12 09 2016 22:22:35.541:DEBUG [karma]: A browser has connected on socket /#dQYjOD4F_HJwPXiYAAAA</td><tr><td class="linenos" data-pseudo-content="31"></td><td>12 09 2016 22:22:35.564:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=dQYjOD4F_HJwPXiYAAAA</td><tr><td class="linenos" data-pseudo-content="32"></td><td>12 09 2016 22:22:35.629:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#dQYjOD4F_HJwPXiYAAAA with id 17657666</td><tr><td class="linenos" data-pseudo-content="33"></td><td>12 09 2016 22:22:35.630:DEBUG [launcher]: PhantomJS (id 17657666) captured in 0.277 secs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>12 09 2016 22:22:35.642:DEBUG [phantomjs.launcher]: </td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>12 09 2016 22:22:35.643:DEBUG [middleware:karma]: custom files null null</td><tr><td class="linenos" data-pseudo-content="37"></td><td>12 09 2016 22:22:35.644:DEBUG [middleware:karma]: Serving static request /context.html</td><tr><td class="linenos" data-pseudo-content="38"></td><td>12 09 2016 22:22:35.646:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html</td><tr><td class="linenos" data-pseudo-content="39"></td><td>12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /</td><tr><td class="linenos" data-pseudo-content="40"></td><td>12 09 2016 22:22:35.650:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="41"></td><td>12 09 2016 22:22:35.652:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="42"></td><td>12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /</td><tr><td class="linenos" data-pseudo-content="43"></td><td>12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="44"></td><td>12 09 2016 22:22:35.654:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /</td><tr><td class="linenos" data-pseudo-content="45"></td><td>12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="46"></td><td>12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /</td><tr><td class="linenos" data-pseudo-content="47"></td><td>12 09 2016 22:22:35.655:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="48"></td><td>12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /</td><tr><td class="linenos" data-pseudo-content="49"></td><td>12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="50"></td><td>12 09 2016 22:22:35.656:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /</td><tr><td class="linenos" data-pseudo-content="51"></td><td>12 09 2016 22:22:35.657:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>12 09 2016 22:22:35.657:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="53"></td><td>12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="54"></td><td>12 09 2016 22:22:35.658:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="55"></td><td>12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="56"></td><td>12 09 2016 22:22:35.659:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="57"></td><td>12 09 2016 22:22:35.660:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js</td><tr><td class="linenos" data-pseudo-content="58"></td><td>12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Requesting /absolute/tmp/f8c46bd8d72c5b8578e64552192273be.browserify?8ffde4eef27d38e92cc62da4e8dd0ffa5a3a4a4c /</td><tr><td class="linenos" data-pseudo-content="59"></td><td>12 09 2016 22:22:35.661:DEBUG [middleware:source-files]: Fetching /tmp/f8c46bd8d72c5b8578e64552192273be.browserify</td><tr><td class="linenos" data-pseudo-content="60"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /</td><tr><td class="linenos" data-pseudo-content="61"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="62"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /</td><tr><td class="linenos" data-pseudo-content="63"></td><td>12 09 2016 22:22:35.662:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="64"></td><td>12 09 2016 22:22:35.663:DEBUG [web-server]: serving (cached): /tmp/f8c46bd8d72c5b8578e64552192273be.browserify</td><tr><td class="linenos" data-pseudo-content="65"></td><td>12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="66"></td><td>12 09 2016 22:22:35.664:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="67"></td><td>PhantomJS 2.1.1 (Linux 0.0.0) Routes should map login route to login controller FAILED</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        Error: [$injector:modulerr] http://errors.angularjs.org/1.5.8/$injector/modulerr?p0=mynewanimalfriend&amp;p1=%5B%24injector%3Anomod%5D%20http%3A%2F%2Ferrors.angularjs.org%2F1.5.8%2F%24injector%2Fnomod%3Fp0%3Dmynewanimalfriend%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A25%3A111%0Ab%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A143%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A24%3A489%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A473%0Aq%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A7%3A359%0Ag%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A39%3A320%0Acb%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular%2Fangular.min.js%3F78069f9f3a9ca9652cb04c13ccb0670d747666b8%3A43%3A337%0AworkFn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3074%3A60%0Ainject%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fangular-mocks%2Fangular-mocks.js%3Fcc56136dc551d94abe8195cf8475eb27a3aa3c4b%3A3054%3A46%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Ftest%2Froutes.spec.js%3F92b15bb7c24bc6ead636994fb1c737b91727d887%3A5%3A11%0AattemptSync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1942%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1930%3A20%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A367%3A28%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2568%3A44%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Afn%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2553%3A31%0AattemptAsync%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1972%3A28%0Arun%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1927%3A21%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A1915%3A13%0AqueueRunnerFactory%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A710%3A42%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A2415%3A25%0Aexecute%40http%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fjasmine-core%2Flib%2Fjasmine-core%2Fjasmine.js%3Fb1682a1eb50e00abf147fc1fb28e31006d499aae%3A772%3A24%0Ahttp%3A%2F%2Flocalhost%3A9876%2Fbase%2Fnode_modules%2Fkarma-jasmine%2Flib%2Fadapter.js%3F7975a273517f1eb29d7bd018790fd4c7b9a485d5%3A320%3A23%0Aloaded%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.js%3A151%3A17%0Aglobal%20code%40http%3A%2F%2Flocalhost%3A9876%2Fcontext.html%3A50%3A28 in node_modules/angular/angular.min.js (line 40)</td><tr><td class="linenos" data-pseudo-content="69"></td><td>        node_modules/angular/angular.min.js:40:260</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        q@node_modules/angular/angular.min.js:7:359</td><tr><td class="linenos" data-pseudo-content="71"></td><td>        g@node_modules/angular/angular.min.js:39:320</td><tr><td class="linenos" data-pseudo-content="72"></td><td>        cb@node_modules/angular/angular.min.js:43:337</td><tr><td class="linenos" data-pseudo-content="73"></td><td>        workFn@node_modules/angular-mocks/angular-mocks.js:3074:60</td><tr><td class="linenos" data-pseudo-content="74"></td><td>        inject@node_modules/angular-mocks/angular-mocks.js:3054:46</td><tr><td class="linenos" data-pseudo-content="75"></td><td>        test/routes.spec.js:5:11</td><tr><td class="linenos" data-pseudo-content="76"></td><td>        loaded@http://localhost:9876/context.js:151:17</td><tr><td class="linenos" data-pseudo-content="77"></td><td>PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 (1 FAILED) ERROR (0.044 secs / 0.006 secs)</td><tr><td class="linenos" data-pseudo-content="78"></td><td>12 09 2016 22:22:35.778:DEBUG [karma]: Run complete, exiting.</td><tr><td class="linenos" data-pseudo-content="79"></td><td>12 09 2016 22:22:35.778:DEBUG [launcher]: Disconnecting all browsers</td><tr><td class="linenos" data-pseudo-content="80"></td><td>12 09 2016 22:22:35.778:DEBUG [framework.browserify]: cleaning up</td><tr><td class="linenos" data-pseudo-content="81"></td><td>12 09 2016 22:22:35.782:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html</td><tr><td class="linenos" data-pseudo-content="82"></td><td>12 09 2016 22:22:35.876:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura</td><tr><td class="linenos" data-pseudo-content="83"></td><td>12 09 2016 22:22:35.880:DEBUG [launcher]: Process PhantomJS exited with code 0</td><tr><td class="linenos" data-pseudo-content="84"></td><td>12 09 2016 22:22:35.881:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-17657666</td><tr><td class="linenos" data-pseudo-content="85"></td><td>12 09 2016 22:22:35.884:DEBUG [launcher]: Finished all browsers</td><tr><td class="linenos" data-pseudo-content="86"></td><td>npm ERR! Test failed.  See above for more details.</span></td></table></code></pre>
<p>Now that we have a failing test, we can set about making it pass. Save this at <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngMaterial'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>])</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="20"></td><td>});</td></table></code></pre>
<p>As mentioned earlier, because we’re using Browserify, we can use the <code>require()</code> syntax to import our dependencies. Note we also give our module a name and specify the dependencies. Finally, note that we use <code>$routeProvider</code> to set up our first route, and we map the template URL and controller to match our test.</p>
<p>Let’s run the test again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ npm <span class="hljs-built_in">test</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>&gt; mynewanimalfriend-app@1.0.0 <span class="hljs-built_in">test</span> /home/matthew/Projects/mynewanimalfriend-app</td><tr><td class="linenos" data-pseudo-content="4"></td><td>&gt; karma start</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>12 09 2016 22:35:51.231:DEBUG [config]: autoWatch <span class="hljs-built_in">set</span> to <span class="hljs-literal">false</span>, because of singleRun</td><tr><td class="linenos" data-pseudo-content="7"></td><td>12 09 2016 22:35:51.235:DEBUG [plugin]: Loading karma-* from /home/matthew/Projects/mynewanimalfriend-app/node_modules</td><tr><td class="linenos" data-pseudo-content="8"></td><td>12 09 2016 22:35:51.237:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-browserify.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>12 09 2016 22:35:51.354:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-coverage.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>12 09 2016 22:35:51.496:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>12 09 2016 22:35:51.497:DEBUG [plugin]: Loading plugin /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-phantomjs-launcher.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>12 09 2016 22:35:51.547:DEBUG [framework.browserify]: created browserify bundle: /tmp/02002698e6d413a542186462d3a0a6ce.browserify</td><tr><td class="linenos" data-pseudo-content="13"></td><td>12 09 2016 22:35:51.559:DEBUG [framework.browserify]: add bundle to config.files at position 3</td><tr><td class="linenos" data-pseudo-content="14"></td><td>12 09 2016 22:35:51.564:DEBUG [web-server]: Instantiating middleware</td><tr><td class="linenos" data-pseudo-content="15"></td><td>12 09 2016 22:35:51.581:DEBUG [reporter]: Trying to load reporter: coverage</td><tr><td class="linenos" data-pseudo-content="16"></td><td>12 09 2016 22:35:51.582:DEBUG [reporter]: Trying to load color-version of reporter: coverage (coverage_color)</td><tr><td class="linenos" data-pseudo-content="17"></td><td>12 09 2016 22:35:51.582:DEBUG [reporter]: Couldn<span class="hljs-string">'t load color-version.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>12 09 2016 22:35:51.602:DEBUG [framework.browserify]: updating js/main.js in bundle</td><tr><td class="linenos" data-pseudo-content="19"></td><td>12 09 2016 22:35:51.603:DEBUG [framework.browserify]: building bundle</td><tr><td class="linenos" data-pseudo-content="20"></td><td>12 09 2016 22:35:52.306:DEBUG [framework.browserify]: bundling</td><tr><td class="linenos" data-pseudo-content="21"></td><td>12 09 2016 22:35:54.095:DEBUG [preprocessor.coverage]: Processing "/home/matthew/Projects/mynewanimalfriend-app/js/main.js".</td><tr><td class="linenos" data-pseudo-content="22"></td><td>12 09 2016 22:35:54.170:INFO [framework.browserify]: bundle built</td><tr><td class="linenos" data-pseudo-content="23"></td><td>12 09 2016 22:35:54.189:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/</td><tr><td class="linenos" data-pseudo-content="24"></td><td>12 09 2016 22:35:54.189:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency</td><tr><td class="linenos" data-pseudo-content="25"></td><td>12 09 2016 22:35:54.197:INFO [launcher]: Starting browser PhantomJS</td><tr><td class="linenos" data-pseudo-content="26"></td><td>12 09 2016 22:35:54.198:DEBUG [temp-dir]: Creating temp dir at /tmp/karma-91342786</td><tr><td class="linenos" data-pseudo-content="27"></td><td>12 09 2016 22:35:54.201:DEBUG [launcher]: /home/matthew/Projects/mynewanimalfriend-app/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs /tmp/karma-91342786/capture.js</td><tr><td class="linenos" data-pseudo-content="28"></td><td>12 09 2016 22:35:54.300:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/client.html</td><tr><td class="linenos" data-pseudo-content="29"></td><td>12 09 2016 22:35:54.308:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/karma.js</td><tr><td class="linenos" data-pseudo-content="30"></td><td>12 09 2016 22:35:54.366:DEBUG [karma]: A browser has connected on socket /#FpcuZAJUT-u6Dl4sAAAA</td><tr><td class="linenos" data-pseudo-content="31"></td><td>12 09 2016 22:35:54.386:DEBUG [web-server]: upgrade /socket.io/?EIO=3&amp;transport=websocket&amp;sid=FpcuZAJUT-u6Dl4sAAAA</td><tr><td class="linenos" data-pseudo-content="32"></td><td>12 09 2016 22:35:54.442:INFO [PhantomJS 2.1.1 (Linux 0.0.0)]: Connected on socket /#FpcuZAJUT-u6Dl4sAAAA with id 91342786</td><tr><td class="linenos" data-pseudo-content="33"></td><td>12 09 2016 22:35:54.442:DEBUG [launcher]: PhantomJS (id 91342786) captured in 0.253 secs</td><tr><td class="linenos" data-pseudo-content="34"></td><td>12 09 2016 22:35:54.447:DEBUG [phantomjs.launcher]: </td><tr><td class="linenos" data-pseudo-content="35"></td><td></td><tr><td class="linenos" data-pseudo-content="36"></td><td>12 09 2016 22:35:54.448:DEBUG [middleware:karma]: custom files null null</td><tr><td class="linenos" data-pseudo-content="37"></td><td>12 09 2016 22:35:54.448:DEBUG [middleware:karma]: Serving static request /context.html</td><tr><td class="linenos" data-pseudo-content="38"></td><td>12 09 2016 22:35:54.449:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.html</td><tr><td class="linenos" data-pseudo-content="39"></td><td>12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Requesting /base/node_modules/jasmine-core/lib/jasmine-core/jasmine.js?b1682a1eb50e00abf147fc1fb28e31006d499aae /</td><tr><td class="linenos" data-pseudo-content="40"></td><td>12 09 2016 22:35:54.451:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="41"></td><td>12 09 2016 22:35:54.452:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/jasmine-core/lib/jasmine-core/jasmine.js</td><tr><td class="linenos" data-pseudo-content="42"></td><td>12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-material/angular-material-mocks.js?9f31553e4bbbad4d6b52638351e3a274352311c2 /</td><tr><td class="linenos" data-pseudo-content="43"></td><td>12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="44"></td><td>12 09 2016 22:35:54.453:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/boot.js?945a38bf4e45ad2770eb94868231905a04a0bd3e /</td><tr><td class="linenos" data-pseudo-content="45"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="46"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/karma-jasmine/lib/adapter.js?7975a273517f1eb29d7bd018790fd4c7b9a485d5 /</td><tr><td class="linenos" data-pseudo-content="47"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="48"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular-mocks/angular-mocks.js?cc56136dc551d94abe8195cf8475eb27a3aa3c4b /</td><tr><td class="linenos" data-pseudo-content="49"></td><td>12 09 2016 22:35:54.454:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="50"></td><td>12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Requesting /base/node_modules/angular/angular.min.js?78069f9f3a9ca9652cb04c13ccb0670d747666b8 /</td><tr><td class="linenos" data-pseudo-content="51"></td><td>12 09 2016 22:35:54.455:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="52"></td><td>12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-material/angular-material-mocks.js</td><tr><td class="linenos" data-pseudo-content="53"></td><td>12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/boot.js</td><tr><td class="linenos" data-pseudo-content="54"></td><td>12 09 2016 22:35:54.455:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma-jasmine/lib/adapter.js</td><tr><td class="linenos" data-pseudo-content="55"></td><td>12 09 2016 22:35:54.456:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular-mocks/angular-mocks.js</td><tr><td class="linenos" data-pseudo-content="56"></td><td>12 09 2016 22:35:54.457:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/node_modules/angular/angular.min.js</td><tr><td class="linenos" data-pseudo-content="57"></td><td>12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /absolute/tmp/02002698e6d413a542186462d3a0a6ce.browserify?f4c82dc0618d979f84c89967ea1c412e646a5fe5 /</td><tr><td class="linenos" data-pseudo-content="58"></td><td>12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Fetching /tmp/02002698e6d413a542186462d3a0a6ce.browserify</td><tr><td class="linenos" data-pseudo-content="59"></td><td>12 09 2016 22:35:54.458:DEBUG [middleware:source-files]: Requesting /base/js/main.js?41c850cecc07c24d7cd0421e914bd2420671e573 /</td><tr><td class="linenos" data-pseudo-content="60"></td><td>12 09 2016 22:35:54.459:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="61"></td><td>12 09 2016 22:35:54.460:DEBUG [middleware:source-files]: Requesting /base/test/routes.spec.js?92b15bb7c24bc6ead636994fb1c737b91727d887 /</td><tr><td class="linenos" data-pseudo-content="62"></td><td>12 09 2016 22:35:54.461:DEBUG [middleware:source-files]: Fetching /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="63"></td><td>12 09 2016 22:35:54.461:DEBUG [web-server]: serving (cached): /tmp/02002698e6d413a542186462d3a0a6ce.browserify</td><tr><td class="linenos" data-pseudo-content="64"></td><td>12 09 2016 22:35:54.496:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/js/main.js</td><tr><td class="linenos" data-pseudo-content="65"></td><td>12 09 2016 22:35:54.497:DEBUG [web-server]: serving (cached): /home/matthew/Projects/mynewanimalfriend-app/test/routes.spec.js</td><tr><td class="linenos" data-pseudo-content="66"></td><td>12 09 2016 22:35:54.497:DEBUG [web-server]: serving: /home/matthew/Projects/mynewanimalfriend-app/node_modules/karma/static/context.js</td><tr><td class="linenos" data-pseudo-content="67"></td><td>12 09 2016 22:35:54.582:DEBUG [phantomjs.launcher]: WARNING: Tried to load angular more than once.</td><tr><td class="linenos" data-pseudo-content="68"></td><td></td><tr><td class="linenos" data-pseudo-content="69"></td><td>PhantomJS 2.1.1 (Linux 0.0.0) LOG: '</span>WARNING: Tried to load angular more than once.<span class="hljs-string">'</td><tr><td class="linenos" data-pseudo-content="70"></td><td></td><tr><td class="linenos" data-pseudo-content="71"></td><td>PhantomJS 2.1.1 (Linux 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.358 secs)</td><tr><td class="linenos" data-pseudo-content="72"></td><td>12 09 2016 22:35:55.003:DEBUG [karma]: Run complete, exiting.</td><tr><td class="linenos" data-pseudo-content="73"></td><td>12 09 2016 22:35:55.003:DEBUG [launcher]: Disconnecting all browsers</td><tr><td class="linenos" data-pseudo-content="74"></td><td>12 09 2016 22:35:55.003:DEBUG [framework.browserify]: cleaning up</td><tr><td class="linenos" data-pseudo-content="75"></td><td>12 09 2016 22:35:55.006:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-html</td><tr><td class="linenos" data-pseudo-content="76"></td><td>12 09 2016 22:35:55.078:DEBUG [coverage]: Writing coverage to /home/matthew/Projects/mynewanimalfriend-app/coverage/report-cobertura</td><tr><td class="linenos" data-pseudo-content="77"></td><td>12 09 2016 22:35:55.082:DEBUG [launcher]: Process PhantomJS exited with code 0</td><tr><td class="linenos" data-pseudo-content="78"></td><td>12 09 2016 22:35:55.082:DEBUG [temp-dir]: Cleaning temp dir /tmp/karma-91342786</td><tr><td class="linenos" data-pseudo-content="79"></td><td>12 09 2016 22:35:55.085:DEBUG [launcher]: Finished all browsers</span></td></table></code></pre>
<p>Our first test has passed. Let’s add tests for the other routes:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Routes'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend'</span>));</td><tr><td class="linenos" data-pseudo-content="6"></td><td>  it(<span class="hljs-string">'should map default route to home controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      expect($route.routes[<span class="hljs-string">'/'</span>].controller).toBe(<span class="hljs-string">'HomeCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      expect($route.routes[<span class="hljs-string">'/'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/home.html'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>  it(<span class="hljs-string">'should map login route to login controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].controller).toBe(<span class="hljs-string">'LoginCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      expect($route.routes[<span class="hljs-string">'/login'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/login.html'</span>);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>  it(<span class="hljs-string">'should map logout route to logout controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      expect($route.routes[<span class="hljs-string">'/logout'</span>].controller).toBe(<span class="hljs-string">'LogoutCtrl'</span>);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      expect($route.routes[<span class="hljs-string">'/logout'</span>].templateUrl).toEqual(<span class="hljs-string">'templates/login.html'</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>});</td></table></code></pre>
<p>Note that the logout route uses the login template. This is because all it will do is redirect the user to the login form.</p>
<p>For the sake of brevity I won’t display the test output, but two of these tests should now fail. We can easily set up the new routes in <code>js/main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngMaterial'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>])</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="28"></td><td>});</td></table></code></pre>
<p>That’s looking good so far. But what if someone navigates to a URL that doesn’t exist? Our router should handle that. Add this to the test:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  it(<span class="hljs-string">'should redirect other or empty routes to the home controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$route</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>      expect($route.routes[<span class="hljs-literal">null</span>].redirectTo).toEqual(<span class="hljs-string">'/'</span>)</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="5"></td><td>  });</td></table></code></pre>
<p>Once again, the test should fail. Fixing it is fairly straightforward - we’ll use the <code>otherwise()</code> method to define a fallback route:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngMaterial'</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>])</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="16"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="27"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="30"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>});</td></table></code></pre>
<p>Now our routes are in place, we need to implement the three controllers we will need. However, as two of these controllers deal with authentication, we’ll first create some services to handle that, and they’ll need to be tested. Save this as <code>test/services.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Services'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    jasmine.addMatchers({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      <span class="hljs-attr">toEqualData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">util, customEqualityTesters</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>          <span class="hljs-attr">compare</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">actual, expected</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>              <span class="hljs-attr">pass</span>: angular.equals(actual, expected)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            };</td><tr><td class="linenos" data-pseudo-content="13"></td><td>          }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend.services'</span>));</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  describe(<span class="hljs-string">'Token service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">var</span> mockBackend, Token;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Token_, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      Token = _Token_;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>    it(<span class="hljs-string">'can create a new token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/authenticate'</span>, <span class="hljs-string">'{"email":"bob@example.com","password":"password"}'</span>).respond({<span class="hljs-attr">token</span>: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="31"></td><td>      <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token({</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-attr">email</span>: <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        <span class="hljs-attr">password</span>: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="35"></td><td>      token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        expect(response).toEqualData({<span class="hljs-attr">token</span>: <span class="hljs-string">'mytoken'</span>});</td><tr><td class="linenos" data-pseudo-content="37"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="38"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="41"></td><td>});</td></table></code></pre>
<p>In this test we use the <code>$httpBackend</code> facility from <code>ngMock</code> to mock out our API endpoints. We already have a REST API capable of generating a token, and we set this test up to behave similarly. We specify that it should expect to receive a certain POST request, and should respond with the token <code>mytoken</code>. Run the test to make sure it fails, then save this as <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">"angular-resource"</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.services'</span>, [<span class="hljs-string">'ngResource'</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>.factory(<span class="hljs-string">'Token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/authenticate/'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>});</td></table></code></pre>
<p>A little explanation is called for. In Angular, the <code>$resource</code> dependency represents an HTTP resource. By default it supports making HTTP requests to the denoted endpoint via GET, POST and DELETE, and it’s trivial to add support for PUT or PATCH methods. Using <code>$resource</code>, you can easily interface with a RESTful web service, and it’s one of my favourite things about Angular.</p>
<p>We also need to load <code>services.js</code> in our <code>main.js</code> file:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-string">'ngMaterial'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>])</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="18"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="22"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="33"></td><td>});</td></table></code></pre>
<p>Now, running the tests should show that they pass.</p>
<p>With that in place, we will also create an authentication service that lets the app determine if the user is logged in. Add this to <code>test/services.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Auth service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> Auth;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_Auth_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      Auth = _Auth_;</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    it(<span class="hljs-string">'can set user'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      Auth.setUser(<span class="hljs-string">'mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="10"></td><td>      <span class="hljs-keyword">var</span> token = localStorage.getItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      expect(token).toEqual(<span class="hljs-string">'Bearer mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    it(<span class="hljs-string">'can return login status'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      expect(Auth.isLoggedIn()).toBeTruthy();</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    it(<span class="hljs-string">'can log the user out'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer mytoken'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>      Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      expect(Auth.isLoggedIn()).toBeFalsy();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toBeFalsy();</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>  });</td></table></code></pre>
<p>This service is expected to do three things:</p>
<ul>
<li>Set the current user’s details in local storage</li>
<li>Return whether the user is logged in</li>
<li>Log the user out</li>
</ul>
<p>Make sure the test fails, then amend <code>js/services.js</code> as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">"angular-resource"</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.services'</span>, [<span class="hljs-string">'ngResource'</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>.factory(<span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-keyword">return</span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attr">setUser</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">aUser</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer '</span> + aUser);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attr">isLoggedIn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-keyword">var</span> user = localStorage.getItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">return</span>(user)? user : <span class="hljs-literal">false</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attr">logUserOut</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      localStorage.removeItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>})</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>.factory(<span class="hljs-string">'Token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/authenticate/'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>});</td></table></code></pre>
<p>When the user is set, we store the authentication details we need in local storage. We can then use that to determine if they are logged in. When they log out, we simply clear local storage,</p>
<p>That should be enough to make these tests pass. Now we can move on to our controllers. We’ll do the login controller first. Save this as <code>test/controllers.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td>describe(<span class="hljs-string">'Controllers'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>  beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    jasmine.addMatchers({</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      <span class="hljs-attr">toEqualData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">util, customEqualityTesters</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="9"></td><td>          <span class="hljs-attr">compare</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">actual, expected</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-keyword">return</span> {</td><tr><td class="linenos" data-pseudo-content="11"></td><td>              <span class="hljs-attr">pass</span>: angular.equals(actual, expected)</td><tr><td class="linenos" data-pseudo-content="12"></td><td>            };</td><tr><td class="linenos" data-pseudo-content="13"></td><td>          }</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        };</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>  beforeEach(angular.mock.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>));</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>  describe(<span class="hljs-string">'Login Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">var</span> mockBackend, scope;</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, _$httpBackend_</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>      mockBackend = _$httpBackend_;</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="27"></td><td>      $controller(<span class="hljs-string">'LoginCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-attr">$scope</span>: scope</td><tr><td class="linenos" data-pseudo-content="29"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>    <span class="hljs-comment">// Test doLogin is defined</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>    it(<span class="hljs-string">'should define the login method'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="39"></td><td>      expect(scope.doLogin).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-comment">// Test doLogin works</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>    it(<span class="hljs-string">'should allow the user to log in'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      <span class="hljs-comment">// Mock the backend</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>      mockBackend.expectPOST(<span class="hljs-string">'http://localhost:8000/api/authenticate'</span>, <span class="hljs-string">'{"email":"user@example.com","password":"password"}'</span>).respond({<span class="hljs-attr">token</span>: <span class="hljs-number">123</span>});</td><tr><td class="linenos" data-pseudo-content="46"></td><td></td><tr><td class="linenos" data-pseudo-content="47"></td><td>      <span class="hljs-comment">// Define login data</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>      scope.credentials = {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-attr">email</span>: <span class="hljs-string">'user@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="50"></td><td>        <span class="hljs-attr">password</span>: <span class="hljs-string">'password'</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>      };</td><tr><td class="linenos" data-pseudo-content="52"></td><td></td><tr><td class="linenos" data-pseudo-content="53"></td><td>      <span class="hljs-comment">//  Submit the request</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>      scope.doLogin();</td><tr><td class="linenos" data-pseudo-content="55"></td><td></td><tr><td class="linenos" data-pseudo-content="56"></td><td>      <span class="hljs-comment">// Flush the backend</span></td><tr><td class="linenos" data-pseudo-content="57"></td><td>      mockBackend.flush();</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>      <span class="hljs-comment">// Check login complete</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toEqual(<span class="hljs-string">'Bearer 123'</span>);</td><tr><td class="linenos" data-pseudo-content="61"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="62"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="63"></td><td>});</td></table></code></pre>
<p>We check that the scope and the <code>doLogin()</code> method are defined. We then mock the backend’s <code>/api/authenticate</code> route to respond with a dummy token when our credentials are provided. Then, we set the credentials in the variable <code>$scope.credentials</code>, call <code>doLogin()</code>, flush the backend, and check the authentication header has been set.</p>
<p>Once you’ve verified these tests fail, we can start making them pass. Save this as <code>js/controllers.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>, [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">"ngMaterial"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>])</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>.controller(<span class="hljs-string">'LoginCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Token, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  $scope.doLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="27"></td><td>});</td></table></code></pre>
<p>The <code>LoginCtrl</code> controller accepts the scope, location, and our two services. When <code>doLogin()</code> is alled, it picks up the values in <code>$scope.credentials</code>, which we will set in our template later. It then makes a POST request to our endpoint including those credentials. Our API backend should return the new token in the response, and the token is stored using the <code>Auth</code> service. Otherwise, it raises an error.</p>
<p>Check the test now passes before moving onto the logout functionality. Add this to <code>test/controllers.spec.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Logout Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      Auth.setUser(<span class="hljs-string">'Blah'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="7"></td><td>      $controller(<span class="hljs-string">'LogoutCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-attr">$scope</span>: scope</td><tr><td class="linenos" data-pseudo-content="9"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-comment">// Test session cleared</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    it(<span class="hljs-string">'should clear the session'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      expect(localStorage.getItem(<span class="hljs-string">'authHeader'</span>)).toEqual(<span class="hljs-literal">null</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="21"></td><td>  });</td></table></code></pre>
<p>We want to ensure that when the user navigates to the route managed by the <code>LogoutCtrl</code> controller, the session is cleared, so we set up an existing session, call the controller, check it’s defined, and then check that local storage is empty.</p>
<p>Once you’ve verified that the test fails, amend the controllers as follows:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>, [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">"ngMaterial"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>])</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>.controller(<span class="hljs-string">'LoginCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Token, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  $scope.doLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="27"></td><td>})</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>.controller(<span class="hljs-string">'LogoutCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  <span class="hljs-comment">// Log user out</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>  Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>  <span class="hljs-comment">// Redirect to login page</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>  $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>});</td></table></code></pre>
<p>Our <code>LogoutCtrl</code> controller is very simple - it just logs the user out and redirects them back to the login form. Our final controller is for the home page:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>  describe(<span class="hljs-string">'Home Controller'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">var</span> scope;</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>    beforeEach(inject(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $controller</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="5"></td><td>      scope = $rootScope.$<span class="hljs-keyword">new</span>();</td><tr><td class="linenos" data-pseudo-content="6"></td><td>      $controller(<span class="hljs-string">'HomeCtrl'</span>, {</td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-attr">$scope</span>: scope</td><tr><td class="linenos" data-pseudo-content="8"></td><td>      });</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    }));</td><tr><td class="linenos" data-pseudo-content="10"></td><td></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-comment">// Test controller scope is defined</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    it(<span class="hljs-string">'should define the scope'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>      expect(scope).toBeDefined();</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="15"></td><td>  });</td></table></code></pre>
<p>For now our home controller does nothing except define the scope, so it’s easy to implement:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./services'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.controllers'</span>, [</td><tr><td class="linenos" data-pseudo-content="8"></td><td>  <span class="hljs-string">'mynewanimalfriend.services'</span>,</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-string">"ngMaterial"</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>])</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>.controller(<span class="hljs-string">'LoginCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Token, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  $scope.doLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">var</span> token = <span class="hljs-keyword">new</span> Token($scope.credentials);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    token.$save(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>      <span class="hljs-keyword">if</span> (response.token) {</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-comment">// Set up auth service</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>        Auth.setUser(response.token);</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>        <span class="hljs-comment">// Redirect</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        alert(<span class="hljs-string">'Unable to log in - please check your details are correct'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    });</td><tr><td class="linenos" data-pseudo-content="26"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="27"></td><td>})</td><tr><td class="linenos" data-pseudo-content="28"></td><td></td><tr><td class="linenos" data-pseudo-content="29"></td><td>.controller(<span class="hljs-string">'LogoutCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  <span class="hljs-comment">// Log user out</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>  Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>  <span class="hljs-comment">// Redirect to login page</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>  $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>})</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>.controller(<span class="hljs-string">'HomeCtrl'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$scope</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="38"></td><td>});</td></table></code></pre>
<p>Verify that the tests pass, and our controllers are done for now. However, we still have some work to do to hook the various elements up. First, of all, our <code>main.js</code> unnecessarily loads our services - since we only use those services in our controllers, we don’t need them there. We also need to be able to keep users out of routes other than <code>login</code> when not logged in. Here’s what you <code>main.js</code> should look like:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./controllers'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-string">'ngMaterial'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-string">'mynewanimalfriend.controllers'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>])</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>.run([<span class="hljs-string">'$rootScope'</span>, <span class="hljs-string">'$location'</span>, <span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>  $rootScope.$on(<span class="hljs-string">'$routeChangeStart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-keyword">if</span> (!Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="20"></td><td>      <span class="hljs-keyword">if</span> ($location.path() !== <span class="hljs-string">'/login'</span>) {</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="22"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="25"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>.config([<span class="hljs-string">'$httpProvider'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$httpProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'sessionInjector'</span>);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'authInterceptor'</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="31"></td><td></td><tr><td class="linenos" data-pseudo-content="32"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="35"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="36"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="38"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="40"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="42"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="45"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="46"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="48"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="49"></td><td>});</td></table></code></pre>
<p>Note that we set it up to intercept the HTTP request with the session injector and the auth interceptor. Next we need to create these in <code>js/services.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">"angular-resource"</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend.services'</span>, [<span class="hljs-string">'ngResource'</span>])</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>.factory(<span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>  <span class="hljs-keyword">return</span>{</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-attr">setUser</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">aUser</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="11"></td><td>      localStorage.setItem(<span class="hljs-string">'authHeader'</span>, <span class="hljs-string">'Bearer '</span> + aUser);</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-attr">isLoggedIn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>      <span class="hljs-keyword">var</span> user = localStorage.getItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>      <span class="hljs-keyword">return</span>(user)? user : <span class="hljs-literal">false</span>;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    },</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-attr">logUserOut</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      localStorage.removeItem(<span class="hljs-string">'authHeader'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="20"></td><td>  }</td><tr><td class="linenos" data-pseudo-content="21"></td><td>})</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>.factory(<span class="hljs-string">'Token'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$resource</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>  <span class="hljs-keyword">return</span> $resource(<span class="hljs-string">'http://localhost:8000/api/authenticate/'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>})</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>.factory(<span class="hljs-string">'sessionInjector'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="28"></td><td>  <span class="hljs-keyword">var</span> sessionInjector = {</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    <span class="hljs-attr">request</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="30"></td><td>      <span class="hljs-keyword">if</span> (Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        config.headers.Authorization = Auth.isLoggedIn();</td><tr><td class="linenos" data-pseudo-content="32"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="33"></td><td>      <span class="hljs-keyword">return</span> config;</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="36"></td><td>  <span class="hljs-keyword">return</span> sessionInjector;</td><tr><td class="linenos" data-pseudo-content="37"></td><td>})</td><tr><td class="linenos" data-pseudo-content="38"></td><td></td><tr><td class="linenos" data-pseudo-content="39"></td><td>.service(<span class="hljs-string">'authInterceptor'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$q, Auth, $location</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  <span class="hljs-keyword">var</span> service = <span class="hljs-keyword">this</span>;</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>  service.responseError = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    <span class="hljs-keyword">if</span> (response.status == <span class="hljs-number">400</span>) {</td><tr><td class="linenos" data-pseudo-content="44"></td><td>      Auth.logUserOut();</td><tr><td class="linenos" data-pseudo-content="45"></td><td>      $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="47"></td><td>    <span class="hljs-keyword">return</span> $q.reject(response);</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  };</td><tr><td class="linenos" data-pseudo-content="49"></td><td>});</td></table></code></pre>
<p>I’ll walk you through these. <code>sessionInjector</code> adds the authorization HTTP header to every request to the server if the user is logged in, so that it returns the right user’s details. <code>authInterceptor</code> catches any 400 errors, denoting that the user is not authenticated with a current JSON web token, and logs the user out. In this way we can handle the expiry of a user’s token.</p>
<p>Now the logic of our app is in place, but that’s no use without some content…</p>
<h2 id="angular-templating">Angular templating</h2>
<p>We have one very basic HTML template, but that’s just a boilerplate for inserting the rest of our content. For the rest of the HTML we’ll need to load templates dynamically, and we’ll use Angular Material to help us build a nice UI quickly. Run the following commands to create the files:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ mkdir www/templates</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ touch www/templates/login.html</td><tr><td class="linenos" data-pseudo-content="3"></td><td>$ touch www/templates/home.html</td></table></code></pre>
<p>We need to import the CSS for Angular Material. Add this to <code>sass/style.scss</code>:</p>
<pre><code class="hljs lang-scss"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Angular Material</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>@<span class="hljs-keyword">import</span> <span class="hljs-string">"node_modules/angular-material/angular-material.scss"</span>;</td></table></code></pre>
<p>With that done, we need to configure theming in <code>main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">'use strict'</span>;</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-route'</span>);</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-animate'</span>);</td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'angular-material'</span>);</td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-built_in">require</span>(<span class="hljs-string">'./controllers'</span>);</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>angular.module(<span class="hljs-string">'mynewanimalfriend'</span>, [</td><tr><td class="linenos" data-pseudo-content="10"></td><td>  <span class="hljs-string">'ngRoute'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>  <span class="hljs-string">'ngAnimate'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>  <span class="hljs-string">'ngMaterial'</span>,</td><tr><td class="linenos" data-pseudo-content="13"></td><td>  <span class="hljs-string">'mynewanimalfriend.controllers'</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>])</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$mdThemingProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>    $mdThemingProvider.theme(<span class="hljs-string">'default'</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td>      .primaryPalette(<span class="hljs-string">'purple'</span>)</td><tr><td class="linenos" data-pseudo-content="19"></td><td>      .accentPalette(<span class="hljs-string">'cyan'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>})</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>.run([<span class="hljs-string">'$rootScope'</span>, <span class="hljs-string">'$location'</span>, <span class="hljs-string">'Auth'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location, Auth</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>  $rootScope.$on(<span class="hljs-string">'$routeChangeStart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">if</span> (!Auth.isLoggedIn()) {</td><tr><td class="linenos" data-pseudo-content="26"></td><td>      <span class="hljs-keyword">if</span> ($location.path() !== <span class="hljs-string">'/login'</span>) {</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        $location.path(<span class="hljs-string">'/login'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>      }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="30"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="32"></td><td></td><tr><td class="linenos" data-pseudo-content="33"></td><td>.config([<span class="hljs-string">'$httpProvider'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$httpProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="34"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'sessionInjector'</span>);</td><tr><td class="linenos" data-pseudo-content="35"></td><td>  $httpProvider.interceptors.push(<span class="hljs-string">'authInterceptor'</span>);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>}])</td><tr><td class="linenos" data-pseudo-content="37"></td><td></td><tr><td class="linenos" data-pseudo-content="38"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$routeProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="39"></td><td>  $routeProvider</td><tr><td class="linenos" data-pseudo-content="40"></td><td>  .when(<span class="hljs-string">'/login'</span>, {</td><tr><td class="linenos" data-pseudo-content="41"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LoginCtrl'</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="44"></td><td>  .when(<span class="hljs-string">'/'</span>, {</td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/home.html'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'HomeCtrl'</span></td><tr><td class="linenos" data-pseudo-content="47"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="48"></td><td>  .when(<span class="hljs-string">'/logout'</span>, {</td><tr><td class="linenos" data-pseudo-content="49"></td><td>    <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">'templates/login.html'</span>,</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-attr">controller</span>: <span class="hljs-string">'LogoutCtrl'</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>  })</td><tr><td class="linenos" data-pseudo-content="52"></td><td>  .otherwise({</td><tr><td class="linenos" data-pseudo-content="53"></td><td>    <span class="hljs-attr">redirectTo</span>: <span class="hljs-string">'/'</span></td><tr><td class="linenos" data-pseudo-content="54"></td><td>  });</td><tr><td class="linenos" data-pseudo-content="55"></td><td>});</td></table></code></pre>
<p>You may want to look at the <a href="https://material.angularjs.org/latest/Theming/01_introduction">documentation</a> for Angular Material to choose your own theme options. Next, let’s create our login template at <code>www/templates/login.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-content</span> <span class="hljs-attr">md-theme</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">layout-gt-sm</span>=<span class="hljs-string">"row"</span> <span class="hljs-attr">layout-padding</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.email"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"email"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-input-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-block"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"credentials.password"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-input-container</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-raised md-primary"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"doLogin()"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-content</span>&gt;</span></td></table></code></pre>
<p>We’re using Angular Material’s input and button directives to make our inputs look a bit nicer. Note that the <code>ng-click</code> handler calls the <code>doLogin()</code> method of our controller, and that the <code>ng-model</code> attributes contain the <code>credentials</code> object that gets passed to the API. If you haven’t used Angular before, <code>ng-model</code> essentially lets you bind a variable to an element’s value so, for instance, when an input is changed, it can be easily accessed via the variable.</p>
<p>Next, we’ll implement a placeholder for our home page with a log out button. Save this as <code>www/templates/home.html</code>:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-toolbar-tools"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Log out"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#logout"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            Log out</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-toolbar</span>&gt;</span></td></table></code></pre>
<p>That should be all we need to demonstrate logging in and out of our app. Let’s try it out. First run the Gulp task to show the app in the browser:</p>
<pre><code class="hljs lang-bash singleline">$ gulp</code></pre>
<p>Then, in another shell session, switch to the directory with the backend and run the server for that:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan serve</code></pre>
<p>You should already have a user account set up and ready to use thanks to the seeder we wrote. The browser should show the login page by default, and if you fill in the login form and click the button you should see the home page. You should then be able to log out again.</p>
<p>Congratulations! We’ve got authentication working.</p>
<h2 id="switching-to-html5-routing">Switching to HTML5 routing</h2>
<p>You may note that the URLs use hashes - they are in the format <code>http://localhost:5000/#/login</code>. Wouldn’t it be better if we didn’t use the hash? Fortunately modern browsers support this via the HTML5 pushState API, and Angular has built-in support for this.</p>
<p>To enable it, we first need to declare a base URL in <code>www/index.html</code>. Amend it as follows:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, user-scalable=0"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My New Animal Friend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css/style.css"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">"mynewanimalfriend"</span> <span class="hljs-attr">ng-cloak</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"javascript"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="19"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></td></table></code></pre>
<p>Here we’ve added the <code>&lt;base href=&quot;/&quot;&gt;</code> tag to denote our base URL. Next we configure Angular to use HTML5 routing in <code>main.js</code>:</p>
<pre><code class="hljs lang-javascript"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$locationProvider</span>) </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>  $locationProvider.html5Mode(<span class="hljs-literal">true</span>);</td><tr><td class="linenos" data-pseudo-content="3"></td><td>})</td></table></code></pre>
<p>And amend the URL in the home template:</p>
<pre><code class="hljs lang-html"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-tag">&lt;<span class="hljs-name">md-toolbar</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"md-toolbar-tools"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">md-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Log out"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>            Log out</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;/<span class="hljs-name">md-button</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-tag">&lt;/<span class="hljs-name">md-toolbar</span>&gt;</span></td></table></code></pre>
<p>Now, we should be using HTML5 routing throughout.</p>
<p>With that done, we can finish for today. We’ve got our basic app skeleton and authentication system up and running, and we’ll be in a good place to continue developing the rest of the app next time. I’ve put the source code on <a href="https://github.com/matthewbdaly/mynewanimalfriend-app">Github</a>, and you can find this lesson’s work under the <code>lesson-2</code> tag.</p>
<p>Next time we’ll develop the app further, including implementing the pet search functionality.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Building a Phonegap app with Laravel and Angular - Part 1]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/09/11/building-a-phonegap-app-with-laravel-and-angular-part-1/</guid>
            <pubDate>Sun, 11 Sep 2016 18:33:41 GMT</pubDate>
            <description><![CDATA[<p>A lot of my work over the last few years has been on Phonegap apps. Phonegap isn’t terribly hard to use, but the difference in context between that and a more conventional web app means that you have to move a lot of functionality to the client side, and unless you’ve used client-side Javascript frameworks before it can be a struggle.</p>
<p>In this series of tutorials I’ll show you how I might build a Phonegap app. The work involved will include:</p>
<ul>
<li>Building a REST API using Laravel to expose the data</li>
<li>Building an admin interface to manage the data</li>
<li>Building a Phonegap app using Angular.js</li>
<li>Testing and deploying it</li>
</ul>
<p>In the process we’ll cover issues like authentication, authorization, real-time notifications and working with REST APIs. Note that we won’t cover the app submission process - you can find plenty of resources on that. We will, however, be using Phonegap Build to build the app.</p>
<h2 id="the-brief">The brief</h2>
<p>Let’s say our new client is an animal shelter. The brief for the app is as follows:</p>
<blockquote>
<p>My New Animal Friend will be an app for finding a new pet. Once a user signs in, they’ll be able to choose what type of pet they’re looking for, then look through a list of pets available to adopt. They can reject them by swiping left or save them by swiping right. They can see more about the ones they swipe right on, and arrange to meet them, from within the app. Users can also message the staff to ask questions about a pet.</p>
</blockquote>
<p>Nice idea, but there’s a lot of work involved! Our very first task is to build the REST API, since everything else relies on that. Before starting, make sure you have the following installed:</p>
<ul>
<li>PHP (I’m using PHP 7, but 5.6 should be fine)</li>
<li>Composer</li>
<li>Git</li>
<li>A compatible relational database (I use PostgreSQL)</li>
<li>Redis</li>
<li>Your usual text editor</li>
<li>Node.js</li>
</ul>
<p>As long as you have this, you should be ready to go. Using <a href="https://laravel.com/docs/5.3/homestead">Homestead</a> is the simplest way to get started if you don’t have all this stuff already.</p>
<h2 id="starting-the-api">Starting the API</h2>
<p>To start building our REST API, run the following command from the shell:</p>
<pre><code class="hljs lang-bash singleline">$ composer create-project --prefer-dist laravel/laravel mynewanimalfriend-backend</code></pre>
<p>We also have some other dependencies we need to install, so switch into the new directory and run the following command:</p>
<pre><code class="hljs lang-bash singleline">$ composer require barryvdh/laravel-cors tymon/jwt-auth predis/predis</code></pre>
<p>Next, we need to add the new packages to the Laravel config. Open up <code>config/app.php</code> and add the following to the <code>providers</code> array:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>   Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class,                                                                                                                                              </td><tr><td class="linenos" data-pseudo-content="2"></td><td>   Barryvdh\Cors\ServiceProvider::class,</td></table></code></pre>
<p>And the following to the <code>aliases</code> array:</p>
<pre><code class="hljs lang-php singleline">   <span class="hljs-string">'JWTAuth'</span> =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,</code></pre>
<p>We also need to ensure that the CORS middleware is applied to all API routes. Open up <code>app/Http/Kernel.php</code> and under the <code>api</code> array in <code>protected $middlewareGroups</code> paste the following:</p>
<pre><code class="hljs lang-php singleline">   \Barryvdh\Cors\HandleCors::class,</code></pre>
<p>Now that the packages are included, we can publish the files for them:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan vendor:publish</code></pre>
<p>Next, we need to set a key for our API authentication:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan jwt:generate</code></pre>
<p>And set a custom namespace:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan app:name AnimalFriend</code></pre>
<p>You’ll also want to set up the <code>.env</code> file with the configuration settings for your application. There’s one at <code>.env.example</code> by default that you can copy and customise. Then run the following command to generate the application key:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan key:generate</code></pre>
<p>I had to change the namespace for the user model in <code>config/jwt.php</code> as well:</p>
<pre><code class="hljs lang-php singleline">    <span class="hljs-string">'user'</span> =&gt; <span class="hljs-string">'AnimalFriend\User'</span>,</code></pre>
<p>I also tend to amend the settings in <code>phpunit.xml</code> as follows so that it uses an in-memory SQLite database for tests:</p>
<pre><code class="hljs lang-xml"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"APP_ENV"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testing"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"SESSION_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"array"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"QUEUE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sync"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CACHE_DRIVER"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"redis"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_CONNECTION"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlite"</span>/&gt;</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-tag">&lt;<span class="hljs-name">env</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DB_DATABASE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">":memory:"</span>/&gt;</span></td></table></code></pre>
<p>Also, delete <code>tests/ExampleTest.php</code> and amend <code>tests/TestCase.php</code> as follows in order to use database migrations in tests:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * The base URL to use while testing the application.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@var</span> string</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">protected</span> $baseUrl = <span class="hljs-string">'http://localhost'</span>;</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="17"></td><td>     * Creates the application.</td><tr><td class="linenos" data-pseudo-content="18"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Foundation\Application</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="21"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createApplication</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        $app = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">'/../bootstrap/app.php'</span>;</td><tr><td class="linenos" data-pseudo-content="24"></td><td></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">return</span> $app;</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>With that in place, we can start work on our API proper.</p>
<h2 id="authenticating-our-api">Authenticating our API</h2>
<p>We’re going to start out with a very limited subset of our API. First, we’ll implement the authentication for our app, then we’ll add the facility to view a list of pets or an individual pet. Other functionality will come later. This will be sufficient to get the app working.</p>
<p>First, we need to create our user model. As we’ll be practicing TDD throughout, we write a test for the user model first. Save the following as <code>tests/UserModelTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserModelTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test creating a user</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCreatingAUser</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Verify it works</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $saved = User::where(<span class="hljs-string">'email'</span>, <span class="hljs-string">'bob@example.com'</span>)-&gt;first();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;id, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;name, <span class="hljs-string">'bobsmith'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="26"></td><td>}</td></table></code></pre>
<p>If we run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>.                                                                   1 / 1 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 169 ms, Memory: 12.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (1 <span class="hljs-built_in">test</span>, 3 assertions)</td></table></code></pre>
<p>We already have a perfectly good <code>User</code> model and the appropriate migrations, so our test already passes.</p>
<p>Next, we need to implement the authentication system. Save this as <code>tests/AuthTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Test the auth</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAuth</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'password'</span> =&gt; bcrypt(<span class="hljs-string">'password'</span>)</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="25"></td><td>            <span class="hljs-string">'email'</span> =&gt; $user-&gt;email,</td><tr><td class="linenos" data-pseudo-content="26"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'api/authenticate'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>        $content = json_decode($response-&gt;getContent());</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertTrue(array_key_exists(<span class="hljs-string">'token'</span>, $content));</td><tr><td class="linenos" data-pseudo-content="32"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="35"></td><td>     * Test the auth when user does not exist</td><tr><td class="linenos" data-pseudo-content="36"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="37"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="38"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="39"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAuthFailure</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="40"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-comment">// Create data for request</span></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        $data = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="43"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'user@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'password'</span> =&gt; <span class="hljs-string">'password'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'api/authenticate'</span>, $data);</td><tr><td class="linenos" data-pseudo-content="47"></td><td></td><tr><td class="linenos" data-pseudo-content="48"></td><td>        <span class="hljs-comment">// Check the status code</span></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">401</span>);</td><tr><td class="linenos" data-pseudo-content="50"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="51"></td><td>}</td></table></code></pre>
<p>The first test creates a user and sends an authentication request, then confirms that it returns the JSON Web Token. The second checks that a user that doesn’t exist cannot log in.</p>
<p>Let’s run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>FF.                                                                 3 / 3 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 328 ms, Memory: 14.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 2 failures:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) AuthTest::<span class="hljs-built_in">test</span>Auth</td><tr><td class="linenos" data-pseudo-content="11"></td><td>Expected status code 200, got 404.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Failed asserting that 404 matches expected 200.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:29</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>2) AuthTest::<span class="hljs-built_in">test</span>AuthFailure</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Expected status code 401, got 404.</td><tr><td class="linenos" data-pseudo-content="19"></td><td>Failed asserting that 404 matches expected 401.</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="22"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/AuthTest.php:49</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>FAILURES!</td><tr><td class="linenos" data-pseudo-content="25"></td><td>Tests: 3, Assertions: 5, Failures: 2.</td></table></code></pre>
<p>With a failing test in place, we can implement login. First let’s create our controller at <code>app/Http/Controllers/AuthenticateController.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>\<span class="hljs-title">Controller</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">JWTAuth</span>;</td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">JWTException</span>;</td><tr><td class="linenos" data-pseudo-content="11"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">User</span>;</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Hash</span>;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticateController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-keyword">private</span> $user;</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(User $user)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;user = $user;</td><tr><td class="linenos" data-pseudo-content="20"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="21"></td><td></td><tr><td class="linenos" data-pseudo-content="22"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(Request $request)</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment">// Get credentials</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        $credentials = $request-&gt;only(<span class="hljs-string">'email'</span>, <span class="hljs-string">'password'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">// Get user</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $user = <span class="hljs-keyword">$this</span>-&gt;user-&gt;where(<span class="hljs-string">'email'</span>, $credentials[<span class="hljs-string">'email'</span>])-&gt;first();</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-keyword">try</span> {</td><tr><td class="linenos" data-pseudo-content="31"></td><td>            <span class="hljs-comment">// attempt to verify the credentials and create a token for the user</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>            <span class="hljs-keyword">if</span> (! $token = JWTAuth::attempt($credentials)) {</td><tr><td class="linenos" data-pseudo-content="33"></td><td>                <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'invalid_credentials'</span>], <span class="hljs-number">401</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>            }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        } <span class="hljs-keyword">catch</span> (JWTException $e) {</td><tr><td class="linenos" data-pseudo-content="36"></td><td>            <span class="hljs-comment">// something went wrong whilst attempting to encode the token</span></td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">'error'</span> =&gt; <span class="hljs-string">'could_not_create_token'</span>], <span class="hljs-number">500</span>);</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        }</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment">// all good so return the token</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json(compact(<span class="hljs-string">'token'</span>));</td><tr><td class="linenos" data-pseudo-content="42"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="43"></td><td>}</td></table></code></pre>
<p>And we need to set up the route in <code>routes/api.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-comment">/*</td><tr><td class="linenos" data-pseudo-content="6"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="7"></td><td>| API Routes</td><tr><td class="linenos" data-pseudo-content="8"></td><td>|--------------------------------------------------------------------------</td><tr><td class="linenos" data-pseudo-content="9"></td><td>|</td><tr><td class="linenos" data-pseudo-content="10"></td><td>| Here is where you can register API routes for your application. These</td><tr><td class="linenos" data-pseudo-content="11"></td><td>| routes are loaded by the RouteServiceProvider within a group which</td><tr><td class="linenos" data-pseudo-content="12"></td><td>| is assigned the "api" middleware group. Enjoy building your API!</td><tr><td class="linenos" data-pseudo-content="13"></td><td>|</td><tr><td class="linenos" data-pseudo-content="14"></td><td>*/</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>Route::post(<span class="hljs-string">'authenticate'</span>, <span class="hljs-string">'AuthenticateController@authenticate'</span>);</td></table></code></pre>
<p>Note that because it’s an API route, it’s automatically prefixed with <code>api/</code> without us having to do anything.</p>
<p>Now if we run our tests, they should pass:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>...                                                                 3 / 3 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 402 ms, Memory: 14.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (3 tests, 6 assertions)</td></table></code></pre>
<p>Now we can obtain a JSON Web Token to authenticate users with. To start with we’ll only support existing users, but later we’ll add a method to sign up. However, we need at least one user to test with, so we’ll create a seeder for that at <code>database/seeds/UserTableSeeder.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Carbon</span>\<span class="hljs-title">Carbon</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTableSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Add user</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        DB::table(<span class="hljs-string">'users'</span>)-&gt;insert([</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'created_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            <span class="hljs-string">'updated_at'</span> =&gt; Carbon::now(),</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            <span class="hljs-string">'password'</span> =&gt; Hash::make(<span class="hljs-string">"password"</span>)</td><tr><td class="linenos" data-pseudo-content="22"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="23"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="24"></td><td>}</td></table></code></pre>
<p>You can run <code>php artisan make:seeder UserTableSeeder</code> to generate the file, or just paste it in. You also need to amend <code>database/seeds/DatabaseSeeder.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Seeder</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseSeeder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Seeder</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Run the database seeds.</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-keyword">$this</span>-&gt;call(UserTableSeeder::class);</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="16"></td><td>}</td></table></code></pre>
<p>This ensures the seeder will actually be called. Then, run the following commands:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan migrate</td><tr><td class="linenos" data-pseudo-content="2"></td><td>$ php artisan db:seed</td></table></code></pre>
<p>That sets up our user in the database.</p>
<h2 id="adding-the-pets-endpoint">Adding the Pets endpoint</h2>
<p>Our next step is to add the pets model and endpoint. Our <code>Pet</code> model should have the following fields:</p>
<ul>
<li>ID</li>
<li>Timestamps (<code>created_at</code> and <code>updated_at</code>)</li>
<li>Name</li>
<li>Path to photo</li>
<li>Availability</li>
<li>Type (eg cat, dog)</li>
</ul>
<p>Let’s create a test for that model:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetModelTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="8"></td><td>     * Test creating a pet</td><tr><td class="linenos" data-pseudo-content="9"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testCreatingAPet</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="14"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="16"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="18"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="20"></td><td></td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment">// Verify it works</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        $saved = Pet::where(<span class="hljs-string">'name'</span>, <span class="hljs-string">'Freddie'</span>)-&gt;first();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;id, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;name, <span class="hljs-string">'Freddie'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;type, <span class="hljs-string">'Cat'</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;available, <span class="hljs-number">1</span>);</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertEquals($saved-&gt;picture, <span class="hljs-string">'1.jpg'</span>);</td><tr><td class="linenos" data-pseudo-content="28"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="29"></td><td>}</td></table></code></pre>
<p>Save this as <code>tests/PetModelTest.php</code>. Then run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>..E.                                                                4 / 4 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 414 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There was 1 error:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetModelTest::<span class="hljs-built_in">test</span>CreatingAUser</td><tr><td class="linenos" data-pseudo-content="11"></td><td>InvalidArgumentException: Unable to locate factory with name [default] [AnimalFriend\Pet].</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:126</td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:2280</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:139</td><tr><td class="linenos" data-pseudo-content="16"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:106</td><tr><td class="linenos" data-pseudo-content="17"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php:84</td><tr><td class="linenos" data-pseudo-content="18"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetModelTest.php:16</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>ERRORS!</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Tests: 4, Assertions: 6, Errors: 1.</td></table></code></pre>
<p>First we need to create a factory for creating a pet in <code>database/factories/ModelFactory.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$factory-&gt;define(AnimalFriend\Pet::class, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Faker\Generator $faker)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="2"></td><td>    <span class="hljs-keyword">return</span> [</td><tr><td class="linenos" data-pseudo-content="3"></td><td>        <span class="hljs-string">'name'</span> =&gt; $faker-&gt;firstNameMale,</td><tr><td class="linenos" data-pseudo-content="4"></td><td>        <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="5"></td><td>        <span class="hljs-string">'available'</span> =&gt; <span class="hljs-number">1</span>,</td><tr><td class="linenos" data-pseudo-content="6"></td><td>        <span class="hljs-string">'picture'</span> =&gt; <span class="hljs-string">'1.jpg'</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    ];</td><tr><td class="linenos" data-pseudo-content="8"></td><td>});</td></table></code></pre>
<p>Then, we create the model:</p>
<pre><code class="hljs lang-bash singleline">$ php artisan make:model Pet</code></pre>
<p>Next, we create a migration for the <code>Pet</code> model:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ php artisan make:migration create_pets_table</td><tr><td class="linenos" data-pseudo-content="2"></td><td>Created Migration: 2016_09_11_145010_create_pets_table</td></table></code></pre>
<p>And paste in the following code:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Schema</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Schema</span>\<span class="hljs-title">Blueprint</span>;</td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Migrations</span>\<span class="hljs-title">Migration</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatePetsTable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Migration</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Run the migrations.</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        Schema::create(<span class="hljs-string">'pets'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(Blueprint $table)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="17"></td><td>            $table-&gt;increments(<span class="hljs-string">'id'</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            $table-&gt;string(<span class="hljs-string">'name'</span>);</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            $table-&gt;string(<span class="hljs-string">'type'</span>);</td><tr><td class="linenos" data-pseudo-content="20"></td><td>            $table-&gt;string(<span class="hljs-string">'available'</span>);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>            $table-&gt;string(<span class="hljs-string">'picture'</span>)-&gt;nullable();</td><tr><td class="linenos" data-pseudo-content="22"></td><td>            $table-&gt;timestamps();</td><tr><td class="linenos" data-pseudo-content="23"></td><td>        });</td><tr><td class="linenos" data-pseudo-content="24"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="25"></td><td></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="27"></td><td>     * Reverse the migrations.</td><tr><td class="linenos" data-pseudo-content="28"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="32"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="33"></td><td>        Schema::drop(<span class="hljs-string">'pets'</span>);</td><tr><td class="linenos" data-pseudo-content="34"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="35"></td><td>}</td></table></code></pre>
<p>Time to run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>....                                                                4 / 4 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 412 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (4 tests, 12 assertions)</td></table></code></pre>
<p>With that done, we can start work on implementing the endpoint. We need to check that unauthorised users cannot retrieve the data, and that authorised users can. First, let’s create <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>\<span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetControllerTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">use</span> <span class="hljs-title">DatabaseMigrations</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td></td><tr><td class="linenos" data-pseudo-content="9"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="10"></td><td>     * Test fetching pets when unauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="12"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="13"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetsWhenUnauthorised</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="15"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="16"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="18"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="19"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="20"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets'</span>);</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">400</span>);</td><tr><td class="linenos" data-pseudo-content="26"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="29"></td><td>     * Test fetching pets when authorised</td><tr><td class="linenos" data-pseudo-content="30"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="31"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="32"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="33"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPets</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="34"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="35"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="38"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="39"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="41"></td><td></td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="43"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="44"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="45"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="46"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="47"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="48"></td><td></td><tr><td class="linenos" data-pseudo-content="49"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="51"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="52"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="53"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="54"></td><td></td><tr><td class="linenos" data-pseudo-content="55"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="56"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets'</span>, [], $headers)</td><tr><td class="linenos" data-pseudo-content="57"></td><td>            -&gt;seeJsonStructure([</td><tr><td class="linenos" data-pseudo-content="58"></td><td>                <span class="hljs-string">'*'</span> =&gt; [</td><tr><td class="linenos" data-pseudo-content="59"></td><td>                    <span class="hljs-string">'id'</span>,</td><tr><td class="linenos" data-pseudo-content="60"></td><td>                    <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="61"></td><td>                    <span class="hljs-string">'type'</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>                    <span class="hljs-string">'available'</span>,</td><tr><td class="linenos" data-pseudo-content="63"></td><td>                    <span class="hljs-string">'picture'</span>,</td><tr><td class="linenos" data-pseudo-content="64"></td><td>                    <span class="hljs-string">'created_at'</span>,</td><tr><td class="linenos" data-pseudo-content="65"></td><td>                    <span class="hljs-string">'updated_at'</span></td><tr><td class="linenos" data-pseudo-content="66"></td><td>                ]</td><tr><td class="linenos" data-pseudo-content="67"></td><td>            ]);</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="69"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="70"></td><td>}</td></table></code></pre>
<p>First, we create a pet, make an HTTP request to <code>/api/pets</code>, and check we are not authorised. Next, we do the same, but also create a user and a JSON Web Token, and pass the token through in the request. Then we verify the response data and that it was successful.</p>
<p>Let’s run the tests:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>..FF..                                                              6 / 6 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 509 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 2 failures:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPetsWhenUnauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>Expected status code 400, got 404.</td><tr><td class="linenos" data-pseudo-content="12"></td><td>Failed asserting that 404 matches expected 400.</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:25</td><tr><td class="linenos" data-pseudo-content="16"></td><td></td><tr><td class="linenos" data-pseudo-content="17"></td><td>2) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPets</td><tr><td class="linenos" data-pseudo-content="18"></td><td>Failed asserting that null is of <span class="hljs-built_in">type</span> <span class="hljs-string">"array"</span>.</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:295</td><tr><td class="linenos" data-pseudo-content="21"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:67</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>FAILURES!</td><tr><td class="linenos" data-pseudo-content="24"></td><td>Tests: 6, Assertions: 17, Failures: 2.</td></table></code></pre>
<p>That looks correct, so we can start building our endpoint. We can generate a boilerplate for it as follows:</p>
<pre><code class="hljs lang-bash singleline">$ $ php artisan make:controller PetController --resource</code></pre>
<p>Note the <code>--resource</code> flag - this tells Laravel to set it up to be a RESTful controller with certain predefined functions. Next, let’s amend the new file at <code>app\Http\Controllers/PetController.php</code> as follows:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-meta">&lt;?php</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">namespace</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;</td><tr><td class="linenos" data-pseudo-content="6"></td><td></td><tr><td class="linenos" data-pseudo-content="7"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Requests</span>;</td><tr><td class="linenos" data-pseudo-content="8"></td><td><span class="hljs-keyword">use</span> <span class="hljs-title">AnimalFriend</span>\<span class="hljs-title">Pet</span>;</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PetController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></span>{</td><tr><td class="linenos" data-pseudo-content="12"></td><td>    <span class="hljs-keyword">private</span> $pet;</td><tr><td class="linenos" data-pseudo-content="13"></td><td></td><tr><td class="linenos" data-pseudo-content="14"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Pet $pet)</span> </span>{</td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-keyword">$this</span>-&gt;pet = $pet;</td><tr><td class="linenos" data-pseudo-content="16"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="19"></td><td>     * Display a listing of the resource.</td><tr><td class="linenos" data-pseudo-content="20"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="23"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="24"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="25"></td><td>        <span class="hljs-comment">// Get all pets</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>        $pets = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;get();</td><tr><td class="linenos" data-pseudo-content="27"></td><td></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="29"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($pets, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="30"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="31"></td><td>}</td></table></code></pre>
<p>This implements an index route that shows all pets. Next, we hook up the route in <code>routes/api.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">// Auth routes</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td>Route::group([<span class="hljs-string">'middleware'</span> =&gt; [<span class="hljs-string">'jwt.auth'</span>]], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</td><tr><td class="linenos" data-pseudo-content="3"></td><td>    Route::resource(<span class="hljs-string">'pets'</span>, <span class="hljs-string">'PetController'</span>);</td><tr><td class="linenos" data-pseudo-content="4"></td><td>});</td></table></code></pre>
<p>Note that we wrap this resource in the <code>jwt.auth</code> middleware to prevent access by unauthorised users. Implementing this as middleware makes it very easy to reuse. Also note that we can specify it as a resource, meaning we don’t have to explicitly hook up each route to a controller method.</p>
<p>Let’s run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>..EE..                                                              6 / 6 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 511 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There were 2 errors:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPetsWhenUnauthorised</td><tr><td class="linenos" data-pseudo-content="11"></td><td>ReflectionException: Class jwt.auth does not exist</td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734</td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629</td><tr><td class="linenos" data-pseudo-content="15"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709</td><tr><td class="linenos" data-pseudo-content="16"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173</td><tr><td class="linenos" data-pseudo-content="17"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517</td><tr><td class="linenos" data-pseudo-content="18"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:24</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>2) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPets</td><tr><td class="linenos" data-pseudo-content="21"></td><td>ReflectionException: Class jwt.auth does not exist</td><tr><td class="linenos" data-pseudo-content="22"></td><td></td><tr><td class="linenos" data-pseudo-content="23"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:734</td><tr><td class="linenos" data-pseudo-content="24"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Container/Container.php:629</td><tr><td class="linenos" data-pseudo-content="25"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:709</td><tr><td class="linenos" data-pseudo-content="26"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:173</td><tr><td class="linenos" data-pseudo-content="27"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:517</td><tr><td class="linenos" data-pseudo-content="28"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:72</td><tr><td class="linenos" data-pseudo-content="29"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:56</td><tr><td class="linenos" data-pseudo-content="30"></td><td></td><tr><td class="linenos" data-pseudo-content="31"></td><td>ERRORS!</td><tr><td class="linenos" data-pseudo-content="32"></td><td>Tests: 6, Assertions: 15, Errors: 2.</td></table></code></pre>
<p>Looks like JWT isn’t configured correctly. We can fix that in <code>app/Http/Kernel.php</code> by adding it to <code>$routeMiddleware</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>        <span class="hljs-string">'jwt.auth'</span> =&gt; <span class="hljs-string">'Tymon\JWTAuth\Middleware\GetUserFromToken'</span>,</td><tr><td class="linenos" data-pseudo-content="2"></td><td>        <span class="hljs-string">'jwt.refresh'</span> =&gt; <span class="hljs-string">'Tymon\JWTAuth\Middleware\RefreshToken'</span>,</td></table></code></pre>
<p>And run the tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit</td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>......                                                              6 / 6 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 514 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (6 tests, 25 assertions)</td></table></code></pre>
<p>Our final task for today on the API is building a route for fetching a single pet. Our tests need to handle three situations:</p>
<ul>
<li>An unauthorised request</li>
<li>A request for a pet that does not exist</li>
<li>A request for a pet that does exist</li>
</ul>
<p>Add these methods to <code>tests/PetControllerTest.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="2"></td><td>     * Test fetching pet when unauthorised</td><tr><td class="linenos" data-pseudo-content="3"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="4"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="5"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="6"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetWhenUnauthorised</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="8"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="10"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="11"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="12"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="14"></td><td></td><tr><td class="linenos" data-pseudo-content="15"></td><td>        <span class="hljs-comment">// Send request</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>        $response = <span class="hljs-keyword">$this</span>-&gt;call(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/'</span>.$pet-&gt;id);</td><tr><td class="linenos" data-pseudo-content="17"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">400</span>);</td><tr><td class="linenos" data-pseudo-content="18"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="21"></td><td>     * Test fetching pet which does not exist</td><tr><td class="linenos" data-pseudo-content="22"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="23"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="24"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPetDoesNotExist</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="26"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="29"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="30"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="31"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="36"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="37"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="38"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="39"></td><td></td><tr><td class="linenos" data-pseudo-content="40"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="41"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/1'</span>, [], $headers);</td><tr><td class="linenos" data-pseudo-content="42"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">404</span>);</td><tr><td class="linenos" data-pseudo-content="43"></td><td>    }</td><tr><td class="linenos" data-pseudo-content="44"></td><td></td><tr><td class="linenos" data-pseudo-content="45"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="46"></td><td>     * Test fetching pet when authorised</td><tr><td class="linenos" data-pseudo-content="47"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="48"></td><td>     * <span class="hljs-doctag">@return</span> void</td><tr><td class="linenos" data-pseudo-content="49"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="50"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testFetchingPet</span><span class="hljs-params">()</span></td><tr><td class="linenos" data-pseudo-content="51"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="52"></td><td>        <span class="hljs-comment">// Create a Pet</span></td><tr><td class="linenos" data-pseudo-content="53"></td><td>        $pet = factory(AnimalFriend\Pet::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="54"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Freddie'</span>,</td><tr><td class="linenos" data-pseudo-content="55"></td><td>            <span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>,</td><tr><td class="linenos" data-pseudo-content="56"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="57"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'pets'</span>, [<span class="hljs-string">'type'</span> =&gt; <span class="hljs-string">'Cat'</span>]);</td><tr><td class="linenos" data-pseudo-content="58"></td><td></td><tr><td class="linenos" data-pseudo-content="59"></td><td>        <span class="hljs-comment">// Create a User</span></td><tr><td class="linenos" data-pseudo-content="60"></td><td>        $user = factory(AnimalFriend\User::class)-&gt;create([</td><tr><td class="linenos" data-pseudo-content="61"></td><td>            <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'bobsmith'</span>,</td><tr><td class="linenos" data-pseudo-content="62"></td><td>            <span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>,</td><tr><td class="linenos" data-pseudo-content="63"></td><td>        ]);</td><tr><td class="linenos" data-pseudo-content="64"></td><td>        <span class="hljs-keyword">$this</span>-&gt;seeInDatabase(<span class="hljs-string">'users'</span>, [<span class="hljs-string">'email'</span> =&gt; <span class="hljs-string">'bob@example.com'</span>]);</td><tr><td class="linenos" data-pseudo-content="65"></td><td></td><tr><td class="linenos" data-pseudo-content="66"></td><td>        <span class="hljs-comment">// Create request</span></td><tr><td class="linenos" data-pseudo-content="67"></td><td>        $token = JWTAuth::fromUser($user);</td><tr><td class="linenos" data-pseudo-content="68"></td><td>        $headers = <span class="hljs-keyword">array</span>(</td><tr><td class="linenos" data-pseudo-content="69"></td><td>            <span class="hljs-string">'Authorization'</span> =&gt; <span class="hljs-string">'Bearer '</span>.$token</td><tr><td class="linenos" data-pseudo-content="70"></td><td>        );</td><tr><td class="linenos" data-pseudo-content="71"></td><td></td><tr><td class="linenos" data-pseudo-content="72"></td><td>        <span class="hljs-comment">// Send it</span></td><tr><td class="linenos" data-pseudo-content="73"></td><td>        <span class="hljs-keyword">$this</span>-&gt;json(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'/api/pets/'</span>.$pet-&gt;id, [], $headers)</td><tr><td class="linenos" data-pseudo-content="74"></td><td>            -&gt;seeJsonStructure([</td><tr><td class="linenos" data-pseudo-content="75"></td><td>                <span class="hljs-string">'id'</span>,</td><tr><td class="linenos" data-pseudo-content="76"></td><td>                <span class="hljs-string">'name'</span>,</td><tr><td class="linenos" data-pseudo-content="77"></td><td>                <span class="hljs-string">'type'</span>,</td><tr><td class="linenos" data-pseudo-content="78"></td><td>                <span class="hljs-string">'available'</span>,</td><tr><td class="linenos" data-pseudo-content="79"></td><td>                <span class="hljs-string">'picture'</span>,</td><tr><td class="linenos" data-pseudo-content="80"></td><td>                <span class="hljs-string">'created_at'</span>,</td><tr><td class="linenos" data-pseudo-content="81"></td><td>                <span class="hljs-string">'updated_at'</span></td><tr><td class="linenos" data-pseudo-content="82"></td><td>            ]);</td><tr><td class="linenos" data-pseudo-content="83"></td><td>        <span class="hljs-keyword">$this</span>-&gt;assertResponseStatus(<span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="84"></td><td>    }</td></table></code></pre>
<p>Let’s check our tests fail:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>.....FE..                                                           9 / 9 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 974 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>There was 1 error:</td><tr><td class="linenos" data-pseudo-content="9"></td><td></td><tr><td class="linenos" data-pseudo-content="10"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPet</td><tr><td class="linenos" data-pseudo-content="11"></td><td>PHPUnit_Framework_Exception: Argument <span class="hljs-comment">#2 (No Value) of PHPUnit_Framework_Assert::assertArrayHasKey() must be a array or ArrayAccess</span></td><tr><td class="linenos" data-pseudo-content="12"></td><td></td><tr><td class="linenos" data-pseudo-content="13"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:304</td><tr><td class="linenos" data-pseudo-content="14"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:145</td><tr><td class="linenos" data-pseudo-content="15"></td><td></td><tr><td class="linenos" data-pseudo-content="16"></td><td>--</td><tr><td class="linenos" data-pseudo-content="17"></td><td></td><tr><td class="linenos" data-pseudo-content="18"></td><td>There was 1 failure:</td><tr><td class="linenos" data-pseudo-content="19"></td><td></td><tr><td class="linenos" data-pseudo-content="20"></td><td>1) PetControllerTest::<span class="hljs-built_in">test</span>FetchingPetDoesNotExist</td><tr><td class="linenos" data-pseudo-content="21"></td><td>Expected status code 404, got 400.</td><tr><td class="linenos" data-pseudo-content="22"></td><td>Failed asserting that 400 matches expected 404.</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php:648</td><tr><td class="linenos" data-pseudo-content="25"></td><td>/home/matthew/Projects/mynewanimalfriend-backend/tests/PetControllerTest.php:112</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>ERRORS!</td><tr><td class="linenos" data-pseudo-content="28"></td><td>Tests: 9, Assertions: 31, Errors: 1, Failures: 1.</td></table></code></pre>
<p>Now, we already have the <code>show()</code> method hooked up by default, so we just have to implement it in <code>app/Http/Controllers/PetController.php</code>:</p>
<pre><code class="hljs lang-php"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>    <span class="hljs-comment">/**</td><tr><td class="linenos" data-pseudo-content="2"></td><td>     * Display the specified resource.</td><tr><td class="linenos" data-pseudo-content="3"></td><td>     *</td><tr><td class="linenos" data-pseudo-content="4"></td><td>     * <span class="hljs-doctag">@param</span>  int  $id</td><tr><td class="linenos" data-pseudo-content="5"></td><td>     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</td><tr><td class="linenos" data-pseudo-content="6"></td><td>     */</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span><span class="hljs-params">($id)</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>    </span>{</td><tr><td class="linenos" data-pseudo-content="9"></td><td>        <span class="hljs-comment">// Get pet</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>        $pet = <span class="hljs-keyword">$this</span>-&gt;pet-&gt;findOrFail($id);</td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td>        <span class="hljs-comment">// Send response</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>        <span class="hljs-keyword">return</span> response()-&gt;json($pet, <span class="hljs-number">200</span>);</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    }</td></table></code></pre>
<p>And let’s run our tests again:</p>
<pre><code class="hljs lang-bash"><table><tr><td class="linenos" data-pseudo-content="1"></td><td>$ vendor/bin/phpunit </td><tr><td class="linenos" data-pseudo-content="2"></td><td>PHPUnit 5.5.4 by Sebastian Bergmann and contributors.</td><tr><td class="linenos" data-pseudo-content="3"></td><td></td><tr><td class="linenos" data-pseudo-content="4"></td><td>.........                                                           9 / 9 (100%)</td><tr><td class="linenos" data-pseudo-content="5"></td><td></td><tr><td class="linenos" data-pseudo-content="6"></td><td>Time: 693 ms, Memory: 16.00MB</td><tr><td class="linenos" data-pseudo-content="7"></td><td></td><tr><td class="linenos" data-pseudo-content="8"></td><td>OK (9 tests, 39 assertions)</td></table></code></pre>
<p>Now we have all the endpoints we need to get started with the app. You can find the source code for this backend on <a href="https://github.com/matthewbdaly/mynewanimalfriend-backend">Github</a> - check out the <code>lesson-1</code> tag.</p>
<p>That seems like a good place to stop for now. We have our first pass at the back end. It’s not complete by any means, but it’s a good start, and is sufficient for us to get some basic functionality up and running in the app. In the next instalment we’ll start working with Phonegap to build the first pass at the app itself. Later instalments will see us working with both the app and backend to build it into a more useful whole.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Deploying new versions of a Laravel app with Fabric]]></title>
            <link>https://matthewdaly.co.uk/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/</link>
            <guid>https://matthewdaly.co.uk/blog/2016/09/05/deploying-new-versions-of-a-laravel-app-with-fabric/</guid>
            <pubDate>Mon, 05 Sep 2016 21:22:16 GMT</pubDate>
            <description><![CDATA[<p><a href="https://laravel.com/docs/5.3/envoy">Envoy</a> is the official way to run tasks on a remote server for Laravel apps. A typical Envoy task for deploying a new version might look like this:</p>
<pre><code class="hljs lang-blade"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-variable">@servers</span>([<span class="hljs-string">'web'</span> =&gt; <span class="hljs-string">'matthew@server1.example.com'</span>])</td><tr><td class="linenos" data-pseudo-content="2"></td><td></td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-variable">@task</span>(<span class="hljs-string">'deploy'</span>, [<span class="hljs-string">'on'</span> =&gt; <span class="hljs-string">'web'</span>])</td><tr><td class="linenos" data-pseudo-content="4"></td><td>    cd /var/www</td><tr><td class="linenos" data-pseudo-content="5"></td><td>    sudo chown -R <span class="hljs-attribute">matthew</span>:matthew .</td><tr><td class="linenos" data-pseudo-content="6"></td><td>    git pull origin master</td><tr><td class="linenos" data-pseudo-content="7"></td><td>    php artisan migrate</td><tr><td class="linenos" data-pseudo-content="8"></td><td>    php artisan <span class="hljs-attribute">view</span>:clear</td><tr><td class="linenos" data-pseudo-content="9"></td><td>    composer dump-autoload</td><tr><td class="linenos" data-pseudo-content="10"></td><td>    sudo chown -R <span class="hljs-attribute">www-data</span>:www-data .</td><tr><td class="linenos" data-pseudo-content="11"></td><td>    sudo supervisorctl restart mail-queue</td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-variable">@endtask</span></td></table></code></pre>
<p>This would be defined in <code>Envoy.blade.php</code>. With this in place, and Envoy set up globally, you can then run <code>envoy run deploy</code> to run the <code>deploy</code> command.</p>
<p>However, Envoy requires the PHP SSH library, which I haven’t been able to get working with PHP 7. Fortunately I was already familiar with <a href="http://www.fabfile.org/">Fabric</a>, which makes an excellent alternative as long as you don’t mind writing the task in Python.</p>
<p>The same kind of task might look like this in a Fabric script, saved as <code>fabfile.py</code>:</p>
<pre><code class="hljs lang-python"><table><tr><td class="linenos" data-pseudo-content="1"></td><td><span class="hljs-comment">#!/usr/bin/env python</span></td><tr><td class="linenos" data-pseudo-content="2"></td><td><span class="hljs-keyword">from</span> fabric.api <span class="hljs-keyword">import</span> local, env, run, sudo</td><tr><td class="linenos" data-pseudo-content="3"></td><td><span class="hljs-keyword">from</span> fabric.context_managers <span class="hljs-keyword">import</span> cd, prefix</td><tr><td class="linenos" data-pseudo-content="4"></td><td></td><tr><td class="linenos" data-pseudo-content="5"></td><td>env.hosts = [<span class="hljs-string">'server1.example.com'</span>]</td><tr><td class="linenos" data-pseudo-content="6"></td><td>env.path = <span class="hljs-string">"/var/www"</span></td><tr><td class="linenos" data-pseudo-content="7"></td><td>env.user = <span class="hljs-string">"matthew"</span></td><tr><td class="linenos" data-pseudo-content="8"></td><td>env.password = <span class="hljs-string">"password"</span></td><tr><td class="linenos" data-pseudo-content="9"></td><td><span class="hljs-comment"># Or...</span></td><tr><td class="linenos" data-pseudo-content="10"></td><td>env.key_filename = <span class="hljs-string">'/path/to/ssh/key'</span></td><tr><td class="linenos" data-pseudo-content="11"></td><td></td><tr><td class="linenos" data-pseudo-content="12"></td><td><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deploy</span><span class="hljs-params">()</span>:</span></td><tr><td class="linenos" data-pseudo-content="13"></td><td>    <span class="hljs-string">"""</td><tr><td class="linenos" data-pseudo-content="14"></td><td>    Deploy the latest version</td><tr><td class="linenos" data-pseudo-content="15"></td><td>    """</span></td><tr><td class="linenos" data-pseudo-content="16"></td><td>    <span class="hljs-comment"># Push changes to Bitbucket</span></td><tr><td class="linenos" data-pseudo-content="17"></td><td>    local(<span class="hljs-string">"git push origin master"</span>)</td><tr><td class="linenos" data-pseudo-content="18"></td><td></td><tr><td class="linenos" data-pseudo-content="19"></td><td>    <span class="hljs-comment"># Switch to project directory</span></td><tr><td class="linenos" data-pseudo-content="20"></td><td>    <span class="hljs-keyword">with</span> cd(env.path):</td><tr><td class="linenos" data-pseudo-content="21"></td><td>        <span class="hljs-comment"># Change owner</span></td><tr><td class="linenos" data-pseudo-content="22"></td><td>        sudo(<span class="hljs-string">'chown -R matthew:matthew .'</span>)</td><tr><td class="linenos" data-pseudo-content="23"></td><td></td><tr><td class="linenos" data-pseudo-content="24"></td><td>        <span class="hljs-comment"># Pull changes to server</span></td><tr><td class="linenos" data-pseudo-content="25"></td><td>        run(<span class="hljs-string">'git pull origin master'</span>)</td><tr><td class="linenos" data-pseudo-content="26"></td><td></td><tr><td class="linenos" data-pseudo-content="27"></td><td>        <span class="hljs-comment"># Run migrations</span></td><tr><td class="linenos" data-pseudo-content="28"></td><td>        run(<span class="hljs-string">'php artisan migrate'</span>)</td><tr><td class="linenos" data-pseudo-content="29"></td><td></td><tr><td class="linenos" data-pseudo-content="30"></td><td>        <span class="hljs-comment"># Clear cached files</span></td><tr><td class="linenos" data-pseudo-content="31"></td><td>        run(<span class="hljs-string">'php artisan view:clear'</span>)</td><tr><td class="linenos" data-pseudo-content="32"></td><td>        run(<span class="hljs-string">'composer dump-autoload'</span>)</td><tr><td class="linenos" data-pseudo-content="33"></td><td></td><tr><td class="linenos" data-pseudo-content="34"></td><td>        <span class="hljs-comment"># Change owner back</span></td><tr><td class="linenos" data-pseudo-content="35"></td><td>        sudo(<span class="hljs-string">'chown -R www-data:www-data .'</span>)</td><tr><td class="linenos" data-pseudo-content="36"></td><td></td><tr><td class="linenos" data-pseudo-content="37"></td><td>        <span class="hljs-comment"># restart mail queue</span></td><tr><td class="linenos" data-pseudo-content="38"></td><td>        sudo(<span class="hljs-string">'supervisorctl restart mail-queue'</span>)</td></table></code></pre>
<p>Then, assuming Fabric is already installed locally, you can run <code>fab deploy</code> to push up the latest revision.</p>
<p>Either of these solutions will do a fine job of deploying your app. If you do need to store user-specific data in your Fabric script, it’s probably prudent to keep it out of version control.</p>
<p>Whichever way you choose, it’s a really good idea to do what you can to automate deployment. It can be a boring, repetitive job, and both of these solutions make it much easier.</p>
]]></description>
        </item>
    </channel>
</rss>